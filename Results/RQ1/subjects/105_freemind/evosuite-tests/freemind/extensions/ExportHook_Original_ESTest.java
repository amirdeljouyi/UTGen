/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Sun Mar 17 21:17:21 GMT 2024
 */

package freemind.extensions;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import freemind.extensions.ExportHook;
import java.io.File;
import java.util.logging.Logger;
import org.apache.commons.logging.impl.Jdk14Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExportHook_Original_ESTest extends ExportHook_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTranslatableResourceStringThrowsNullPointerException() throws Throwable  {
      ExportHook exportHook = new ExportHook();
      // Undeclared exception!
      try { 
        exportHook.getTranslatableResourceString(".'uCJwXPi[o0\"|Y69TG");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.extensions.HookAdapter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateBufferedImageThrowsNullPointerException() throws Throwable  {
      ExportHook exportHook = new ExportHook();
      // Undeclared exception!
      try { 
        exportHook.createBufferedImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.extensions.ExportHook", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCopyFromResourceThrowsNullPointerException() throws Throwable  {
      ExportHook exportHook = new ExportHook();
      exportHook.logger = null;
      // Undeclared exception!
      try { 
        exportHook.copyFromResource("", "", "Yz<|");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.extensions.ExportHook", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesExportHookTakingNoArgumentsAndCallsCopyFromFile0() throws Throwable  {
      ExportHook exportHook = new ExportHook();
      Jdk14Logger jdk14Logger = new Jdk14Logger("6_");
      Logger logger = jdk14Logger.getLogger();
      exportHook.logger = logger;
      exportHook.copyFromFile("Cannot find resource: ", "org.apache.batik.svggen.SVGBufferedImageOp", "L1EZ(+`!,6U");
      assertNull(exportHook.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCopyFromResource() throws Throwable  {
      ExportHook exportHook = new ExportHook();
      String arg2 = "&hG9";
      exportHook.copyFromResource(arg2, arg2, arg2);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesExportHookTakingNoArgumentsAndCallsCopyFromFile1() throws Throwable  {
      ExportHook exportHook = new ExportHook();
      EvoSuiteFile arg0 = new EvoSuiteFile("a+I~=i/a+I~=i");
      FileSystemHandling.appendStringToFile(arg0, "File not found or could not be copied. Was earching for ");
      exportHook.copyFromFile("a+I~=i", "a+I~=i", "a+I~=i");
      assertNull(exportHook.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesImageFilterTaking2ArgumentsAndCallsGetDescription0() throws Throwable  {
      ExportHook.ImageFilter exportHook_ImageFilter = new ExportHook.ImageFilter("F8-F4'P", (String) null);
      String description = exportHook_ImageFilter.getDescription();
      assertEquals("F8-F4'P", description);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesImageFilterTaking2ArgumentsAndCallsGetDescription1() throws Throwable  {
      ExportHook.ImageFilter exportHook_ImageFilter = new ExportHook.ImageFilter("22", "Q8n>iBoO%0QxLe%n");
      String description = exportHook_ImageFilter.getDescription();
      assertEquals("Q8n>iBoO%0QxLe%n", description);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesImageFilterTaking2ArgumentsAndCallsAccept0() throws Throwable  {
      ExportHook.ImageFilter exportHook_ImageFilter = new ExportHook.ImageFilter("4kqF/)pXA98=K+vw2", "4kqF/)pXA98=K+vw2");
      MockFile arg0 = new MockFile("", "");
      boolean accept = exportHook_ImageFilter.accept(arg0);
      assertTrue(accept);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testChooseFileThrowsNullPointerException() throws Throwable  {
      ExportHook exportHook = new ExportHook();
      // Undeclared exception!
      try { 
        exportHook.chooseFile(".[^.]*?$", ".[^.]*?$", ".[^.]*?$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.extensions.ExportHook", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesImageFilterTaking2ArgumentsAndCallsAccept1() throws Throwable  {
      ExportHook.ImageFilter exportHook_ImageFilter = new ExportHook.ImageFilter("22", "Q8n>iBoO%0QxLe%n");
      File arg0 = MockFile.createTempFile("JrrFC9I@", "JrrFC9I@");
      boolean accept = exportHook_ImageFilter.accept(arg0);
      assertFalse(accept);
      assertEquals("Q8n>iBoO%0QxLe%n", exportHook_ImageFilter.getDescription());
  }
}
