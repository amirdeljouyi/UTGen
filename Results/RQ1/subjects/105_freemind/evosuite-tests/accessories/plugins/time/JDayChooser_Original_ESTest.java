/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Sun Mar 17 21:41:33 GMT 2024
 */

package accessories.plugins.time;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import java.awt.Color;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.SystemColor;
import java.awt.event.FocusEvent;
import java.util.Date;
import java.util.Locale;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JDayChooser_Original_ESTest extends JDayChooser_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testInitDecorations() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      jDayChooser.initDecorations();
      assertEquals(14, jDayChooser.getDay());
      assertFalse(jDayChooser.isWeekOfYearVisible());
      assertTrue(jDayChooser.isDecorationBackgroundVisible());
      assertTrue(jDayChooser.isDayBordersVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testInit() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser(true);
      jDayChooser.init();
      assertFalse(jDayChooser.isDecorationBordersVisible());
      assertEquals(14, jDayChooser.getDay());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDrawWeeks() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      jDayChooser.drawWeeks();
      assertEquals(14, jDayChooser.getDay());
      assertTrue(jDayChooser.isDecorationBackgroundVisible());
      assertFalse(jDayChooser.isDecorationBordersVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDrawDays() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      jDayChooser.drawDays();
      assertEquals(14, jDayChooser.getDay());
      assertFalse(jDayChooser.isDecorationBordersVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsWeekOfYearVisibleReturningTrue() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser(true);
      jDayChooser.isWeekOfYearVisible();
      assertEquals(14, jDayChooser.getDay());
      assertFalse(jDayChooser.isDecorationBordersVisible());
      assertTrue(jDayChooser.isDecorationBackgroundVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetWeekdayForegroundReturningColorWhereGetRedIsPositive() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser(false);
      DefaultTreeCellRenderer defaultTreeCellRenderer = new DefaultTreeCellRenderer();
      Color backgroundNonSelectionColor = defaultTreeCellRenderer.getBackgroundNonSelectionColor();
      jDayChooser.weekdayForeground = backgroundNonSelectionColor;
      jDayChooser.getWeekdayForeground();
      assertEquals(14, jDayChooser.getDay());
      assertTrue(jDayChooser.isDayBordersVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSelectedDayReturningJButtonWhereIsFocusTraversalPolicySetIsFalse() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      DefaultTreeCellRenderer defaultTreeCellRenderer = new DefaultTreeCellRenderer();
      Icon arg1 = defaultTreeCellRenderer.getOpenIcon();
      JButton jButton = new JButton("day", arg1);
      jDayChooser.selectedDay = jButton;
      jDayChooser.getSelectedDay();
      assertTrue(jDayChooser.isDayBordersVisible());
      assertEquals(14, jDayChooser.getDay());
      assertFalse(jDayChooser.isDecorationBordersVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDecorationBackgroundColorReturningColorWhereGetGreenIsZero() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser(false);
      SystemColor arg0 = SystemColor.textHighlight;
      jDayChooser.setDecorationBackgroundColor(arg0);
      jDayChooser.getDecorationBackgroundColor();
      assertTrue(jDayChooser.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser.getDay());
      assertFalse(jDayChooser.isWeekOfYearVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testUpdateUI() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser(true);
      jDayChooser.updateUI();
      assertTrue(jDayChooser.isWeekOfYearVisible());
      assertTrue(jDayChooser.isDayBordersVisible());
      assertFalse(jDayChooser.isDecorationBordersVisible());
      assertEquals(14, jDayChooser.getDay());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDayBordersVisible() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      assertTrue(jDayChooser.isDayBordersVisible());
      
      jDayChooser.setDayBordersVisible(false);
      boolean dayBordersVisible = jDayChooser.isDayBordersVisible();
      assertFalse(dayBordersVisible);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetFocus0() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      jDayChooser.setFocus();
      assertTrue(jDayChooser.isDayBordersVisible());
      assertEquals(14, jDayChooser.getDay());
      assertFalse(jDayChooser.isDecorationBordersVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetForeground() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      SystemColor arg0 = SystemColor.info;
      jDayChooser.setForeground(arg0);
      assertEquals(14, jDayChooser.getDay());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetFont() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      jDayChooser.setFont((Font) null);
      assertTrue(jDayChooser.isDecorationBackgroundVisible());
      assertFalse(jDayChooser.isWeekOfYearVisible());
      assertTrue(jDayChooser.isDayBordersVisible());
      assertEquals(14, jDayChooser.getDay());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDecorationBackgroundVisible() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      jDayChooser.setDecorationBackgroundVisible(true);
      assertEquals(14, jDayChooser.getDay());
      assertFalse(jDayChooser.isWeekOfYearVisible());
      assertFalse(jDayChooser.isDecorationBordersVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDecorationBordersVisible() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser(false);
      jDayChooser.setDecorationBordersVisible(false);
      assertEquals(14, jDayChooser.getDay());
      assertTrue(jDayChooser.isDecorationBackgroundVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddListenersThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser.addListeners((-5453));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDaysInMonth() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser(false);
      int daysInMonth = jDayChooser.getDaysInMonth();
      assertFalse(jDayChooser.isDecorationBordersVisible());
      assertEquals(14, jDayChooser.getDay());
      assertEquals(28, daysInMonth);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetMaxDayCharacters0() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      jDayChooser.setMaxDayCharacters(1041);
      assertEquals(14, jDayChooser.getDay());
      assertTrue(jDayChooser.isDayBordersVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetMaxDayCharactersWithNegative() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      jDayChooser.setMaxDayCharacters((-59));
      assertEquals(14, jDayChooser.getDay());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetMaxDayCharactersWithZero() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser(false);
      jDayChooser.setMaxDayCharacters(0);
      assertTrue(jDayChooser.isDayBordersVisible());
      assertEquals(14, jDayChooser.getDay());
      assertFalse(jDayChooser.isWeekOfYearVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetMinSelectableDateWithNull() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      jDayChooser.setMinSelectableDate((Date) null);
      assertEquals(14, jDayChooser.getDay());
      assertFalse(jDayChooser.isDecorationBordersVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetMaxSelectableDateWithNull() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      jDayChooser.setMaxSelectableDate((Date) null);
      assertEquals(14, jDayChooser.getDay());
      assertTrue(jDayChooser.isDecorationBackgroundVisible());
      assertTrue(jDayChooser.isDayBordersVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetMaxSelectableDate() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      MockDate arg0 = new MockDate();
      jDayChooser.setMaxSelectableDate(arg0);
      assertTrue(jDayChooser.isDecorationBackgroundVisible());
      assertTrue(jDayChooser.isDayBordersVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSelectableDateRangeWithNullAndNull() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      jDayChooser.setSelectableDateRange((Date) null, (Date) null);
      assertTrue(jDayChooser.isDayBordersVisible());
      assertTrue(jDayChooser.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser.getDay());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSelectableDateRangeWithNonNull() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      Date arg0 = jDayChooser.defaultMinSelectableDate;
      java.sql.Date arg1 = new java.sql.Date(381);
      jDayChooser.setSelectableDateRange(arg0, arg1);
      assertTrue(jDayChooser.isDecorationBackgroundVisible());
      assertTrue(jDayChooser.isDayBordersVisible());
      assertEquals(14, jDayChooser.getDay());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetFocus1() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      JButton jButton = new JButton();
      jDayChooser.selectedDay = jButton;
      jDayChooser.setFocus();
      assertTrue(jDayChooser.isDayBordersVisible());
      assertEquals(14, jDayChooser.getDay());
      assertFalse(jDayChooser.isDecorationBordersVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDecorationBackgroundColorReturningNull() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser(false);
      jDayChooser.setDecorationBackgroundColor((Color) null);
      Color decorationBackgroundColor = jDayChooser.getDecorationBackgroundColor();
      assertNull(decorationBackgroundColor);
      assertFalse(jDayChooser.isDecorationBordersVisible());
      assertTrue(jDayChooser.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser.getDay());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetWeekOfYearVisible() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      assertFalse(jDayChooser.isWeekOfYearVisible());
      
      jDayChooser.setWeekOfYearVisible(false);
      assertTrue(jDayChooser.isDecorationBackgroundVisible());
      assertTrue(jDayChooser.isDayBordersVisible());
      assertEquals(14, jDayChooser.getDay());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetWeekOfYearVisibleWithTrue() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      jDayChooser.setWeekOfYearVisible(true);
      assertTrue(jDayChooser.isWeekOfYearVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetEnabled() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      jDayChooser.setEnabled(true);
      assertTrue(jDayChooser.isDayBordersVisible());
      assertFalse(jDayChooser.isWeekOfYearVisible());
      assertEquals(14, jDayChooser.getDay());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetMonthWithNegative() throws Throwable  {
      JDayChooser arg0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton = arg0.new DecoratorButton();
      arg0.selectedDay = (JButton) jDayChooser_DecoratorButton;
      arg0.setMonth((-555));
      assertEquals(14, arg0.getDay());
      assertTrue(arg0.isDecorationBackgroundVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDayWithPositiveAndSetMonthWithPositive() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      jDayChooser.setDay(164);
      jDayChooser.setMonth((byte)5);
      assertEquals(30, jDayChooser.getDay());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDayWithNegative() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      jDayChooser.setDay((-669));
      assertEquals(1, jDayChooser.getDay());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxDayCharactersReturningPositive() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser(false);
      jDayChooser.setMaxDayCharacters(4);
      int maxDayCharacters = jDayChooser.getMaxDayCharacters();
      assertEquals(4, maxDayCharacters);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetLocale() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      jDayChooser.maxDayCharacters = 18;
      Locale arg0 = Locale.KOREA;
      jDayChooser.setLocale(arg0);
      assertFalse(jDayChooser.isDecorationBordersVisible());
      assertFalse(jDayChooser.isWeekOfYearVisible());
      assertTrue(jDayChooser.isDayBordersVisible());
      assertEquals(14, jDayChooser.getDay());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetMaxDayCharacters1() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      jDayChooser.setMaxDayCharacters(1);
      assertEquals(1, jDayChooser.getMaxDayCharacters());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesJDayChooserTakingBoolean() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser(true);
      jDayChooser.setWeekOfYearVisible(false);
      assertFalse(jDayChooser.isWeekOfYearVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetCalendar() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      MockGregorianCalendar arg0 = (MockGregorianCalendar)jDayChooser.today;
      jDayChooser.setCalendar(arg0);
      assertFalse(jDayChooser.isDecorationBordersVisible());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", arg0.toString());
      assertEquals(14, jDayChooser.getDay());
      assertTrue(jDayChooser.isDayBordersVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDay() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      int day = jDayChooser.getDay();
      assertTrue(jDayChooser.isDayBordersVisible());
      assertEquals(14, day);
      assertFalse(jDayChooser.isDecorationBordersVisible());
      assertFalse(jDayChooser.isWeekOfYearVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFocusGained() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      jDayChooser.focusGained((FocusEvent) null);
      assertEquals(14, jDayChooser.getDay());
      assertFalse(jDayChooser.isDecorationBordersVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMinSelectableDate() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      Date arg0 = jDayChooser.getMinSelectableDate();
      jDayChooser.setMinSelectableDate(arg0);
      assertEquals(14, jDayChooser.getDay());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetMonthChooser() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      jDayChooser.setMonthChooser((JMonthChooser) null);
      assertEquals(14, jDayChooser.getDay());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetWeekdayForeground() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      jDayChooser.getWeekdayForeground();
      assertEquals(14, jDayChooser.getDay());
      assertTrue(jDayChooser.isDayBordersVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDayPanel() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      jDayChooser.getDayPanel();
      assertTrue(jDayChooser.isDayBordersVisible());
      assertFalse(jDayChooser.isDecorationBordersVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSelectedDayReturningNull() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      jDayChooser.getSelectedDay();
      assertEquals(14, jDayChooser.getDay());
      assertFalse(jDayChooser.isWeekOfYearVisible());
      assertTrue(jDayChooser.isDecorationBackgroundVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetYearChooser() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      JYearChooser arg0 = new JYearChooser();
      jDayChooser.setYearChooser(arg0);
      assertEquals(14, jDayChooser.getDay());
      assertTrue(jDayChooser.isDecorationBackgroundVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFocusLost() throws Throwable  {
      JDayChooser arg3 = new JDayChooser();
      FocusEvent arg0 = new FocusEvent(arg3, (-1102), false, arg3);
      arg3.focusLost(arg0);
      assertEquals(14, arg3.getDay());
      assertFalse(arg3.isDecorationBordersVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSundayForeground() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      jDayChooser.setSundayForeground((Color) null);
      assertTrue(jDayChooser.isDayBordersVisible());
      assertEquals(14, jDayChooser.getDay());
      assertFalse(jDayChooser.isDecorationBordersVisible());
      assertTrue(jDayChooser.isDecorationBackgroundVisible());
      assertFalse(jDayChooser.isWeekOfYearVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDecorationBackgroundColorReturningColorWhereGetGreenIsPositive() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      Color decorationBackgroundColor = jDayChooser.getDecorationBackgroundColor();
      assertEquals(228, decorationBackgroundColor.getGreen());
      assertEquals(14, jDayChooser.getDay());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMainThrowsHeadlessException() throws Throwable  {
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxDayCharactersReturningZero() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      int maxDayCharacters = jDayChooser.getMaxDayCharacters();
      assertEquals(0, maxDayCharacters);
      assertEquals(14, jDayChooser.getDay());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetWeekdayForeground() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      Color arg0 = jDayChooser.getBackground();
      jDayChooser.setWeekdayForeground(arg0);
      Color weekdayForeground = jDayChooser.getWeekdayForeground();
      assertEquals(14, jDayChooser.getDay());
      assertTrue(jDayChooser.isDayBordersVisible());
      assertEquals(0, weekdayForeground.getGreen());
      assertTrue(jDayChooser.isDecorationBackgroundVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetYear() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      jDayChooser.setYear(164);
      assertTrue(jDayChooser.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser.getDay());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLocale() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      jDayChooser.getLocale();
      assertTrue(jDayChooser.isDecorationBackgroundVisible());
      assertFalse(jDayChooser.isWeekOfYearVisible());
      assertEquals(14, jDayChooser.getDay());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsDecorationBordersVisible() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      jDayChooser.isDecorationBordersVisible();
      assertEquals(14, jDayChooser.getDay());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsDecorationBackgroundVisible() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      jDayChooser.isDecorationBackgroundVisible();
      assertTrue(jDayChooser.isDayBordersVisible());
      assertEquals(14, jDayChooser.getDay());
      assertFalse(jDayChooser.isDecorationBordersVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSundayForeground() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      jDayChooser.getSundayForeground();
      assertEquals(14, jDayChooser.getDay());
      assertTrue(jDayChooser.isDayBordersVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxSelectableDate() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      jDayChooser.getMaxSelectableDate();
      assertEquals(14, jDayChooser.getDay());
      assertTrue(jDayChooser.isDecorationBackgroundVisible());
      assertFalse(jDayChooser.isDecorationBordersVisible());
      assertTrue(jDayChooser.isDayBordersVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsDayBordersVisibleReturningTrue() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      jDayChooser.isDayBordersVisible();
      assertTrue(jDayChooser.isDecorationBackgroundVisible());
      assertFalse(jDayChooser.isDecorationBordersVisible());
      assertFalse(jDayChooser.isWeekOfYearVisible());
      assertEquals(14, jDayChooser.getDay());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTemporaryCalendarThrowsNullPointerException() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetAlwaysFireDayProperty() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      jDayChooser.setAlwaysFireDayProperty(true);
      assertTrue(jDayChooser.isDayBordersVisible());
      assertEquals(14, jDayChooser.getDay());
      assertTrue(jDayChooser.isDecorationBackgroundVisible());
      assertFalse(jDayChooser.isDecorationBordersVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsWeekOfYearVisibleReturningFalse() throws Throwable  {
      JDayChooser jDayChooser = new JDayChooser();
      jDayChooser.isWeekOfYearVisible();
      assertTrue(jDayChooser.isDecorationBackgroundVisible());
      assertFalse(jDayChooser.isDecorationBordersVisible());
      assertEquals(14, jDayChooser.getDay());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsFocusable() throws Throwable  {
      JDayChooser arg0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton = arg0.new DecoratorButton();
      jDayChooser_DecoratorButton.isFocusable();
      assertFalse(arg0.isDecorationBordersVisible());
      assertEquals(14, arg0.getDay());
      assertTrue(arg0.isDecorationBackgroundVisible());
  }
}
