/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Mon Mar 18 05:47:48 GMT 2024
 */

package fi.vtt.noen.mfw.bundle.probe.shared;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ProbeInformation_Original_ESTest extends ProbeInformation_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetXmlRpcUrlReturningNonEmptyString() throws Throwable  {
      ProbeInformation probeInformation = new ProbeInformation("wrP%Bu4,*)L", ", bmDescription='", ", bmDescription='", "wrP%Bu4,*)L", ", bmDescription='", "wrP%Bu4,*)L", 0, "wrP%Bu4,*)L");
      String xmlRpcUrl = probeInformation.getXmlRpcUrl();
      assertEquals(0, probeInformation.getPrecision());
      assertEquals("wrP%Bu4,*)L", probeInformation.getProbeName());
      assertEquals(", bmDescription='", probeInformation.getBmDescription());
      assertEquals(", bmDescription='", probeInformation.getTargetType());
      assertEquals(", bmDescription='", probeInformation.getBmClass());
      assertEquals("wrP%Bu4,*)L", xmlRpcUrl);
      assertEquals("wrP%Bu4,*)L", probeInformation.getTargetName());
      assertEquals("wrP%Bu4,*)L", probeInformation.getBmName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetXmlRpcUrlReturningEmptyString() throws Throwable  {
      ProbeInformation probeInformation = new ProbeInformation("fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", "fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", "", "", "", "", 1860, "");
      String xmlRpcUrl = probeInformation.getXmlRpcUrl();
      assertEquals("", probeInformation.getBmName());
      assertEquals("fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", probeInformation.getTargetName());
      assertEquals("", probeInformation.getBmClass());
      assertEquals("fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", probeInformation.getTargetType());
      assertEquals(1860, probeInformation.getPrecision());
      assertEquals("", probeInformation.getProbeName());
      assertEquals("", probeInformation.getBmDescription());
      assertEquals("", xmlRpcUrl);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTargetTypeReturningNonEmptyString() throws Throwable  {
      ProbeInformation probeInformation = new ProbeInformation("tko43+", "tko43+", (String) null, "=C-", "", (String) null, 369, (String) null);
      String targetType = probeInformation.getTargetType();
      assertEquals("tko43+", probeInformation.getTargetName());
      assertNotNull(targetType);
      assertEquals("=C-", probeInformation.getBmName());
      assertEquals("", probeInformation.getBmDescription());
      assertEquals(369, probeInformation.getPrecision());
      assertEquals("tko43+", targetType);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTargetTypeReturningEmptyString() throws Throwable  {
      ProbeInformation probeInformation = new ProbeInformation("", "", "", "", "", "", 3600, "");
      probeInformation.getTargetType();
      assertEquals(3600, probeInformation.getPrecision());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTargetNameReturningNull() throws Throwable  {
      ProbeInformation probeInformation = new ProbeInformation((String) null, (String) null, ":u8(C+D9-I(|H", "&R", "Rp7QX-p5W'", "&R", (-1660433532), "mfw://local");
      String targetName = probeInformation.getTargetName();
      assertEquals("Rp7QX-p5W'", probeInformation.getBmDescription());
      assertEquals("&R", probeInformation.getBmName());
      assertEquals(":u8(C+D9-I(|H", probeInformation.getBmClass());
      assertEquals("&R", probeInformation.getProbeName());
      assertEquals((-1660433532), probeInformation.getPrecision());
      assertNull(targetName);
      assertEquals("mfw://local", probeInformation.getXmlRpcUrl());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTargetNameReturningEmptyString() throws Throwable  {
      ProbeInformation probeInformation = new ProbeInformation("", "", "", "", ", bmClass='", "", 1413, ", bmClass='");
      String targetName = probeInformation.getTargetName();
      assertEquals(", bmClass='", probeInformation.getXmlRpcUrl());
      assertEquals("", probeInformation.getTargetType());
      assertEquals("", probeInformation.getBmName());
      assertEquals(", bmClass='", probeInformation.getBmDescription());
      assertEquals("", probeInformation.getBmClass());
      assertEquals(1413, probeInformation.getPrecision());
      assertEquals("", targetName);
      assertEquals("", probeInformation.getProbeName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetProbeNameReturningNull() throws Throwable  {
      ProbeInformation probeInformation = new ProbeInformation(".%*p CfR#2;iixn", "", ".%*p CfR#2;iixn", "", "", (String) null, 2830, "");
      String probeName = probeInformation.getProbeName();
      assertEquals(2830, probeInformation.getPrecision());
      assertNull(probeName);
      assertEquals(".%*p CfR#2;iixn", probeInformation.getTargetName());
      assertEquals(".%*p CfR#2;iixn", probeInformation.getBmClass());
      assertEquals("", probeInformation.getXmlRpcUrl());
      assertEquals("", probeInformation.getTargetType());
      assertEquals("", probeInformation.getBmDescription());
      assertEquals("", probeInformation.getBmName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetProbeNameReturningNonEmptyString() throws Throwable  {
      ProbeInformation probeInformation = new ProbeInformation("Z", "Z", "Z", "Z", "Z", "Z", 0, "measurement_check_interval");
      String probeName = probeInformation.getProbeName();
      assertEquals("Z", probeInformation.getBmDescription());
      assertEquals("Z", probeName);
      assertEquals("measurement_check_interval", probeInformation.getXmlRpcUrl());
      assertEquals("Z", probeInformation.getBmClass());
      assertEquals("Z", probeInformation.getBmName());
      assertEquals(0, probeInformation.getPrecision());
      assertEquals("Z", probeInformation.getTargetType());
      assertEquals("Z", probeInformation.getTargetName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPrecisionReturningZero() throws Throwable  {
      ProbeInformation probeInformation = new ProbeInformation("", "", "", "", "", "", 0, "");
      int precision = probeInformation.getPrecision();
      assertEquals(0, precision);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPrecisionReturningNegative() throws Throwable  {
      ProbeInformation probeInformation = new ProbeInformation(", bmDescription='", "fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", (String) null, (String) null, (String) null, "fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", (-1), "P\"%>)Nx");
      int precision = probeInformation.getPrecision();
      assertEquals("fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", probeInformation.getProbeName());
      assertEquals((-1), precision);
      assertEquals(", bmDescription='", probeInformation.getTargetName());
      assertEquals("fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", probeInformation.getTargetType());
      assertEquals("P\"%>)Nx", probeInformation.getXmlRpcUrl());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBmNameReturningNull() throws Throwable  {
      ProbeInformation probeInformation = new ProbeInformation("/w%|FT[h:%<$Y", (String) null, "/w%|FT[h:%<$Y", (String) null, (String) null, "/w%|FT[h:%<$Y", 39, "/w%|FT[h:%<$Y");
      String bmName = probeInformation.getBmName();
      assertNull(bmName);
      assertEquals(39, probeInformation.getPrecision());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBmNameReturningNonEmptyString() throws Throwable  {
      ProbeInformation probeInformation = new ProbeInformation("/w%|FT[h:%<$Y", "/w%|FT[h:%<$Y", "/w%|FT[h:%<$Y", "/w%|FT[h:%<$Y", "/w%|FT[h:%<$Y", "/w%|FT[h:%<$Y", (-382), "/w%|FT[h:%<$Y");
      probeInformation.getBmName();
      assertEquals((-382), probeInformation.getPrecision());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBmDescriptionReturningNonEmptyString() throws Throwable  {
      ProbeInformation probeInformation = new ProbeInformation("An;", "$FfoNe~]", "$FfoNe~]", ", probeDescription='", ", probeDescription='", (String) null, 0, (String) null);
      String bmDescription = probeInformation.getBmDescription();
      assertNotNull(bmDescription);
      assertEquals("An;", probeInformation.getTargetName());
      assertEquals(", probeDescription='", bmDescription);
      assertEquals(", probeDescription='", probeInformation.getBmName());
      assertEquals("$FfoNe~]", probeInformation.getTargetType());
      assertEquals(0, probeInformation.getPrecision());
      assertEquals("$FfoNe~]", probeInformation.getBmClass());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBmDescriptionReturningEmptyString() throws Throwable  {
      ProbeInformation probeInformation = new ProbeInformation(".%*p CfR#2;iixn", "", ".%*p CfR#2;iixn", "", "", (String) null, 2830, "");
      String bmDescription = probeInformation.getBmDescription();
      assertEquals(".%*p CfR#2;iixn", probeInformation.getTargetName());
      assertEquals("", probeInformation.getTargetType());
      assertEquals(".%*p CfR#2;iixn", probeInformation.getBmClass());
      assertEquals("", probeInformation.getXmlRpcUrl());
      assertEquals("", bmDescription);
      assertEquals("", probeInformation.getBmName());
      assertNotNull(bmDescription);
      assertEquals(2830, probeInformation.getPrecision());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBmClassReturningNull() throws Throwable  {
      ProbeInformation probeInformation = new ProbeInformation("ProbeInformation{targetName='pz!B91v\"Y', targetType='', bmClass='', bmName='$Udg2{OkA38]yil', bmDescription='$Udg2{OkA38]yil', probeDescription='pz!B91v\"Y', precision=39}", (String) null, (String) null, "", "", "", (-2210), "O%<");
      String bmClass = probeInformation.getBmClass();
      assertNull(bmClass);
      assertEquals("", probeInformation.getBmName());
      assertEquals("", probeInformation.getBmDescription());
      assertEquals("ProbeInformation{targetName='pz!B91v\"Y', targetType='', bmClass='', bmName='$Udg2{OkA38]yil', bmDescription='$Udg2{OkA38]yil', probeDescription='pz!B91v\"Y', precision=39}", probeInformation.getTargetName());
      assertEquals("", probeInformation.getProbeName());
      assertEquals("O%<", probeInformation.getXmlRpcUrl());
      assertEquals((-2210), probeInformation.getPrecision());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBmClassReturningNonEmptyString() throws Throwable  {
      ProbeInformation probeInformation = new ProbeInformation("/w%|FT[h:%<$Y", "/w%|FT[h:%<$Y", "y'h{>F,^vx?^X*Y(c", "y'h{>F,^vx?^X*Y(c", "y", "m{m<CVIuRvgz!Z8/zR", (-1102), "y'h{>F,^vx?^X*Y(c");
      String bmClass = probeInformation.getBmClass();
      assertEquals("m{m<CVIuRvgz!Z8/zR", probeInformation.getProbeName());
      assertEquals("y'h{>F,^vx?^X*Y(c", probeInformation.getXmlRpcUrl());
      assertEquals("y", probeInformation.getBmDescription());
      assertEquals("/w%|FT[h:%<$Y", probeInformation.getTargetType());
      assertEquals("/w%|FT[h:%<$Y", probeInformation.getTargetName());
      assertEquals("y'h{>F,^vx?^X*Y(c", bmClass);
      assertEquals((-1102), probeInformation.getPrecision());
      assertEquals("y'h{>F,^vx?^X*Y(c", probeInformation.getBmName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashCode0() throws Throwable  {
      ProbeInformation probeInformation = new ProbeInformation("tko43+", "tko43+", (String) null, "=C-", "", (String) null, 369, (String) null);
      probeInformation.hashCode();
      assertEquals("=C-", probeInformation.getBmName());
      assertEquals("tko43+", probeInformation.getTargetName());
      assertEquals("tko43+", probeInformation.getTargetType());
      assertEquals(369, probeInformation.getPrecision());
      assertEquals("", probeInformation.getBmDescription());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashCode1() throws Throwable  {
      ProbeInformation probeInformation = new ProbeInformation("fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", (String) null, "l$?", (String) null, (String) null, "h]/\"o.tb-nKuqG!b+=", 0, "fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation");
      probeInformation.hashCode();
      assertEquals("fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", probeInformation.getTargetName());
      assertEquals(0, probeInformation.getPrecision());
      assertEquals("fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", probeInformation.getXmlRpcUrl());
      assertEquals("l$?", probeInformation.getBmClass());
      assertEquals("h]/\"o.tb-nKuqG!b+=", probeInformation.getProbeName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashCode2() throws Throwable  {
      ProbeInformation probeInformation = new ProbeInformation((String) null, "fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", "R", "R", ".", (String) null, (-1), "{=to_");
      probeInformation.hashCode();
      assertEquals(".", probeInformation.getBmDescription());
      assertEquals((-1), probeInformation.getPrecision());
      assertEquals("fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", probeInformation.getTargetType());
      assertEquals("R", probeInformation.getBmName());
      assertEquals("{=to_", probeInformation.getXmlRpcUrl());
      assertEquals("R", probeInformation.getBmClass());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningTrue0() throws Throwable  {
      ProbeInformation arg0 = new ProbeInformation("prob_agnt_mlrpc_port", (String) null, "prob_agnt_mlrpc_port", "prob_agnt_mlrpc_port", "prob_agnt_mlrpc_port", "prob_agnt_mlrpc_port", (-337), "prob_agnt_mlrpc_port");
      ProbeInformation probeInformation = new ProbeInformation("prob_agnt_mlrpc_port", (String) null, "prob_agnt_mlrpc_port", "prob_agnt_mlrpc_port", "prob_agnt_mlrpc_port", "prob_agnt_mlrpc_port", (-337), "prob_agnt_mlrpc_port");
      boolean equals = probeInformation.equals(arg0);
      assertTrue(equals);
      assertEquals((-337), probeInformation.getPrecision());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse0() throws Throwable  {
      ProbeInformation arg0 = new ProbeInformation("prob_agent_mlrpc_port", "prob_agent_mlrpc_port", "prob_agent_mlrpc_port", "prob_agent_mlrpc_port", "prob_agent_mlrpc_port", "prob_agent_mlrpc_port", (-353), "prob_agent_mlrpc_port");
      ProbeInformation probeInformation = new ProbeInformation("prob_agent_mlrpc_port", (String) null, "prob_agent_mlrpc_port", "prob_agent_mlrpc_port", "prob_agent_mlrpc_port", "prob_agent_mlrpc_port", (-353), "prob_agent_mlrpc_port");
      boolean equals = probeInformation.equals(arg0);
      assertFalse(equals);
      assertEquals((-353), probeInformation.getPrecision());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningTrue1() throws Throwable  {
      ProbeInformation arg0 = new ProbeInformation((String) null, "`!0:1b\"pqT", "`!0:1b\"pqT", "`!0:1b\"pqT", "`!0:1b\"pqT", "`!0:1b\"pqT", (-498), "`!0:1b\"pqT");
      ProbeInformation probeInformation = new ProbeInformation((String) null, "`!0:1b\"pqT", "`!0:1b\"pqT", "`!0:1b\"pqT", "`!0:1b\"pqT", "`!0:1b\"pqT", (-498), "`!0:1b\"pqT");
      boolean equals = probeInformation.equals(arg0);
      assertTrue(equals);
      assertEquals((-498), probeInformation.getPrecision());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse1() throws Throwable  {
      ProbeInformation probeInformation = new ProbeInformation("[ch/w%,FT[h:x<$Y", "[ch/w%,FT[h:x<$Y", "[ch/w%,FT[h:x<$Y", "[ch/w%,FT[h:x<$Y", "[ch/w%,FT[h:x<$Y", "[ch/w%,FT[h:x<$Y", (-363), "[ch/w%,FT[h:x<$Y");
      ProbeInformation arg0 = new ProbeInformation("[chw%,FT[h:<$Y", "[ch/w%,FT[h:x<$Y", "[ch/w%,FT[h:x<$Y", "[ch/w%,FT[h:x<$Y", "[ch/w%,FT[h:x<$Y", "[ch/w%,FT[h:x<$Y", (-363), "[ch/w%,FT[h:x<$Y");
      boolean equals = probeInformation.equals(arg0);
      assertEquals("[ch/w%,FT[h:x<$Y", arg0.getBmName());
      assertEquals("[ch/w%,FT[h:x<$Y", arg0.getBmClass());
      assertFalse(equals);
      assertEquals((-363), arg0.getPrecision());
      assertEquals("[ch/w%,FT[h:x<$Y", arg0.getBmDescription());
      assertEquals("[ch/w%,FT[h:x<$Y", arg0.getTargetType());
      assertEquals("[ch/w%,FT[h:x<$Y", arg0.getProbeName());
      assertEquals("[ch/w%,FT[h:x<$Y", arg0.getXmlRpcUrl());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse2() throws Throwable  {
      ProbeInformation arg0 = new ProbeInformation("`!0:1b\"pqT", "`!0:1b\"pqT", "`!0:1b\"pqT", "`!0:1b\"pqT", "`!0:1b\"pqT", "`!0:1b\"pqT", (-375), "`!0:1b\"pqT");
      ProbeInformation probeInformation = new ProbeInformation((String) null, "`!0:1b\"pqT", "`!0:1b\"pqT", "`!0:1b\"pqT", "`!0:1b\"pqT", "`!0:1b\"pqT", (-375), "`!0:1b\"pqT");
      boolean equals = probeInformation.equals(arg0);
      assertFalse(equals);
      assertEquals((-375), probeInformation.getPrecision());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse3() throws Throwable  {
      ProbeInformation arg0 = new ProbeInformation("fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", "fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", "fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", "fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", "fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", "fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", (-360), "fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation");
      ProbeInformation probeInformation = new ProbeInformation("fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", "fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", "fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", "fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", "fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", (String) null, (-360), "fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation");
      boolean equals = probeInformation.equals(arg0);
      assertFalse(equals);
      assertEquals((-360), probeInformation.getPrecision());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse4() throws Throwable  {
      ProbeInformation probeInformation = new ProbeInformation("[ch/w%,FT[h:%<$Y", (String) null, "[ch/w%,FT[h:%<$Y", (String) null, (String) null, "[ch/w%,FT[h:%<$Y", (-391), (String) null);
      ProbeInformation arg0 = new ProbeInformation((String) null, "[ch/w%,FT[h:%<$Y", "[ch/w%,FT[h:%<$Y", (String) null, (String) null, (String) null, (-391), "[ch/w%,FT[h:%<$Y");
      boolean equals = probeInformation.equals(arg0);
      assertFalse(equals);
      assertEquals((-391), arg0.getPrecision());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse5() throws Throwable  {
      ProbeInformation probeInformation = new ProbeInformation("[ch/w%,FT[h:%<$Y", (String) null, "[ch/w%,FT[h:%<$Y", (String) null, (String) null, "[ch/w%,FT[h:%<$Y", (-391), (String) null);
      ProbeInformation arg0 = new ProbeInformation((String) null, "[ch/w%,FT[h:%<$Y", "[ch/w%,FT[h:%<$Y", "[ch/w%,FT[h:%<$Y", (String) null, (String) null, (-391), "[ch/w%,FT[h:%<$Y");
      boolean equals = probeInformation.equals(arg0);
      assertEquals((-391), arg0.getPrecision());
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse6() throws Throwable  {
      ProbeInformation probeInformation = new ProbeInformation("[h/w%|FT[h:%<$Y", (String) null, "[h/w%|FT[h:%<$Y", (String) null, (String) null, "[h/w%|FT[h:%<$Y", (-399), (String) null);
      ProbeInformation arg0 = new ProbeInformation((String) null, "[h/w%|FT[h:%<$Y", "[h/w%|FT[h:%<$Y", "[h/w%|FT[h:%<$Y", "[h/w%|FT[h:%<$Y", (String) null, (-399), "[h/w%|FT[h:%<$Y");
      boolean equals = probeInformation.equals(arg0);
      assertEquals((-399), arg0.getPrecision());
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse7() throws Throwable  {
      ProbeInformation arg0 = new ProbeInformation("[ch/w%,FT[h:%<$Y", (String) null, "[ch/w%,FT[h:%<$Y", (String) null, (String) null, "[ch/w%,FT[h:%<$Y", (-382), (String) null);
      ProbeInformation probeInformation = new ProbeInformation((String) null, "[ch/w%,FT[h:%<$Y", "[ch/w%,FT[h:%<$Y", "[ch/w%,FT[h:%<$Y", (String) null, (String) null, (-382), "[ch/w%,FT[h:%<$Y");
      boolean equals = probeInformation.equals(arg0);
      assertEquals((-382), probeInformation.getPrecision());
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse8() throws Throwable  {
      ProbeInformation probeInformation = new ProbeInformation((String) null, ">rM0TZ%", (String) null, "=}Zl1L+", "&UP?Yx* )OA%Y4&b3W", "&UP?Yx* )OA%Y4&b3W", 58, (String) null);
      ProbeInformation arg0 = new ProbeInformation("&UP?Yx* )OA%Y4&b3W", (String) null, (String) null, (String) null, "=}Zl1L+", "&UP?Yx* )OA%Y4&b3W", 58, "&UP?Yx* )OA%Y4&b3W");
      boolean equals = probeInformation.equals(arg0);
      assertFalse(equals);
      assertEquals("&UP?Yx* )OA%Y4&b3W", arg0.getTargetName());
      assertEquals("&UP?Yx* )OA%Y4&b3W", arg0.getXmlRpcUrl());
      assertEquals("&UP?Yx* )OA%Y4&b3W", probeInformation.getProbeName());
      assertEquals(">rM0TZ%", probeInformation.getTargetType());
      assertEquals("=}Zl1L+", arg0.getBmDescription());
      assertEquals("=}Zl1L+", probeInformation.getBmName());
      assertEquals("&UP?Yx* )OA%Y4&b3W", probeInformation.getBmDescription());
      assertEquals(58, arg0.getPrecision());
      assertEquals("&UP?Yx* )OA%Y4&b3W", arg0.getProbeName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse9() throws Throwable  {
      ProbeInformation probeInformation = new ProbeInformation("[ch/w%,5FTlh:%WY", "[ch/w%,5FTlh:%WY", "[ch/w%,5FTlh:%WY", "[ch/w%,5FTlh:%WY", "[ch/w%,5FTlh:%WY", "[ch/w%,5FTlh:%WY", (-350), "[ch/w%,5FTlh:%WY");
      ProbeInformation arg0 = new ProbeInformation("[ch/w%,5FTlh:%WY", (String) null, "[ch/w%,5FTlh:%WY", "[ch/w%,5FTlh:%WY", "[ch/w%,5FTlh:%WY", "[ch/w%,5FTlh:%WY", (-350), "[ch/w%,5FTlh:%WY");
      boolean equals = probeInformation.equals(arg0);
      assertFalse(equals);
      assertEquals((-350), arg0.getPrecision());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse10() throws Throwable  {
      ProbeInformation arg0 = new ProbeInformation(".X>", ".X>", ".X>", ".X>", ".X>", ".X>", (-354), ".X>");
      ProbeInformation probeInformation = new ProbeInformation(".X>", ".X>", (String) null, (String) null, ".X>", ".X>", (-354), ".X>");
      boolean equals = probeInformation.equals(arg0);
      assertFalse(equals);
      assertEquals((-354), probeInformation.getPrecision());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse11() throws Throwable  {
      ProbeInformation arg0 = new ProbeInformation("[ch/w%,FT[h:x<$Y", "[ch/w%,FT[h:x<$Y", "[ch/w%,FT[h:x<$Y", "[ch/w%,FT[h:x<$Y", "[ch/w%,FT[h:x<$Y", "[ch/w%,FT[h:x<$Y", (-397), "[ch/w%,FT[h:x<$Y");
      ProbeInformation probeInformation = new ProbeInformation("[ch/w%,FT[h:x<$Y", "[ch/w%,FT[h:x<$Y", "[ch/w%,FT[h:x<$Y", "[ch/w%,FT[h:x<$Y", "[ch/w%,FT[h:x<$Y", "[ch/w%,FT[h:x<$Y", 0, "[ch/w%,FT[h:x<$Y");
      boolean equals = probeInformation.equals(arg0);
      assertFalse(equals);
      assertEquals((-397), arg0.getPrecision());
      assertFalse(arg0.equals((Object)probeInformation));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse12() throws Throwable  {
      ProbeInformation arg0 = new ProbeInformation("'z.)", "'z.)", (String) null, "'z.)", "'z.)", "'z.)", (-365), "'z.)");
      ProbeInformation probeInformation = new ProbeInformation("'z.)", "'z.)", "'z.)", "'z.)", "'z.)", "'z.)", (-365), "'z.)");
      boolean equals = probeInformation.equals(arg0);
      assertFalse(equals);
      assertEquals((-365), probeInformation.getPrecision());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsWithNull() throws Throwable  {
      ProbeInformation probeInformation = new ProbeInformation((String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (-1599), (String) null);
      boolean equals = probeInformation.equals((Object) null);
      assertEquals((-1599), probeInformation.getPrecision());
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningTrue2() throws Throwable  {
      ProbeInformation arg0 = new ProbeInformation("[ch/w%,FT[h:%<$Y", "[ch/w%,FT[h:%<$Y", "[ch/w%,FT[h:%<$Y", "[ch/w%,FT[h:%<$Y", "[ch/w%,FT[h:%<$Y", "[ch/w%,FT[h:%<$Y", (-375), "[ch/w%,FT[h:%<$Y");
      boolean equals = arg0.equals(arg0);
      assertTrue(equals);
      assertEquals((-375), arg0.getPrecision());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse13() throws Throwable  {
      ProbeInformation probeInformation = new ProbeInformation("fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", "fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", "", "", "", "", 1860, "");
      boolean equals = probeInformation.equals("");
      assertFalse(equals);
      assertEquals("fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", probeInformation.getTargetName());
      assertEquals("", probeInformation.getBmDescription());
      assertEquals("", probeInformation.getBmName());
      assertEquals("fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", probeInformation.getTargetType());
      assertEquals(1860, probeInformation.getPrecision());
      assertEquals("", probeInformation.getBmClass());
      assertEquals("", probeInformation.getXmlRpcUrl());
      assertEquals("", probeInformation.getProbeName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBmDescriptionReturningNull() throws Throwable  {
      ProbeInformation probeInformation = new ProbeInformation(", bmDescription='", "fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", (String) null, (String) null, (String) null, "fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", (-1), "P\"%>)Nx");
      String bmDescription = probeInformation.getBmDescription();
      assertEquals(", bmDescription='", probeInformation.getTargetName());
      assertEquals("fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", probeInformation.getProbeName());
      assertEquals((-1), probeInformation.getPrecision());
      assertEquals("P\"%>)Nx", probeInformation.getXmlRpcUrl());
      assertNull(bmDescription);
      assertEquals("fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", probeInformation.getTargetType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetXmlRpcUrlReturningNull() throws Throwable  {
      ProbeInformation probeInformation = new ProbeInformation("Cps:99w=fE{E@(", ", targetType='", ", targetType='", ", targetType='", "Cps:99w=fE{E@(", (String) null, (-1920), (String) null);
      String xmlRpcUrl = probeInformation.getXmlRpcUrl();
      assertEquals(", targetType='", probeInformation.getBmName());
      assertEquals("Cps:99w=fE{E@(", probeInformation.getTargetName());
      assertEquals("Cps:99w=fE{E@(", probeInformation.getBmDescription());
      assertNull(xmlRpcUrl);
      assertEquals((-1920), probeInformation.getPrecision());
      assertEquals(", targetType='", probeInformation.getBmClass());
      assertEquals(", targetType='", probeInformation.getTargetType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToString() throws Throwable  {
      ProbeInformation probeInformation = new ProbeInformation("`!0:1b\"pq/T", "`!0:1b\"pq/T", "`!0:1b\"pq/T", "`!0:1b\"pq/T", "`!0:1b\"pq/T", "`!0:1b\"pq/T", (-341), "`!0:1b\"pq/T");
      String string = probeInformation.toString();
      assertEquals("ProbeInformation{targetName='`!0:1b\"pq/T', targetType='`!0:1b\"pq/T', bmClass='`!0:1b\"pq/T', bmName='`!0:1b\"pq/T', bmDescription='`!0:1b\"pq/T', probeDescription='`!0:1b\"pq/T', precision=-341}", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMeasureURI() throws Throwable  {
      ProbeInformation probeInformation = new ProbeInformation("prob_agent_mlrpc_port", "prob_agent_mlrpc_port", "prob_agent_mlrpc_port", "prob_agent_mlrpc_port", "prob_agent_mlrpc_port", "prob_agent_mlrpc_port", (-353), "prob_agent_mlrpc_port");
      probeInformation.getMeasureURI();
      assertEquals((-353), probeInformation.getPrecision());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTargetNameReturningNonEmptyString() throws Throwable  {
      ProbeInformation probeInformation = new ProbeInformation("fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", "fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", "", "", "", "", 1860, "");
      String targetName = probeInformation.getTargetName();
      assertEquals("fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", targetName);
      assertEquals(1860, probeInformation.getPrecision());
      assertEquals("fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", probeInformation.getTargetType());
      assertEquals("", probeInformation.getBmName());
      assertEquals("", probeInformation.getBmClass());
      assertEquals("", probeInformation.getProbeName());
      assertEquals("", probeInformation.getBmDescription());
      assertEquals("", probeInformation.getXmlRpcUrl());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTargetTypeReturningNull() throws Throwable  {
      ProbeInformation probeInformation = new ProbeInformation("fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", (String) null, "l$?", (String) null, (String) null, "h]/\"o.tb-nKuqG!b+=", 0, "fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation");
      String targetType = probeInformation.getTargetType();
      assertEquals("l$?", probeInformation.getBmClass());
      assertEquals("h]/\"o.tb-nKuqG!b+=", probeInformation.getProbeName());
      assertEquals("fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", probeInformation.getTargetName());
      assertEquals(0, probeInformation.getPrecision());
      assertEquals("fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", probeInformation.getXmlRpcUrl());
      assertNull(targetType);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBmNameReturningEmptyString() throws Throwable  {
      ProbeInformation probeInformation = new ProbeInformation(".%*p CfR#2;iixn", "", ".%*p CfR#2;iixn", "", "", (String) null, 2830, "");
      String bmName = probeInformation.getBmName();
      assertEquals(2830, probeInformation.getPrecision());
      assertEquals(".%*p CfR#2;iixn", probeInformation.getBmClass());
      assertEquals(".%*p CfR#2;iixn", probeInformation.getTargetName());
      assertEquals("", bmName);
      assertEquals("", probeInformation.getXmlRpcUrl());
      assertEquals("", probeInformation.getBmDescription());
      assertEquals("", probeInformation.getTargetType());
      assertNotNull(bmName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBmClassReturningEmptyString() throws Throwable  {
      ProbeInformation probeInformation = new ProbeInformation("fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", "fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", "", "", "", "", 1860, "");
      String bmClass = probeInformation.getBmClass();
      assertEquals("", probeInformation.getXmlRpcUrl());
      assertEquals("", bmClass);
      assertEquals("", probeInformation.getBmDescription());
      assertEquals("", probeInformation.getBmName());
      assertEquals("fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", probeInformation.getTargetType());
      assertEquals(1860, probeInformation.getPrecision());
      assertEquals("fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", probeInformation.getTargetName());
      assertEquals("", probeInformation.getProbeName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPrecisionReturningPositive() throws Throwable  {
      ProbeInformation probeInformation = new ProbeInformation(".%*p CfR#2;iixn", "", ".%*p CfR#2;iixn", "", "", (String) null, 2830, "");
      int precision = probeInformation.getPrecision();
      assertEquals(".%*p CfR#2;iixn", probeInformation.getTargetName());
      assertEquals(".%*p CfR#2;iixn", probeInformation.getBmClass());
      assertEquals("", probeInformation.getTargetType());
      assertEquals(2830, precision);
      assertEquals("", probeInformation.getBmName());
      assertEquals("", probeInformation.getBmDescription());
      assertEquals("", probeInformation.getXmlRpcUrl());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetProbeNameReturningEmptyString() throws Throwable  {
      ProbeInformation probeInformation = new ProbeInformation("fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", "fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", "", "", "", "", 1860, "");
      String probeName = probeInformation.getProbeName();
      assertEquals("fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", probeInformation.getTargetName());
      assertEquals(1860, probeInformation.getPrecision());
      assertEquals("fi.vtt.noen.mfw.bundle.probe.shared.ProbeInformation", probeInformation.getTargetType());
      assertEquals("", probeInformation.getBmName());
      assertEquals("", probeName);
      assertEquals("", probeInformation.getXmlRpcUrl());
      assertEquals("", probeInformation.getBmDescription());
      assertEquals("", probeInformation.getBmClass());
  }
}
