/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Mon Mar 18 05:24:07 GMT 2024
 */

package fi.vtt.noen.testgen.observations.formatter;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import fi.vtt.noen.testgen.observations.data.ProgramRun;
import fi.vtt.noen.testgen.observations.formatter.DaikonFormatter;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DaikonFormatter_Original_ESTest extends DaikonFormatter_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOutputs() throws Throwable  {
      EvoSuiteFile arg0 = new EvoSuiteFile("testgen.properties");
      byte[] arg1 = new byte[0];
      FileSystemHandling.appendDataToFile(arg0, arg1);
      Collection<Class> outputs = (Collection<Class>)DaikonFormatter.outputs();
      assertNotNull(outputs);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testInputs() throws Throwable  {
      EvoSuiteFile arg0 = new EvoSuiteFile("testgen.properties");
      FileSystemHandling.appendLineToFile(arg0, "ppt-type exit");
      Collection<Class> inputs = (Collection<Class>)DaikonFormatter.inputs();
      assertNotNull(inputs);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFileNameExtension() throws Throwable  {
      Locale locale = Locale.JAPANESE;
      Set<String> arg1 = locale.getUnicodeLocaleKeys();
      DaikonFormatter daikonFormatter = new DaikonFormatter("", arg1);
      String fileNameExtension = daikonFormatter.fileNameExtension();
      assertEquals("dtrace", fileNameExtension);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesDaikonFormatterTaking2Arguments0() throws Throwable  {
      LinkedList<String> arg1 = new LinkedList<String>();
      ProgramRun arg0 = new ProgramRun("Init");
      DaikonFormatter daikonFormatter = new DaikonFormatter(",hP3GiL-W@i{=", arg1);
      daikonFormatter.observations(arg0);
      assertEquals("dtrace", daikonFormatter.fileNameExtension());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testObservations() throws Throwable  {
      DaikonFormatter daikonFormatter = new DaikonFormatter("C", true);
      ProgramRun arg0 = new ProgramRun("C");
      daikonFormatter.observations(arg0);
      assertEquals("dtrace", daikonFormatter.fileNameExtension());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesDaikonFormatterTaking2Arguments1() throws Throwable  {
      EvoSuiteFile arg0 = new EvoSuiteFile("testgen.properties");
      FileSystemHandling.appendLineToFile(arg0, "ppt-type exit");
      DaikonFormatter daikonFormatter = new DaikonFormatter("    var-kind array", false);
      assertEquals("dtrace", daikonFormatter.fileNameExtension());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHeader() throws Throwable  {
      DaikonFormatter daikonFormatter = new DaikonFormatter((String) null, true);
      daikonFormatter.header();
      assertEquals("dtrace", daikonFormatter.fileNameExtension());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testObservationsThrowsRuntimeException() throws Throwable  {
      LinkedList<String> arg1 = new LinkedList<String>();
      ProgramRun arg0 = new ProgramRun("Init");
      DaikonFormatter daikonFormatter = new DaikonFormatter(",hP3GiL-W@i{=", arg1);
      arg1.addLast("Init");
      // Undeclared exception!
      try { 
        daikonFormatter.observations(arg0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error while writing to file named ',hP3GiL-W@i{='):Error in writing to file
         //
         verifyException("fi.vtt.noen.testgen.observations.formatter.BasicFormatter$OutputBuffer", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateDaikonFormatterTaking2ArgumentsThrowsRuntimeException() throws Throwable  {
      DaikonFormatter daikonFormatter = null;
      try {
        daikonFormatter = new DaikonFormatter("    var-kind array", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // failed to load input and output interface definitions for daikon formatter
         //
         verifyException("fi.vtt.noen.testgen.observations.formatter.DaikonFormatter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFooter() throws Throwable  {
      LinkedList<String> arg1 = new LinkedList<String>();
      DaikonFormatter daikonFormatter = new DaikonFormatter((String) null, arg1);
      daikonFormatter.footer();
      assertEquals("dtrace", daikonFormatter.fileNameExtension());
  }
}
