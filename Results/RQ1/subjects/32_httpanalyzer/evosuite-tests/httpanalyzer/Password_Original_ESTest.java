/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 21 00:17:01 GMT 2024
 */

package httpanalyzer;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import httpanalyzer.Password;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Password_Original_ESTest extends Password_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashMD5() throws Throwable  {
      String hashMD5 = Password.hashMD5("se\"[");
      assertEquals("776def281bd90250360c95478fb76c22", hashMD5);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCryptThrowsTooManyResourcesException() throws Throwable  {
      // Undeclared exception!
      Password.crypt("W@QXqC||Lyurt}\"H", "W@QXqC||Lyurt}\"H");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCryptWithNonEmptyString() throws Throwable  {
      // Undeclared exception!
      Password.crypt("776def281bd90250360c95478fb76c22", "h-");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesPassword() throws Throwable  {
      Password password = new Password();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCryptThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      // Undeclared exception!
      try { 
        Password.crypt("", "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
