/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 19 20:39:32 GMT 2024
 */

package org.jfree.data.time;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.math.BigInteger;
import java.time.chrono.ChronoLocalDate;
import javax.swing.JTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.xy.XYDatasetTableModel;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimeSeries_Original_ESTest extends TimeSeries_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTimePeriodClassReturningClassWhereIsEnumIsTrue() throws Throwable  {
      Class<JTable.PrintMode> arg1 = JTable.PrintMode.class;
      TimeSeries timeSeries = new TimeSeries("", arg1);
      timeSeries.getTimePeriodClass();
      assertEquals(Integer.MAX_VALUE, timeSeries.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries.getMaximumItemAge());
      assertEquals("Time", timeSeries.getDomainDescription());
      assertEquals("Value", timeSeries.getRangeDescription());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRangeDescriptionReturningNull() throws Throwable  {
      Class<Object> arg3 = Object.class;
      TimeSeries timeSeries = new TimeSeries("org.jfree.data.xy.XYSeriesCollection", "org.jfree.data.xy.XYSeriesCollection", (String) null, arg3);
      String rangeDescription = timeSeries.getRangeDescription();
      assertEquals(Integer.MAX_VALUE, timeSeries.getMaximumItemCount());
      assertEquals("org.jfree.data.xy.XYSeriesCollection", timeSeries.getDomainDescription());
      assertNull(rangeDescription);
      assertEquals(9223372036854775807L, timeSeries.getMaximumItemAge());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRangeDescriptionReturningEmptyString() throws Throwable  {
      Class<Day> arg3 = Day.class;
      TimeSeries timeSeries = new TimeSeries(",S5)YZ'<O*pA}A'GrV", "", "", arg3);
      String rangeDescription = timeSeries.getRangeDescription();
      assertEquals(Integer.MAX_VALUE, timeSeries.getMaximumItemCount());
      assertEquals("", rangeDescription);
      assertEquals("", timeSeries.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries.getMaximumItemAge());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaximumItemAgeReturningZero() throws Throwable  {
      TimeSeries timeSeries = new TimeSeries("{z=ZG3`e-");
      assertEquals(9223372036854775807L, timeSeries.getMaximumItemAge());
      
      timeSeries.setMaximumItemAge(0);
      timeSeries.getMaximumItemAge();
      assertEquals("Time", timeSeries.getDomainDescription());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDomainDescriptionReturningEmptyString() throws Throwable  {
      Class<Object> arg1 = Object.class;
      TimeSeries timeSeries = new TimeSeries("yn=/{CjDydxAwp", arg1);
      timeSeries.setDomainDescription("");
      timeSeries.getDomainDescription();
      assertEquals("", timeSeries.getDomainDescription());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateCopyTaking2RegularTimePeriods() throws Throwable  {
      TimeSeries timeSeries = new TimeSeries("");
      timeSeries.setNotify(false);
      Minute arg1 = new Minute();
      TimeSeries createCopy = timeSeries.createCopy((RegularTimePeriod) arg1, (RegularTimePeriod) arg1);
      assertEquals(9223372036854775807L, createCopy.getMaximumItemAge());
      assertEquals("Time", createCopy.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, createCopy.getMaximumItemCount());
      assertEquals("Value", createCopy.getRangeDescription());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateCopyTaking2IntsReturningTimeSeriesWhereGetNotifyIsFalse() throws Throwable  {
      Class<Object> arg1 = Object.class;
      TimeSeries timeSeries = new TimeSeries("&]Z=F[deH@g+O* 8", arg1);
      timeSeries.setNotify(false);
      TimeSeries createCopy = timeSeries.createCopy(2673, 2673);
      assertEquals(Integer.MAX_VALUE, createCopy.getMaximumItemCount());
      assertNotSame(createCopy, timeSeries);
      assertEquals(9223372036854775807L, createCopy.getMaximumItemAge());
      assertEquals("Time", createCopy.getDomainDescription());
      assertEquals("Value", createCopy.getRangeDescription());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateCopyTaking2IntsReturningTimeSeriesWhereGetMaximumItemAgeIsPositive() throws Throwable  {
      TimeSeries timeSeries = new TimeSeries("yn=/{CjDydxAwp");
      timeSeries.setMaximumItemCount(0);
      timeSeries.createCopy(0, 2);
      assertEquals(0, timeSeries.getMaximumItemCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateCopyTaking2IntsThrowsIllegalArgumentException() throws Throwable  {
      Class<Object> arg1 = Object.class;
      TimeSeries timeSeries = new TimeSeries("org.jfree.data.xy.XYSeries", arg1);
      // Undeclared exception!
      try { 
        timeSeries.createCopy(273, (-2242));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDeleteTaking2Arguments() throws Throwable  {
      TimeSeries timeSeries = new TimeSeries("`?++emF?wrETYa");
      timeSeries.delete((-979), Integer.MAX_VALUE);
      assertEquals(9223372036854775807L, timeSeries.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries.getMaximumItemCount());
      assertEquals("Value", timeSeries.getRangeDescription());
      assertEquals("Time", timeSeries.getDomainDescription());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDeleteTaking2ArgumentsThrowsIndexOutOfBoundsException() throws Throwable  {
      TimeSeries timeSeries = new TimeSeries(";");
      // Undeclared exception!
      try { 
        timeSeries.delete(1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveAgedItems() throws Throwable  {
      TimeSeries timeSeries = new TimeSeries("|;");
      timeSeries.removeAgedItems(false);
      assertEquals(Integer.MAX_VALUE, timeSeries.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries.getMaximumItemAge());
      assertEquals("Value", timeSeries.getRangeDescription());
      assertEquals("Time", timeSeries.getDomainDescription());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddOrUpdateTaking1And1ReturningNonNull() throws Throwable  {
      Minute arg0 = new Minute();
      TimeSeries timeSeries = new TimeSeries(" c(");
      timeSeries.addOrUpdate((RegularTimePeriod) arg0, (Number) 59);
      timeSeries.addOrUpdate((RegularTimePeriod) arg0, (Number) 0);
      assertEquals(9223372036854775807L, timeSeries.getMaximumItemAge());
      assertEquals("Value", timeSeries.getRangeDescription());
      assertEquals("Time", timeSeries.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries.getMaximumItemCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIndex() throws Throwable  {
      Class<JTable.PrintMode> arg1 = JTable.PrintMode.class;
      TimeSeries timeSeries = new TimeSeries("", arg1);
      Millisecond arg0 = new Millisecond();
      timeSeries.getIndex(arg0);
      assertEquals(9223372036854775807L, timeSeries.getMaximumItemAge());
      assertEquals("Value", timeSeries.getRangeDescription());
      assertEquals("Time", timeSeries.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries.getMaximumItemCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetItemCount() throws Throwable  {
      TimeSeries timeSeries = new TimeSeries("");
      timeSeries.getItemCount();
      assertEquals(Integer.MAX_VALUE, timeSeries.getMaximumItemCount());
      assertEquals("Time", timeSeries.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries.getMaximumItemAge());
      assertEquals("Value", timeSeries.getRangeDescription());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashCode() throws Throwable  {
      TimeSeries timeSeries = new TimeSeries("", (Class) null);
      timeSeries.hashCode();
      assertEquals("Value", timeSeries.getRangeDescription());
      assertEquals("Time", timeSeries.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries.getMaximumItemCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetMaximumItemCountWithPositive() throws Throwable  {
      TimeSeries arg0 = new TimeSeries("2s[mO>");
      arg0.setMaximumItemCount(3160);
      TimeSeries timeSeries = new TimeSeries("2s[mO>");
      boolean equals = timeSeries.equals(arg0);
      assertEquals(3160, arg0.getMaximumItemCount());
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetMaximumItemAgeWithPositive() throws Throwable  {
      TimeSeries arg0 = new TimeSeries("org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset");
      arg0.setMaximumItemAge(25316L);
      TimeSeries timeSeries = new TimeSeries("org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset");
      boolean equals = timeSeries.equals(arg0);
      assertEquals(25316L, arg0.getMaximumItemAge());
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetRangeDescriptionWithNonEmptyString() throws Throwable  {
      TimeSeries arg0 = new TimeSeries("/mHVgwNl}g}9");
      arg0.setRangeDescription("/mHVgwNl}g}9");
      TimeSeries timeSeries = new TimeSeries("/mHVgwNl}g}9");
      boolean equals = timeSeries.equals(arg0);
      assertFalse(equals);
      assertEquals("/mHVgwNl}g}9", arg0.getRangeDescription());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDomainDescriptionWithNonEmptyString() throws Throwable  {
      TimeSeries timeSeries = new TimeSeries("`");
      TimeSeries arg0 = new TimeSeries("`");
      arg0.setDomainDescription("`");
      boolean equals = timeSeries.equals(arg0);
      assertEquals("`", arg0.getDomainDescription());
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTimeSeriesTaking4Arguments() throws Throwable  {
      TimeSeries arg0 = new TimeSeries("f%anLSRSxf+el)");
      Class<InputStream> arg3 = InputStream.class;
      TimeSeries timeSeries = new TimeSeries("", "", "XpuBm`P", arg3);
      boolean equals = timeSeries.equals(arg0);
      assertFalse(equals);
      assertEquals(Integer.MAX_VALUE, timeSeries.getMaximumItemCount());
      assertEquals("XpuBm`P", timeSeries.getRangeDescription());
      assertEquals("Time", arg0.getDomainDescription());
      assertEquals("", timeSeries.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries.getMaximumItemAge());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningTrue() throws Throwable  {
      TimeSeries arg0 = new TimeSeries("yn=/{CjDydxAwp");
      boolean equals = arg0.equals(arg0);
      assertEquals(9223372036854775807L, arg0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, arg0.getMaximumItemCount());
      assertEquals("Time", arg0.getDomainDescription());
      assertEquals("Value", arg0.getRangeDescription());
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEquals() throws Throwable  {
      TimeSeries timeSeries = new TimeSeries("!");
      boolean equals = timeSeries.equals("!");
      assertEquals(Integer.MAX_VALUE, timeSeries.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries.getMaximumItemAge());
      assertFalse(equals);
      assertEquals("Value", timeSeries.getRangeDescription());
      assertEquals("Time", timeSeries.getDomainDescription());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateCopyTaking2RegularTimePeriodsWithNonNull() throws Throwable  {
      FixedMillisecond arg0 = new FixedMillisecond();
      TimeSeries timeSeries = new TimeSeries("java.ang.Class");
      timeSeries.addOrUpdate((RegularTimePeriod) arg0, (Number) null);
      RegularTimePeriod arg1 = arg0.previous();
      TimeSeries createCopy = timeSeries.createCopy(arg1, arg1);
      assertEquals("Value", createCopy.getRangeDescription());
      assertEquals(9223372036854775807L, createCopy.getMaximumItemAge());
      assertEquals("Time", createCopy.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, createCopy.getMaximumItemCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddTaking1And1() throws Throwable  {
      Minute minute = new Minute();
      MockDate arg0 = new MockDate(59, 59, 0, 0, 59, 59);
      Day arg1 = new Day(arg0, minute.DEFAULT_TIME_ZONE);
      TimeSeries timeSeries = new TimeSeries("G?NqfWhh*$z8");
      timeSeries.add((RegularTimePeriod) arg1, (Number) 59);
      TimeSeries createCopy = timeSeries.createCopy((RegularTimePeriod) arg1, (RegularTimePeriod) arg1);
      assertEquals("Value", createCopy.getRangeDescription());
      assertEquals("Time", createCopy.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, createCopy.getMaximumItemCount());
      assertEquals(1, createCopy.getItemCount());
      assertEquals(9223372036854775807L, createCopy.getMaximumItemAge());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateCopyTaking2RegularTimePeriodsWithNull() throws Throwable  {
      TimeSeries timeSeries = new TimeSeries("'8E#e)KE+ayaETY");
      // Undeclared exception!
      try { 
        timeSeries.createCopy((RegularTimePeriod) null, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateCopyTaking2RegularTimePeriodsThrowsIllegalArgumentException() throws Throwable  {
      Minute arg0 = new Minute();
      TimeSeries timeSeries = new TimeSeries("x^$62GyyEKYnV");
      // Undeclared exception!
      try { 
        timeSeries.createCopy((RegularTimePeriod) arg0, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'end' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateCopyTaking2IntsWithNegative() throws Throwable  {
      TimeSeries timeSeries = new TimeSeries("");
      // Undeclared exception!
      try { 
        timeSeries.createCopy((-5149), (-5149));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDeleteTaking2ArgumentsThrowsIllegalArgumentException() throws Throwable  {
      TimeSeries timeSeries = new TimeSeries("`?++emF?wrETYa");
      // Undeclared exception!
      try { 
        timeSeries.delete((-979), (-2147483639));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddOrUpdateTaking1And1AndDeleteTakingRegularTimePeriod() throws Throwable  {
      Minute arg0 = new Minute();
      TimeSeries timeSeries = new TimeSeries("yn=/{CjDydxAwp");
      timeSeries.addOrUpdate((RegularTimePeriod) arg0, (Number) 59);
      timeSeries.delete((RegularTimePeriod) arg0);
      assertEquals(0, timeSeries.getItemCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDeleteTakingRegularTimePeriod() throws Throwable  {
      TimeSeries timeSeries = new TimeSeries(":");
      Week arg0 = new Week();
      timeSeries.delete((RegularTimePeriod) arg0);
      assertEquals(Integer.MAX_VALUE, timeSeries.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries.getMaximumItemAge());
      assertEquals("Time", timeSeries.getDomainDescription());
      assertEquals("Value", timeSeries.getRangeDescription());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddOrUpdateTaking1And1AndClear() throws Throwable  {
      TimeSeries timeSeries = new TimeSeries("Requires start <= end.");
      Second arg0 = new Second();
      timeSeries.addOrUpdate((RegularTimePeriod) arg0, (Number) 0);
      timeSeries.clear();
      assertEquals(0, timeSeries.getItemCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testClear() throws Throwable  {
      TimeSeries timeSeries = new TimeSeries("JpRK4`$M&j*x{'e");
      timeSeries.clear();
      assertEquals(Integer.MAX_VALUE, timeSeries.getMaximumItemCount());
      assertEquals("Value", timeSeries.getRangeDescription());
      assertEquals("Time", timeSeries.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries.getMaximumItemAge());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTimeSeriesTaking2ArgumentsAndCallsSetMaximumItemCount() throws Throwable  {
      Minute arg0 = new Minute();
      Class<Object> arg1 = Object.class;
      TimeSeries timeSeries = new TimeSeries("yn=/{CjDydxAwp", arg1);
      timeSeries.setMaximumItemCount(0);
      timeSeries.addOrUpdate((RegularTimePeriod) arg0, (Number) 59);
      assertEquals(0, timeSeries.getMaximumItemCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddOrUpdateTaking1And1ThrowsIllegalArgumentException() throws Throwable  {
      TimeSeries timeSeries = new TimeSeries("Y8");
      // Undeclared exception!
      try { 
        timeSeries.addOrUpdate((RegularTimePeriod) null, (Number) 23);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testUpdateThrowsRuntimeException() throws Throwable  {
      TimeSeries timeSeries = new TimeSeries("");
      Hour arg0 = new Hour();
      // Undeclared exception!
      try { 
        timeSeries.update((RegularTimePeriod) arg0, (Number) 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TimeSeries.update(TimePeriod, Number):  period does not exist.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddTaking1And1ThrowsIllegalArgumentException() throws Throwable  {
      TimeSeries timeSeries = new TimeSeries("Index outside valid range.");
      // Undeclared exception!
      try { 
        timeSeries.add((TimeSeriesDataItem) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValueTakingRegularTimePeriodReturningNumberWhereByteValueIsZero() throws Throwable  {
      Day arg0 = new Day();
      TimeSeries timeSeries = new TimeSeries("Time");
      BigInteger arg1 = BigInteger.ZERO;
      TimeSeriesDataItem addOrUpdate = timeSeries.addOrUpdate((RegularTimePeriod) arg0, (Number) arg1);
      assertNull(addOrUpdate);
      
      Number value = timeSeries.getValue((RegularTimePeriod) arg0);
      assertEquals("Value", timeSeries.getRangeDescription());
      assertNotNull(value);
      assertEquals("Time", timeSeries.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries.getMaximumItemCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValueTakingRegularTimePeriodReturningNull() throws Throwable  {
      FixedMillisecond arg0 = new FixedMillisecond();
      TimeSeries timeSeries = new TimeSeries("&s2vVGTceN|LQgxE");
      timeSeries.getValue((RegularTimePeriod) arg0);
      assertEquals("Value", timeSeries.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries.getMaximumItemAge());
      assertEquals("Time", timeSeries.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries.getMaximumItemCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIndexThrowsIllegalArgumentException() throws Throwable  {
      TimeSeries timeSeries = new TimeSeries("Series ");
      // Undeclared exception!
      try { 
        timeSeries.getIndex((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDataItemThrowsIllegalArgumentException() throws Throwable  {
      TimeSeries timeSeries = new TimeSeries("D4P_u3!tPdl");
      // Undeclared exception!
      try { 
        timeSeries.getDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDataItem() throws Throwable  {
      FixedMillisecond arg0 = new FixedMillisecond();
      TimeSeries timeSeries = new TimeSeries("org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset");
      timeSeries.getDataItem((RegularTimePeriod) arg0);
      assertEquals(9223372036854775807L, timeSeries.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries.getMaximumItemCount());
      assertEquals("Time", timeSeries.getDomainDescription());
      assertEquals("Value", timeSeries.getRangeDescription());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetMaximumItemAgeThrowsIllegalArgumentException() throws Throwable  {
      TimeSeries timeSeries = new TimeSeries("Fm_jV]~sA|V-\"GY ");
      // Undeclared exception!
      try { 
        timeSeries.setMaximumItemAge((-4749L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetMaximumItemAge() throws Throwable  {
      TimeSeries timeSeries = new TimeSeries("G?NqfWhh*$z8");
      assertEquals(9223372036854775807L, timeSeries.getMaximumItemAge());
      
      timeSeries.setMaximumItemAge(0);
      TimeSeries createCopy = timeSeries.createCopy(0, 0);
      assertNotSame(timeSeries, createCopy);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetMaximumItemCountThrowsIllegalArgumentException() throws Throwable  {
      TimeSeries timeSeries = new TimeSeries("F@");
      // Undeclared exception!
      try { 
        timeSeries.setMaximumItemCount((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaximumItemCountReturningZero() throws Throwable  {
      TimeSeries timeSeries = new TimeSeries(")n_m6'7");
      timeSeries.setMaximumItemCount(0);
      int maximumItemCount = timeSeries.getMaximumItemCount();
      assertEquals(0, maximumItemCount);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRangeDescriptionReturningNonEmptyString() throws Throwable  {
      TimeSeries timeSeries = new TimeSeries("*T9}I.x5J@xzK{_");
      String rangeDescription = timeSeries.getRangeDescription();
      assertEquals("Value", rangeDescription);
      assertEquals(9223372036854775807L, timeSeries.getMaximumItemAge());
      assertEquals("Time", timeSeries.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries.getMaximumItemCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaximumItemAgeReturningPositive() throws Throwable  {
      TimeSeries timeSeries = new TimeSeries("Fm_jV]~sA|V-\"GY ");
      long maximumItemAge = timeSeries.getMaximumItemAge();
      assertEquals("Time", timeSeries.getDomainDescription());
      assertEquals("Value", timeSeries.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries.getMaximumItemCount());
      assertEquals(9223372036854775807L, maximumItemAge);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetRangeDescriptionWithNull() throws Throwable  {
      TimeSeries timeSeries = new TimeSeries("org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset");
      assertEquals("Value", timeSeries.getRangeDescription());
      
      timeSeries.setRangeDescription((String) null);
      timeSeries.hashCode();
      assertEquals(9223372036854775807L, timeSeries.getMaximumItemAge());
      assertEquals("Time", timeSeries.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries.getMaximumItemCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddTaking3ArgumentsThrowsIllegalArgumentException() throws Throwable  {
      Class<XYDatasetTableModel> arg1 = XYDatasetTableModel.class;
      TimeSeries timeSeries = new TimeSeries("^Fe8xpF8", arg1);
      // Undeclared exception!
      try { 
        timeSeries.add((RegularTimePeriod) null, 4608.525, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValueTakingIntThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      TimeSeries timeSeries = new TimeSeries("");
      // Undeclared exception!
      try { 
        timeSeries.getValue((-2211));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNextTimePeriodThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      Class<Day> arg1 = Day.class;
      TimeSeries timeSeries = new TimeSeries("+`pao.BL4T617bX3v)V", arg1);
      // Undeclared exception!
      try { 
        timeSeries.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTimePeriodClassReturningClassWhereIsEnumIsFalse() throws Throwable  {
      Class<ChronoLocalDate> arg1 = ChronoLocalDate.class;
      TimeSeries timeSeries = new TimeSeries("", arg1);
      timeSeries.getTimePeriodClass();
      assertEquals(9223372036854775807L, timeSeries.getMaximumItemAge());
      assertEquals("Time", timeSeries.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries.getMaximumItemCount());
      assertEquals("Value", timeSeries.getRangeDescription());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetItems() throws Throwable  {
      TimeSeries timeSeries = new TimeSeries("org.jfree.data.general.DefaultKeyedValues2DDataset");
      timeSeries.getItems();
      assertEquals(9223372036854775807L, timeSeries.getMaximumItemAge());
      assertEquals("Time", timeSeries.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries.getMaximumItemCount());
      assertEquals("Value", timeSeries.getRangeDescription());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddOrUpdateTaking1And1() throws Throwable  {
      Class<Day> arg1 = Day.class;
      TimeSeries timeSeries = new TimeSeries("+`pao.BL4T617bX3v)V", arg1);
      Quarter arg0 = new Quarter();
      timeSeries.addOrUpdate((RegularTimePeriod) arg0, (double) 4);
      assertEquals(1, timeSeries.getItemCount());
      
      timeSeries.getNextTimePeriod();
      assertEquals(Integer.MAX_VALUE, timeSeries.getMaximumItemCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaximumItemCountReturningPositive() throws Throwable  {
      TimeSeries timeSeries = new TimeSeries("");
      int maximumItemCount = timeSeries.getMaximumItemCount();
      assertEquals(Integer.MAX_VALUE, maximumItemCount);
      assertEquals("Time", timeSeries.getDomainDescription());
      assertEquals("Value", timeSeries.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries.getMaximumItemAge());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDomainDescriptionWithNull() throws Throwable  {
      TimeSeries timeSeries = new TimeSeries("JpRK4`$M&j*x{'e");
      assertEquals("Time", timeSeries.getDomainDescription());
      
      timeSeries.setDomainDescription((String) null);
      timeSeries.hashCode();
      assertEquals(Integer.MAX_VALUE, timeSeries.getMaximumItemCount());
      assertEquals("Value", timeSeries.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries.getMaximumItemAge());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDomainDescriptionReturningNonEmptyString() throws Throwable  {
      TimeSeries timeSeries = new TimeSeries("Y");
      String domainDescription = timeSeries.getDomainDescription();
      assertEquals("Time", domainDescription);
      assertEquals("Value", timeSeries.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries.getMaximumItemAge());
  }
}
