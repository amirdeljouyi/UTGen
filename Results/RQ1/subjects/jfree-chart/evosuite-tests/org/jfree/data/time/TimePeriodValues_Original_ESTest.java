/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 20 06:02:16 GMT 2024
 */

package org.jfree.data.time;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.time.Day;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValue;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimePeriodValues_Original_ESTest extends TimePeriodValues_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValue() throws Throwable  {
      TimePeriodValues timePeriodValues = new TimePeriodValues("}0]XI^2_+");
      Year arg0 = new Year();
      timePeriodValues.add((TimePeriod) arg0, (Number) null);
      timePeriodValues.getValue(0);
      assertEquals(0, timePeriodValues.getMinEndIndex());
      assertEquals(0, timePeriodValues.getMaxMiddleIndex());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTimePeriod() throws Throwable  {
      TimePeriodValues timePeriodValues = new TimePeriodValues("`3A*]Ny93K4}~M0Yo~");
      Day arg0 = new Day();
      timePeriodValues.add((TimePeriod) arg0, 0.0);
      timePeriodValues.getTimePeriod(0);
      assertEquals(0, timePeriodValues.getMinEndIndex());
      assertEquals(0, timePeriodValues.getMaxEndIndex());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRangeDescriptionReturningNull() throws Throwable  {
      TimePeriodValues timePeriodValues = new TimePeriodValues("8\"9`[{_hk", "8\"9`[{_hk", (String) null);
      String rangeDescription = timePeriodValues.getRangeDescription();
      assertEquals((-1), timePeriodValues.getMinStartIndex());
      assertEquals((-1), timePeriodValues.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues.getMaxStartIndex());
      assertEquals((-1), timePeriodValues.getMaxEndIndex());
      assertNull(rangeDescription);
      assertEquals("8\"9`[{_hk", timePeriodValues.getDomainDescription());
      assertEquals((-1), timePeriodValues.getMinEndIndex());
      assertEquals((-1), timePeriodValues.getMinMiddleIndex());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRangeDescriptionReturningNonEmptyString() throws Throwable  {
      TimePeriodValues timePeriodValues = new TimePeriodValues("8\"9`[{_hk");
      String rangeDescription = timePeriodValues.getRangeDescription();
      assertEquals((-1), timePeriodValues.getMaxMiddleIndex());
      assertEquals("Value", rangeDescription);
      assertEquals((-1), timePeriodValues.getMaxStartIndex());
      assertEquals((-1), timePeriodValues.getMinEndIndex());
      assertEquals((-1), timePeriodValues.getMaxEndIndex());
      assertEquals("Time", timePeriodValues.getDomainDescription());
      assertEquals((-1), timePeriodValues.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues.getMinStartIndex());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMinMiddleIndexReturningZero() throws Throwable  {
      TimePeriodValues timePeriodValues = new TimePeriodValues("`3A*]Ny93K4}~M0Yo~");
      Day arg0 = new Day();
      timePeriodValues.add((TimePeriod) arg0, 0.0);
      int minMiddleIndex = timePeriodValues.getMinMiddleIndex();
      assertEquals(0, timePeriodValues.getMinStartIndex());
      assertEquals(0, minMiddleIndex);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxStartIndexReturningZero() throws Throwable  {
      TimePeriodValues timePeriodValues = new TimePeriodValues("^wCI7", "^wCI7", "^wCI7");
      Millisecond arg0 = new Millisecond();
      timePeriodValues.add((TimePeriod) arg0, (double) 0);
      int maxStartIndex = timePeriodValues.getMaxStartIndex();
      assertEquals(0, timePeriodValues.getMinStartIndex());
      assertEquals(0, timePeriodValues.getMinMiddleIndex());
      assertEquals(0, maxStartIndex);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxMiddleIndexReturningZero() throws Throwable  {
      TimePeriodValues timePeriodValues = new TimePeriodValues("`3A*]Ny93K4}~M0Yo~");
      Day arg0 = new Day();
      timePeriodValues.add((TimePeriod) arg0, 0.0);
      int maxMiddleIndex = timePeriodValues.getMaxMiddleIndex();
      assertEquals(0, timePeriodValues.getMinStartIndex());
      assertEquals(0, maxMiddleIndex);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxEndIndexReturningZero() throws Throwable  {
      TimePeriodValues timePeriodValues = new TimePeriodValues("`3A*]Ny93K4}~M0Yo~");
      Day arg0 = new Day();
      timePeriodValues.add((TimePeriod) arg0, 0.0);
      int maxEndIndex = timePeriodValues.getMaxEndIndex();
      assertEquals(0, timePeriodValues.getMinStartIndex());
      assertEquals(0, timePeriodValues.getMaxMiddleIndex());
      assertEquals(0, maxEndIndex);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetItemCountReturningPositive() throws Throwable  {
      TimePeriodValues timePeriodValues = new TimePeriodValues("5|e'>Q0 ruW'/Nw$]h", "v_SU`2%iwKHj", "^ K ~304:&O.Oa");
      Minute arg0 = new Minute();
      timePeriodValues.add((TimePeriod) arg0, (double) 59);
      timePeriodValues.getItemCount();
      assertEquals(0, timePeriodValues.getMinStartIndex());
      assertEquals(0, timePeriodValues.getMaxStartIndex());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDomainDescriptionReturningNull() throws Throwable  {
      TimePeriodValues timePeriodValues = new TimePeriodValues("'wC~W", (String) null, "?#c%A~\"{r1");
      String domainDescription = timePeriodValues.getDomainDescription();
      assertNull(domainDescription);
      assertEquals((-1), timePeriodValues.getMinEndIndex());
      assertEquals((-1), timePeriodValues.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues.getMaxEndIndex());
      assertEquals((-1), timePeriodValues.getMaxStartIndex());
      assertEquals("?#c%A~\"{r1", timePeriodValues.getRangeDescription());
      assertEquals((-1), timePeriodValues.getMinStartIndex());
      assertEquals((-1), timePeriodValues.getMaxMiddleIndex());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDomainDescriptionReturningNonEmptyString() throws Throwable  {
      TimePeriodValues timePeriodValues = new TimePeriodValues("8\"9`[{_hk");
      String domainDescription = timePeriodValues.getDomainDescription();
      assertEquals((-1), timePeriodValues.getMaxEndIndex());
      assertEquals("Time", domainDescription);
      assertEquals("Value", timePeriodValues.getRangeDescription());
      assertEquals((-1), timePeriodValues.getMinStartIndex());
      assertEquals((-1), timePeriodValues.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues.getMinEndIndex());
      assertEquals((-1), timePeriodValues.getMaxStartIndex());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDataItem() throws Throwable  {
      TimePeriodValues timePeriodValues = new TimePeriodValues("`3A*]Ny93K4}~M0Yo~");
      Day arg0 = new Day();
      timePeriodValues.add((TimePeriod) arg0, 0.0);
      timePeriodValues.getDataItem(0);
      assertEquals(0, timePeriodValues.getMinStartIndex());
      assertEquals(0, timePeriodValues.getMinMiddleIndex());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateCopyReturningTimePeriodValuesWhereGetNotifyIsFalse() throws Throwable  {
      TimePeriodValues timePeriodValues = new TimePeriodValues("`3A*]Ny93K4}~M0Yo~");
      timePeriodValues.setNotify(false);
      TimePeriodValues createCopy = timePeriodValues.createCopy((-3066), 2427);
      assertNotSame(createCopy, timePeriodValues);
      assertEquals("Value", createCopy.getRangeDescription());
      assertEquals("Time", createCopy.getDomainDescription());
      assertEquals((-1), createCopy.getMinMiddleIndex());
      assertEquals((-1), createCopy.getMaxEndIndex());
      assertEquals((-1), createCopy.getMaxStartIndex());
      assertEquals((-1), createCopy.getMinStartIndex());
      assertEquals((-1), createCopy.getMinEndIndex());
      assertEquals((-1), createCopy.getMaxMiddleIndex());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashCode0() throws Throwable  {
      TimePeriodValues timePeriodValues = new TimePeriodValues("8\"9`[{_hk", "8\"9`[{_hk", (String) null);
      timePeriodValues.hashCode();
      assertEquals((-1), timePeriodValues.getMinStartIndex());
      assertEquals((-1), timePeriodValues.getMinMiddleIndex());
      assertEquals("8\"9`[{_hk", timePeriodValues.getDomainDescription());
      assertEquals((-1), timePeriodValues.getMinEndIndex());
      assertEquals((-1), timePeriodValues.getMaxStartIndex());
      assertEquals((-1), timePeriodValues.getMaxEndIndex());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashCode1() throws Throwable  {
      TimePeriodValues timePeriodValues = new TimePeriodValues("gb/%/<.hash9", (String) null, "1/H(>\"");
      timePeriodValues.hashCode();
      assertEquals((-1), timePeriodValues.getMaxEndIndex());
      assertEquals((-1), timePeriodValues.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues.getMaxStartIndex());
      assertEquals("1/H(>\"", timePeriodValues.getRangeDescription());
      assertEquals((-1), timePeriodValues.getMinStartIndex());
      assertEquals((-1), timePeriodValues.getMaxMiddleIndex());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTimePeriodValuesTakingStringAndCallsEquals0() throws Throwable  {
      TimePeriodValues timePeriodValues = new TimePeriodValues("e");
      TimePeriodValues arg0 = new TimePeriodValues("e", "e", "e");
      boolean equals = timePeriodValues.equals(arg0);
      assertEquals("Value", timePeriodValues.getRangeDescription());
      assertEquals("e", arg0.getRangeDescription());
      assertEquals("Time", timePeriodValues.getDomainDescription());
      assertEquals((-1), arg0.getMinMiddleIndex());
      assertEquals((-1), arg0.getMinStartIndex());
      assertEquals((-1), arg0.getMaxStartIndex());
      assertEquals((-1), arg0.getMaxEndIndex());
      assertEquals((-1), arg0.getMaxMiddleIndex());
      assertEquals("e", arg0.getDomainDescription());
      assertEquals((-1), arg0.getMinEndIndex());
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTimePeriodValuesTakingStringAndCallsEquals1() throws Throwable  {
      TimePeriodValues timePeriodValues = new TimePeriodValues("e");
      TimePeriodValues arg0 = new TimePeriodValues("~/k`hx_zbrvNmR~U", "e", "~/k`hx_zbrvNmR~U");
      boolean equals = timePeriodValues.equals(arg0);
      assertEquals((-1), arg0.getMaxStartIndex());
      assertEquals((-1), arg0.getMaxEndIndex());
      assertEquals("e", arg0.getDomainDescription());
      assertEquals((-1), arg0.getMinEndIndex());
      assertEquals("Value", timePeriodValues.getRangeDescription());
      assertEquals((-1), arg0.getMaxMiddleIndex());
      assertEquals((-1), arg0.getMinStartIndex());
      assertFalse(equals);
      assertEquals("~/k`hx_zbrvNmR~U", arg0.getRangeDescription());
      assertEquals((-1), arg0.getMinMiddleIndex());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEquals0() throws Throwable  {
      TimePeriodValues timePeriodValues = new TimePeriodValues("2_[DH}=Ww3ZmuUyO72", "2_[DH}=Ww3ZmuUyO72", "2_[DH}=Ww3ZmuUyO72");
      TimePeriodValues arg0 = new TimePeriodValues("2_[DH}=Ww3ZmuUyO72", "2_[DH}=Ww3ZmuUyO72", "");
      boolean equals = timePeriodValues.equals(arg0);
      assertEquals((-1), arg0.getMaxMiddleIndex());
      assertFalse(equals);
      assertEquals((-1), arg0.getMinMiddleIndex());
      assertEquals("2_[DH}=Ww3ZmuUyO72", arg0.getDomainDescription());
      assertEquals((-1), arg0.getMinStartIndex());
      assertEquals((-1), arg0.getMinEndIndex());
      assertEquals((-1), arg0.getMaxEndIndex());
      assertEquals((-1), arg0.getMaxStartIndex());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningTrue() throws Throwable  {
      TimePeriodValues arg0 = new TimePeriodValues("'wC~W");
      boolean equals = arg0.equals(arg0);
      assertEquals("Value", arg0.getRangeDescription());
      assertEquals((-1), arg0.getMinEndIndex());
      assertEquals((-1), arg0.getMaxMiddleIndex());
      assertEquals((-1), arg0.getMinStartIndex());
      assertEquals((-1), arg0.getMinMiddleIndex());
      assertEquals("Time", arg0.getDomainDescription());
      assertEquals((-1), arg0.getMaxEndIndex());
      assertEquals((-1), arg0.getMaxStartIndex());
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEquals1() throws Throwable  {
      TimePeriodValues timePeriodValues = new TimePeriodValues("5|e'>Q0 ruW'/Nw$]h", "v_SU`2%iwKHj", "^ K ~304:&O.Oa");
      boolean equals = timePeriodValues.equals("v_SU`2%iwKHj");
      assertEquals("^ K ~304:&O.Oa", timePeriodValues.getRangeDescription());
      assertEquals((-1), timePeriodValues.getMaxMiddleIndex());
      assertFalse(equals);
      assertEquals((-1), timePeriodValues.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues.getMinStartIndex());
      assertEquals((-1), timePeriodValues.getMinEndIndex());
      assertEquals("v_SU`2%iwKHj", timePeriodValues.getDomainDescription());
      assertEquals((-1), timePeriodValues.getMaxEndIndex());
      assertEquals((-1), timePeriodValues.getMaxStartIndex());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDeleteThrowsIndexOutOfBoundsException() throws Throwable  {
      TimePeriodValues timePeriodValues = new TimePeriodValues("au", "au", "au");
      // Undeclared exception!
      try { 
        timePeriodValues.delete(181, 181);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 181, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDelete() throws Throwable  {
      TimePeriodValues timePeriodValues = new TimePeriodValues("'wC~W");
      Millisecond arg0 = new Millisecond();
      timePeriodValues.add((TimePeriod) arg0, (double) 0);
      timePeriodValues.delete(0, (-523));
      assertEquals(1, timePeriodValues.getItemCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddTakingTimePeriodValueThrowsIllegalArgumentException() throws Throwable  {
      TimePeriodValues timePeriodValues = new TimePeriodValues("Time");
      // Undeclared exception!
      try { 
        timePeriodValues.add((TimePeriodValue) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null item not allowed.
         //
         verifyException("org.jfree.data.time.TimePeriodValues", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMinMiddleIndexReturningNegative() throws Throwable  {
      TimePeriodValues timePeriodValues = new TimePeriodValues("`3A*]Ny93K4}~M0Yo~");
      int minMiddleIndex = timePeriodValues.getMinMiddleIndex();
      assertEquals((-1), minMiddleIndex);
      assertEquals((-1), timePeriodValues.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues.getMinEndIndex());
      assertEquals("Time", timePeriodValues.getDomainDescription());
      assertEquals((-1), timePeriodValues.getMaxStartIndex());
      assertEquals((-1), timePeriodValues.getMaxEndIndex());
      assertEquals("Value", timePeriodValues.getRangeDescription());
      assertEquals((-1), timePeriodValues.getMinStartIndex());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxEndIndexReturningNegative() throws Throwable  {
      TimePeriodValues timePeriodValues = new TimePeriodValues("Ap@dsqe", "Ap@dsqe", "Ap@dsqe");
      int maxEndIndex = timePeriodValues.getMaxEndIndex();
      assertEquals((-1), timePeriodValues.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues.getMaxStartIndex());
      assertEquals((-1), timePeriodValues.getMinStartIndex());
      assertEquals("Ap@dsqe", timePeriodValues.getDomainDescription());
      assertEquals((-1), maxEndIndex);
      assertEquals("Ap@dsqe", timePeriodValues.getRangeDescription());
      assertEquals((-1), timePeriodValues.getMinEndIndex());
      assertEquals((-1), timePeriodValues.getMaxMiddleIndex());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMinStartIndexReturningNegative() throws Throwable  {
      TimePeriodValues timePeriodValues = new TimePeriodValues("", "", "");
      int minStartIndex = timePeriodValues.getMinStartIndex();
      assertEquals((-1), timePeriodValues.getMinEndIndex());
      assertEquals((-1), minStartIndex);
      assertEquals((-1), timePeriodValues.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues.getMaxEndIndex());
      assertEquals("", timePeriodValues.getRangeDescription());
      assertEquals("", timePeriodValues.getDomainDescription());
      assertEquals((-1), timePeriodValues.getMaxStartIndex());
      assertEquals((-1), timePeriodValues.getMinMiddleIndex());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxStartIndexReturningNegative() throws Throwable  {
      TimePeriodValues timePeriodValues = new TimePeriodValues("'wC~W");
      int maxStartIndex = timePeriodValues.getMaxStartIndex();
      assertEquals("Time", timePeriodValues.getDomainDescription());
      assertEquals((-1), timePeriodValues.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues.getMaxEndIndex());
      assertEquals((-1), maxStartIndex);
      assertEquals("Value", timePeriodValues.getRangeDescription());
      assertEquals((-1), timePeriodValues.getMinStartIndex());
      assertEquals((-1), timePeriodValues.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues.getMinEndIndex());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMinEndIndex() throws Throwable  {
      TimePeriodValues timePeriodValues = new TimePeriodValues("'wC~W", "'wC~W", "'wC~W");
      int minEndIndex = timePeriodValues.getMinEndIndex();
      assertEquals("'wC~W", timePeriodValues.getDomainDescription());
      assertEquals("'wC~W", timePeriodValues.getRangeDescription());
      assertEquals((-1), minEndIndex);
      assertEquals((-1), timePeriodValues.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues.getMinStartIndex());
      assertEquals((-1), timePeriodValues.getMaxEndIndex());
      assertEquals((-1), timePeriodValues.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues.getMaxStartIndex());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDomainDescriptionReturningEmptyString() throws Throwable  {
      TimePeriodValues timePeriodValues = new TimePeriodValues("", "", "");
      String domainDescription = timePeriodValues.getDomainDescription();
      assertEquals((-1), timePeriodValues.getMinStartIndex());
      assertEquals((-1), timePeriodValues.getMinMiddleIndex());
      assertEquals("", timePeriodValues.getRangeDescription());
      assertEquals((-1), timePeriodValues.getMaxStartIndex());
      assertEquals((-1), timePeriodValues.getMinEndIndex());
      assertEquals("", domainDescription);
      assertEquals((-1), timePeriodValues.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues.getMaxEndIndex());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMinStartIndexReturningZero() throws Throwable  {
      TimePeriodValues timePeriodValues = new TimePeriodValues("}0]XI^2_+");
      Year arg0 = new Year();
      timePeriodValues.add((TimePeriod) arg0, (Number) null);
      int minStartIndex = timePeriodValues.getMinStartIndex();
      assertEquals(0, timePeriodValues.getMinEndIndex());
      assertEquals(0, timePeriodValues.getMaxEndIndex());
      assertEquals(0, minStartIndex);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetItemCountReturningZero() throws Throwable  {
      TimePeriodValues timePeriodValues = new TimePeriodValues("5|e'>Q0 ruW'/Nw$]h", "v_SU`2%iwKHj", "^ K ~304:&O.Oa");
      timePeriodValues.getItemCount();
      assertEquals((-1), timePeriodValues.getMaxEndIndex());
      assertEquals((-1), timePeriodValues.getMaxStartIndex());
      assertEquals("^ K ~304:&O.Oa", timePeriodValues.getRangeDescription());
      assertEquals((-1), timePeriodValues.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues.getMinStartIndex());
      assertEquals("v_SU`2%iwKHj", timePeriodValues.getDomainDescription());
      assertEquals((-1), timePeriodValues.getMinEndIndex());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateCopyReturningTimePeriodValuesWhereGetNotifyIsTrue() throws Throwable  {
      TimePeriodValues timePeriodValues = new TimePeriodValues("");
      Day arg0 = new Day();
      timePeriodValues.add((TimePeriod) arg0, (double) 1392409281320L);
      timePeriodValues.createCopy(0, 0);
      assertEquals(1, timePeriodValues.getItemCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetRangeDescription() throws Throwable  {
      TimePeriodValues timePeriodValues = new TimePeriodValues("@I&A\"Wuy!9iJig[");
      assertEquals("Value", timePeriodValues.getRangeDescription());
      
      timePeriodValues.setRangeDescription("@I&A\"Wuy!9iJig[");
      assertEquals("@I&A\"Wuy!9iJig[", timePeriodValues.getRangeDescription());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDomainDescription() throws Throwable  {
      TimePeriodValues timePeriodValues = new TimePeriodValues("");
      assertEquals("Time", timePeriodValues.getDomainDescription());
      
      timePeriodValues.setDomainDescription("");
      assertEquals("", timePeriodValues.getDomainDescription());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRangeDescriptionReturningEmptyString() throws Throwable  {
      TimePeriodValues timePeriodValues = new TimePeriodValues("", "", "");
      String rangeDescription = timePeriodValues.getRangeDescription();
      assertEquals("", rangeDescription);
      assertEquals((-1), timePeriodValues.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues.getMinEndIndex());
      assertEquals((-1), timePeriodValues.getMaxStartIndex());
      assertEquals((-1), timePeriodValues.getMaxEndIndex());
      assertEquals("", timePeriodValues.getDomainDescription());
      assertEquals((-1), timePeriodValues.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues.getMinStartIndex());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxMiddleIndexReturningNegative() throws Throwable  {
      TimePeriodValues timePeriodValues = new TimePeriodValues("lus.lngth", "lus.lngth", "lus.lngth");
      int maxMiddleIndex = timePeriodValues.getMaxMiddleIndex();
      assertEquals("lus.lngth", timePeriodValues.getRangeDescription());
      assertEquals("lus.lngth", timePeriodValues.getDomainDescription());
      assertEquals((-1), maxMiddleIndex);
      assertEquals((-1), timePeriodValues.getMinStartIndex());
      assertEquals((-1), timePeriodValues.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues.getMinEndIndex());
      assertEquals((-1), timePeriodValues.getMaxStartIndex());
      assertEquals((-1), timePeriodValues.getMaxEndIndex());
  }
}
