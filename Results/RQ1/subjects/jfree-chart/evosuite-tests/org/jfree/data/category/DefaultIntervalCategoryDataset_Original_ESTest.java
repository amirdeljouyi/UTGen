/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 19 20:07:45 GMT 2024
 */

package org.jfree.data.category;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.time.chrono.ChronoLocalDate;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Minute;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultIntervalCategoryDataset_Original_ESTest extends DefaultIntervalCategoryDataset_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSeriesIndexReturningPositive() throws Throwable  {
      double[][] arg1 = new double[6][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1);
      Comparable arg0 = defaultIntervalCategoryDataset.getRowKey(1);
      assertEquals("Series 2", arg0);
      
      int seriesIndex = defaultIntervalCategoryDataset.getSeriesIndex(arg0);
      assertEquals(6, defaultIntervalCategoryDataset.getRowCount());
      assertEquals(1, seriesIndex);
      assertEquals(8, defaultIntervalCategoryDataset.getItemCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSeriesIndexReturningNegative() throws Throwable  {
      Number[][] arg1 = new Number[4][7];
      Minute arg0 = new Minute();
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1);
      defaultIntervalCategoryDataset.getSeriesIndex(arg0);
      assertEquals(7, defaultIntervalCategoryDataset.getItemCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRowIndexReturningNegative() throws Throwable  {
      Number[][] arg1 = new Number[8][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1);
      Hour arg0 = new Hour();
      defaultIntervalCategoryDataset.getRowIndex(arg0);
      assertEquals(7, defaultIntervalCategoryDataset.getItemCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetItemCountReturningZero() throws Throwable  {
      Number[][] arg1 = new Number[1][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1);
      int itemCount = defaultIntervalCategoryDataset.getItemCount();
      assertEquals(0, itemCount);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRowCountReturningPositive() throws Throwable  {
      double[][] arg1 = new double[7][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1);
      int rowCount = defaultIntervalCategoryDataset.getRowCount();
      assertEquals(6, defaultIntervalCategoryDataset.getItemCount());
      assertEquals(7, rowCount);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetEndValueTaking2Ints() throws Throwable  {
      Number[][] arg1 = new Number[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1);
      defaultIntervalCategoryDataset.getEndValue(0, 0);
      assertEquals(7, defaultIntervalCategoryDataset.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset.getItemCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetEndValueTaking2IntsWithNegative() throws Throwable  {
      double[][] arg1 = new double[7][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1);
      // Undeclared exception!
      try { 
        defaultIntervalCategoryDataset.getEndValue((-5), 1926);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStartValueWithNegativeAndNegative() throws Throwable  {
      Number[][] arg1 = new Number[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1);
      // Undeclared exception!
      try { 
        defaultIntervalCategoryDataset.getStartValue((-863), (-863));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetColumnKeysReturningListWhereIsEmptyIsTrueAndListWhereSizeIsZero() throws Throwable  {
      Number[][] arg1 = new Number[0][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1);
      List columnKeys = defaultIntervalCategoryDataset.getColumnKeys();
      assertTrue(columnKeys.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetColumnKeys() throws Throwable  {
      Number[][] arg1 = new Number[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1);
      List columnKeys = defaultIntervalCategoryDataset.getColumnKeys();
      assertEquals(7, columnKeys.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSeries() throws Throwable  {
      double[][] arg1 = new double[2][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1);
      List series = defaultIntervalCategoryDataset.getSeries();
      assertEquals(2, series.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCategoryCountReturningPositive() throws Throwable  {
      Number[][] arg1 = new Number[6][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1);
      int categoryCount = defaultIntervalCategoryDataset.getCategoryCount();
      assertEquals(7, defaultIntervalCategoryDataset.getItemCount());
      assertEquals(7, categoryCount);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSeriesCountReturningZero() throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      int seriesCount = defaultIntervalCategoryDataset.getSeriesCount();
      assertEquals(0, seriesCount);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSeriesCountReturningPositive() throws Throwable  {
      Number[][] arg1 = new Number[6][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1);
      defaultIntervalCategoryDataset.getSeriesCount();
      assertEquals(7, defaultIntervalCategoryDataset.getItemCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetColumnIndexReturningNegative() throws Throwable  {
      Number[][] arg1 = new Number[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1);
      MockDate arg0 = new MockDate();
      defaultIntervalCategoryDataset.getColumnIndex(arg0);
      assertEquals(7, defaultIntervalCategoryDataset.getItemCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSeriesIndexReturningZero() throws Throwable  {
      Number[][] arg1 = new Number[4][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1);
      Comparable arg0 = defaultIntervalCategoryDataset.getRowKey(0);
      assertNotNull(arg0);
      assertEquals("Series 1", arg0);
      
      defaultIntervalCategoryDataset.getSeriesIndex(arg0);
      assertEquals(4, defaultIntervalCategoryDataset.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset.getItemCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRowCountReturningZero() throws Throwable  {
      Comparable<Integer>[] arg1 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1, (Number[][]) null, (Number[][]) null);
      int rowCount = defaultIntervalCategoryDataset.getRowCount();
      assertEquals(0, rowCount);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetColumnCountReturningPositive() throws Throwable  {
      Number[][] arg1 = new Number[11][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1);
      int columnCount = defaultIntervalCategoryDataset.getColumnCount();
      assertEquals(9, columnCount);
      assertEquals(9, defaultIntervalCategoryDataset.getItemCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesDefaultIntervalCategoryDatasetTaking2ArgumentsAndCallsGetColumnCount0() throws Throwable  {
      Number[][] arg1 = new Number[0][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1);
      int columnCount = defaultIntervalCategoryDataset.getColumnCount();
      assertEquals(0, columnCount);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesDefaultIntervalCategoryDatasetTaking2ArgumentsAndCallsGetColumnCount1() throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      int columnCount = defaultIntervalCategoryDataset.getColumnCount();
      assertEquals(0, columnCount);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRowKeyWithNegative() throws Throwable  {
      double[][] arg1 = new double[7][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1);
      // Undeclared exception!
      try { 
        defaultIntervalCategoryDataset.getRowKey((-137));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'row' argument is out of bounds.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRowKeyThrowsIllegalArgumentException() throws Throwable  {
      Number[][] arg1 = new Number[6][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1);
      // Undeclared exception!
      try { 
        defaultIntervalCategoryDataset.getRowKey(6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'row' argument is out of bounds.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRowKeysReturningListWhereIsEmptyIsTrueAndListWhereSizeIsZero() throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      List rowKeys = defaultIntervalCategoryDataset.getRowKeys();
      assertTrue(rowKeys.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRowKeys() throws Throwable  {
      double[][] arg1 = new double[5][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1);
      List rowKeys = defaultIntervalCategoryDataset.getRowKeys();
      assertEquals(5, rowKeys.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetEndValueTaking2IntsWithPositive() throws Throwable  {
      double[][] arg1 = new double[3][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1);
      // Undeclared exception!
      try { 
        defaultIntervalCategoryDataset.getEndValue(0, 244);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetEndValueTaking2IntsWithPositiveAndNegative() throws Throwable  {
      Number[][] arg1 = new Number[3][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1);
      // Undeclared exception!
      try { 
        defaultIntervalCategoryDataset.getEndValue(1, (-40));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStartValueThrowsIllegalArgumentException0() throws Throwable  {
      Number[][] arg1 = new Number[9][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1);
      // Undeclared exception!
      try { 
        defaultIntervalCategoryDataset.getStartValue(7, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStartValue() throws Throwable  {
      Number[][] arg1 = new Number[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1);
      defaultIntervalCategoryDataset.getStartValue(0, 0);
      assertEquals(7, defaultIntervalCategoryDataset.getItemCount());
      assertEquals(7, defaultIntervalCategoryDataset.getCategoryCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStartValueThrowsIllegalArgumentException1() throws Throwable  {
      Number[][] arg1 = new Number[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1);
      // Undeclared exception!
      try { 
        defaultIntervalCategoryDataset.getStartValue(496, 496);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStartValueWithNegativeAndPositive() throws Throwable  {
      Number[][] arg1 = new Number[10][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1);
      // Undeclared exception!
      try { 
        defaultIntervalCategoryDataset.getStartValue(6, (-3643));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesDefaultIntervalCategoryDatasetTaking2ArgumentsAndSetCategoryKeysThrowsIllegalArgumentException() throws Throwable  {
      String[] arg0 = new String[2];
      double[][] arg1 = new double[2][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1);
      // Undeclared exception!
      try { 
        defaultIntervalCategoryDataset.setCategoryKeys(arg0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of categories does not match the data.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetCategoryKeysWithNull() throws Throwable  {
      Number[][] arg3 = new Number[6][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, arg3, arg3);
      // Undeclared exception!
      try { 
        defaultIntervalCategoryDataset.setCategoryKeys((Comparable[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'categoryKeys' argument.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetCategoryKeysThrowsIllegalArgumentException() throws Throwable  {
      Number[][] arg1 = new Number[5][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1);
      Comparable<Integer>[] arg0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 7);
      // Undeclared exception!
      try { 
        defaultIntervalCategoryDataset.setCategoryKeys(arg0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.setCategoryKeys(): null category not permitted.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCategories() throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      List categories = defaultIntervalCategoryDataset.getCategories();
      assertEquals(0, categories.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSeriesReturningListWhereIsEmptyIsTrueAndListWhereSizeIsZero() throws Throwable  {
      Number[][] arg1 = new Number[0][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1);
      List series = defaultIntervalCategoryDataset.getSeries();
      assertEquals(0, series.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesDefaultIntervalCategoryDatasetTaking2ArgumentsAndCallsGetCategoryCount0() throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      int categoryCount = defaultIntervalCategoryDataset.getCategoryCount();
      assertEquals(0, categoryCount);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSeriesKeys() throws Throwable  {
      String[] arg0 = new String[2];
      double[][] arg1 = new double[2][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1);
      assertEquals(2, defaultIntervalCategoryDataset.getSeriesCount());
      
      defaultIntervalCategoryDataset.setSeriesKeys(arg0);
      defaultIntervalCategoryDataset.getSeriesKey(0);
      assertEquals(3, defaultIntervalCategoryDataset.getItemCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSeriesKeysWithNull() throws Throwable  {
      Number[][] arg1 = new Number[15][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1);
      // Undeclared exception!
      try { 
        defaultIntervalCategoryDataset.setSeriesKeys((Comparable[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKeys' argument.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSeriesKeysWithEmptyArray() throws Throwable  {
      Number[][] arg1 = new Number[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1);
      Comparable<Object>[] arg0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 0);
      // Undeclared exception!
      try { 
        defaultIntervalCategoryDataset.setSeriesKeys(arg0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.setSeriesKeys(): the number of series keys does not match the data.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSeriesKeyWithNegative() throws Throwable  {
      double[][] arg1 = new double[5][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1);
      // Undeclared exception!
      try { 
        defaultIntervalCategoryDataset.getSeriesKey((-2402));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such series : -2402
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSeriesKeyWithPositive() throws Throwable  {
      Number[][] arg1 = new Number[8][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1);
      // Undeclared exception!
      try { 
        defaultIntervalCategoryDataset.getSeriesKey(734);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such series : 734
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateDefaultIntervalCategoryDatasetTaking4ArgumentsThrowsIllegalArgumentException0() throws Throwable  {
      Number[][] arg3 = new Number[6][7];
      Comparable<Integer>[] arg1 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 6);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = null;
      try {
        defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1, arg3, arg3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of category keys does not match the number of categories in the data.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateDefaultIntervalCategoryDatasetTaking2ArgumentsThrowsIllegalArgumentException0() throws Throwable  {
      Number[][] arg0 = new Number[1][7];
      Number[][] arg1 = new Number[1][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = null;
      try {
        defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg0, arg1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset: the number of categories in the start value dataset does not match the number of categories in the end value dataset.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateDefaultIntervalCategoryDatasetTaking4ArgumentsThrowsIllegalArgumentException1() throws Throwable  {
      Number[][] arg3 = new Number[9][7];
      Comparable<ChronoLocalDate>[] arg1 = (Comparable<ChronoLocalDate>[]) Array.newInstance(Comparable.class, 0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = null;
      try {
        defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1, arg3, arg3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of series keys does not match the number of series in the data.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesDefaultIntervalCategoryDatasetTaking2ArgumentsAndCallsGetCategoryCount1() throws Throwable  {
      Number[][] arg1 = new Number[0][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1);
      int categoryCount = defaultIntervalCategoryDataset.getCategoryCount();
      assertEquals(0, defaultIntervalCategoryDataset.getSeriesCount());
      assertEquals(0, categoryCount);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateDefaultIntervalCategoryDatasetTaking2ArgumentsThrowsIllegalArgumentException1() throws Throwable  {
      Number[][] arg0 = new Number[1][7];
      Number[][] arg1 = new Number[0][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = null;
      try {
        defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg0, arg1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset: the number of series in the start value dataset does not match the number of series in the end value dataset.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesDefaultIntervalCategoryDatasetTaking2ArgumentsAndCreatesDefaultIntervalCategoryDatasetTaking2Arguments() throws Throwable  {
      Number[][] arg0 = new Number[7][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg0, (Number[][]) null);
      assertEquals(7, defaultIntervalCategoryDataset.getSeriesCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetEndValueTaking2IntsWithZero() throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        defaultIntervalCategoryDataset.getEndValue(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSeriesKeyReturningNonNull() throws Throwable  {
      double[][] arg1 = new double[2][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1);
      Comparable seriesKey = defaultIntervalCategoryDataset.getSeriesKey(0);
      assertEquals(2, defaultIntervalCategoryDataset.getSeriesCount());
      assertNotNull(seriesKey);
      assertEquals("Series 1", seriesKey);
      assertEquals(3, defaultIntervalCategoryDataset.getItemCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetColumnKey() throws Throwable  {
      Number[][] arg1 = new Number[6][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1);
      Comparable arg0 = defaultIntervalCategoryDataset.getColumnKey(6);
      assertEquals("Category 7", arg0);
      
      int columnIndex = defaultIntervalCategoryDataset.getColumnIndex(arg0);
      assertEquals(6, columnIndex);
      assertEquals(7, defaultIntervalCategoryDataset.getItemCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetItemCountReturningPositive() throws Throwable  {
      Number[][] arg1 = new Number[17][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1);
      int itemCount = defaultIntervalCategoryDataset.getItemCount();
      assertEquals(7, itemCount);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRowIndexReturningZero() throws Throwable  {
      Number[][] arg1 = new Number[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1);
      Comparable arg0 = defaultIntervalCategoryDataset.getRowKey(0);
      assertEquals("Series 1", arg0);
      assertNotNull(arg0);
      
      defaultIntervalCategoryDataset.getRowIndex(arg0);
      assertEquals(1, defaultIntervalCategoryDataset.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset.getItemCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValueTaking2Comparables() throws Throwable  {
      Number[][] arg3 = new Number[7][7];
      Comparable<Object>[] arg1 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 7);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1, arg3, arg3);
      defaultIntervalCategoryDataset.getValue(arg1[0], arg1[5]);
      assertEquals(7, defaultIntervalCategoryDataset.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset.getCategoryCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesDefaultIntervalCategoryDatasetTaking3Arguments() throws Throwable  {
      Number[][] arg2 = new Number[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset((String[]) null, arg2, arg2);
      assertEquals(7, defaultIntervalCategoryDataset.getItemCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetEndValueTaking2ComparablesThrowsIllegalArgumentException() throws Throwable  {
      Number[][] arg1 = new Number[6][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1);
      // Undeclared exception!
      try { 
        defaultIntervalCategoryDataset.getEndValue((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValueTaking2Ints() throws Throwable  {
      Number[][] arg1 = new Number[6][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset = new DefaultIntervalCategoryDataset(arg1, arg1);
      defaultIntervalCategoryDataset.getValue(1, 1);
      assertEquals(6, defaultIntervalCategoryDataset.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset.getItemCount());
      assertEquals(7, defaultIntervalCategoryDataset.getCategoryCount());
  }
}
