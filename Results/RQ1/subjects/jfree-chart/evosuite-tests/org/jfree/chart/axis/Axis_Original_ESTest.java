/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 20 04:43:26 GMT 2024
 */

package org.jfree.chart.axis;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.event.AxisChangeListener;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.title.Title;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.ui.RectangleEdge;
import org.jfree.ui.RectangleInsets;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Axis_Original_ESTest extends Axis_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddChangeListener() throws Throwable  {
      CategoryAxis3D categoryAxis3D = new CategoryAxis3D();
      categoryAxis3D.addChangeListener((AxisChangeListener) null);
      assertFalse(categoryAxis3D.isTickMarksVisible());
      assertEquals(0.0, categoryAxis3D.getLabelAngle(), 0.01);
      assertTrue(categoryAxis3D.isVisible());
      assertEquals(2.0F, categoryAxis3D.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D.isTickLabelsVisible());
      assertTrue(categoryAxis3D.isAxisLineVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsTickMarksVisibleReturningFalse() throws Throwable  {
      SubCategoryAxis subCategoryAxis = new SubCategoryAxis((String) null);
      boolean tickMarksVisible = subCategoryAxis.isTickMarksVisible();
      assertEquals(0.0F, subCategoryAxis.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, subCategoryAxis.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis.isTickLabelsVisible());
      assertTrue(subCategoryAxis.isVisible());
      assertTrue(subCategoryAxis.isAxisLineVisible());
      assertFalse(tickMarksVisible);
      assertEquals(0.0, subCategoryAxis.getLabelAngle(), 0.01);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsAxisLineVisibleReturningFalse() throws Throwable  {
      NumberAxis3D numberAxis3D = new NumberAxis3D();
      boolean axisLineVisible = numberAxis3D.isAxisLineVisible();
      assertEquals(0.0, numberAxis3D.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D.isTickMarksVisible());
      assertTrue(numberAxis3D.isVisible());
      assertEquals(2.0F, numberAxis3D.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis3D.getTickMarkInsideLength(), 0.01F);
      assertFalse(axisLineVisible);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPlotReturningNull() throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis = new CyclicNumberAxis(230.18720882119, (-1490.203147732349), "e<\"\"f#zgkf");
      cyclicNumberAxis.getPlot();
      assertTrue(cyclicNumberAxis.isTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis.isAxisLineVisible());
      assertTrue(cyclicNumberAxis.isVisible());
      assertEquals(0.0, cyclicNumberAxis.getLabelAngle(), 0.01);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLabelReturningNull() throws Throwable  {
      NumberAxis3D numberAxis3D = new NumberAxis3D();
      numberAxis3D.getLabel();
      assertTrue(numberAxis3D.isTickLabelsVisible());
      assertTrue(numberAxis3D.isVisible());
      assertEquals(2.0F, numberAxis3D.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D.isTickMarksVisible());
      assertFalse(numberAxis3D.isAxisLineVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLabelReturningNonEmptyString() throws Throwable  {
      CategoryAxis3D categoryAxis3D = new CategoryAxis3D("N");
      categoryAxis3D.getLabel();
      assertFalse(categoryAxis3D.isTickMarksVisible());
      assertEquals(0.0, categoryAxis3D.getLabelAngle(), 0.01);
      assertTrue(categoryAxis3D.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis3D.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D.isTickLabelsVisible());
      assertTrue(categoryAxis3D.isVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningTrue() throws Throwable  {
      CategoryAxis3D arg0 = new CategoryAxis3D();
      arg0.equals(arg0);
      assertTrue(arg0.isTickLabelsVisible());
      assertTrue(arg0.isVisible());
      assertEquals(0.0, arg0.getLabelAngle(), 0.01);
      assertEquals(0.0F, arg0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, arg0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(arg0.isTickMarksVisible());
      assertTrue(arg0.isAxisLineVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetFixedDimension() throws Throwable  {
      CategoryAxis3D arg0 = new CategoryAxis3D();
      CategoryAxis3D categoryAxis3D = new CategoryAxis3D();
      categoryAxis3D.setFixedDimension(0.05);
      boolean equals = categoryAxis3D.equals(arg0);
      assertEquals(0.05, categoryAxis3D.getFixedDimension(), 0.01);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetTickMarkOutsideLengthWithPositive() throws Throwable  {
      CategoryAxis3D arg0 = new CategoryAxis3D();
      CategoryAxis3D categoryAxis3D = new CategoryAxis3D();
      categoryAxis3D.setTickMarkOutsideLength(760.432F);
      boolean equals = categoryAxis3D.equals(arg0);
      assertEquals(760.432F, categoryAxis3D.getTickMarkOutsideLength(), 0.01F);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetTickMarkInsideLength() throws Throwable  {
      CategoryAxis3D arg0 = new CategoryAxis3D();
      CategoryAxis3D categoryAxis3D = new CategoryAxis3D();
      categoryAxis3D.setTickMarkInsideLength(2.0F);
      boolean equals = categoryAxis3D.equals(arg0);
      assertEquals(2.0F, categoryAxis3D.getTickMarkInsideLength(), 0.01F);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetTickMarksVisibleWithTrue() throws Throwable  {
      CategoryAxis3D arg0 = new CategoryAxis3D();
      CategoryAxis3D categoryAxis3D = new CategoryAxis3D();
      assertFalse(categoryAxis3D.isTickMarksVisible());
      
      categoryAxis3D.setTickMarksVisible(true);
      boolean equals = categoryAxis3D.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetTickLabelInsets() throws Throwable  {
      CategoryAxis3D arg0 = new CategoryAxis3D();
      CategoryAxis3D categoryAxis3D = new CategoryAxis3D();
      assertTrue(categoryAxis3D.equals((Object)arg0));
      
      categoryAxis3D.setTickLabelInsets(arg0.DEFAULT_AXIS_LABEL_INSETS);
      boolean equals = categoryAxis3D.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetTickLabelPaint() throws Throwable  {
      CategoryAxis3D arg0 = new CategoryAxis3D();
      CategoryAxis3D categoryAxis3D = new CategoryAxis3D();
      assertTrue(categoryAxis3D.equals((Object)arg0));
      
      categoryAxis3D.setTickLabelPaint(arg0.DEFAULT_TICK_MARK_PAINT);
      boolean equals = categoryAxis3D.equals(arg0);
      assertFalse(categoryAxis3D.equals((Object)arg0));
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetTickLabelFont() throws Throwable  {
      CategoryAxis3D categoryAxis3D = new CategoryAxis3D();
      CategoryAxis3D arg0 = new CategoryAxis3D();
      assertTrue(arg0.equals((Object)categoryAxis3D));
      
      arg0.setTickLabelFont(categoryAxis3D.DEFAULT_AXIS_LABEL_FONT);
      boolean equals = categoryAxis3D.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetAxisLinePaint() throws Throwable  {
      CategoryAxis3D categoryAxis3D = new CategoryAxis3D();
      CategoryAxis3D arg0 = new CategoryAxis3D();
      assertTrue(arg0.equals((Object)categoryAxis3D));
      
      categoryAxis3D.setAxisLinePaint(arg0.DEFAULT_TICK_LABEL_PAINT);
      boolean equals = categoryAxis3D.equals(arg0);
      assertFalse(arg0.equals((Object)categoryAxis3D));
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetAxisLineVisible() throws Throwable  {
      CategoryAxis3D arg0 = new CategoryAxis3D();
      CategoryAxis3D categoryAxis3D = new CategoryAxis3D();
      categoryAxis3D.setAxisLineVisible(false);
      boolean equals = categoryAxis3D.equals(arg0);
      assertFalse(equals);
      assertFalse(categoryAxis3D.isAxisLineVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetLabelAngle() throws Throwable  {
      CategoryAxis3D arg0 = new CategoryAxis3D();
      CategoryAxis3D categoryAxis3D = new CategoryAxis3D();
      categoryAxis3D.setLabelAngle(0.2);
      boolean equals = categoryAxis3D.equals(arg0);
      assertEquals(0.2, categoryAxis3D.getLabelAngle(), 0.01);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetLabelInsets() throws Throwable  {
      CategoryAxis3D categoryAxis3D = new CategoryAxis3D();
      CategoryAxis3D arg0 = (CategoryAxis3D)categoryAxis3D.clone();
      assertTrue(arg0.equals((Object)categoryAxis3D));
      
      arg0.setLabelInsets(categoryAxis3D.DEFAULT_TICK_LABEL_INSETS);
      boolean equals = categoryAxis3D.equals(arg0);
      assertFalse(arg0.equals((Object)categoryAxis3D));
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetLabelPaint() throws Throwable  {
      CategoryAxis3D categoryAxis3D = new CategoryAxis3D();
      CategoryAxis3D arg0 = (CategoryAxis3D)categoryAxis3D.clone();
      assertTrue(arg0.equals((Object)categoryAxis3D));
      
      arg0.setLabelPaint(categoryAxis3D.DEFAULT_TICK_MARK_PAINT);
      boolean equals = categoryAxis3D.equals(arg0);
      assertFalse(equals);
      assertFalse(arg0.equals((Object)categoryAxis3D));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test0() throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis = new ExtendedCategoryAxis("N");
      CategoryAxis3D arg0 = new CategoryAxis3D("N");
      boolean equals = extendedCategoryAxis.equals(arg0);
      assertEquals(0.0F, arg0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, arg0.getLabelAngle(), 0.01);
      assertEquals(2.0F, arg0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(arg0.isTickMarksVisible());
      assertTrue(arg0.isAxisLineVisible());
      assertTrue(arg0.isTickLabelsVisible());
      assertTrue(equals);
      assertTrue(arg0.isVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEquals() throws Throwable  {
      CategoryAxis3D arg0 = new CategoryAxis3D();
      CategoryAxis3D categoryAxis3D = new CategoryAxis3D("P5fR/\"/i7*~<\u0007+");
      boolean equals = categoryAxis3D.equals(arg0);
      assertEquals(0.0, categoryAxis3D.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis3D.getTickMarkInsideLength(), 0.01F);
      assertFalse(equals);
      assertTrue(categoryAxis3D.isAxisLineVisible());
      assertTrue(categoryAxis3D.isVisible());
      assertFalse(categoryAxis3D.isTickMarksVisible());
      assertTrue(categoryAxis3D.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis3D.getTickMarkOutsideLength(), 0.01F);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test1() throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot = new CombinedDomainCategoryPlot();
      RectangleEdge arg4 = combinedDomainCategoryPlot.getRangeAxisEdge(500);
      ExtendedCategoryAxis extendedCategoryAxis = new ExtendedCategoryAxis("^Z7g$A|");
      ChartRenderingInfo arg0 = new ChartRenderingInfo();
      PlotRenderingInfo arg5 = new PlotRenderingInfo(arg0);
      // Undeclared exception!
      try { 
        extendedCategoryAxis.draw((Graphics2D) null, 1.0E-8, (Rectangle2D) null, (Rectangle2D) null, arg4, arg5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test2() throws Throwable  {
      CombinedDomainCategoryPlot arg2 = new CombinedDomainCategoryPlot();
      PlotOrientation arg0 = PlotOrientation.HORIZONTAL;
      arg2.setOrientation(arg0);
      JFreeChart jFreeChart = new JFreeChart("Null Hlocation' argPment.", arg2.DEFAULT_VALUE_LABEL_FONT, arg2, false);
      BufferedImage createBufferedImage = jFreeChart.createBufferedImage(10, 10);
      assertTrue(createBufferedImage.hasTileWriters());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLabelEnclosure() throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis = new CyclicNumberAxis(2.0F, 2.302585092994046, "Exception while loading module: ");
      RectangleEdge arg1 = Title.DEFAULT_POSITION;
      BufferedImage bufferedImage = new BufferedImage(500, 60, 12);
      Graphics2D arg0 = bufferedImage.createGraphics();
      Rectangle2D.Double labelEnclosure = (Rectangle2D.Double)cyclicNumberAxis.getLabelEnclosure(arg0, arg1);
      assertTrue(cyclicNumberAxis.isAxisLineVisible());
      assertTrue(cyclicNumberAxis.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis.isVisible());
      assertEquals((-14.138671875), labelEnclosure.y, 0.01);
      assertTrue(cyclicNumberAxis.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis.getTickMarkInsideLength(), 0.01F);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHasListener() throws Throwable  {
      LogarithmicAxis logarithmicAxis = new LogarithmicAxis("{OhEN,U!eT?T_n4K%");
      DefaultTableXYDataset arg0 = new DefaultTableXYDataset();
      boolean listener = logarithmicAxis.hasListener(arg0);
      assertTrue(logarithmicAxis.isVisible());
      assertTrue(logarithmicAxis.isTickMarksVisible());
      assertEquals(0.0, logarithmicAxis.getLabelAngle(), 0.01);
      assertFalse(listener);
      assertTrue(logarithmicAxis.isTickLabelsVisible());
      assertTrue(logarithmicAxis.isAxisLineVisible());
      assertEquals(2.0F, logarithmicAxis.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis.getTickMarkInsideLength(), 0.01F);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetTickMarkPaintThrowsIllegalArgumentException() throws Throwable  {
      NumberAxis3D numberAxis3D = new NumberAxis3D();
      // Undeclared exception!
      try { 
        numberAxis3D.setTickMarkPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetTickMarkStrokeThrowsIllegalArgumentException() throws Throwable  {
      CategoryAxis3D categoryAxis3D = new CategoryAxis3D();
      // Undeclared exception!
      try { 
        categoryAxis3D.setTickMarkStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetTickMarkStroke() throws Throwable  {
      CategoryAxis3D categoryAxis3D = new CategoryAxis3D();
      categoryAxis3D.setTickMarkStroke(categoryAxis3D.DEFAULT_TICK_MARK_STROKE);
      assertEquals(2.0F, categoryAxis3D.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D.getLabelAngle(), 0.01);
      assertTrue(categoryAxis3D.isAxisLineVisible());
      assertTrue(categoryAxis3D.isVisible());
      assertFalse(categoryAxis3D.isTickMarksVisible());
      assertTrue(categoryAxis3D.isTickLabelsVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetTickMarksVisibleWithFalse() throws Throwable  {
      CategoryAxis3D categoryAxis3D = new CategoryAxis3D();
      categoryAxis3D.setTickMarksVisible(false);
      assertFalse(categoryAxis3D.isTickMarksVisible());
      assertTrue(categoryAxis3D.isVisible());
      assertTrue(categoryAxis3D.isAxisLineVisible());
      assertEquals(0.0, categoryAxis3D.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis3D.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D.isTickLabelsVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetTickLabelInsetsThrowsIllegalArgumentException() throws Throwable  {
      CategoryAxis3D categoryAxis3D = new CategoryAxis3D();
      // Undeclared exception!
      try { 
        categoryAxis3D.setTickLabelInsets((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetTickLabelPaintThrowsIllegalArgumentException() throws Throwable  {
      LogarithmicAxis logarithmicAxis = new LogarithmicAxis(",");
      // Undeclared exception!
      try { 
        logarithmicAxis.setTickLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetTickLabelFontThrowsIllegalArgumentException() throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis = new CyclicNumberAxis(0.001, 0.001, "k}S\"au4");
      // Undeclared exception!
      try { 
        cyclicNumberAxis.setTickLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetTickLabelFont() throws Throwable  {
      CategoryAxis3D categoryAxis3D = new CategoryAxis3D();
      categoryAxis3D.setTickLabelFont(categoryAxis3D.DEFAULT_TICK_LABEL_FONT);
      assertTrue(categoryAxis3D.isVisible());
      assertEquals(0.0, categoryAxis3D.getLabelAngle(), 0.01);
      assertFalse(categoryAxis3D.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D.isTickLabelsVisible());
      assertTrue(categoryAxis3D.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis3D.getTickMarkOutsideLength(), 0.01F);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetTickLabelsVisibleWithFalse() throws Throwable  {
      CategoryAxis3D arg0 = new CategoryAxis3D();
      arg0.setTickLabelsVisible(false);
      CategoryAxis3D categoryAxis3D = new CategoryAxis3D();
      boolean equals = categoryAxis3D.equals(arg0);
      assertFalse(equals);
      assertFalse(arg0.isTickLabelsVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetTickLabelsVisibleWithTrue() throws Throwable  {
      CategoryAxis3D categoryAxis3D = new CategoryAxis3D();
      assertTrue(categoryAxis3D.isTickLabelsVisible());
      
      categoryAxis3D.setTickLabelsVisible(true);
      assertTrue(categoryAxis3D.isAxisLineVisible());
      assertFalse(categoryAxis3D.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D.getLabelAngle(), 0.01);
      assertTrue(categoryAxis3D.isVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetAxisLineStrokeThrowsIllegalArgumentException() throws Throwable  {
      DateAxis dateAxis = new DateAxis();
      // Undeclared exception!
      try { 
        dateAxis.setAxisLineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetAxisLinePaintThrowsIllegalArgumentException() throws Throwable  {
      CategoryAxis3D categoryAxis3D = new CategoryAxis3D();
      // Undeclared exception!
      try { 
        categoryAxis3D.setAxisLinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetLabelInsetsThrowsIllegalArgumentException() throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis = new CyclicNumberAxis((-1030.554031141433));
      // Undeclared exception!
      try { 
        cyclicNumberAxis.setLabelInsets((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetLabelInsets() throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis = new CyclicNumberAxis(0.0);
      cyclicNumberAxis.setLabelInsets(cyclicNumberAxis.DEFAULT_AXIS_LABEL_INSETS);
      assertEquals(2.0F, cyclicNumberAxis.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis.isVisible());
      assertTrue(cyclicNumberAxis.isTickMarksVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetLabelPaintThrowsIllegalArgumentException() throws Throwable  {
      SubCategoryAxis subCategoryAxis = new SubCategoryAxis("Null 'font' not allowed.");
      // Undeclared exception!
      try { 
        subCategoryAxis.setLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetLabelFontThrowsIllegalArgumentException() throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis = new CyclicNumberAxis(2);
      // Undeclared exception!
      try { 
        cyclicNumberAxis.setLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetLabelFont() throws Throwable  {
      CategoryAxis3D categoryAxis3D = new CategoryAxis3D();
      categoryAxis3D.setLabelFont(categoryAxis3D.DEFAULT_TICK_LABEL_FONT);
      CategoryAxis3D arg0 = new CategoryAxis3D();
      boolean equals = categoryAxis3D.equals(arg0);
      assertFalse(arg0.isTickMarksVisible());
      assertTrue(arg0.isVisible());
      assertTrue(arg0.isAxisLineVisible());
      assertFalse(arg0.equals((Object)categoryAxis3D));
      assertFalse(equals);
      assertEquals(0.0, arg0.getLabelAngle(), 0.01);
      assertEquals(0.0F, arg0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, arg0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(arg0.isTickLabelsVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetLabelAndSetLabelWithNonEmptyString0() throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis = new CyclicNumberAxis((-1019.5247603));
      cyclicNumberAxis.setLabel("dialog");
      assertTrue(cyclicNumberAxis.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis.isAxisLineVisible());
      assertTrue(cyclicNumberAxis.isVisible());
      assertEquals(2.0F, cyclicNumberAxis.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis.isTickMarksVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetLabelAndSetLabelWithNull0() throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis = new CyclicNumberAxis(230.19, "e<\"\"f#zgkf");
      cyclicNumberAxis.setLabel((String) null);
      assertTrue(cyclicNumberAxis.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis.isTickMarksVisible());
      assertTrue(cyclicNumberAxis.isVisible());
      assertEquals(0.0, cyclicNumberAxis.getLabelAngle(), 0.01);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetLabelAndSetLabelWithNonEmptyString1() throws Throwable  {
      CategoryAxis3D categoryAxis3D = new CategoryAxis3D("#@GpyQ/u`S/xV~w");
      categoryAxis3D.setLabel("#@GpyQ/u`S/xV~w");
      assertFalse(categoryAxis3D.isTickMarksVisible());
      assertEquals(0.0, categoryAxis3D.getLabelAngle(), 0.01);
      assertTrue(categoryAxis3D.isVisible());
      assertEquals(2.0F, categoryAxis3D.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D.isAxisLineVisible());
      assertTrue(categoryAxis3D.isTickLabelsVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetLabelAndSetLabelWithNull1() throws Throwable  {
      CategoryAxis3D categoryAxis3D = new CategoryAxis3D();
      categoryAxis3D.setLabel((String) null);
      assertFalse(categoryAxis3D.isTickMarksVisible());
      assertEquals(0.0, categoryAxis3D.getLabelAngle(), 0.01);
      assertTrue(categoryAxis3D.isVisible());
      assertEquals(2.0F, categoryAxis3D.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D.isTickLabelsVisible());
      assertTrue(categoryAxis3D.isAxisLineVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetVisibleWithFalse() throws Throwable  {
      CategoryAxis3D categoryAxis3D = new CategoryAxis3D();
      categoryAxis3D.setVisible(false);
      CategoryAxis3D arg0 = new CategoryAxis3D();
      boolean equals = categoryAxis3D.equals(arg0);
      assertFalse(equals);
      assertFalse(categoryAxis3D.isVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetVisibleWithTrue() throws Throwable  {
      CategoryAxis3D categoryAxis3D = new CategoryAxis3D();
      assertTrue(categoryAxis3D.isVisible());
      
      categoryAxis3D.setVisible(true);
      assertTrue(categoryAxis3D.isTickLabelsVisible());
      assertTrue(categoryAxis3D.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis3D.getTickMarkOutsideLength(), 0.01F);
      assertFalse(categoryAxis3D.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D.getLabelAngle(), 0.01);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLabelReturningEmptyString() throws Throwable  {
      CategoryAxis3D categoryAxis3D = new CategoryAxis3D("");
      categoryAxis3D.getLabel();
      assertEquals(0.0, categoryAxis3D.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis3D.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D.isAxisLineVisible());
      assertTrue(categoryAxis3D.isVisible());
      assertTrue(categoryAxis3D.isTickLabelsVisible());
      assertFalse(categoryAxis3D.isTickMarksVisible());
      assertEquals(2.0F, categoryAxis3D.getTickMarkOutsideLength(), 0.01F);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTickLabelInsets() throws Throwable  {
      CategoryAxis3D categoryAxis3D = new CategoryAxis3D();
      RectangleInsets tickLabelInsets = categoryAxis3D.getTickLabelInsets();
      assertFalse(categoryAxis3D.isTickMarksVisible());
      assertTrue(categoryAxis3D.isVisible());
      assertTrue(categoryAxis3D.isTickLabelsVisible());
      assertTrue(categoryAxis3D.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis3D.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, tickLabelInsets.getTop(), 0.01);
      assertEquals(0.0, categoryAxis3D.getLabelAngle(), 0.01);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTickMarkOutsideLengthReturningPositive() throws Throwable  {
      NumberAxis3D numberAxis3D = new NumberAxis3D();
      float tickMarkOutsideLength = numberAxis3D.getTickMarkOutsideLength();
      assertFalse(numberAxis3D.isAxisLineVisible());
      assertEquals(0.0F, numberAxis3D.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D.isTickLabelsVisible());
      assertEquals(0.0, numberAxis3D.getLabelAngle(), 0.01);
      assertEquals(2.0F, tickMarkOutsideLength, 0.01F);
      assertTrue(numberAxis3D.isVisible());
      assertTrue(numberAxis3D.isTickMarksVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTickMarkOutsideLengthReturningNegative() throws Throwable  {
      NumberAxis3D numberAxis3D = new NumberAxis3D();
      numberAxis3D.setTickMarkOutsideLength((-2.0F));
      float tickMarkOutsideLength = numberAxis3D.getTickMarkOutsideLength();
      assertEquals((-2.0F), tickMarkOutsideLength, 0.01F);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLabelAngle() throws Throwable  {
      CategoryAxis categoryAxis = new CategoryAxis();
      double labelAngle = categoryAxis.getLabelAngle();
      assertEquals(2.0F, categoryAxis.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, labelAngle, 0.01);
      assertTrue(categoryAxis.isVisible());
      assertTrue(categoryAxis.isAxisLineVisible());
      assertFalse(categoryAxis.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis.isTickLabelsVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLabelPaint() throws Throwable  {
      NumberAxis3D numberAxis3D = new NumberAxis3D();
      Color labelPaint = (Color)numberAxis3D.getLabelPaint();
      assertFalse(numberAxis3D.isAxisLineVisible());
      assertEquals(0.0F, numberAxis3D.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D.isTickMarksVisible());
      assertTrue(numberAxis3D.isTickLabelsVisible());
      assertTrue(numberAxis3D.isVisible());
      assertEquals(0.0, numberAxis3D.getLabelAngle(), 0.01);
      assertEquals(0, labelPaint.getGreen());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFixedDimension() throws Throwable  {
      NumberAxis3D numberAxis3D = new NumberAxis3D();
      double fixedDimension = numberAxis3D.getFixedDimension();
      assertEquals(0.0, numberAxis3D.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D.isVisible());
      assertFalse(numberAxis3D.isAxisLineVisible());
      assertTrue(numberAxis3D.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis3D.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, fixedDimension, 0.01);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsTickMarksVisibleReturningTrue() throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis = new CyclicNumberAxis((-316.904221877));
      boolean tickMarksVisible = cyclicNumberAxis.isTickMarksVisible();
      assertEquals(0.0F, cyclicNumberAxis.getTickMarkInsideLength(), 0.01F);
      assertTrue(tickMarksVisible);
      assertEquals(2.0F, cyclicNumberAxis.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis.isVisible());
      assertTrue(cyclicNumberAxis.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis.getLabelAngle(), 0.01);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLabelInsets() throws Throwable  {
      CategoryAxis3D categoryAxis3D = new CategoryAxis3D();
      RectangleInsets labelInsets = categoryAxis3D.getLabelInsets();
      assertTrue(categoryAxis3D.isVisible());
      assertFalse(categoryAxis3D.isTickMarksVisible());
      assertTrue(categoryAxis3D.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis3D.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis3D.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D.getLabelAngle(), 0.01);
      assertEquals(3.0, labelInsets.getTop(), 0.01);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAxisLineStroke() throws Throwable  {
      NumberAxis3D numberAxis3D = new NumberAxis3D();
      numberAxis3D.getAxisLineStroke();
      assertTrue(numberAxis3D.isTickMarksVisible());
      assertFalse(numberAxis3D.isAxisLineVisible());
      assertEquals(0.0F, numberAxis3D.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D.isVisible());
      assertTrue(numberAxis3D.isTickLabelsVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTickLabelFont() throws Throwable  {
      NumberAxis3D numberAxis3D = new NumberAxis3D();
      Font tickLabelFont = numberAxis3D.getTickLabelFont();
      assertTrue(numberAxis3D.isVisible());
      assertEquals(0.0, numberAxis3D.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D.isAxisLineVisible());
      assertEquals(0.0F, numberAxis3D.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D.getTickMarkOutsideLength(), 0.01F);
      assertEquals(10, tickLabelFont.getSize());
      assertTrue(numberAxis3D.isTickLabelsVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testClone() throws Throwable  {
      NumberAxis numberAxis = new NumberAxis();
      NumberAxis clone = (NumberAxis)numberAxis.clone();
      assertTrue(clone.isAxisLineVisible());
      assertTrue(clone.isTickLabelsVisible());
      assertNotSame(clone, numberAxis);
      assertEquals(2.0F, clone.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, clone.getTickMarkInsideLength(), 0.01F);
      assertTrue(clone.isTickMarksVisible());
      assertEquals(0.0, clone.getLabelAngle(), 0.01);
      assertTrue(clone.isVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPlotReturningPlotWhereIsSubplotIsFalse() throws Throwable  {
      ThermometerPlot thermometerPlot = new ThermometerPlot();
      ValueAxis rangeAxis = thermometerPlot.getRangeAxis();
      rangeAxis.getPlot();
      assertTrue(rangeAxis.isVisible());
      assertEquals(0.0, rangeAxis.getLabelAngle(), 0.01);
      assertFalse(rangeAxis.isAxisLineVisible());
      assertEquals(0.0F, rangeAxis.getTickMarkInsideLength(), 0.01F);
      assertTrue(rangeAxis.isTickMarksVisible());
      assertEquals(2.0F, rangeAxis.getTickMarkOutsideLength(), 0.01F);
      assertTrue(rangeAxis.isTickLabelsVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTickMarkStroke() throws Throwable  {
      NumberAxis3D numberAxis3D = new NumberAxis3D();
      numberAxis3D.getTickMarkStroke();
      assertTrue(numberAxis3D.isVisible());
      assertEquals(0.0, numberAxis3D.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D.isAxisLineVisible());
      assertEquals(0.0F, numberAxis3D.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D.isTickMarksVisible());
      assertTrue(numberAxis3D.isTickLabelsVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsVisible() throws Throwable  {
      CategoryAxis3D categoryAxis3D = new CategoryAxis3D();
      boolean visible = categoryAxis3D.isVisible();
      assertTrue(categoryAxis3D.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis3D.getTickMarkOutsideLength(), 0.01F);
      assertFalse(categoryAxis3D.isTickMarksVisible());
      assertTrue(categoryAxis3D.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis3D.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D.getLabelAngle(), 0.01);
      assertTrue(visible);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTickLabelPaint() throws Throwable  {
      NumberAxis3D numberAxis3D = new NumberAxis3D();
      Color tickLabelPaint = (Color)numberAxis3D.getTickLabelPaint();
      assertEquals(0.0, numberAxis3D.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D.getTickMarkInsideLength(), 0.01F);
      assertEquals((-16777216), tickLabelPaint.getRGB());
      assertTrue(numberAxis3D.isTickLabelsVisible());
      assertFalse(numberAxis3D.isAxisLineVisible());
      assertTrue(numberAxis3D.isVisible());
      assertTrue(numberAxis3D.isTickMarksVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTickMarkPaint() throws Throwable  {
      NumberAxis3D numberAxis3D = new NumberAxis3D();
      Color tickMarkPaint = (Color)numberAxis3D.getTickMarkPaint();
      assertTrue(numberAxis3D.isVisible());
      assertEquals(0.0, numberAxis3D.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D.isAxisLineVisible());
      assertTrue(numberAxis3D.isTickMarksVisible());
      assertEquals(128, tickMarkPaint.getGreen());
      assertEquals(2.0F, numberAxis3D.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis3D.getTickMarkInsideLength(), 0.01F);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsAxisLineVisibleReturningTrue() throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis = new CyclicNumberAxis(2800.6);
      boolean axisLineVisible = cyclicNumberAxis.isAxisLineVisible();
      assertTrue(cyclicNumberAxis.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis.isVisible());
      assertEquals(0.0, cyclicNumberAxis.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis.getTickMarkOutsideLength(), 0.01F);
      assertTrue(axisLineVisible);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAxisLinePaint() throws Throwable  {
      NumberAxis3D numberAxis3D = new NumberAxis3D();
      Color axisLinePaint = (Color)numberAxis3D.getAxisLinePaint();
      assertEquals(2.0F, numberAxis3D.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D.isTickLabelsVisible());
      assertTrue(numberAxis3D.isTickMarksVisible());
      assertTrue(numberAxis3D.isVisible());
      assertFalse(numberAxis3D.isAxisLineVisible());
      assertEquals(128, axisLinePaint.getRed());
      assertEquals(0.0, numberAxis3D.getLabelAngle(), 0.01);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTickMarkInsideLength() throws Throwable  {
      NumberAxis3D numberAxis3D = new NumberAxis3D();
      float tickMarkInsideLength = numberAxis3D.getTickMarkInsideLength();
      assertTrue(numberAxis3D.isVisible());
      assertEquals(2.0F, numberAxis3D.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D.isTickLabelsVisible());
      assertTrue(numberAxis3D.isTickMarksVisible());
      assertEquals(0.0F, tickMarkInsideLength, 0.01F);
      assertFalse(numberAxis3D.isAxisLineVisible());
      assertEquals(0.0, numberAxis3D.getLabelAngle(), 0.01);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsTickLabelsVisible() throws Throwable  {
      NumberAxis3D numberAxis3D = new NumberAxis3D();
      boolean tickLabelsVisible = numberAxis3D.isTickLabelsVisible();
      assertEquals(0.0, numberAxis3D.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D.isVisible());
      assertFalse(numberAxis3D.isAxisLineVisible());
      assertTrue(numberAxis3D.isTickMarksVisible());
      assertTrue(tickLabelsVisible);
      assertEquals(2.0F, numberAxis3D.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D.getTickMarkInsideLength(), 0.01F);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLabelFont() throws Throwable  {
      NumberAxis3D numberAxis3D = new NumberAxis3D();
      Font labelFont = numberAxis3D.getLabelFont();
      assertTrue(numberAxis3D.isTickMarksVisible());
      assertFalse(numberAxis3D.isAxisLineVisible());
      assertEquals(0.0F, numberAxis3D.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D.getLabelAngle(), 0.01);
      assertEquals(12, labelFont.getSize());
      assertEquals(2.0F, numberAxis3D.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D.isTickLabelsVisible());
      assertTrue(numberAxis3D.isVisible());
  }
}
