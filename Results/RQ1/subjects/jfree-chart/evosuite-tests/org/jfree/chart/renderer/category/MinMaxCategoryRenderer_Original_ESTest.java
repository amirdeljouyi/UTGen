/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 20 04:06:38 GMT 2024
 */

package org.jfree.chart.renderer.category;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Paint;
import java.awt.Stroke;
import javax.swing.Icon;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MinMaxCategoryRenderer_Original_ESTest extends MinMaxCategoryRenderer_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetMinIconThrowsIllegalArgumentException() throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer = new MinMaxCategoryRenderer();
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer.setMinIcon((Icon) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'icon' argument.
         //
         verifyException("org.jfree.chart.renderer.category.MinMaxCategoryRenderer", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetMinIcon() throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer = new MinMaxCategoryRenderer();
      Icon arg0 = minMaxCategoryRenderer.getObjectIcon();
      minMaxCategoryRenderer.setMinIcon(arg0);
      assertFalse(minMaxCategoryRenderer.isDrawLines());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetMaxIconThrowsIllegalArgumentException() throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer = new MinMaxCategoryRenderer();
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer.setMaxIcon((Icon) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'icon' argument.
         //
         verifyException("org.jfree.chart.renderer.category.MinMaxCategoryRenderer", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetObjectIconThrowsIllegalArgumentException() throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer = new MinMaxCategoryRenderer();
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer.setObjectIcon((Icon) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'icon' argument.
         //
         verifyException("org.jfree.chart.renderer.category.MinMaxCategoryRenderer", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMinIcon() throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer = new MinMaxCategoryRenderer();
      Icon arg0 = minMaxCategoryRenderer.getMinIcon();
      minMaxCategoryRenderer.setObjectIcon(arg0);
      assertFalse(minMaxCategoryRenderer.isDrawLines());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetGroupPaintThrowsIllegalArgumentException() throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer = new MinMaxCategoryRenderer();
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer.setGroupPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.renderer.category.MinMaxCategoryRenderer", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsDrawLinesReturningTrue() throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer.setDrawLines(true);
      boolean drawLines = minMaxCategoryRenderer.isDrawLines();
      assertTrue(drawLines);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDrawLinesWithFalse() throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer.setDrawLines(false);
      assertFalse(minMaxCategoryRenderer.getBaseItemLabelsVisible());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetGroupStrokeReturningNonNull() throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer = new MinMaxCategoryRenderer();
      BasicStroke groupStroke = (BasicStroke)minMaxCategoryRenderer.getGroupStroke();
      assertEquals(1.0F, groupStroke.getLineWidth(), 0.01F);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetGroupStroke() throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer.setGroupStroke((Stroke) null);
      Stroke groupStroke = minMaxCategoryRenderer.getGroupStroke();
      assertNull(groupStroke);
      assertFalse(minMaxCategoryRenderer.isDrawLines());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxIcon() throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer.getMaxIcon();
      assertFalse(minMaxCategoryRenderer.isDrawLines());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsDrawLinesReturningFalse() throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer = new MinMaxCategoryRenderer();
      boolean drawLines = minMaxCategoryRenderer.isDrawLines();
      assertFalse(drawLines);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetGroupPaint() throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer = new MinMaxCategoryRenderer();
      Color groupPaint = (Color)minMaxCategoryRenderer.getGroupPaint();
      assertEquals((-16777216), groupPaint.getRGB());
      assertFalse(minMaxCategoryRenderer.isDrawLines());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetMaxIcon() throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer = new MinMaxCategoryRenderer();
      Icon arg0 = minMaxCategoryRenderer.getObjectIcon();
      minMaxCategoryRenderer.setMaxIcon(arg0);
      assertFalse(minMaxCategoryRenderer.isDrawLines());
  }
}
