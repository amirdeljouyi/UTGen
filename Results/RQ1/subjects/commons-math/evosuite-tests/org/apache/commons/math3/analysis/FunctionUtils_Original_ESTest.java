/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 21 13:24:42 GMT 2024
 */

package org.apache.commons.math3.analysis;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.BivariateFunction;
import org.apache.commons.math3.analysis.FunctionUtils;
import org.apache.commons.math3.analysis.MultivariateFunction;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Add;
import org.apache.commons.math3.analysis.function.Divide;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FunctionUtils_Original_ESTest extends FunctionUtils_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSampleWithNullAndNegative() throws Throwable  {
      UnivariateFunction[] univariateFunctionArray = new UnivariateFunction[7];
      try { 
        FunctionUtils.sample(univariateFunctionArray[0], 132, (-2093), 132);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 132 is larger than, or equal to, the maximum (-2,093)
         //
         verifyException("org.apache.commons.math3.analysis.FunctionUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCollectorTaking3ArgumentsAndFix2ndArgument() throws Throwable  {
      Add arg0 = new Add();
      UnivariateFunction arg1 = FunctionUtils.fix2ndArgument(arg0, 554.0);
      MultivariateFunction collector = FunctionUtils.collector((BivariateFunction) arg0, arg1, 554.0);
      assertNotNull(collector);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSampleThrowsNullPointerException() throws Throwable  {
      UnivariateFunction arg0 = FunctionUtils.fix1stArgument((BivariateFunction) null, 361.75107562072805);
      // Undeclared exception!
      try { 
        FunctionUtils.sample(arg0, 0.680370569229126, 361.75107562072805, 191);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.FunctionUtils$12", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCollectorTaking2Arguments() throws Throwable  {
      Divide arg0 = new Divide();
      MultivariateFunction collector = FunctionUtils.collector((BivariateFunction) arg0, (-1425.045064177));
      assertNotNull(collector);
  }
}
