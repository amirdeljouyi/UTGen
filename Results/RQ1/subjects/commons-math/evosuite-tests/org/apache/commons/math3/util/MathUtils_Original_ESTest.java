/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 19 16:52:25 GMT 2024
 */

package org.apache.commons.math3.util;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.exception.util.Localizable;
import org.apache.commons.math3.exception.util.LocalizedFormats;
import org.apache.commons.math3.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathUtils_Original_ESTest extends MathUtils_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReduceReturningPositive() throws Throwable  {
      double reduce = MathUtils.reduce((-2929.2347500249), (-1133.281908434397), 0.0);
      assertEquals(470.6109752782909, reduce, 0.01);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReduceReturningNegative() throws Throwable  {
      double reduce = MathUtils.reduce((-4.9E-324), 2892.0, 0.0);
      assertEquals((-4.9E-324), reduce, 0.01);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNormalizeAngleReturningPositive() throws Throwable  {
      double normalizeAngle = MathUtils.normalizeAngle((-1065.0), 283.1012312);
      assertEquals(285.884841043611, normalizeAngle, 0.01);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNormalizeAngleReturningNegative() throws Throwable  {
      double normalizeAngle = MathUtils.normalizeAngle((-2630), (-234.749));
      assertEquals((-236.1063979645778), normalizeAngle, 0.01);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashTakingDoubleArrayReturningPositive() throws Throwable  {
      double[] arg0 = new double[4];
      int hash = MathUtils.hash(arg0);
      assertEquals(923521, hash);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashTakingDoubleArrayReturningNegative() throws Throwable  {
      double[] arg0 = new double[9];
      arg0[1] = (double) (-1643);
      arg0[6] = (double) 1643;
      int hash = MathUtils.hash(arg0);
      assertEquals((-795545313), hash);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashTakingDoubleReturningZero() throws Throwable  {
      int hash = MathUtils.hash((double) (byte)0);
      assertEquals(0, hash);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashTakingDoubleReturningPositive() throws Throwable  {
      int hash = MathUtils.hash(6.283185307179586);
      assertEquals(341642467, hash);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheckNotNullTakingObjectWithNull() throws Throwable  {
      try { 
        MathUtils.checkNotNull((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheckNotNullTakingObject() throws Throwable  {
      Object arg0 = new Object();
      MathUtils.checkNotNull(arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheckNotNullTaking3ArgumentsWithNull() throws Throwable  {
      LocalizedFormats arg1 = LocalizedFormats.OBJECT_TRANSFORMATION;
      Object[] arg2 = new Object[7];
      try { 
        MathUtils.checkNotNull((Object) null, (Localizable) arg1, arg2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // conversion exception in transformation
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheckNotNullTaking3Arguments() throws Throwable  {
      Object arg0 = new Object();
      LocalizedFormats arg1 = LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE;
      Object[] arg2 = new Object[8];
      MathUtils.checkNotNull(arg0, (Localizable) arg1, arg2);
      assertEquals(8, arg2.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheckFiniteTakingDoubleArrayWithNonEmptyArray() throws Throwable  {
      double[] arg0 = new double[8];
      arg0[1] = Double.NaN;
      try { 
        MathUtils.checkFinite(arg0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value \uFFFD at index 1
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheckFiniteTakingDoubleArray0() throws Throwable  {
      double[] arg0 = new double[7];
      arg0[1] = Double.NEGATIVE_INFINITY;
      try { 
        MathUtils.checkFinite(arg0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value -\u221E at index 1
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheckFiniteTakingDoubleArray1() throws Throwable  {
      double[] arg0 = new double[6];
      MathUtils.checkFinite(arg0);
      assertEquals(6, arg0.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheckFiniteTakingDouble() throws Throwable  {
      try { 
        MathUtils.checkFinite(Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // \uFFFD is not a finite number
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheckFiniteTakingDoubleAndCheckFiniteTakingDouble() throws Throwable  {
      MathUtils.checkFinite((double) 1079L);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheckFiniteTakingDoubleWithNegative() throws Throwable  {
      try { 
        MathUtils.checkFinite(Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -\u221E is not a finite number
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCopySignTaking2LongsThrowsArithmeticException() throws Throwable  {
      try { 
        MathUtils.copySign((-9223372036854775808L), 1512L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCopySignTaking2Longs() throws Throwable  {
      long copySign = MathUtils.copySign((-31L), (-901L));
      assertEquals((-31L), copySign);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCopySignTaking2LongsWithPositive() throws Throwable  {
      long copySign = MathUtils.copySign(3595L, (-1776L));
      assertEquals((-3595L), copySign);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCopySignTaking2LongsReturningZero() throws Throwable  {
      long copySign = MathUtils.copySign(0L, 647L);
      assertEquals(0L, copySign);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCopySignTaking2LongsReturningPositive() throws Throwable  {
      long copySign = MathUtils.copySign((-1079L), 0L);
      assertEquals(1079L, copySign);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCopySignTaking2IntsThrowsArithmeticException() throws Throwable  {
      try { 
        MathUtils.copySign(Integer.MIN_VALUE, 3030);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCopySignTaking2Ints() throws Throwable  {
      int copySign = MathUtils.copySign((-2630), (-963));
      assertEquals((-2630), copySign);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCopySignTaking2IntsWithPositive() throws Throwable  {
      int copySign = MathUtils.copySign(2827, (int) (short) (-412));
      assertEquals((-2827), copySign);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCopySignTaking2IntsReturningZero() throws Throwable  {
      int copySign = MathUtils.copySign((int) (short)0, 1052270332);
      assertEquals(0, copySign);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCopySignTaking2IntsReturningPositive() throws Throwable  {
      int copySign = MathUtils.copySign((-2198), 292);
      assertEquals(2198, copySign);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCopySignTaking2ShortsReturningPositive() throws Throwable  {
      short copySign = MathUtils.copySign((short) (-4974), (short)20344);
      assertEquals((short)4974, copySign);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCopySignTaking2ShortsThrowsArithmeticException() throws Throwable  {
      try { 
        MathUtils.copySign((short) (-32768), (short)108);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCopySignTaking2ShortsWithPositive() throws Throwable  {
      short copySign = MathUtils.copySign((short)1331, (short) (-2050));
      assertEquals((short) (-1331), copySign);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCopySignTaking2ShortsReturningZero() throws Throwable  {
      short copySign = MathUtils.copySign((short)0, (short)0);
      assertEquals((short)0, copySign);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCopySignTaking2Shorts() throws Throwable  {
      short copySign = MathUtils.copySign((short) (-2050), (short) (-1331));
      assertEquals((short) (-2050), copySign);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCopySignTaking2BytesReturningPositive() throws Throwable  {
      byte copySign = MathUtils.copySign((byte) (-66), (byte)121);
      assertEquals((byte)66, copySign);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCopySignTaking2BytesThrowsArithmeticException() throws Throwable  {
      try { 
        MathUtils.copySign((byte) (-128), (byte)38);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCopySignTaking2BytesReturningZero() throws Throwable  {
      byte copySign = MathUtils.copySign((byte)0, (byte)37);
      assertEquals((byte)0, copySign);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCopySignTaking2BytesWithPositive() throws Throwable  {
      byte copySign = MathUtils.copySign((byte)13, (byte) (-66));
      assertEquals((byte) (-13), copySign);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCopySignTaking2Bytes() throws Throwable  {
      byte copySign = MathUtils.copySign((byte) (-101), (byte) (-101));
      assertEquals((byte) (-101), copySign);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashTakingDoubleArrayReturningZero() throws Throwable  {
      int hash = MathUtils.hash((double[]) null);
      assertEquals(0, hash);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashTakingDoubleReturningNegative() throws Throwable  {
      int hash = MathUtils.hash((double) (-1786L));
      assertEquals((-1063524352), hash);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNormalizeAngleReturningZero() throws Throwable  {
      double normalizeAngle = MathUtils.normalizeAngle(0.0, 1.9987994582857286E-8);
      assertEquals(0.0, normalizeAngle, 0.01);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReduceReturningZero() throws Throwable  {
      double reduce = MathUtils.reduce((short) (-15419), (short) (-15419), (short) (-15419));
      assertEquals(0.0, reduce, 0.01);
  }
}
