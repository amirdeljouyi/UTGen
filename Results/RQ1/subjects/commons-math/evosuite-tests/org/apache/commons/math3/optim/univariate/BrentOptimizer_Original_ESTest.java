/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 21 13:29:22 GMT 2024
 */

package org.apache.commons.math3.optim.univariate;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.optim.ConvergenceChecker;
import org.apache.commons.math3.optim.univariate.BrentOptimizer;
import org.apache.commons.math3.optim.univariate.UnivariatePointValuePair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BrentOptimizer_Original_ESTest extends BrentOptimizer_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDoOptimize() throws Throwable  {
      BrentOptimizer brentOptimizer = new BrentOptimizer(2.0, 2.0);
      // Undeclared exception!
      try { 
        brentOptimizer.doOptimize();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.optim.BaseOptimizer$MaxEvalCallback", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesBrentOptimizerTaking3Arguments() throws Throwable  {
      BrentOptimizer brentOptimizer = new BrentOptimizer(2.0, 2.0, (ConvergenceChecker<UnivariatePointValuePair>) null);
      assertEquals(0.0, brentOptimizer.getMin(), 0.01);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesBrentOptimizerTaking2Arguments0() throws Throwable  {
      BrentOptimizer brentOptimizer = null;
      try {
        brentOptimizer = new BrentOptimizer(1672.736752994324, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optim.univariate.BrentOptimizer", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesBrentOptimizerTaking2Arguments1() throws Throwable  {
      BrentOptimizer brentOptimizer = null;
      try {
        brentOptimizer = new BrentOptimizer(0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.optim.univariate.BrentOptimizer", e);
      }
  }
}
