/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 21 13:34:08 GMT 2024
 */

package org.apache.commons.math3.linear;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.DiagonalMatrix;
import org.apache.commons.math3.linear.SchurTransformer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SchurTransformer_ESTest extends SchurTransformer_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetT() throws Throwable  {
      // Create a new DiagonalMatrix object with dimension 2
      DiagonalMatrix arg0 = new DiagonalMatrix(2);
      
      // Create a new SchurTransformer object using the DiagonalMatrix object
      SchurTransformer schurTransformer = new SchurTransformer(arg0);
      
      // Call the getT() method on the SchurTransformer object to retrieve the T matrix
      Array2DRowRealMatrix t = (Array2DRowRealMatrix)schurTransformer.getT();
      
      // Assert that the returned T matrix is not transposable
      assertFalse(t.isTransposable());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPT() throws Throwable  {
      // Given a diagonal matrix with size 2
      DiagonalMatrix arg0 = new DiagonalMatrix(2);
      
      // When we create a SchurTransformer object using this matrix as input
      SchurTransformer schurTransformer = new SchurTransformer(arg0);
      
      // Then the getPT() method should return a non-transposable Array2DRowRealMatrix object
      Array2DRowRealMatrix pT = (Array2DRowRealMatrix)schurTransformer.getPT();
      assertFalse(pT.isTransposable());
  }
}
