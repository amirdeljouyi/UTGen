/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 19 15:48:21 GMT 2024
 */

package org.apache.commons.math3.util;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.util.MultidimensionalCounter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultidimensionalCounter_Original_ESTest extends MultidimensionalCounter_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCountTakingIntArray0() throws Throwable  {
      int[] arg0 = new int[2];
      arg0[0] = (-2117665762);
      arg0[1] = (-2117665762);
      MultidimensionalCounter multidimensionalCounter = new MultidimensionalCounter(arg0);
      try { 
        multidimensionalCounter.getCount(arg0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,117,665,762 out of [0, -2,117,665,763] range
         //
         verifyException("org.apache.commons.math3.util.MultidimensionalCounter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToString() throws Throwable  {
      int[] arg0 = new int[1];
      arg0[0] = 2457;
      MultidimensionalCounter multidimensionalCounter = new MultidimensionalCounter(arg0);
      String string = multidimensionalCounter.toString();
      assertEquals(2457, multidimensionalCounter.getSize());
      assertEquals("[0]", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCountTakingIntArray1() throws Throwable  {
      int[] arg0 = new int[1];
      arg0[0] = 2441;
      MultidimensionalCounter multidimensionalCounter = new MultidimensionalCounter(arg0);
      try { 
        multidimensionalCounter.getCount(arg0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2,441 out of [0, 2,440] range
         //
         verifyException("org.apache.commons.math3.util.MultidimensionalCounter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCountsWithPositive() throws Throwable  {
      int[] arg0 = new int[1];
      arg0[0] = 6;
      MultidimensionalCounter multidimensionalCounter = new MultidimensionalCounter(arg0);
      try { 
        multidimensionalCounter.getCounts(6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 out of [0, 6] range
         //
         verifyException("org.apache.commons.math3.util.MultidimensionalCounter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCountsWithNegative() throws Throwable  {
      int[] arg0 = new int[1];
      arg0[0] = 197;
      MultidimensionalCounter multidimensionalCounter = new MultidimensionalCounter(arg0);
      try { 
        multidimensionalCounter.getCounts((-1599));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,599 out of [0, 197] range
         //
         verifyException("org.apache.commons.math3.util.MultidimensionalCounter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMultidimensionalCounter() throws Throwable  {
      int[] arg0 = new int[10];
      MultidimensionalCounter multidimensionalCounter = null;
      try {
        multidimensionalCounter = new MultidimensionalCounter(arg0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MultidimensionalCounter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDimension() throws Throwable  {
      int[] arg0 = new int[2];
      arg0[0] = 6;
      arg0[1] = 959;
      MultidimensionalCounter multidimensionalCounter = new MultidimensionalCounter(arg0);
      int dimension = multidimensionalCounter.getDimension();
      assertEquals(2, dimension);
      assertEquals(5754, multidimensionalCounter.getSize());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSize() throws Throwable  {
      int[] arg0 = new int[1];
      arg0[0] = 25;
      MultidimensionalCounter multidimensionalCounter = new MultidimensionalCounter(arg0);
      int size = multidimensionalCounter.getSize();
      assertEquals(25, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSizes() throws Throwable  {
      int[] arg0 = new int[1];
      arg0[0] = 1072;
      MultidimensionalCounter multidimensionalCounter = new MultidimensionalCounter(arg0);
      multidimensionalCounter.getSizes();
      assertEquals(1072, multidimensionalCounter.getSize());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIteratorAndGetCountTakingInt() throws Throwable  {
      int[] arg0 = new int[1];
      arg0[0] = 2457;
      MultidimensionalCounter multidimensionalCounter = new MultidimensionalCounter(arg0);
      MultidimensionalCounter.Iterator iterator = multidimensionalCounter.iterator();
      // Undeclared exception!
      try { 
        iterator.getCount(2457);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2457
         //
         verifyException("org.apache.commons.math3.util.MultidimensionalCounter$Iterator", e);
      }
  }
}
