/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 19 17:48:29 GMT 2024
 */

package org.apache.commons.math3.geometry.euclidean.oned;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import java.util.LinkedList;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IntervalsSet_Original_ESTest extends IntervalsSet_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSupReturningZero() throws Throwable  {
      IntervalsSet intervalsSet = new IntervalsSet(1.5707963267948966, 0.0);
      double sup = intervalsSet.getSup();
      assertEquals(0.0, sup, 0.01);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetInfReturningZero() throws Throwable  {
      IntervalsSet intervalsSet = new IntervalsSet(0.0, 0.0);
      double inf = intervalsSet.getInf();
      assertEquals(0.0, inf, 0.01);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetInfReturningPositive() throws Throwable  {
      IntervalsSet intervalsSet = new IntervalsSet(0.7937005259840998, 827.3231324);
      double inf = intervalsSet.getInf();
      assertEquals(0.7937005259840998, inf, 0.01);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSupReturningPositive() throws Throwable  {
      IntervalsSet intervalsSet = new IntervalsSet();
      double sup = intervalsSet.getSup();
      assertEquals(Double.POSITIVE_INFINITY, sup, 0.01);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSupReturningNegative() throws Throwable  {
      IntervalsSet intervalsSet = new IntervalsSet((-19.60972417526534), (-0.1));
      double sup = intervalsSet.getSup();
      assertEquals((-0.1), sup, 0.01);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetInfReturningNegative() throws Throwable  {
      IntervalsSet intervalsSet = new IntervalsSet(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      double inf = intervalsSet.getInf();
      assertEquals(Double.NEGATIVE_INFINITY, inf, 0.01);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testComputeGeometricalProperties0() throws Throwable  {
      IntervalsSet intervalsSet = new IntervalsSet(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      intervalsSet.computeGeometricalProperties();
      assertFalse(intervalsSet.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testComputeGeometricalProperties1() throws Throwable  {
      IntervalsSet intervalsSet = new IntervalsSet((-4637.41238), Double.NEGATIVE_INFINITY);
      intervalsSet.computeGeometricalProperties();
      assertFalse(intervalsSet.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesIntervalsSetTaking2Arguments0() throws Throwable  {
      IntervalsSet intervalsSet = new IntervalsSet(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY);
      assertFalse(intervalsSet.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesIntervalsSetTaking2Arguments1() throws Throwable  {
      IntervalsSet intervalsSet = new IntervalsSet(Double.NEGATIVE_INFINITY, 1.1730463525082348E-7);
      assertFalse(intervalsSet.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesIntervalsSetTaking2Arguments2() throws Throwable  {
      IntervalsSet intervalsSet = new IntervalsSet(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      assertFalse(intervalsSet.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesIntervalsSetTakingCollection() throws Throwable  {
      LinkedList<SubHyperplane<Euclidean1D>> arg0 = new LinkedList<SubHyperplane<Euclidean1D>>();
      IntervalsSet intervalsSet = new IntervalsSet(arg0);
      assertFalse(intervalsSet.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testComputeGeometricalProperties2() throws Throwable  {
      IntervalsSet intervalsSet = new IntervalsSet((-19.60972417526534), (-0.1));
      intervalsSet.computeGeometricalProperties();
      assertFalse(intervalsSet.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesIntervalsSetTakingNoArguments() throws Throwable  {
      IntervalsSet intervalsSet = new IntervalsSet();
      intervalsSet.computeGeometricalProperties();
      assertFalse(intervalsSet.isEmpty());
  }
}
