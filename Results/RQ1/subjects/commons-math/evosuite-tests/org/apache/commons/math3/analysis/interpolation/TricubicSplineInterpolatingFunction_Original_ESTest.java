/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 19 17:09:54 GMT 2024
 */

package org.apache.commons.math3.analysis.interpolation;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TricubicSplineInterpolatingFunction_Original_ESTest extends TricubicSplineInterpolatingFunction_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testValueReturningZero() throws Throwable  {
      double[] arg2 = new double[2];
      arg2[0] = (-10.7387077629512);
      double[][][] arg10 = new double[2][3][4];
      double[][] doubleArray = new double[2][8];
      doubleArray[0] = arg2;
      arg10[0] = doubleArray;
      TricubicSplineInterpolatingFunction tricubicSplineInterpolatingFunction = new TricubicSplineInterpolatingFunction(arg2, arg2, arg2, arg10, arg10, arg10, arg10, arg10, arg10, arg10, arg10);
      double value = tricubicSplineInterpolatingFunction.value((-10.7387077629512), (-10.7387077629512), 0.0);
      assertEquals(10.738707762951151, value, 0.01);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testValueReturningPositive() throws Throwable  {
      double[] arg2 = new double[2];
      arg2[0] = (-10.7387077629512);
      double[][][] arg10 = new double[2][3][4];
      double[][] doubleArray = new double[2][8];
      doubleArray[0] = arg2;
      arg10[0] = doubleArray;
      TricubicSplineInterpolatingFunction tricubicSplineInterpolatingFunction = new TricubicSplineInterpolatingFunction(arg2, arg2, arg2, arg10, arg10, arg10, arg10, arg10, arg10, arg10, arg10);
      double value = tricubicSplineInterpolatingFunction.value(0.0, (-1.0), (-10.7387077629512));
      assertEquals((-422.71661640739416), value, 0.01);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testValueWithPositiveAndNegative() throws Throwable  {
      double[] arg2 = new double[2];
      arg2[0] = (-10.7387077629512);
      double[][][] arg10 = new double[2][3][4];
      double[][] doubleArray = new double[2][8];
      doubleArray[0] = arg2;
      arg10[0] = doubleArray;
      TricubicSplineInterpolatingFunction tricubicSplineInterpolatingFunction = new TricubicSplineInterpolatingFunction(arg2, arg2, arg2, arg10, arg10, arg10, arg10, arg10, arg10, arg10, arg10);
      try { 
        tricubicSplineInterpolatingFunction.value((-10.7387077629512), (-1.0), 3.834E-20);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 out of [-10.739, 0] range
         //
         verifyException("org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testValueWithNegative() throws Throwable  {
      double[] arg2 = new double[2];
      arg2[0] = (-12.969768518315961);
      double[][][] arg10 = new double[2][3][4];
      double[][] doubleArray = new double[2][8];
      doubleArray[0] = arg2;
      arg10[0] = doubleArray;
      TricubicSplineInterpolatingFunction tricubicSplineInterpolatingFunction = new TricubicSplineInterpolatingFunction(arg2, arg2, arg2, arg10, arg10, arg10, arg10, arg10, arg10, arg10, arg10);
      try { 
        tricubicSplineInterpolatingFunction.value((-12.969768518315961), (-726.0), (-726.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -726 out of [-12.97, 0] range
         //
         verifyException("org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testValueWithPositiveAndPositive() throws Throwable  {
      double[] arg2 = new double[2];
      arg2[0] = (-10.7387077629512);
      double[][][] arg10 = new double[2][3][4];
      double[][] doubleArray = new double[2][8];
      doubleArray[0] = arg2;
      arg10[0] = doubleArray;
      TricubicSplineInterpolatingFunction tricubicSplineInterpolatingFunction = new TricubicSplineInterpolatingFunction(arg2, arg2, arg2, arg10, arg10, arg10, arg10, arg10, arg10, arg10, arg10);
      try { 
        tricubicSplineInterpolatingFunction.value(1782.399, (-10.7387077629512), 1.34217729E8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,782.399 out of [-10.739, 0] range
         //
         verifyException("org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTricubicSplineInterpolatingFunction0() throws Throwable  {
      double[] arg2 = new double[2];
      arg2[0] = (-12.969768518315961);
      double[][][] arg10 = new double[2][3][4];
      double[][] doubleArray = new double[2][8];
      doubleArray[0] = arg2;
      arg10[0] = doubleArray;
      double[][][] arg6 = new double[2][2][4];
      TricubicSplineInterpolatingFunction tricubicSplineInterpolatingFunction = null;
      try {
        tricubicSplineInterpolatingFunction = new TricubicSplineInterpolatingFunction(arg2, arg2, arg2, arg10, arg10, arg10, arg6, arg10, arg10, arg10, arg10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 2
         //
         verifyException("org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTricubicSplineInterpolatingFunction1() throws Throwable  {
      double[] arg2 = new double[2];
      arg2[1] = 1.3421772722816654E8;
      double[][][] arg8 = new double[2][2][4];
      double[][][] arg10 = new double[2][5][3];
      double[][] doubleArray = new double[2][9];
      doubleArray[0] = arg2;
      arg10[0] = doubleArray;
      TricubicSplineInterpolatingFunction tricubicSplineInterpolatingFunction = null;
      try {
        tricubicSplineInterpolatingFunction = new TricubicSplineInterpolatingFunction(arg2, arg2, arg2, arg10, arg8, arg8, arg10, arg8, arg8, arg10, arg10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 2
         //
         verifyException("org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTricubicSplineInterpolatingFunction2() throws Throwable  {
      double[] arg2 = new double[2];
      arg2[0] = (-12.969768518315961);
      double[][][] arg10 = new double[2][2][4];
      TricubicSplineInterpolatingFunction tricubicSplineInterpolatingFunction = null;
      try {
        tricubicSplineInterpolatingFunction = new TricubicSplineInterpolatingFunction(arg2, arg2, arg2, arg10, arg10, arg10, arg10, arg10, arg10, arg10, arg10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 2
         //
         verifyException("org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTricubicSplineInterpolatingFunction3() throws Throwable  {
      double[] arg2 = new double[2];
      arg2[0] = (-12.0);
      double[][][] arg9 = new double[2][3][4];
      double[][] doubleArray = new double[2][8];
      arg9[0] = doubleArray;
      double[][][] arg10 = new double[2][7][7];
      TricubicSplineInterpolatingFunction tricubicSplineInterpolatingFunction = null;
      try {
        tricubicSplineInterpolatingFunction = new TricubicSplineInterpolatingFunction(arg2, arg2, arg2, arg9, arg9, arg9, arg9, arg9, arg9, arg9, arg10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 2
         //
         verifyException("org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTricubicSplineInterpolatingFunction4() throws Throwable  {
      double[] arg2 = new double[2];
      arg2[0] = (-14.91721436163668);
      double[][][] arg10 = new double[2][2][4];
      double[][][] arg9 = new double[2][9][6];
      TricubicSplineInterpolatingFunction tricubicSplineInterpolatingFunction = null;
      try {
        tricubicSplineInterpolatingFunction = new TricubicSplineInterpolatingFunction(arg2, arg2, arg2, arg10, arg10, arg10, arg10, arg10, arg10, arg9, arg10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 2
         //
         verifyException("org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTricubicSplineInterpolatingFunction5() throws Throwable  {
      double[] arg2 = new double[2];
      arg2[0] = (-63.332210765260804);
      double[][][] arg10 = new double[2][3][4];
      double[][] doubleArray = new double[2][8];
      arg10[0] = doubleArray;
      double[][][] arg8 = new double[2][3][4];
      TricubicSplineInterpolatingFunction tricubicSplineInterpolatingFunction = null;
      try {
        tricubicSplineInterpolatingFunction = new TricubicSplineInterpolatingFunction(arg2, arg2, arg2, arg10, arg10, arg10, arg10, arg10, arg8, arg10, arg10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 2
         //
         verifyException("org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTricubicSplineInterpolatingFunction6() throws Throwable  {
      double[] arg2 = new double[2];
      arg2[0] = (-4.3089023491316265);
      double[][][] arg10 = new double[2][7][4];
      double[][] doubleArray = new double[2][8];
      arg10[0] = doubleArray;
      double[][][] arg7 = new double[2][7][4];
      TricubicSplineInterpolatingFunction tricubicSplineInterpolatingFunction = null;
      try {
        tricubicSplineInterpolatingFunction = new TricubicSplineInterpolatingFunction(arg2, arg2, arg2, arg10, arg10, arg10, arg10, arg7, arg10, arg10, arg10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 2
         //
         verifyException("org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTricubicSplineInterpolatingFunction7() throws Throwable  {
      double[] arg2 = new double[2];
      arg2[0] = (-7.8448955291);
      double[][][] arg10 = new double[2][3][4];
      double[][] doubleArray = new double[2][8];
      double[][][] arg9 = new double[2][3][5];
      arg9[0] = doubleArray;
      TricubicSplineInterpolatingFunction tricubicSplineInterpolatingFunction = null;
      try {
        tricubicSplineInterpolatingFunction = new TricubicSplineInterpolatingFunction(arg2, arg2, arg2, arg9, arg9, arg9, arg10, arg10, arg9, arg9, arg10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 2
         //
         verifyException("org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTricubicSplineInterpolatingFunction8() throws Throwable  {
      double[] arg2 = new double[2];
      arg2[0] = (-14.204785581044943);
      double[][][] arg9 = new double[2][3][4];
      double[][] doubleArray = new double[2][8];
      double[][][] arg10 = new double[2][5][9];
      arg10[0] = doubleArray;
      TricubicSplineInterpolatingFunction tricubicSplineInterpolatingFunction = null;
      try {
        tricubicSplineInterpolatingFunction = new TricubicSplineInterpolatingFunction(arg2, arg2, arg2, arg10, arg10, arg9, arg10, arg10, arg9, arg9, arg10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 2
         //
         verifyException("org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTricubicSplineInterpolatingFunction9() throws Throwable  {
      double[] arg2 = new double[2];
      arg2[0] = (-11.129996266919894);
      double[][][] arg10 = new double[2][3][4];
      double[][] doubleArray = new double[2][8];
      arg10[0] = doubleArray;
      double[][][] arg7 = new double[2][9][4];
      TricubicSplineInterpolatingFunction tricubicSplineInterpolatingFunction = null;
      try {
        tricubicSplineInterpolatingFunction = new TricubicSplineInterpolatingFunction(arg2, arg2, arg2, arg10, arg7, arg10, arg7, arg7, arg10, arg10, arg10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 2
         //
         verifyException("org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTricubicSplineInterpolatingFunction10() throws Throwable  {
      double[] arg2 = new double[2];
      arg2[0] = (-10.7387077629512);
      double[][][] arg10 = new double[2][3][4];
      TricubicSplineInterpolatingFunction tricubicSplineInterpolatingFunction = null;
      try {
        tricubicSplineInterpolatingFunction = new TricubicSplineInterpolatingFunction(arg2, arg2, arg2, arg10, arg10, arg10, arg10, arg10, arg10, arg10, arg10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 2
         //
         verifyException("org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testValueReturningNegative() throws Throwable  {
      double[] arg2 = new double[2];
      arg2[0] = (-10.7387077629512);
      double[][][] arg10 = new double[2][3][4];
      double[][] doubleArray = new double[2][8];
      doubleArray[0] = arg2;
      arg10[0] = doubleArray;
      TricubicSplineInterpolatingFunction tricubicSplineInterpolatingFunction = new TricubicSplineInterpolatingFunction(arg2, arg2, arg2, arg10, arg10, arg10, arg10, arg10, arg10, arg10, arg10);
      double value = tricubicSplineInterpolatingFunction.value((-10.7387077629512), (-10.7387077629512), (-10.7387077629512));
      assertEquals((-10.7387077629512), value, 0.01);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTricubicSplineInterpolatingFunction11() throws Throwable  {
      double[] arg2 = new double[9];
      double[][][] arg9 = new double[9][3][4];
      double[][][] arg10 = new double[7][0][6];
      TricubicSplineInterpolatingFunction tricubicSplineInterpolatingFunction = null;
      try {
        tricubicSplineInterpolatingFunction = new TricubicSplineInterpolatingFunction(arg2, arg2, arg2, arg9, arg9, arg9, arg9, arg9, arg9, arg9, arg10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 7
         //
         verifyException("org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTricubicSplineInterpolatingFunction12() throws Throwable  {
      double[] arg2 = new double[2];
      double[][][] arg8 = new double[2][3][4];
      double[][][] arg10 = new double[0][6][5];
      TricubicSplineInterpolatingFunction tricubicSplineInterpolatingFunction = null;
      try {
        tricubicSplineInterpolatingFunction = new TricubicSplineInterpolatingFunction(arg2, arg2, arg2, arg8, arg8, arg8, arg8, arg8, arg8, arg10, arg10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTricubicSplineInterpolatingFunction13() throws Throwable  {
      double[] arg2 = new double[5];
      double[][][] arg10 = new double[5][2][1];
      double[][][] arg8 = new double[0][4][9];
      TricubicSplineInterpolatingFunction tricubicSplineInterpolatingFunction = null;
      try {
        tricubicSplineInterpolatingFunction = new TricubicSplineInterpolatingFunction(arg2, arg2, arg2, arg10, arg10, arg10, arg10, arg10, arg8, arg10, arg10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 0
         //
         verifyException("org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTricubicSplineInterpolatingFunction14() throws Throwable  {
      double[] arg2 = new double[1];
      double[][][] arg10 = new double[1][4][4];
      double[][][] arg9 = new double[0][7][7];
      TricubicSplineInterpolatingFunction tricubicSplineInterpolatingFunction = null;
      try {
        tricubicSplineInterpolatingFunction = new TricubicSplineInterpolatingFunction(arg2, arg2, arg2, arg10, arg10, arg10, arg10, arg9, arg9, arg9, arg10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTricubicSplineInterpolatingFunction15() throws Throwable  {
      double[] arg2 = new double[2];
      double[][][] arg9 = new double[2][2][4];
      double[][][] arg10 = new double[0][4][7];
      TricubicSplineInterpolatingFunction tricubicSplineInterpolatingFunction = null;
      try {
        tricubicSplineInterpolatingFunction = new TricubicSplineInterpolatingFunction(arg2, arg2, arg2, arg9, arg9, arg9, arg10, arg10, arg9, arg9, arg10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTricubicSplineInterpolatingFunction16() throws Throwable  {
      double[] arg2 = new double[9];
      double[][][] arg7 = new double[9][3][4];
      double[][][] arg10 = new double[0][4][1];
      TricubicSplineInterpolatingFunction tricubicSplineInterpolatingFunction = null;
      try {
        tricubicSplineInterpolatingFunction = new TricubicSplineInterpolatingFunction(arg2, arg2, arg2, arg7, arg7, arg10, arg7, arg7, arg10, arg10, arg10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 0
         //
         verifyException("org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTricubicSplineInterpolatingFunction17() throws Throwable  {
      double[] arg2 = new double[5];
      double[][][] arg10 = new double[5][2][1];
      double[][][] arg9 = new double[0][7][3];
      TricubicSplineInterpolatingFunction tricubicSplineInterpolatingFunction = null;
      try {
        tricubicSplineInterpolatingFunction = new TricubicSplineInterpolatingFunction(arg2, arg2, arg2, arg10, arg9, arg10, arg10, arg9, arg10, arg9, arg10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 0
         //
         verifyException("org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTricubicSplineInterpolatingFunction18() throws Throwable  {
      double[] arg2 = new double[3];
      double[][][] arg10 = new double[1][4][4];
      TricubicSplineInterpolatingFunction tricubicSplineInterpolatingFunction = null;
      try {
        tricubicSplineInterpolatingFunction = new TricubicSplineInterpolatingFunction(arg2, arg2, arg2, arg10, arg10, arg10, arg10, arg10, arg10, arg10, arg10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 1
         //
         verifyException("org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTricubicSplineInterpolatingFunction19() throws Throwable  {
      double[] arg2 = new double[2];
      double[][][] arg10 = new double[3][6][9];
      double[][] doubleArray = new double[0][7];
      arg10[0] = doubleArray;
      TricubicSplineInterpolatingFunction tricubicSplineInterpolatingFunction = null;
      try {
        tricubicSplineInterpolatingFunction = new TricubicSplineInterpolatingFunction(arg2, arg2, arg2, arg10, arg10, arg10, arg10, arg10, arg10, arg10, arg10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTricubicSplineInterpolatingFunction20() throws Throwable  {
      double[] arg2 = new double[5];
      double[][][] arg10 = new double[0][6][0];
      TricubicSplineInterpolatingFunction tricubicSplineInterpolatingFunction = null;
      try {
        tricubicSplineInterpolatingFunction = new TricubicSplineInterpolatingFunction(arg2, arg2, arg2, arg10, arg10, arg10, arg10, arg10, arg10, arg10, arg10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTricubicSplineInterpolatingFunction21() throws Throwable  {
      double[] arg1 = new double[5];
      double[] arg2 = new double[0];
      TricubicSplineInterpolatingFunction tricubicSplineInterpolatingFunction = null;
      try {
        tricubicSplineInterpolatingFunction = new TricubicSplineInterpolatingFunction(arg1, arg1, arg2, (double[][][]) null, (double[][][]) null, (double[][][]) null, (double[][][]) null, (double[][][]) null, (double[][][]) null, (double[][][]) null, (double[][][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTricubicSplineInterpolatingFunction22() throws Throwable  {
      double[] arg2 = new double[3];
      double[] arg1 = new double[0];
      double[][][] arg10 = new double[8][7][2];
      TricubicSplineInterpolatingFunction tricubicSplineInterpolatingFunction = null;
      try {
        tricubicSplineInterpolatingFunction = new TricubicSplineInterpolatingFunction(arg2, arg1, arg2, arg10, arg10, arg10, arg10, arg10, arg10, arg10, arg10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTricubicSplineInterpolatingFunction23() throws Throwable  {
      double[] arg2 = new double[0];
      double[][][] arg9 = new double[0][3][4];
      double[][][] arg10 = new double[3][9][7];
      TricubicSplineInterpolatingFunction tricubicSplineInterpolatingFunction = null;
      try {
        tricubicSplineInterpolatingFunction = new TricubicSplineInterpolatingFunction(arg2, arg2, arg2, arg9, arg9, arg9, arg10, arg9, arg9, arg9, arg10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction", e);
      }
  }
}
