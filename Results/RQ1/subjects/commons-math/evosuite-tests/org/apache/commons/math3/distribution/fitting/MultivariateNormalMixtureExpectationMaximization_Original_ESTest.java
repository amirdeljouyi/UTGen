/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 21 13:19:08 GMT 2024
 */

package org.apache.commons.math3.distribution.fitting;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution;
import org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultivariateNormalMixtureExpectationMaximization_Original_ESTest extends MultivariateNormalMixtureExpectationMaximization_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEstimateWithPositive() throws Throwable  {
      double[][] arg0 = new double[9][4];
      // Undeclared exception!
      try { 
        MultivariateNormalMixtureExpectationMaximization.estimate(arg0, 41);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 41 is larger than the maximum (9)
         //
         verifyException("org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEstimate0() throws Throwable  {
      double[][] arg0 = new double[9][4];
      // Undeclared exception!
      try { 
        MultivariateNormalMixtureExpectationMaximization.estimate(arg0, (-489));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -489 is smaller than the minimum (2)
         //
         verifyException("org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEstimate1() throws Throwable  {
      double[][] arg0 = new double[1][4];
      try { 
        MultivariateNormalMixtureExpectationMaximization.estimate(arg0, (-1059));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFitWithPositiveAndZero() throws Throwable  {
      double[][] arg0 = new double[9][4];
      MultivariateNormalMixtureExpectationMaximization multivariateNormalMixtureExpectationMaximization = new MultivariateNormalMixtureExpectationMaximization(arg0);
      try { 
        multivariateNormalMixtureExpectationMaximization.fit((MixtureMultivariateNormalDistribution) null, 4, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFitWithNegativeAndNegative() throws Throwable  {
      double[][] arg0 = new double[9][4];
      MultivariateNormalMixtureExpectationMaximization multivariateNormalMixtureExpectationMaximization = new MultivariateNormalMixtureExpectationMaximization(arg0);
      try { 
        multivariateNormalMixtureExpectationMaximization.fit((MixtureMultivariateNormalDistribution) null, (-1877), (double) (-1877));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,877 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMultivariateNormalMixtureExpectationMaximization0() throws Throwable  {
      double[][] arg0 = new double[7][9];
      double[] doubleArray = new double[0];
      arg0[0] = doubleArray;
      MultivariateNormalMixtureExpectationMaximization multivariateNormalMixtureExpectationMaximization = null;
      try {
        multivariateNormalMixtureExpectationMaximization = new MultivariateNormalMixtureExpectationMaximization(arg0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than the minimum (2)
         //
         verifyException("org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMultivariateNormalMixtureExpectationMaximization1() throws Throwable  {
      double[][] arg0 = new double[9][6];
      double[] doubleArray = new double[0];
      arg0[7] = doubleArray;
      MultivariateNormalMixtureExpectationMaximization multivariateNormalMixtureExpectationMaximization = null;
      try {
        multivariateNormalMixtureExpectationMaximization = new MultivariateNormalMixtureExpectationMaximization(arg0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 6
         //
         verifyException("org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMultivariateNormalMixtureExpectationMaximization2() throws Throwable  {
      double[][] arg0 = new double[0][1];
      MultivariateNormalMixtureExpectationMaximization multivariateNormalMixtureExpectationMaximization = null;
      try {
        multivariateNormalMixtureExpectationMaximization = new MultivariateNormalMixtureExpectationMaximization(arg0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFittedModelThrowsNullPointerException() throws Throwable  {
      double[][] arg0 = new double[1][2];
      MultivariateNormalMixtureExpectationMaximization multivariateNormalMixtureExpectationMaximization = new MultivariateNormalMixtureExpectationMaximization(arg0);
      // Undeclared exception!
      try { 
        multivariateNormalMixtureExpectationMaximization.getFittedModel();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLogLikelihood() throws Throwable  {
      double[][] arg0 = new double[5][4];
      MultivariateNormalMixtureExpectationMaximization multivariateNormalMixtureExpectationMaximization = new MultivariateNormalMixtureExpectationMaximization(arg0);
      double logLikelihood = multivariateNormalMixtureExpectationMaximization.getLogLikelihood();
      assertEquals(0.0, logLikelihood, 0.01);
  }
}
