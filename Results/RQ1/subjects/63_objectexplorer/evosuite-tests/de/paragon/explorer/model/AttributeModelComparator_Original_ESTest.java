/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 21 04:46:24 GMT 2024
 */

package de.paragon.explorer.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import de.paragon.explorer.model.ArrayAttributeModel;
import de.paragon.explorer.model.AttributeModel;
import de.paragon.explorer.model.AttributeModelComparator;
import de.paragon.explorer.model.StandardAttributeModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AttributeModelComparator_Original_ESTest extends AttributeModelComparator_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompareReturningPositive0() throws Throwable  {
      AttributeModelComparator attributeModelComparator = new AttributeModelComparator();
      StandardAttributeModel arg0 = new StandardAttributeModel();
      arg0.setName("<tr>");
      StandardAttributeModel arg1 = new StandardAttributeModel();
      arg1.setName("");
      int compare = attributeModelComparator.compare((AttributeModel) arg0, (AttributeModel) arg1);
      assertEquals(4, compare);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompareReturningPositive1() throws Throwable  {
      StandardAttributeModel arg1 = new StandardAttributeModel();
      arg1.setName("abstractfigure.trying2get_parts_of_a_basic_figure");
      StandardAttributeModel arg0 = new StandardAttributeModel();
      arg0.setName("u_.x,Nu|f");
      AttributeModelComparator attributeModelComparator = new AttributeModelComparator();
      int compare = attributeModelComparator.compare((AttributeModel) arg0, (AttributeModel) arg1);
      assertEquals(20, compare);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompareReturningNegative0() throws Throwable  {
      AttributeModelComparator attributeModelComparator = new AttributeModelComparator();
      StandardAttributeModel arg0 = new StandardAttributeModel();
      StandardAttributeModel arg1 = new StandardAttributeModel();
      arg0.setName("GWeN?tq?;RN[Cd.&1");
      arg1.setName("");
      int compare = attributeModelComparator.compare((AttributeModel) arg0, (AttributeModel) arg1);
      assertEquals((-1), compare);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompareReturningNegative1() throws Throwable  {
      AttributeModelComparator attributeModelComparator = new AttributeModelComparator();
      StandardAttributeModel arg1 = new StandardAttributeModel();
      arg1.setName("<tNr>");
      StandardAttributeModel arg0 = new StandardAttributeModel();
      arg0.setName("");
      int compare = attributeModelComparator.compare((AttributeModel) arg0, (AttributeModel) arg1);
      assertEquals((-5), compare);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompareReturningNegative2() throws Throwable  {
      StandardAttributeModel arg0 = new StandardAttributeModel();
      arg0.setName("abstractfigure.trying2get_parts_of_a_basic_figure");
      StandardAttributeModel arg1 = new StandardAttributeModel();
      arg1.setName("u_.x,Nu|f");
      AttributeModelComparator attributeModelComparator = new AttributeModelComparator();
      int compare = attributeModelComparator.compare((AttributeModel) arg0, (AttributeModel) arg1);
      assertEquals((-20), compare);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompareReturningPositive2() throws Throwable  {
      AttributeModelComparator attributeModelComparator = new AttributeModelComparator();
      StandardAttributeModel arg1 = new StandardAttributeModel();
      StandardAttributeModel arg0 = new StandardAttributeModel();
      arg1.setName("GWeN?tq?;RN[Cd.&1");
      arg0.setName("");
      int compare = attributeModelComparator.compare((AttributeModel) arg0, (AttributeModel) arg1);
      assertEquals(1, compare);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompareReturningZero() throws Throwable  {
      AttributeModelComparator attributeModelComparator = new AttributeModelComparator();
      StandardAttributeModel arg1 = new StandardAttributeModel();
      arg1.setName("GWeN?tq?;RN[Cd.&1");
      int compare = attributeModelComparator.compare((AttributeModel) arg1, (AttributeModel) arg1);
      assertEquals(0, compare);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompareWithNullAndAttributeModelWhereIsObjectModelIsFalse() throws Throwable  {
      AttributeModelComparator attributeModelComparator = new AttributeModelComparator();
      ArrayAttributeModel arg0 = new ArrayAttributeModel();
      int compare = attributeModelComparator.compare((AttributeModel) arg0, (AttributeModel) null);
      assertEquals((-1), compare);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompareWithNullAndNull() throws Throwable  {
      AttributeModelComparator attributeModelComparator = new AttributeModelComparator();
      int compare = attributeModelComparator.compare((AttributeModel) null, (AttributeModel) null);
      assertEquals((-1), compare);
  }
}
