/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 20 21:00:02 GMT 2024
 */

package com.allenstudio.ir.util;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.allenstudio.ir.util.XmlElement;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.List;
import java.util.Observer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XmlElement_ESTest extends XmlElement_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveElementTakingIntReturningXmlElementWhereCountIsZero() throws Throwable  {
      // Given a new XmlElement instance with no sub-elements
      XmlElement xmlElement = new XmlElement();
      
      // When adding a new sub-element with the key "ky1"
      XmlElement addSubElement = xmlElement.addSubElement("ky1");
      
      // Then the added element should be returned as the result of the remove operation
      XmlElement removeElement = xmlElement.removeElement(0);
      assertSame(removeElement, addSubElement);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveElementTakingIntReturningXmlElementWhereCountIsPositive() throws Throwable  {
      // Given a XML element with sub-elements
      XmlElement xmlElement = new XmlElement();
      xmlElement.addSubElement("fi6");
      xmlElement.addSubElement("w@{");
      
      // When removing the first sub-element
      xmlElement.removeElement(0);
      
      // Then the count of sub-elements is 1
      assertEquals(1, xmlElement.count());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetParentReturningXmlElementWhereCountObserversIsPositive() throws Throwable  {
      XmlElement xmlElement = new XmlElement();
      // Create a mock observer object to add to the XML element
      Observer arg0 = mock(Observer.class, new ViolatedAssumptionAnswer());
      
      // Add the mock observer to the XML element
      xmlElement.addObserver(arg0);
      
      // Create a sub-element with a specific name and data
      XmlElement addSubElement = xmlElement.addSubElement("HW", "IukNr+6U~zF");
      
      // Verify that the sub-element was created successfully
      assertNotNull(addSubElement);
      
      // Get the parent element of the added sub-element
      XmlElement parent = addSubElement.getParent();
      
      // Verify that the parent element is not null
      assertNotNull(parent);
      
      // Verify that the parent element has one observer
      assertEquals(1, parent.countObservers());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetParent() throws Throwable  {
      // Create an instance of XmlElement with a specific value
      XmlElement xmlElement = new XmlElement("WC;C_,*");
      
      // Call the addSubElement method and pass it a string argument
      XmlElement addSubElement = xmlElement.addSubElement("WC;C_,*");
      
      // Get the parent of the sub element that was just added
      XmlElement parent = addSubElement.getParent();
      
      // Assert that the count of elements in the parent is 1
      assertEquals(1, parent.count());
      
      // Assert that the parent is not null
      assertNotNull(parent);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNameReturningNull() throws Throwable  {
      // Given
      XmlElement xmlElement = new XmlElement();
      
      // When
      String name = xmlElement.getName();
      
      // Then
      assertNull(name);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNameReturningEmptyString() throws Throwable  {
      // Set up the test fixture
      Hashtable<String, String> arg1 = new Hashtable<>();
      XmlElement xmlElement = new XmlElement("", arg1);
      
      // Execute the code under test
      String name = xmlElement.getName();
      
      // Verify the results
      assertEquals("", name);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetElementsReturningNull() throws Throwable  {
      // Given: a non-null XmlElement with subElements set to null
      XmlElement xmlElement = new XmlElement();
      xmlElement.subElements = null;
      
      // When: calling getElements on the XmlElement
      List elements = xmlElement.getElements();
      
      // Then: the result should be null
      assertNull(elements);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetElementsReturningListWhereIsEmptyIsFalse() throws Throwable  {
      // rollbacked to evosuite
      XmlElement xmlElement = new XmlElement("|]");
      XmlElement addSubElement = xmlElement.addSubElement("", "|]");
      assertEquals("|]", addSubElement.getData());
      assertNotNull(addSubElement);
      
      xmlElement.getElements();
      assertNotSame(xmlElement, addSubElement);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetElementTakingStringReturningXmlElementWhereCountObserversIsPositive() throws Throwable  {
      // Given: We have a XmlElement object called "xmlElement" with the name "WC;C_,*" and it has a sub-element called "addSubElement".
      XmlElement xmlElement = new XmlElement("WC;C_,*");
      XmlElement addSubElement = xmlElement.addSubElement("WC;C_,*");
      assertNotNull(addSubElement);
      
      // When: We create a mock Observer object using the ViolatedAssumptionAnswer class and pass it as an argument to the addObserver method of the "addSubElement" sub-element.
      Observer arg0 = mock(Observer.class, new ViolatedAssumptionAnswer());
      addSubElement.addObserver(arg0);
      
      // Then: We retrieve the sub-element from the XmlElement object using the getElement method and verify that it has a count of 1 observer.
      XmlElement element = xmlElement.getElement("WC;C_,*");
      assertNotNull(element);
      assertEquals(1, element.countObservers());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetElementTakingIntReturningXmlElementWhereCountIsZero() throws Throwable  {
      // rollbacked to evosuite
      XmlElement xmlElement = new XmlElement("ky1)");
      XmlElement addSubElement = xmlElement.addSubElement("ky1)");
      assertEquals(1, xmlElement.count());
      
      xmlElement.getElement(0);
      assertNotSame(xmlElement, addSubElement);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetElementTakingIntReturningXmlElementWhereCountIsPositive() throws Throwable  {
      // rollbacked to evosuite
      XmlElement xmlElement = new XmlElement();
      xmlElement.addSubElement("i6\"o.`wl@{7eM");
      xmlElement.getElement(0);
      assertEquals(1, xmlElement.count());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDataReturningNull() throws Throwable  {
      // Create a new instance of the XmlElement class with an empty name and an empty hashtable as arguments
      Hashtable<String, String> arg1 = new Hashtable<String, String>();
      XmlElement xmlElement = new XmlElement("", arg1);
      
      // Get the data from the XmlElement object
      String data = xmlElement.getData();
      
      // Assert that the data is null
      assertNull(data);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAttributesReturningHashtableWhereIsEmptyIsTrue() throws Throwable  {
      // Given an XML element with no attributes
      XmlElement xmlElement = new XmlElement();
      
      // When the element's attributes are retrieved
      Hashtable<String, String> attributes = xmlElement.getAttributes();
      
      // Then the resulting hashtable should be empty
      assertTrue(attributes.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAttributesReturningHashtableWhereIsEmptyIsFalse() throws Throwable  {
      // Create an instance of the XmlElement class and add an attribute to it
      XmlElement xmlElement = new XmlElement();
      xmlElement.addAttribute("attributeName", "attributeValue");
      
      // Get the attributes of the XmlElement as a Hashtable
      Hashtable<String, String> attributes = xmlElement.getAttributes();
      
      // Check that the size of the attributes Hashtable is 1
      assertEquals(1, attributes.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAttributeTaking2ArgumentsReturningEmptyString() throws Throwable  {
      // Given an XmlElement object with a specific attribute
      XmlElement xmlElement = new XmlElement();
      xmlElement.addAttribute("attr1", "value1");
      
      // When a new attribute is added to the XmlElement object
      String attribute = xmlElement.getAttribute("attr2", "value2");
      
      // Then the new attribute should be returned, and the old attributes should still exist
      assertNotNull(attribute);
      assertEquals("value2", attribute);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAttributeTakingStringReturningNonEmptyString() throws Throwable  {
      // Given a XML element with an age attribute set to 21
      XmlElement xmlElement = new XmlElement();
      xmlElement.addAttribute("age", "21");
      
      // When the getAttribute method is called with "age" as parameter
      String attribute = xmlElement.getAttribute("age");
      
      // Then the value of the age attribute should be returned, which is 21 in this case
      assertEquals("21", attribute);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAttributeTakingStringReturningEmptyString() throws Throwable  {
      // Create a new XML element and add an attribute with a key and value
      XmlElement xmlElement = new XmlElement();
      xmlElement.addAttribute("key", "value");
      
      // Retrieve the added attribute using its key
      String attribute = xmlElement.getAttribute("key");
      
      // Assert that the retrieved attribute has the expected value
      assertEquals("value", attribute);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCountReturningPositive() throws Throwable  {
      // Given a new XmlElement instance created with a random string data
      XmlElement xmlElement = new XmlElement("FPp{[p8'L9U{");
      
      // When a sub-element is added to the element using its addSubElement method
      XmlElement addSubElement = xmlElement.addSubElement("_JI~", "_JI~");
      
      // Then the sub-element should not be null
      assertNotNull(addSubElement);
      
      // And the data of the sub-element should match the given data
      assertEquals("_JI~", addSubElement.getData());
      
      // Given a count method is called on the element
      xmlElement.count();
      
      // Then the element's reference should not be the same as the sub-element's reference
      assertNotSame(xmlElement, addSubElement);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddAttributeReturningNonNull() throws Throwable  {
      // No Comments were added
      Hashtable<String, String> arg1 = new Hashtable<String, String>();
      XmlElement xmlElement = new XmlElement("s9", arg1);
      xmlElement.getAttribute("", "s9");
      xmlElement.addAttribute("", "s9");
      assertFalse(arg1.isEmpty());
      assertEquals(1, arg1.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXmlElementTaking2ArgumentsAndCallsPrintNode() throws Throwable  {
      // Create an XmlElement object with a specific name and value
      XmlElement arg0 = new XmlElement("j72e^2]uqOXz~>@Q&4", "j72e^2]uqOXz~>@Q&4");
      
      // Print the node of the XmlElement object using the printNode() method
      XmlElement.printNode(arg0, "j72e^2]uqOXz~>@Q&4");
      
      // Assert that the number of observers for the XmlElement object is 0
      assertEquals(0, arg0.countObservers());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddSubElementTakingXmlElement() throws Throwable  {
      // No Comments were added
      Hashtable<String, String> arg1 = new Hashtable<String, String>();
      XmlElement arg0 = new XmlElement("", arg1);
      arg0.addSubElement(arg0);
      XmlElement element = arg0.getElement("");
      assertEquals(1, element.count());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXmlElementTaking2ArgumentsAndCallsRemoveFromParent() throws Throwable  {
      // Arrange
      Hashtable<String, String> arg1 = new Hashtable<String, String>();
      XmlElement xmlElement = new XmlElement("", arg1);
      
      // Act
      xmlElement.removeFromParent();
      
      // Assert
      assertEquals(0, xmlElement.count());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddAttributeWithNull() throws Throwable  {
      // Given: A new XmlElement object is created
      XmlElement xmlElement = new XmlElement();
      
      // When: The addAttribute method is called with null values for the attribute name and value
      Object addAttribute = xmlElement.addAttribute(null, null);
      
      // Then: The method should return null as it cannot create an attribute with a null name or value
      assertNull(addAttribute);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNameReturningNonEmptyString() throws Throwable  {
      // No Comments were added
      XmlElement xmlElement = new XmlElement(".EGQIF]oEY)voX//", ".EGQIF]oEY)voX//");
      String name = xmlElement.getName();
      assertEquals(".EGQIF]oEY)voX//", name);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetData() throws Throwable  {
      // Given an XmlElement object with a null argument and a new Hashtable<String, String> object
      Hashtable<String, String> arg1 = new Hashtable<String, String>();
      XmlElement xmlElement = new XmlElement("2.c.yjp", arg1);
      
      // When we set the data of the XmlElement object to an empty string
      xmlElement.setData("");
      
      // Then we expect the getData() method to return an empty string
      String data = xmlElement.getData();
      assertEquals("", data);
      
      // And we expect the XmlElement object to be not null
      assertNotNull(data);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetElementsReturningListWhereIsEmptyIsTrueAndListWhereSizeIsZero() throws Throwable  {
      // Given an XmlElement instance with no child elements
      XmlElement xmlElement = new XmlElement();
      
      // When the element's list of child elements is retrieved
      List<XmlElement> elements = xmlElement.getElements();
      
      // Then the size of the list should be 0
      assertEquals(0, elements.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDataReturningNonEmptyString() throws Throwable  {
      // Given a XmlElement instance with a specific value for the "data" attribute
      XmlElement xmlElement = new XmlElement("com.allenstudio.ir.util.XmlElement", "com.allenstudio.ir.util.XmlElement");
      
      // When we call the getData method on this instance
      String data = xmlElement.getData();
      
      // Then we expect the value of the "data" attribute to be returned
      assertEquals("com.allenstudio.ir.util.XmlElement", data);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetAttributes() throws Throwable  {
      // rollbacked to evosuite
      XmlElement xmlElement = new XmlElement();
      xmlElement.setAttributes((Hashtable<String, String>) null);
      assertEquals(0, xmlElement.count());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAttributesReturningNull() throws Throwable  {
      // Given an XmlElement object with no attributes
      XmlElement xmlElement = new XmlElement("", (Hashtable<String, String>) null);
      
      // When we call the getAttributes method on this XmlElement object
      Hashtable<String, String> actualAttributes = xmlElement.getAttributes();
      
      // Then the returned value should be null
      assertNull(actualAttributes);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetParent() throws Throwable  {
      // Create a new XmlElement with some data
      XmlElement original = new XmlElement("~yf7", "Could not clone XmlElement: ");
      
      // Set the parent of the element to itself
      original.setParent(original);
      
      // Get the parent of the element
      XmlElement parent = original.getParent();
      
      // Assert that the parent is the same as the original element
      assertEquals("Could not clone XmlElement: ", parent.getData());
      assertNotNull(parent);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAttributeTakingStringReturningNull() throws Throwable  {
      // Given: A new XmlElement instance and a "age" attribute that does not exist
      XmlElement xmlElement = new XmlElement();
      
      // When: The "age" attribute is retrieved using the getAttribute method
      String attribute = xmlElement.getAttribute("age");
      
      // Then: The returned value should be null, indicating that the attribute does not exist
      assertNull(attribute);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddElement() throws Throwable  {
      // Given a XML element object
      XmlElement xmlElement = new XmlElement();
      
      // When the addElement method is called with the same XML element as an argument
      boolean added = xmlElement.addElement(xmlElement);
      
      // Then the method should return true indicating that the element was successfully added
      assertTrue(added);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXmlElementTaking2ArgumentsAndCallsHashCode0() throws Throwable  {
      // Create a new XML element with null name and null value
      XmlElement xmlElement = new XmlElement((String) null, (String) null);
      
      // Set the subElements to null
      xmlElement.subElements = null;
      
      // Call the hashCode method on the XML element
      int hashCode = xmlElement.hashCode();
      
      // Assert that the hash code is not equal to 0
      assertNotEquals(0, hashCode);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXmlElementTaking2ArgumentsAndCallsHashCode1() throws Throwable  {
      // Given: An empty XML element with no attributes or children
      XmlElement xmlElement = new XmlElement("", "");
      
      // When: The hash code of the element is calculated
      int hashCode = xmlElement.hashCode();
      
      // Then: The hash code should be 0, since there are no attributes or children
      assertEquals(0, hashCode);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXmlElementTakingNoArgumentsAndCallsHashCode() throws Throwable  {
      // Given
      XmlElement xmlElement = new XmlElement();
      xmlElement.attributes = null;
      
      // When
      int hashCode = xmlElement.hashCode();
      
      // Then
      assertEquals(0, hashCode);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndAddSubElementTakingString() throws Throwable  {
      // Given
      XmlElement xmlElement = new XmlElement("WC;C_,*");
      XmlElement arg0 = xmlElement.addSubElement("WC;C_,*");
      
      // When
      boolean equals = xmlElement.equals(arg0);
      
      // Then
      assertEquals(1, xmlElement.count());
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddAttributeWithNonEmptyStringAndNonEmptyString() throws Throwable  {
      // No Comments were added
      XmlElement xmlElement = new XmlElement("Could not clone XmlElement: ", "g");
      Object arg0 = xmlElement.clone();
      assertTrue(arg0.equals((Object)xmlElement));
      
      xmlElement.addAttribute("Could not clone XmlElement: ", "g");
      boolean equals = xmlElement.equals(arg0);
      assertFalse(arg0.equals((Object)xmlElement));
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXmlElementTakingNoArgumentsAndCallsEquals() throws Throwable  {
      // Given: A new XmlElement object with an empty string value
      XmlElement xmlElement = new XmlElement();
      
      // When: The equals method is called with a non-empty string value
      boolean actualResult = xmlElement.equals("This is a sample XML element.");
      
      // Then: The result should be false, as the string values are not equal
      assertFalse(actualResult);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsWithNull() throws Throwable  {
      // Given a new instance of XmlElement
      XmlElement xmlElement = new XmlElement();
      
      // When we call the equals method with null as an argument
      boolean actual = xmlElement.equals((Object) null);
      
      // Then the result should be false
      assertFalse(actual);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndCreatesXmlElementTakingNoArgumentsAndCreatesXmlElementTakingString() throws Throwable  {
      // Given a new XmlElement object
      XmlElement xmlElement = new XmlElement();
      
      // When comparing an empty string to the XmlElement object
      String emptyString = "";
      boolean equals = xmlElement.equals(emptyString);
      
      // Then assert that it is not equal
      assertFalse(equals);
      
      // And also assert that the XmlElement object is not equal to the empty string as an Object
      assertFalse(xmlElement.equals((Object)emptyString));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningTrue() throws Throwable  {
      // No Comments were added
      Hashtable<String, String> arg1 = new Hashtable<String, String>();
      XmlElement arg0 = new XmlElement("", arg1);
      boolean equals = arg0.equals(arg0);
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXmlElementTakingNoArgumentsAndCallsClone() throws Throwable  {
      // Test that the clone method returns a different object than the original
      XmlElement xmlElement = new XmlElement();
      xmlElement.subElements = null;
      Object clone = xmlElement.clone();
      assertNotSame(clone, xmlElement);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXmlElementTaking2ArgumentsAndCallsClone() throws Throwable  {
      // Given a XML element with a specific name and value
      XmlElement xmlElement = new XmlElement("?h+Xu", (Hashtable<String, String>) null);
      
      // When the element is cloned
      Object clone = xmlElement.clone();
      
      // Then the clone should not be the same instance as the original element
      assertNotSame(clone, xmlElement);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXmlElementTakingStringAndCallsPrintNode() throws Throwable  {
      // Given a XML element with name "person" and no data
      XmlElement person = new XmlElement("<person>");
      
      // When we print the node using the printNode method
      XmlElement.printNode(person, "<name>John Doe</name>");
      
      // Then the output should be the expected value
      assertEquals("<person>", person.getName());
      assertEquals("", person.getData());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXmlElementTakingNoArgumentsAndCallsAddSubElementTakingString() throws Throwable  {
      // Given a new XmlElement instance with no sub-elements
      XmlElement xmlElement = new XmlElement();
      
      // When we add a new sub-element to the element using the "addSubElement" method
      xmlElement.addSubElement(".w 4r{wu>(");
      
      // Then we expect the count of sub-elements to be 1
      assertEquals(1, xmlElement.count());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddSubElementTaking2Arguments() throws Throwable  {
      // Test that an element can be added to another element
      XmlElement xmlElement = new XmlElement();
      
      // Create a sub-element with the name "childElementName"
      XmlElement addSubElement = xmlElement.addSubElement("childElementName", "childElementName");
      
      // Assert that the returned element is not null and has the expected data
      assertNotNull(addSubElement);
      assertEquals("childElementName", addSubElement.getData());
      
      // Get an element with the name "parentElementName" from the main element
      XmlElement element = xmlElement.getElement("parentElementName");
      
      // Assert that no element was returned and that the main element is not the same as the sub-element
      assertNull(element);
      assertNotSame(xmlElement, addSubElement);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetElementTakingStringReturningXmlElementWhereHasChangedIsFalse() throws Throwable  {
      // Given a new XmlElement instance
      XmlElement xmlElement = new XmlElement();
      
      // When we add a sub-element with an ID of "7SKC4|SUx.3ve:"
      xmlElement.addSubElement("7SKC4|SUx.3ve:");
      
      // Then the number of elements in the element should be 1
      assertEquals(1, xmlElement.count());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetElementTakingStringReturningNull() throws Throwable  {
      // Given: an XmlElement object and an invalid input string
      XmlElement xmlElement = new XmlElement();
      String inputString = ".EGQIF]oEY)voX//";
      
      // When: the getElement method is called with the invalid input string
      XmlElement element = xmlElement.getElement(inputString);
      
      // Then: the returned element should be null
      assertNull(element);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXmlElementTakingNoArgumentsAndCallsRemoveFromParent() throws Throwable  {
      // Given: An XML element is created with a parent element
      XmlElement xmlElement = new XmlElement();
      xmlElement.parent = xmlElement;
      
      // When: The element is removed from its parent
      xmlElement.removeFromParent();
      
      // Then: The element's "hasChanged" method returns false
      assertFalse(xmlElement.hasChanged());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveElementTakingXmlElementReturningXmlElementWhereCountIsZero() throws Throwable  {
      // Given a XmlElement object with one sub-element
      XmlElement xmlElement = new XmlElement();
      XmlElement arg0 = xmlElement.addSubElement("cK-,%%");
      assertEquals(1, xmlElement.count());
      
      // When the sub-element is removed from the XmlElement object
      XmlElement removeElement = xmlElement.removeElement(arg0);
      
      // Then the XmlElement object should no longer have any sub-elements
      assertNotSame(xmlElement, removeElement);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveElementTakingXmlElement() throws Throwable  {
      // Given: An XmlElement object is created and a sub-element is added to it.
      XmlElement xmlElement = new XmlElement();
      XmlElement subElement = xmlElement.addSubElement("com.allenstudio.ir.util.XmlElement");
      
      // When: The sub-element is removed from the XmlElement object.
      xmlElement.removeElement(subElement);
      
      // Then: The count of elements in the XmlElement object should be 1.
      assertEquals(1, xmlElement.count());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveElementTakingXmlElementReturningNull() throws Throwable  {
      // Tests that the removeElement() method returns null when attempting to remove a non-existent element from an XmlElement object
      XmlElement arg0 = new XmlElement();
      XmlElement removeElement = arg0.removeElement(arg0);
      assertNull(removeElement);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddAttributeWithNullAndEmptyString() throws Throwable  {
      // Given a valid XML element and an invalid attribute name
      XmlElement xmlElement = new XmlElement();
      String invalidAttrName = null;
      
      // When the addAttribute method is called with an invalid attribute name
      Object addAttribute = xmlElement.addAttribute(invalidAttrName, "");
      
      // Then the method should return null
      assertNull(addAttribute);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAttributeTaking2ArgumentsReturningNull() throws Throwable  {
      // Given: a XmlElement with no attributes
      XmlElement xmlElement = new XmlElement();
      
      // When: getting the attribute with name "lxZ(j)"
      String attribute = xmlElement.getAttribute("lxZ(j)", (String) null);
      
      // Then: the method should return null
      assertNull(attribute);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetName() throws Throwable  {
      XmlElement xmlElement = new XmlElement();
      
      // Given
      String name = "root";
      
      // When
      xmlElement.setName(name);
      
      // Then
      assertEquals(0, xmlElement.count());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppend() throws Throwable  {
      // Given: an XmlElement instance with no observers
      XmlElement element = new XmlElement();
      
      // When: the element is appended to itself
      element.append(element);
      
      // Then: the count of observers should be 0
      assertEquals(0, element.countObservers());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testClone() throws Throwable  {
      // rollbacked to evosuite
      XmlElement xmlElement = new XmlElement();
      xmlElement.addSubElement("This is a test string.");
      xmlElement.clone();
      assertEquals(1, xmlElement.count());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXmlElementTaking2ArgumentsAndCallsAddSubElementTakingString() throws Throwable  {
      // Given a XmlElement with multiple sub-elements
      Hashtable<String, String> arg1 = new Hashtable<String, String>();
      XmlElement xmlElement = new XmlElement("", arg1);
      xmlElement.addSubElement("com.allenstudio.ir.util.XmlElement");
      xmlElement.addSubElement("com.allenstudio.ir.util.XmlElement");
      
      // When the count method is called on the XmlElement
      int actualCount = xmlElement.count();
      
      // Then the count method should return 2, indicating the number of sub-elements
      assertEquals(2, actualCount);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testInsertElement() throws Throwable  {
      // Given an XmlElement object to be cloned
      XmlElement original = new XmlElement("~yf7", "Could not clone XmlElement: ");
      
      // When the element is inserted into a new position in the same document
      original.insertElement(original, 0);
      
      // Then the data of the cloned element should be equal to the original element's data
      assertEquals("Could not clone XmlElement: ", original.getData());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNotifyObservers() throws Throwable  {
      // Given: Set up the XML element with some data
      XmlElement xmlElement = new XmlElement();
      xmlElement.setData("some-data");
      
      // When: Call notifyObservers method on the XML element
      xmlElement.notifyObservers();
      
      // Then: Verify that the observer was notified with the correct data
      assertEquals("some-data", xmlElement.getData());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetParentReturningNull() throws Throwable  {
      // Given a XML element, we want to ensure that it has a null parent reference
      XmlElement xmlElement = new XmlElement();
      
      // When the parent of the element is retrieved
      XmlElement parent = xmlElement.getParent();
      
      // Then we assert that the parent is null
      assertNull(parent);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPrintNodeWithXmlElementWhereCountIsPositive() throws Throwable  {
      // Create a new XmlElement object and add a sub-element to it with the name "root" and data "This is a root element."
      XmlElement arg0 = new XmlElement();
      XmlElement addSubElement = arg0.addSubElement("root", "This is a root element.");
      assertNotNull(addSubElement); // Check that the sub-element was created successfully
      assertEquals("This is a root element.", addSubElement.getData()); // Check that the data of the sub-element is correct
      assertEquals("root", addSubElement.getName()); // Check that the name of the sub-element is correct
      
      // Print the node to the console using the "Q$RNq`|+%w_" parameter
      XmlElement.printNode(arg0, "Q$RNq`|+%w_");
      assertNotSame(arg0, addSubElement); // Check that the object is not the same as the added sub-element
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveAllElements() throws Throwable  {
      // Create a new XML element
      XmlElement xmlElement = new XmlElement();
      
      // Remove all elements from the element
      xmlElement.removeAllElements();
      
      // Assert that the element is empty
      assertNull(xmlElement.getData());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAttributeNames() throws Throwable  {
      // Given the fact that we have an XmlElement object
      XmlElement xmlElement = new XmlElement();
      
      // When we call getAttributeNames() method on this element
      Enumeration attributeNames = xmlElement.getAttributeNames();
      
      // Then we expect the method to return an Enumeration of attribute names
      assertNotNull(attributeNames);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAttributeTaking2Arguments() throws Throwable  {
      // Create an instance of XmlElement and set an attribute
      XmlElement arg0 = new XmlElement();
      arg0.getAttribute("attribute1", "value1");
      
      // Print the node with the attribute
      XmlElement.printNode(arg0, "node1");
      
      // Verify that the data is null
      assertNull(arg0.getData());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCountReturningZero() throws Throwable  {
      // Given: an XML element with no child elements
      XmlElement xmlElement = new XmlElement();
      
      // When: the count method is called on the element
      int count = xmlElement.count();
      
      // Then: the method returns 0
      assertEquals(0, count);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddSubElementTakingXmlElementReturningXmlElementWhereCountIsZero() throws Throwable  {
      // Given: An XmlElement object
      XmlElement xmlElement = new XmlElement();
      
      // When: We call the clone method on the XmlElement object
      XmlElement clone = (XmlElement) xmlElement.clone();
      
      // Then: The clone method should return a non-null reference
      assertNotNull(clone);
      
      // And: The original XmlElement object should not have any sub-elements
      assertEquals(0, xmlElement.count());
      
      // And: The clone object should not be equal to the original object
      assertFalse(clone.equals((Object) xmlElement));
  }
}
