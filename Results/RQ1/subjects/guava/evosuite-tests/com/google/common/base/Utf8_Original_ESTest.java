/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 19 15:58:12 GMT 2024
 */

package com.google.common.base;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import com.google.common.base.Utf8;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Utf8_Original_ESTest extends Utf8_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEncodedLength() throws Throwable  {
      CharBuffer arg0 = CharBuffer.allocate(1496);
      arg0.position(1496);
      int encodedLength = Utf8.encodedLength(arg0);
      assertEquals(0, encodedLength);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsWellFormedTaking3ArgumentsReturningTrue() throws Throwable  {
      byte[] arg0 = new byte[6];
      boolean wellFormed = Utf8.isWellFormed(arg0, (int) (byte)1, 1);
      assertTrue(wellFormed);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsWellFormedTakingByteArrayReturningFalse0() throws Throwable  {
      byte[] arg0 = new byte[9];
      arg0[0] = (byte) (-13);
      arg0[1] = (byte) (-112);
      arg0[2] = (byte) (-112);
      boolean wellFormed = Utf8.isWellFormed(arg0);
      assertFalse(wellFormed);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsWellFormedTakingByteArrayReturningFalse1() throws Throwable  {
      byte[] arg0 = new byte[7];
      arg0[0] = (byte) (-13);
      arg0[1] = (byte) (-112);
      boolean wellFormed = Utf8.isWellFormed(arg0);
      assertFalse(wellFormed);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsWellFormedTakingByteArrayReturningFalse2() throws Throwable  {
      byte[] arg0 = new byte[7];
      arg0[0] = (byte) (-6);
      arg0[1] = (byte) (-65);
      boolean wellFormed = Utf8.isWellFormed(arg0);
      assertFalse(wellFormed);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsWellFormedTakingByteArrayReturningFalse3() throws Throwable  {
      byte[] arg0 = new byte[7];
      arg0[0] = (byte) (-13);
      arg0[2] = (byte) (-112);
      arg0[3] = (byte) (-112);
      arg0[4] = (byte) (-13);
      arg0[1] = (byte) (-112);
      boolean wellFormed = Utf8.isWellFormed(arg0);
      assertFalse(wellFormed);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsWellFormedTakingByteArrayReturningTrue0() throws Throwable  {
      byte[] arg0 = new byte[4];
      arg0[0] = (byte) (-23);
      arg0[1] = (byte) (-112);
      arg0[2] = (byte) (-112);
      boolean wellFormed = Utf8.isWellFormed(arg0);
      assertTrue(wellFormed);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsWellFormedTakingByteArrayReturningFalse4() throws Throwable  {
      byte[] arg0 = new byte[8];
      arg0[0] = (byte) (-19);
      arg0[1] = (byte) (-84);
      boolean wellFormed = Utf8.isWellFormed(arg0);
      assertFalse(wellFormed);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsWellFormedTakingByteArrayReturningFalse5() throws Throwable  {
      byte[] arg0 = new byte[9];
      arg0[0] = (byte) (-32);
      arg0[1] = (byte) (-80);
      boolean wellFormed = Utf8.isWellFormed(arg0);
      assertFalse(wellFormed);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsWellFormedTakingByteArrayReturningFalse6() throws Throwable  {
      byte[] arg0 = new byte[9];
      arg0[0] = (byte) (-32);
      arg0[1] = (byte) (-107);
      boolean wellFormed = Utf8.isWellFormed(arg0);
      assertFalse(wellFormed);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsWellFormedTakingByteArrayReturningFalse7() throws Throwable  {
      byte[] arg0 = new byte[3];
      arg0[0] = (byte) (-19);
      arg0[1] = (byte) (-108);
      boolean wellFormed = Utf8.isWellFormed(arg0);
      assertFalse(wellFormed);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsWellFormedTakingByteArrayReturningFalse8() throws Throwable  {
      byte[] arg0 = new byte[7];
      arg0[2] = (byte) (-32);
      boolean wellFormed = Utf8.isWellFormed(arg0);
      assertFalse(wellFormed);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsWellFormedTakingByteArrayReturningFalse9() throws Throwable  {
      byte[] arg0 = new byte[9];
      arg0[0] = (byte) (-13);
      boolean wellFormed = Utf8.isWellFormed(arg0);
      assertFalse(wellFormed);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsWellFormedTakingByteArrayReturningFalse10() throws Throwable  {
      byte[] arg0 = new byte[3];
      arg0[1] = (byte) (-112);
      boolean wellFormed = Utf8.isWellFormed(arg0);
      assertFalse(wellFormed);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsWellFormedTaking3ArgumentsReturningFalse() throws Throwable  {
      byte[] arg0 = new byte[4];
      arg0[0] = (byte) (-117);
      boolean wellFormed = Utf8.isWellFormed(arg0, 0, 1);
      assertFalse(wellFormed);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsWellFormedTakingByteArrayReturningFalse11() throws Throwable  {
      byte[] arg0 = new byte[3];
      arg0[2] = (byte) (-23);
      boolean wellFormed = Utf8.isWellFormed(arg0);
      assertFalse(wellFormed);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsWellFormedTakingByteArrayReturningTrue1() throws Throwable  {
      byte[] arg0 = new byte[3];
      arg0[0] = (byte) (-34);
      arg0[1] = (byte) (-112);
      boolean wellFormed = Utf8.isWellFormed(arg0);
      assertTrue(wellFormed);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsWellFormedTakingByteArrayReturningFalse12() throws Throwable  {
      byte[] arg0 = new byte[3];
      arg0[0] = (byte) (-34);
      boolean wellFormed = Utf8.isWellFormed(arg0);
      assertFalse(wellFormed);
  }
}
