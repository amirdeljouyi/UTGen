/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 19 15:38:32 GMT 2024
 */

package com.google.common.base;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import com.google.common.base.SmallCharMatcher;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SmallCharMatcher_ESTest extends SmallCharMatcher_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSmearReturningZero() throws Throwable  {
      // Given a value of 0 for the smear parameter
      int smear = SmallCharMatcher.smear(0);
      
      // When we call the method with this value
      assertEquals(0, smear);
      
      // Then the result should be 0
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSmearReturningPositive() throws Throwable  {
      // No Comments were added
      int smear = SmallCharMatcher.smear((-661054404));
      assertEquals(566064808, smear);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSmearReturningNegative() throws Throwable  {
      // This test verifies that the SmallCharMatcher class correctly
      // converts a negative number to a positive one.
      int smear = SmallCharMatcher.smear((-970));
      assertEquals((-661054404), smear);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testChooseTableSizeReturningZero() throws Throwable  {
      // This test ensures that the chooseTableSize method returns 0 when the input parameter is 0.
      int actualTableSize = SmallCharMatcher.chooseTableSize(0);
      assertEquals(0, actualTableSize);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testChooseTableSizeReturningPositive() throws Throwable  {
      // Choose a table size for the SmallCharMatcher based on the input value.
      int chooseTableSize = SmallCharMatcher.chooseTableSize(1);
      
      // Assert that the chosen table size is equal to 2, as expected.
      assertEquals(2, chooseTableSize);
  }
}
