/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 19 15:51:18 GMT 2024
 */

package com.google.common.base;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Function;
import com.google.common.base.Supplier;
import com.google.common.base.Suppliers;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Suppliers_ESTest extends Suppliers_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesExpiringMemoizingSupplierTaking3ArgumentsAndCallsGet() throws Throwable  {
      // Given a Suppliers.ExpiringMemoizingSupplier with an expiration time of 331 seconds and a supplier that supplies TimeUnit.SECONDS
      TimeUnit arg2 = TimeUnit.SECONDS;
      Supplier<TimeUnit> arg0 = Suppliers.ofInstance(arg2);
      Suppliers.ExpiringMemoizingSupplier<TimeUnit> suppliers_ExpiringMemoizingSupplier = new Suppliers.ExpiringMemoizingSupplier<TimeUnit>(arg0, 331L, arg2);
      
      // When we call the get method on the supplier
      TimeUnit get = suppliers_ExpiringMemoizingSupplier.get();
      
      // Then the method returns the same instance of TimeUnit that was supplied by the supplier
      assertSame(arg2, get);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMemoizeWithExpirationThrowsIllegalArgumentException() throws Throwable  {
      // Create a supplier that returns a fixed value after every call
      TimeUnit arg2 = TimeUnit.HOURS;
      Supplier<TimeUnit> arg0 = Suppliers.ofInstance(arg2);
      
      // Check if the method throws an IllegalArgumentException with a negative timeout
      try {
      Suppliers.memoizeWithExpiration(arg0, -436L, arg2);
      fail("Expecting exception: IllegalArgumentException");
      } catch (IllegalArgumentException e) {
      // Verify that the exception is thrown due to an illegal argument
      verifyException("com.google.common.base.Preconditions", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMemoize() throws Throwable  {
      // Setup
      Suppliers.MemoizingSupplier<Integer> supplier = new Suppliers.MemoizingSupplier<>((Supplier<Integer>) null);
      Supplier<Integer> memoize = Suppliers.memoize((Supplier<Integer>) supplier);
      
      // Execute
      Integer value = memoize.get();
      
      // Verify
      assertNotNull(value);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMemoizeWithExpiration() throws Throwable  {
      // Given a null supplier for the memoizing function
      Suppliers.MemoizingSupplier<TimeUnit> arg0 = new Suppliers.MemoizingSupplier<>((Supplier<TimeUnit>) null);
      
      // When we call memoizeWithExpiration with a non-null expiration time and a TimeUnit argument
      TimeUnit arg2 = TimeUnit.MICROSECONDS;
      Supplier<TimeUnit> memoizeWithExpiration = Suppliers.memoizeWithExpiration((Supplier<TimeUnit>) arg0, 1429L, arg2);
      
      // Then the method should return a non-null supplier
      assertNotNull(memoizeWithExpiration);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSupplierFunction() throws Throwable  {
      // Arrange
      Function<Supplier<Integer>, Integer> supplierFunction = Suppliers.supplierFunction();
      
      // Act
      Integer result = supplierFunction.apply(()-> 10);
      
      // Assert
      assertNotNull(result);
      assertEquals(10, result);
  }
}
