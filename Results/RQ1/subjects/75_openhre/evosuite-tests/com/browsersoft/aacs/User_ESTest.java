/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 21 06:48:14 GMT 2024
 */

package com.browsersoft.aacs;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import com.browsersoft.aacs.User;
import java.util.NoSuchElementException;
import javax.naming.ldap.InitialLdapContext;
import javax.naming.ldap.LdapContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class User_ESTest extends User_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetUserNameReturningNonEmptyString() throws Throwable  {
      // Given a user with the name "line.separator" and password "line.separator"
      User user = new User("line.separator", "line.separator");
      
      // When we call getUserName on the user object
      String actualName = user.getUserName();
      
      // Then the method should return the name that was passed in during construction
      assertEquals("line.separator", actualName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetUserIdReturningEmptyString() throws Throwable  {
      // Set up a new User object
      User user = new User();
      
      // Call the getUserId method and verify that it returns the expected value
      assertEquals(0, user.getUserId());
      
      // Assert that the password change flag is not set to true
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSurNameReturningNull() throws Throwable  {
      // Given a user with a null surname
      User user = new User();
      user.setSurName((String) null);
      
      // When the getSurname method is called
      String surName = user.getSurName();
      
      // Then it should return an empty string
      assertEquals("", surName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSurNameReturningNonEmptyString() throws Throwable  {
      // rollbacked to evosuite
      User user = new User();
      user.setSurName("$8]k-j0u3R$E");
      user.getSurName();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRolesReturningSetWhereIsEmptyIsFalseAndSetWhereSizeIsPositive() throws Throwable  {
      // Given a User with an empty name and password
      User user = new User("", "");
      
      // When we add a role to the User
      user.addRole("");
      
      // Then the getRoles method returns true
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPasswordReturningNull() throws Throwable  {
      // Given: A new user is created with a null password
      User user = new User();
      user.setPassword(null);
      
      // When: The password is retrieved
      String actualPassword = user.getPassword();
      
      // Then: The password should be null
      assertNull(actualPassword);
      
      // And: A flag indicating that the password needs to be changed should be set
      assertTrue(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPasswordReturningNonEmptyString() throws Throwable  {
      // Given: A new User is created with a password "dT.x%|K8"
      User user = new User();
      user.encodePassword("dT.x%|K8");
      
      // When: The getPassword method is called on the user object
      String actualPassword = user.getPassword();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPassvalidstartReturningNull() throws Throwable  {
      // Given a user with a null value for passvalidstart
      User user = new User();
      user.setPassvalidstart((String) null);
      
      // When we call getPassvalidstart on the user object
      String passvalidstart = user.getPassvalidstart();
      
      // Then we should receive a null value for passvalidstart
      assertNull(passvalidstart);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPassrenewalReturningNonEmptyString() throws Throwable  {
      // rollbacked to evosuite
      User user = new User();
      user.setPassrenewal(" does not have a constructor which takes one string parameter");
      user.getPassrenewal();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetOrgReturningNull() throws Throwable  {
      // Given a user with no organization set
      User user = new User();
      
      // When the org value is set to null
      user.setOrg(null);
      
      // Then the passchange method should return true
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetOrgReturningNonEmptyString() throws Throwable  {
      // No Comments were added
      User user = new User("T!^7d", "$tZ\"{^Ht?Xdm4\"u^");
      user.setOrg("cFw[I6{qq:I:");
      user.getOrg();
      assertEquals("$tZ\"{^Ht?Xdm4\"u^", user.getUserName());
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLdapContextReturningNonNull() throws Throwable  {
      // Given a User object "user" with a username "c" and password "c",
      // and an InitialLdapContext object "initialLdapContext".
      User user = new User("c", "c");
      InitialLdapContext initialLdapContext = new InitialLdapContext();
      
      // When the method getLdapContext() is called on the User object,
      // and the LDAP context is assigned to a variable.
      LdapContext ldapContext = user.getLdapContext();
      
      // Then the LDAP context should not be null.
      assertNotNull(ldapContext);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIpAddrReturningEmptyString() throws Throwable  {
      // Test that a user with the name "Adding appender named [" can be created
      User user = new User("Adding appender named [", "Adding appender named [");
      
      // Verify that the user's IP address is set to an empty string
      assertEquals("", user.getIpAddr());
      
      // Verify that the user's password change flag is set to false
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetGroupsReturningSetWhereIsEmptyIsFalseAndSetWhereSizeIsPositive() throws Throwable  {
      // rollbacked to evosuite
      User user = new User("sn: ", "cn: ");
      user.addGroup("cFw[I6{qq:I:");
      user.getGroups();
      assertFalse(user.getPasschange());
      assertEquals("cn:", user.getUserName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetCountry() throws Throwable  {
      // No Comments were added
      User user = new User();
      user.setCountry("G^Q{Oe>T~J");
      user.getCountry();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAllowedipsReturningSetWhereIsEmptyIsFalse() throws Throwable  {
      // rollbacked to evosuite
      User user = new User();
      user.addAllowedip("");
      user.getAllowedips();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetActivegroupsReturningSetWhereIsEmptyIsFalse() throws Throwable  {
      // rollbacked to evosuite
      User user = new User();
      user.addActivegroup("{sha}tclass: top");
      user.getActivegroups();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompareToReturningNegative() throws Throwable  {
      // rollbacked to evosuite
      User user = new User("com.browsersoft.aacs.User", "org.apache.log4j.xml.DOMConfigurator");
      User arg0 = new User("false", "com.browsersoft.aacs.User");
      int compareTo = user.compareTo(arg0);
      assertFalse(arg0.getPasschange());
      assertEquals("com.browsersoft.aacs.User", arg0.getUserName());
      assertEquals((-3), compareTo);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheckDigestReturningTrue() throws Throwable  {
      // Given a user with a valid password and a salt
      User user = new User("cn", "E");
      String password = "{SSHA}ltG75FuLRD9A9FGDM1IbTBFhF3TAT+Li";
      String salt = "K@(qZ.(ef:eUzi.]l!";
      
      // When the user attempts to check their digest against a known good digest
      boolean checkDigest = user.checkDigest(password, salt);
      
      // Then the method should return true
      assertTrue(checkDigest);
      
      // And the user's username and password change flag should not be set
      assertEquals("E", user.getUserName());
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompareToReturningPositive() throws Throwable  {
      // No Comments were added
      User arg0 = new User("/mHgS##o", "/mHgS##o");
      User user = new User("=", "/mHgS##o");
      assertEquals("=", user.getUserId());
      
      int compareTo = user.compareTo(arg0);
      assertEquals("/mHgS##o", user.getUserName());
      assertEquals(14, compareTo);
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompareToThrowsNullPointerException() throws Throwable  {
      // No Comments were added
      User arg0 = new User();
      // Undeclared exception!
      try { 
        arg0.compareTo(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.browsersoft.aacs.User", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetUserIdReturningNonEmptyString() throws Throwable  {
      // rollbacked to evosuite
      User user = new User("c", "c");
      user.getUserId();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRolesReturningNull() throws Throwable  {
      // Given a user with a name and password
      User user = new User("Adding appender named [", "Adding appender named [");
      
      // When the user is created
      user.getRoles();
      
      // Then the user's passchange flag should be false
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPasswordReturningEmptyString() throws Throwable  {
      // Arrange
      User user = new User();
      
      // Act
      String password = user.getPassword();
      
      // Assert
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDN() throws Throwable  {
      // Given a User object with certain attributes set
      User user = new User();
      user.setDN("cn=, o=, c=");
      user.setPasschange(false);
      
      // When the getDN and getPasschange methods are called
      String dN = user.getDN();
      boolean passChange = user.getPasschange();
      
      // Then the correct values are returned
      assertEquals("cn=, o=, c=", dN);
      assertFalse(passChange);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetUserNameReturningEmptyString() throws Throwable  {
      // Create a new user object
      User user = new User();
      
      // Call the getUserName method on the user object
      String userName = user.getUserName();
      
      // Assert that the password change flag is false
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCountryReturningEmptyString() throws Throwable  {
      // No Comments were added
      User user = new User();
      user.getCountry();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSurNameReturningEmptyString() throws Throwable  {
      // Create a new user object
      User user = new User();
      
      // Get the surname of the user
      String surname = user.getSurName();
      
      // Assert that the password change flag is set to false
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetGroupsReturningNull() throws Throwable  {
      // rollbacked to evosuite
      User user = new User("sn: ", "cn: ");
      user.getGroups();
      assertEquals("sn:", user.getUserId());
      assertFalse(user.getPasschange());
      assertEquals("cn:", user.getUserName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIpAddrReturningNull() throws Throwable  {
      // rollbacked to evosuite
      User user = new User();
      user.getIpAddr();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheckPasswordReturningTrue() throws Throwable  {
      // Given a new User object
      User user = new User();
      
      // When the password is encoded using the encodePassword method
      user.encodePassword("Pa$w0rd!");
      
      // Then the password should be hashed and stored in the database
      assertEquals("{SSHA}CV+EQIkVwvIxF5x8uD4jyogDNapYWFhY", user.getPassword());
      
      // When the password is checked using the checkPassword method
      boolean checkPassword = user.checkPassword("Pa$w0rd!");
      
      // Then the password should be successfully verified
      assertTrue(checkPassword);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheckDigest() throws Throwable  {
      // Given a user with a password and a digest
      User user = new User();
      String password = "{sha}.factory.";
      String digest = "{sha}.factory.";
      
      // When the checkDigest method is called with the password and digest
      boolean checkDigest = user.checkDigest(password, digest);
      
      // Then the method should return false, as the password and digest do not match
      assertFalse(user.getPasschange());
      assertFalse(checkDigest);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testInit() throws Throwable  {
      // Given: A user object with a username and password
      User user = new User("username", "password");
      
      // When: The user's digest is created using the createDigest method
      byte[] arg0 = new byte[9];
      String createDigest = user.createDigest(arg0, "");
      
      // Then: The resulting digest should match the expected value and the passchange flag should be false
      assertEquals("{SSHA}wlnncbI3dpy2vOmlq3NMV2pto+EAAAAAAAAAAAA=", createDigest);
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateDigestWithEmptyArrayAndNonEmptyString() throws Throwable  {
      // Create a new instance of the User class
      User user = new User("c2m.browsersoftaacsUser", "org.apahe.log4j.xml.DOMConfigurator");
      
      // Generate a digest for the given password and user ID
      byte[] arg0 = new byte[0];
      String createDigest = user.createDigest(arg0, "c2m.browsersoftaacsUser");
      
      // Check if the generated digest matches the expected value
      assertEquals("{SHA}VaAELKDsIsH5ZxWxwQ8y5K367dc=", createDigest);
      
      // Check if the password has changed since the last time it was checked
      boolean checkPasswordChanged = user.getPasschange();
      assertFalse(checkPasswordChanged);
      
      // Check if the digest for the given password and user ID matches the expected value
      boolean checkDigest = user.checkDigest("~agei", "c2m.browsersoftaacsUser");
      assertFalse(checkDigest);
      
      // Check if the user ID and name match the expected values
      assertEquals("c2m.browsersoftaacsUser", user.getUserId());
      assertEquals("org.apahe.log4j.xml.DOMConfigurator", user.getUserName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningFalse() throws Throwable  {
      // Given two different users with the same name and email address
      User user = new User("John Doe", "johndoe@example.com");
      User arg0 = new User("John Doe", "johndoe@example.com");
      
      // When we call the equals method on one of the users with the other user as an argument
      boolean equals = user.equals(arg0);
      
      // Then the result should be false, since the two users have different password change flags
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToStringTakingString() throws Throwable  {
      // Create a new user with the given role and group
      User user = new User();
      user.addRole("Manager");
      user.addGroup("Engineering");
      
      // Convert the user to a string using the toString method
      String string = user.toString("John Doe");
      
      // Check that the string matches the expected value
      assertEquals("dn: cn=, o=, c=John Doecn: John Doeid: John Doesn: John DoeuserPassword: John Doerole: ManagerJohn Doegroup: EngineeringJohn DoeobjectClass: topJohn DoeobjectClass: personJohn Doe", string);
      
      // Check that the user does not have a password change flag set
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetIpAddr() throws Throwable  {
      User user = new User();
      user.setIpAddr("ahRP[KT3NM@D");
      String string = user.toString();
      // Assert that the user does not have a password change flag set
      assertFalse(user.getPasschange());
      // Assert that the toString() method returns the expected output
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesUserTaking2Arguments() throws Throwable  {
      // Given a user object with name and group information
      User user = new User("sn: ", "cn: ");
      user.addGroup("cFw[I6{qq:I:");
      
      // When the user's toString method is called
      String string = user.toString();
      
      // Then the expected DN and group information should be included in the output
      assertEquals("dn: cn=cn:, o=, c=\ncn: cn:\nid: sn:\nsn: \nuserPassword: \ngroup: cFw[I6{qq:I:\nobjectClass: top\nobjectClass: person\n", string);
      
      // And the passchange property should be false
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToStringTakingNoArguments() throws Throwable  {
      // Create a new user with the role "Administrator"
      User user = new User();
      user.addRole("Administrator");
      
      // Call toString on the user object
      String string = user.toString();
      
      // Verify that the output of toString includes the expected values
      assertEquals("dn: cn=, o=, c=\ncn: \nid: \nsn: \nuserPassword: \nrole: Administrator\nobjectClass: top\nobjectClass: person\n", string);
      
      // Verify that the output of toString does not include the value of the "passchange" field
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDN() throws Throwable  {
      // Arrange
      User user = new User();
      user.setDN("cn=John Doe,ou=Users,dc=example,dc=com");
      
      // Act
      String actualUserName = user.getUserName();
      
      // Assert
      assertEquals("John Doe", actualUserName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDNThrowsNoSuchElementException() throws Throwable  {
      // Given: A new instance of the User class
      User user = new User();
      
      // When: The setDN method is called with an invalid input
      try {
      user.setDN(", c=");
      } catch(NoSuchElementException e) {
      
      // Then: An exception is thrown with the correct message and no additional information
      assertEquals("Expecting exception: NoSuchElementException", e.getMessage());
      verifyException("java.util.StringTokenizer", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDNWithNonEmptyString() throws Throwable  {
      // Given a user object
      User user = new User();
      
      // When the setDN method is called with an invalid input
      try {
      user.setDN("o");
      
      // Then an exception is thrown
      fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
      // And the expected exception is thrown
      verifyException("java.util.StringTokenizer", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDNWithNull() throws Throwable  {
      // Given a User object with a valid username and password
      User user = new User("o%}z!E45B% i:A!GPiX", "org.apache.log4j.xml.DOMConfigurator");
      
      // When the DN of the user is set to null
      user.setDN(null);
      
      // Then the username and password should be preserved
      assertEquals("org.apache.log4j.xml.DOMConfigurator", user.getUserName());
      assertEquals("o%}z!E45B% i:A!GPiX", user.getUserId());
      
      // And the passchange flag should be set to false
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddAllowedipWithNonEmptyString() throws Throwable  {
      // rollbacked to evosuite
      User user = new User("{SHA}", "{SHA}");
      user.addAllowedip("{SHA}");
      user.addAllowedip("u(K`=Yng=UWn");
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddActivegroup() throws Throwable  {
      // rollbacked to evosuite
      User user = new User();
      user.addActivegroup("objectClass: person");
      user.addActivegroup("objectClass: person");
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddGroup() throws Throwable  {
      // Given a user with no password change requirement
      User user = new User();
      
      // When the user is added to two groups
      user.addGroup("Developers");
      user.addGroup("Testers");
      
      // Then the user should not be required to change their password
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddRole() throws Throwable  {
      // Given: A new User object is created with a list of roles
      User user = new User();
      user.addRole("Admin");
      user.addRole("Guest");
      
      // When: The user's password change status is checked
      boolean passChange = user.getPasschange();
      
      // Then: The password change status should be false, as the user has not yet changed their password
      assertFalse(passChange);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheckPasswordWithNull() throws Throwable  {
      // Given a new User object with a null password
      User user = new User();
      user.setPassword((String) null);
      
      // When the checkPassword method is called with a null input
      boolean checkPassword = user.checkPassword((String) null);
      
      // Then the method should return false, indicating that the password is not valid
      assertFalse(user.getPasschange());
      assertFalse(checkPassword);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheckPassword() throws Throwable  {
      // Create a new User object and set its password to "Pa$w0rd!"
      User user = new User();
      user.setPassword("Pa$w0rd!");
      
      // Check if the password is valid using the checkPassword() method
      boolean checkPassword = user.checkPassword("Pa$w0rd!");
      
      // Assert that the password change flag is not set (i.e., the password is not changed)
      assertFalse(user.getPasschange());
      
      // Assert that the password is not valid (i.e., it does not match the expected value)
      assertFalse(checkPassword);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEncodePasswordWithEmptyString() throws Throwable  {
      // Given an empty password, when encodePassword is called,
      User user = new User();
      user.encodePassword("");
      
      // Then the password should be set to an empty string and the passchange flag should be false.
      assertEquals("", user.getPassword());
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEncodePasswordWithNull() throws Throwable  {
      // Given a user object with a null password
      User user = new User();
      assertNull(user.getPassword());
      
      // When the encodePassword method is called with a null string argument
      user.encodePassword((String) null);
      
      // Then the getPasschange method should return false
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEncodePasswordAndSetPassword() throws Throwable  {
      // No Comments were added
      User user = new User();
      user.setPassword((String) null);
      user.encodePassword("ErQ\"C=*kn<>_S");
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPasschangeReturningFalse() throws Throwable  {
      // Given: A user has a password change flag set to false
      User user = new User();
      boolean passchange = user.getPasschange();
      assertFalse(passchange);
      
      // When: The password change flag is set to true
      user.setPasschange(true);
      
      // Then: The password change flag should be true
      assertTrue(passchange);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSalt() throws Throwable  {
      // No Comments were added
      User.setSalt("$2y$10$fjCk4FUJ86E9Wp53KgLhZuGmX3vA9IHsRqNXzB87xVTkYd/M5r8nQO");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPassrenewalReturningNull() throws Throwable  {
      // Create a new User object with the given parameters
      User user = new User("]!8{KSSF$S>&W&9;5U]", "s_Acvn");
      // Set the password renewal to null
      user.setPassrenewal(null);
      // Call the getPasswordRenwal method on the User object
      String actual = user.getPassrenewal();
      // Assert that the returned value is equal to the given user ID
      assertEquals("]!8{KSSF$S>&W&9;5U]", actual);
      // Assert that the password change flag is false
      assertFalse(user.getPasschange());
      // Assert that the user name is equal to the given value
      assertEquals("s_Acvn", user.getUserName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningTrue() throws Throwable  {
      // Given: a user with an IP address of "192.168.0.1"
      User arg0 = new User();
      arg0.setIpAddr("192.168.0.1");
      
      // When: we call the equals method on the same user object
      boolean equals = arg0.equals(arg0);
      
      // Then: the result of the equals method should be true, as the user objects are equal
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashCodeThrowsNullPointerException() throws Throwable  {
      // Given: A new User object is created
      User user = new User();
      
      // When: The hashCode() method is called on the User object, but it has not been initialized with any data
      try {
      // Then: An exception should be thrown, specifically a NullPointerException since the user object is null
      user.hashCode();
      fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      // Verify that the expected exception was thrown
      verifyException("com.browsersoft.aacs.User", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetEmail() throws Throwable  {
      // Given
      User user = new User("Adding appender named [", "Adding appender named [");
      
      // When
      String email = user.getEmail();
      boolean passchange = user.getPasschange();
      
      // Then
      assertFalse(passchange);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetPasschange() throws Throwable  {
      // Test that a user can set their password change flag to true and retrieve it
      User user = new User();
      
      // The default value for the passchange flag is false, so we should start with that
      assertFalse(user.getPasschange());
      
      // Set the passchange flag to true
      user.setPasschange(true);
      
      // Verify that the flag has been set correctly
      boolean passchange = user.getPasschange();
      assertTrue(passchange);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testUpdate() throws Throwable  {
      // Create a new user object
      User arg0 = new User();
      
      // Update the user's information
      arg0.update(arg0);
      
      // Assert that the password change flag is not set to true
      assertFalse(arg0.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetEmail() throws Throwable  {
      // Create a new User object and set its properties using the setter methods
      User user = new User("cn", "E");
      user.setEmail("WZh");
      
      // Verify that the getter methods return the correct values for each property
      assertEquals("E", user.getUserName());
      assertEquals("cn", user.getUserId());
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetUserId() throws Throwable  {
      // Create a new User object with a valid user ID and name
      User user = new User("]!8{KSSF$S>&W&9;5U]", "s_Acvn");
      
      // Verify that the user ID is correctly set on the User object
      assertEquals("]!8{KSSF$S>&W&9;5U]", user.getUserId());
      
      // Modify the user ID on the User object and verify that it has been updated
      user.setUserId("$5S0KsL`_9");
      assertEquals("$5S0KsL`_9", user.getUserId());
      
      // Verify that the name is still correctly set on the User object
      assertEquals("s_Acvn", user.getUserName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetUserName() throws Throwable  {
      // Given: A new user with a Log4j configuration
      User user = new User("c2m.browsersoftaacsUser", "org.apahe.log4j.xml.DOMConfigurator");
      
      // When: The user sets their username and password
      user.setUserName("No appenders could be found for logger (");
      
      // Then: The user's password is not changed
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPassrenewalReturningEmptyString() throws Throwable  {
      // rollbacked to evosuite
      User user = new User();
      user.getPassrenewal();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCredentials() throws Throwable  {
      // Given a User object with a valid username and password
      User user = new User("valid_username", "valid_password");
      
      // When we call getCredentials() on the User object
      user.getCredentials();
      
      // Then we expect the passchange flag to be false
      assertFalse(user.getPasschange());
      
      // And we expect the username and password to match our expected values
      assertEquals("valid_username", user.getUserName());
      assertEquals("valid_password", user.getUserId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetOrgReturningEmptyString() throws Throwable  {
      // Given: A user object is created with an organization set to a non-null value
      User user = new User();
      user.setOrg("test");
      
      // When: The user's password change flag is accessed
      boolean passchange = user.getPasschange();
      
      // Then: The password change flag should be false
      assertFalse(passchange);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAllowedipsReturningNull() throws Throwable  {
      // rollbacked to evosuite
      User user = new User();
      user.getAllowedips();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPassvalidstartReturningNonEmptyString() throws Throwable  {
      // rollbacked to evosuite
      User user = new User();
      user.setPassvalidstart("2022-01-01");
      user.getPassvalidstart();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetLdapContext() throws Throwable  {
      // Given: A user object is created with the username "line.separator" and password "line.separator"
      User user = new User("line.separator", "line.separator");
      
      // When: The LDAP context of the user is set to null
      user.setLdapContext((LdapContext) null);
      
      // Then: The passchange field of the user is false
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLdapContextReturningNull() throws Throwable  {
      // rollbacked to evosuite
      User user = new User("c", "c");
      user.getLdapContext();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPassvalidstartReturningEmptyString() throws Throwable  {
      // rollbacked to evosuite
      User user = new User();
      user.getPassvalidstart();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetActivegroupsReturningNull() throws Throwable  {
      // rollbacked to evosuite
      User user = new User();
      user.getActivegroups();
      assertFalse(user.getPasschange());
  }
}
