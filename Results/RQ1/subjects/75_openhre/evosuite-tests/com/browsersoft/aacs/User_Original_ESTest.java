/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 21 06:48:18 GMT 2024
 */

package com.browsersoft.aacs;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import com.browsersoft.aacs.User;
import java.util.NoSuchElementException;
import javax.naming.ldap.InitialLdapContext;
import javax.naming.ldap.LdapContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class User_Original_ESTest extends User_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetUserNameReturningEmptyString() throws Throwable  {
      User user = new User();
      user.getUserName();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetUserIdReturningEmptyString() throws Throwable  {
      User user = new User();
      user.getUserId();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSurNameReturningNull() throws Throwable  {
      User user = new User();
      user.setSurName((String) null);
      user.getSurName();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRolesReturningSetWhereIsEmptyIsFalseAndSetWhereSizeIsPositive() throws Throwable  {
      User user = new User("", "");
      user.addRole("");
      user.getRoles();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPasswordReturningNull() throws Throwable  {
      User user = new User();
      user.setPassword((String) null);
      user.getPassword();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPasswordReturningNonEmptyString() throws Throwable  {
      User user = new User();
      user.encodePassword("dT.x%|K8");
      user.getPassword();
      assertEquals("{SSHA}K1Y6SIoV5W7Ek5enHHWRuFrcyBlYWFhY", user.getPassword());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPassvalidstartReturningNull() throws Throwable  {
      User user = new User();
      user.setPassvalidstart((String) null);
      user.getPassvalidstart();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPassrenewalReturningNonEmptyString() throws Throwable  {
      User user = new User();
      user.setPassrenewal(" does not have a constructor which takes one string parameter");
      user.getPassrenewal();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetOrgReturningNull() throws Throwable  {
      User user = new User();
      user.setOrg((String) null);
      user.getOrg();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLdapContextReturningNonNull() throws Throwable  {
      User user = new User("c", "c");
      InitialLdapContext initialLdapContext = new InitialLdapContext();
      user.dctx = (LdapContext) initialLdapContext;
      user.getLdapContext();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIpAddrReturningNonEmptyString() throws Throwable  {
      User user = new User("sXn", "sXn");
      user.setIpAddr("sXn");
      user.getIpAddr();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetGroupsReturningSetWhereIsEmptyIsFalseAndSetWhereSizeIsPositive() throws Throwable  {
      User user = new User("sn: ", "cn: ");
      user.addGroup("cFw[I6{qq:I:");
      user.getGroups();
      assertEquals("cn:", user.getUserName());
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetActivegroupsReturningSetWhereIsEmptyIsFalse() throws Throwable  {
      User user = new User();
      user.addActivegroup("{sha}tclass: top");
      user.getActivegroups();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompareTo() throws Throwable  {
      User arg0 = new User("/mHgS##o", "/mHgS##o");
      User user = new User("=", "/mHgS##o");
      assertEquals("=", user.getUserId());
      
      int compareTo = user.compareTo(arg0);
      assertEquals("/mHgS##o", user.getUserName());
      assertEquals(14, compareTo);
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetUserIdReturningNonEmptyString() throws Throwable  {
      User user = new User("c", "c");
      user.getUserId();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPasswordReturningEmptyString() throws Throwable  {
      User user = new User();
      user.getPassword();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDN() throws Throwable  {
      User user = new User();
      String dN = user.getDN();
      assertFalse(user.getPasschange());
      assertEquals("cn=, o=, c=", dN);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCountryReturningEmptyString() throws Throwable  {
      User user = new User();
      user.getCountry();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetGroupsReturningNull() throws Throwable  {
      User user = new User("sn: ", "cn: ");
      user.getGroups();
      assertEquals("sn:", user.getUserId());
      assertEquals("cn:", user.getUserName());
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIpAddrReturningNull() throws Throwable  {
      User user = new User();
      user.getIpAddr();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheckDigest() throws Throwable  {
      User user = new User();
      boolean checkDigest = user.checkDigest("{sha}.factory.", "{sha}.factory.");
      assertFalse(checkDigest);
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testInit() throws Throwable  {
      User user = new User("", "");
      user.init();
      byte[] arg0 = new byte[9];
      String createDigest = user.createDigest(arg0, "");
      assertFalse(user.getPasschange());
      assertEquals("{SSHA}wlnncbI3dpy2vOmlq3NMV2pto+EAAAAAAAAAAAA=", createDigest);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningTrue() throws Throwable  {
      User arg0 = new User();
      arg0.setIpAddr("xptdjt~");
      boolean equals = arg0.equals(arg0);
      assertFalse(arg0.getPasschange());
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningFalse() throws Throwable  {
      User user = new User();
      User arg0 = new User("23X?ZOJ?..-,Yv", "23X?ZOJ?..-,Yv");
      boolean equals = user.equals(arg0);
      assertFalse(arg0.getPasschange());
      assertFalse(equals);
      assertFalse(arg0.equals((Object)user));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToStringTakingString() throws Throwable  {
      User user = new User();
      user.addRole((String) null);
      user.addGroup((String) null);
      String string = user.toString((String) null);
      assertEquals("dn: cn=, o=, c=nullcn: nullid: nullsn: nulluserPassword: nullrole: nullnullgroup: nullnullobjectClass: topnullobjectClass: personnull", string);
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetIpAddr() throws Throwable  {
      User user = new User();
      user.setIpAddr("ahRP[KT3NM@D");
      String string = user.toString();
      assertEquals("dn: cn=, o=, c=\ncn: \nid: \nsn: \nuserPassword: \nip: ahRP[KT3NM@D\nobjectClass: top\nobjectClass: person\n", string);
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesUserTaking2Arguments() throws Throwable  {
      User user = new User("sn: ", "cn: ");
      user.addGroup("cFw[I6{qq:I:");
      String string = user.toString();
      assertEquals("dn: cn=cn:, o=, c=\ncn: cn:\nid: sn:\nsn: \nuserPassword: \ngroup: cFw[I6{qq:I:\nobjectClass: top\nobjectClass: person\n", string);
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddRoleWithNonEmptyString() throws Throwable  {
      User user = new User();
      user.addRole("?B&XsIicdCUm");
      String string = user.toString();
      assertFalse(user.getPasschange());
      assertEquals("dn: cn=, o=, c=\ncn: \nid: \nsn: \nuserPassword: \nrole: ?B&XsIicdCUm\nobjectClass: top\nobjectClass: person\n", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDNThrowsNoSuchElementException0() throws Throwable  {
      User user = new User();
      // Undeclared exception!
      try { 
        user.setDN("cn=, ");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDNWithNonEmptyString() throws Throwable  {
      User user = new User();
      // Undeclared exception!
      try { 
        user.setDN("o");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDN() throws Throwable  {
      User user = new User();
      user.setDN("j1lpa");
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDNThrowsNoSuchElementException1() throws Throwable  {
      User user = new User();
      // Undeclared exception!
      try { 
        user.setDN(", c=");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDNWithNull() throws Throwable  {
      User user = new User("o%}z!E45B% i:A!GPiX", "org.apache.log4j.xml.DOMConfigurator");
      user.setDN((String) null);
      assertEquals("org.apache.log4j.xml.DOMConfigurator", user.getUserName());
      assertEquals("o%}z!E45B% i:A!GPiX", user.getUserId());
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddAllowedip() throws Throwable  {
      User user = new User();
      user.addAllowedip("XXXX");
      user.addAllowedip("XXXX");
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddActivegroup() throws Throwable  {
      User user = new User();
      user.addActivegroup("objectClass: person");
      user.addActivegroup("objectClass: person");
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddGroup() throws Throwable  {
      User user = new User();
      user.addGroup("X>|{K_x*vETyA:Kl");
      user.addGroup("X>|{K_x*vETyA:Kl");
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddRole() throws Throwable  {
      User user = new User();
      user.addRole((String) null);
      user.addRole((String) null);
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheckPasswordWithNull() throws Throwable  {
      User user = new User();
      user.setPassword((String) null);
      boolean checkPassword = user.checkPassword((String) null);
      assertFalse(user.getPasschange());
      assertFalse(checkPassword);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheckDigestWithEmptyString() throws Throwable  {
      User user = new User(", o=", "-khc&bl$");
      user.checkPassword("RM^aER");
      boolean checkDigest = user.checkDigest("", "sha-1 ");
      assertFalse(user.getPasschange());
      assertEquals("-khc&bl$", user.getUserName());
      assertFalse(checkDigest);
      assertEquals(", o=", user.getUserId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheckPasswordReturningTrue() throws Throwable  {
      User user = new User();
      user.encodePassword("<s@mqJIM8b?wL(E=");
      boolean checkPassword = user.checkPassword("<s@mqJIM8b?wL(E=");
      assertEquals("{SSHA}3sZbe72NxRtytSTWzOOKCNnmAIZYWFhY", user.getPassword());
      assertTrue(checkPassword);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEncodePasswordWithNull() throws Throwable  {
      User user = new User();
      user.encodePassword((String) null);
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEncodePasswordWithEmptyString() throws Throwable  {
      User user = new User();
      user.encodePassword("");
      assertFalse(user.getPasschange());
      assertEquals("", user.getPassword());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPasschangeReturningFalse() throws Throwable  {
      User user = new User();
      boolean passchange = user.getPasschange();
      assertFalse(passchange);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSalt() throws Throwable  {
      User.setSalt("{ssha}n}c~");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPassrenewalReturningNull() throws Throwable  {
      User user = new User("]!8{KSSF$S>&W&9;5U]", "s_Acvn");
      user.setPassrenewal((String) null);
      user.getPassrenewal();
      assertFalse(user.getPasschange());
      assertEquals("s_Acvn", user.getUserName());
      assertEquals("]!8{KSSF$S>&W&9;5U]", user.getUserId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIpAddrReturningEmptyString() throws Throwable  {
      User user = new User("Adding appender named [", "Adding appender named [");
      user.setIpAddr("");
      user.getIpAddr();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashCodeThrowsNullPointerException() throws Throwable  {
      User user = new User();
      // Undeclared exception!
      try { 
        user.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.browsersoft.aacs.User", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetCountry() throws Throwable  {
      User user = new User(", o=", "-khc&bl$");
      user.setCountry((String) null);
      user.getCountry();
      assertFalse(user.getPasschange());
      assertEquals("-khc&bl$", user.getUserName());
      assertEquals(", o=", user.getUserId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetEmail() throws Throwable  {
      User user = new User("Adding appender named [", "Adding appender named [");
      user.getEmail();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetOrgReturningNonEmptyString() throws Throwable  {
      User user = new User("T!^7d", "$tZ\"{^Ht?Xdm4\"u^");
      user.setOrg("cFw[I6{qq:I:");
      user.getOrg();
      assertEquals("$tZ\"{^Ht?Xdm4\"u^", user.getUserName());
      assertEquals("T!^7d", user.getUserId());
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetPasschange() throws Throwable  {
      User user = new User();
      assertFalse(user.getPasschange());
      
      user.setPasschange(true);
      boolean passchange = user.getPasschange();
      assertTrue(passchange);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateDigestWithEmptyArray() throws Throwable  {
      User user = new User();
      byte[] arg0 = new byte[0];
      String createDigest = user.createDigest(arg0, "");
      assertEquals("{SHA}2jmj7l5rSw0yVb/vlWAYkK/YBwk=", createDigest);
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testUpdate() throws Throwable  {
      User arg0 = new User();
      arg0.update(arg0);
      assertFalse(arg0.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetEmail() throws Throwable  {
      User user = new User("cn", "E");
      user.setEmail("WZh");
      assertEquals("cn", user.getUserId());
      assertEquals("E", user.getUserName());
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSurNameReturningEmptyString() throws Throwable  {
      User user = new User("]!8{KSSF$S>&W&9;5U]", "s_Acvn");
      user.getSurName();
      assertEquals("]!8{KSSF$S>&W&9;5U]", user.getUserId());
      assertFalse(user.getPasschange());
      assertEquals("s_Acvn", user.getUserName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompareToThrowsNullPointerException() throws Throwable  {
      User arg0 = new User();
      // Undeclared exception!
      try { 
        arg0.compareTo(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.browsersoft.aacs.User", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetUserId() throws Throwable  {
      User user = new User("]!8{KSSF$S>&W&9;5U]", "s_Acvn");
      assertEquals("]!8{KSSF$S>&W&9;5U]", user.getUserId());
      
      user.setUserId("$5S0KsL`_9");
      assertEquals("s_Acvn", user.getUserName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetUserName() throws Throwable  {
      User user = new User();
      user.setUserName("{sha}k8");
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetUserNameReturningNonEmptyString() throws Throwable  {
      User user = new User("]!8{KSSF$S>&W&9;5U]", "s_Acvn");
      String userName = user.getUserName();
      assertFalse(user.getPasschange());
      assertEquals("s_Acvn", userName);
      assertEquals("]!8{KSSF$S>&W&9;5U]", user.getUserId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPassrenewalReturningEmptyString() throws Throwable  {
      User user = new User();
      user.getPassrenewal();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetOrgReturningEmptyString() throws Throwable  {
      User user = new User();
      user.getOrg();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAllowedips() throws Throwable  {
      User user = new User("Adding appender named [", "Adding appender named [");
      user.getAllowedips();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCredentials() throws Throwable  {
      User user = new User("]!8{KSSF$S>&W&9;5U]", "s_Acvn");
      user.getCredentials();
      assertFalse(user.getPasschange());
      assertEquals("]!8{KSSF$S>&W&9;5U]", user.getUserId());
      assertEquals("s_Acvn", user.getUserName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSurNameReturningNonEmptyString() throws Throwable  {
      User user = new User();
      user.setSurName("$8]k-j0u3R$E");
      user.getSurName();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRolesReturningNull() throws Throwable  {
      User user = new User("Adding appender named [", "Adding appender named [");
      user.getRoles();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPassvalidstartReturningNonEmptyString() throws Throwable  {
      User user = new User("root", "root");
      user.setPassvalidstart("Parsed \"");
      user.getPassvalidstart();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetLdapContext() throws Throwable  {
      User user = new User("o%}z!E45B% i:A!GPiX", "org.apache.log4j.xml.DOMConfigurator");
      user.setLdapContext((LdapContext) null);
      assertFalse(user.getPasschange());
      assertEquals("o%}z!E45B% i:A!GPiX", user.getUserId());
      assertEquals("org.apache.log4j.xml.DOMConfigurator", user.getUserName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEncodePasswordAndSetPassword() throws Throwable  {
      User user = new User();
      user.setPassword((String) null);
      user.encodePassword("ErQ\"C=*kn<>_S");
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheckDigestReturningTrue() throws Throwable  {
      User user = new User("cn", "E");
      boolean checkDigest = user.checkDigest("{SSHA}ltG75FuLRD9A9FGDM1IbTBFhF3TAT+Li", "K@(qZ.(ef:eUzi.]l!");
      assertEquals("cn", user.getUserId());
      assertFalse(user.getPasschange());
      assertTrue(checkDigest);
      assertEquals("E", user.getUserName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLdapContextReturningNull() throws Throwable  {
      User user = new User("c", "c");
      user.getLdapContext();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPassvalidstartReturningEmptyString() throws Throwable  {
      User user = new User();
      user.getPassvalidstart();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetActivegroupsReturningNull() throws Throwable  {
      User user = new User();
      user.getActivegroups();
      assertFalse(user.getPasschange());
  }
}
