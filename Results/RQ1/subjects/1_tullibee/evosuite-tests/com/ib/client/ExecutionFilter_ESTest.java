/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 20 19:41:40 GMT 2024
 */

package com.ib.client;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import com.ib.client.ExecutionFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExecutionFilter_ESTest extends ExecutionFilter_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesExecutionFilterTaking7ArgumentsAndEqualsReturningTrue() throws Throwable  {
      // rollbacked to evosuite
      ExecutionFilter executionFilter = new ExecutionFilter(0, "", "", "", "", "", "");
      ExecutionFilter arg0 = new ExecutionFilter(0, "", "", "", "", "", "");
      boolean equals = executionFilter.equals(arg0);
      assertTrue(equals);
      assertEquals(0, arg0.m_clientId);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesExecutionFilterTaking7Arguments0() throws Throwable  {
      // rollbacked to evosuite
      ExecutionFilter executionFilter = new ExecutionFilter(0, "", "", "", "", "", "q e(lo>0");
      executionFilter.m_exchange = "?fwynaa";
      ExecutionFilter arg0 = new ExecutionFilter(0, "", "", "", "", "", "");
      boolean equals = executionFilter.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesExecutionFilterTaking7Arguments1() throws Throwable  {
      // rollbacked to evosuite
      ExecutionFilter executionFilter = new ExecutionFilter(0, "", "", "?Fwy=AE", "", (String) null, "q e(lo>0");
      ExecutionFilter arg0 = new ExecutionFilter(0, "", "", "?Fwy=AE", "?Fwy=AE", "?Fwy=AE", (String) null);
      boolean equals = executionFilter.equals(arg0);
      assertEquals(0, arg0.m_clientId);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesExecutionFilterTaking7Arguments2() throws Throwable  {
      // rollbacked to evosuite
      ExecutionFilter executionFilter = new ExecutionFilter(0, "", "", "?Fwy=AE", "", (String) null, "");
      ExecutionFilter arg0 = new ExecutionFilter(0, "", "", (String) null, "?Fwy=AE", (String) null, "");
      boolean equals = executionFilter.equals(arg0);
      assertFalse(equals);
      assertEquals(0, arg0.m_clientId);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesExecutionFilterTakingNoArgumentsAndCreatesExecutionFilterTaking7Arguments0() throws Throwable  {
      // Create an ExecutionFilter with default values
      ExecutionFilter filter = new ExecutionFilter();
      
      // Modify the client ID field
      filter.m_clientId = 0;
      
      // Create a new ExecutionFilter with modified values
      ExecutionFilter newFilter = new ExecutionFilter(0, "", "", "?Fwy=AE", "", (String) null, "");
      
      // Test that the filters are not equal
      assertNotEquals(filter, newFilter);
      
      // Test that the client ID field is set to 0
      assertEquals(0, filter.m_clientId);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesExecutionFilterTakingNoArgumentsAndEqualsReturningFalse() throws Throwable  {
      // Given two ExecutionFilter objects with different account codes
      ExecutionFilter executionFilter = new ExecutionFilter();
      executionFilter.m_acctCode = "";
      ExecutionFilter arg0 = new ExecutionFilter();
      arg0.m_acctCode = "12345";
      
      // When we compare the two objects using equals() method
      boolean equals = executionFilter.equals(arg0);
      
      // Then we expect the comparison to return false
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesExecutionFilterTakingNoArgumentsAndCreatesExecutionFilterTaking7Arguments1() throws Throwable  {
      // Given: An instance of ExecutionFilter with a client ID of -2344
      ExecutionFilter executionFilter = new ExecutionFilter((-2344), "j!", "j!", "j!", "Kj}>gq[", "Kj}>gq[", ";^g*iy-khp-q)8d");
      
      // When: Comparing the instance with a new instance of ExecutionFilter with a different client ID of 0
      ExecutionFilter arg0 = new ExecutionFilter();
      
      // Then:
      // - The instances are not equal
      assertFalse(executionFilter.equals(arg0));
      
      // - The client ID of the first instance is -2344
      assertEquals((-2344), executionFilter.m_clientId);
      
      // - The client ID of the second instance is 0
      assertEquals(0, arg0.m_clientId);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesExecutionFilterTaking7Arguments3() throws Throwable  {
      // Given: two ExecutionFilters with the same values
      ExecutionFilter filter1 = new ExecutionFilter(0, "", "", "", "", "", "q e(lo>0");
      ExecutionFilter filter2 = new ExecutionFilter(0, "", "", "", "", "", "q e(lo>0");
      
      // When: we compare the two filters using equals() method
      boolean areEqual = filter1.equals(filter2);
      
      // Then: the filters should be equal
      assertTrue(areEqual);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsWithNull() throws Throwable  {
      ExecutionFilter executionFilter = new ExecutionFilter(0, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null);
      // Check if the filter is equal to null
      boolean equals = executionFilter.equals((Object) null);
      assertEquals(false, equals);
      
      // Check that the client ID of the filter is 0
      assertEquals(0, executionFilter.m_clientId);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesExecutionFilterTakingNoArgumentsAndEqualsReturningTrue() throws Throwable  {
      // No Comments were added
      ExecutionFilter arg0 = new ExecutionFilter();
      boolean equals = arg0.equals(arg0);
      assertEquals(0, arg0.m_clientId);
      assertTrue(equals);
  }
}
