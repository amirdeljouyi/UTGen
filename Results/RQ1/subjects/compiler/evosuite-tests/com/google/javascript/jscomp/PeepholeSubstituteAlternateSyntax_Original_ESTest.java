/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 19 13:30:54 GMT 2024
 */

package com.google.javascript.jscomp;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PeepholeSubstituteAlternateSyntax_Original_ESTest extends PeepholeSubstituteAlternateSyntax_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSkipFinallyNodesReturningNull() throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node skipFinallyNodes = peepholeSubstituteAlternateSyntax.skipFinallyNodes((Node) null);
      assertNull(skipFinallyNodes);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSkipFinallyNodesReturningNodeWhereIsWithIsTrue() throws Throwable  {
      Node arg0 = new Node(119);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node node = new Node(142, arg0);
      Node skipFinallyNodes = peepholeSubstituteAlternateSyntax.skipFinallyNodes(arg0);
      assertFalse(skipFinallyNodes.isVoid());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSkipFinallyNodesReturningNodeWhereIsVarIsTrue() throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node arg0 = new Node(118);
      Node node = new Node(118, arg0);
      Node skipFinallyNodes = peepholeSubstituteAlternateSyntax.skipFinallyNodes(arg0);
      assertEquals(40, Node.ORIGINALNAME_PROP);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSkipFinallyNodesReturningNodeWhereIsTrueIsTrue() throws Throwable  {
      Node arg0 = new Node(44, 44, 44);
      Node node = new Node(2, arg0, arg0);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node skipFinallyNodes = peepholeSubstituteAlternateSyntax.skipFinallyNodes(arg0);
      assertFalse(skipFinallyNodes.isContinue());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSkipFinallyNodesReturningNodeWhereIsThrowIsTrue() throws Throwable  {
      Node arg0 = new Node(49, 49, 49);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node node = new Node(41, arg0, arg0, arg0);
      Node skipFinallyNodes = peepholeSubstituteAlternateSyntax.skipFinallyNodes(arg0);
      assertFalse(skipFinallyNodes.isScript());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSkipFinallyNodesReturningNodeWhereIsThisIsTrue() throws Throwable  {
      Node arg0 = new Node(42);
      arg0.addChildrenToFront(arg0);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node skipFinallyNodes = peepholeSubstituteAlternateSyntax.skipFinallyNodes(arg0);
      assertFalse(skipFinallyNodes.isVar());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSkipFinallyNodesReturningNodeWhereIsSwitchIsTrue() throws Throwable  {
      Node arg0 = new Node(110, 110, 110);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node node = new Node(2, arg0, 4095, 4);
      Node skipFinallyNodes = peepholeSubstituteAlternateSyntax.skipFinallyNodes(arg0);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSkipFinallyNodesReturningNodeWhereIsStringIsTrue() throws Throwable  {
      Node arg0 = new Node(40, 40, 42);
      arg0.addChildrenToFront(arg0);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node skipFinallyNodes = peepholeSubstituteAlternateSyntax.skipFinallyNodes(arg0);
      assertFalse(skipFinallyNodes.isContinue());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSkipFinallyNodesReturningNodeWhereIsScriptIsTrue() throws Throwable  {
      Compiler compiler = new Compiler();
      Node arg0 = compiler.parseTestCode("vr");
      Node node = new Node(115, arg0, arg0);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node skipFinallyNodes = peepholeSubstituteAlternateSyntax.skipFinallyNodes(arg0);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSkipFinallyNodesReturningNodeWhereIsReturnIsTrue() throws Throwable  {
      Node arg2 = Node.newString("zL-Q");
      Node arg0 = new Node(4, 37, 52);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node node = new Node(4, arg0, arg2, arg0, 32, (-477));
      Node skipFinallyNodes = peepholeSubstituteAlternateSyntax.skipFinallyNodes(arg0);
      assertFalse(skipFinallyNodes.isVar());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSkipFinallyNodesReturningNodeWhereIsOrIsTrue() throws Throwable  {
      Node arg0 = new Node(100, 100, 100);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node node = new Node(2, arg0, 4095, 4);
      Node skipFinallyNodes = peepholeSubstituteAlternateSyntax.skipFinallyNodes(arg0);
      assertFalse(skipFinallyNodes.isObjectLit());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSkipFinallyNodesReturningNodeWhereIsNumberIsTrue() throws Throwable  {
      Node arg0 = new Node(39, 38, (-642));
      arg0.addChildrenToFront(arg0);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node skipFinallyNodes = peepholeSubstituteAlternateSyntax.skipFinallyNodes(arg0);
      assertEquals(39, Node.EMPTY_BLOCK);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSkipFinallyNodesReturningNodeWhereIsNullIsTrue() throws Throwable  {
      Node arg0 = new Node(41, 63, 41);
      Node node = new Node((-3080), arg0, 1816, 39);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node skipFinallyNodes = peepholeSubstituteAlternateSyntax.skipFinallyNodes(arg0);
      assertFalse(skipFinallyNodes.isCall());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSkipFinallyNodesReturningNodeWhereIsNotIsTrue() throws Throwable  {
      Node arg0 = new Node(26, 26, 26);
      Node node = new Node(43, arg0, 34, 544);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node skipFinallyNodes = peepholeSubstituteAlternateSyntax.skipFinallyNodes(arg0);
      assertEquals(54, Node.LAST_PROP);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSkipFinallyNodesReturningNodeWhereIsNewIsTrue() throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node arg0 = new Node(30);
      Node node = new Node(4095, arg0);
      Node skipFinallyNodes = peepholeSubstituteAlternateSyntax.skipFinallyNodes(arg0);
      assertFalse(skipFinallyNodes.isIn());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSkipFinallyNodesReturningNodeWhereIsNameIsTrue() throws Throwable  {
      Node arg0 = new Node(38, 38, 38);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node node = new Node(2, arg0, 44, 2254);
      Node skipFinallyNodes = peepholeSubstituteAlternateSyntax.skipFinallyNodes(arg0);
      assertFalse(skipFinallyNodes.isNE());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSkipFinallyNodesReturningNodeWhereIsNEIsTrue() throws Throwable  {
      Node arg0 = new Node(13, 13, 13);
      Node node = new Node(26, arg0);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node skipFinallyNodes = peepholeSubstituteAlternateSyntax.skipFinallyNodes(arg0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSkipFinallyNodesReturningNodeWhereIsLabelNameIsTrue() throws Throwable  {
      Node arg0 = new Node(153);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node node = new Node(16, arg0, arg0, arg0, 4, 0);
      Node skipFinallyNodes = peepholeSubstituteAlternateSyntax.skipFinallyNodes(arg0);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSkipFinallyNodesReturningNodeWhereIsIfIsTrue() throws Throwable  {
      Node arg0 = new Node(108);
      Node node = new Node(85, arg0);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node skipFinallyNodes = peepholeSubstituteAlternateSyntax.skipFinallyNodes(arg0);
      assertEquals(12, Node.COLUMN_BITS);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSkipFinallyNodesReturningNodeWhereIsHookIsTrue() throws Throwable  {
      Node arg0 = new Node(98, 98, 98);
      Node node = new Node(41, arg0, arg0, arg0, arg0);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node skipFinallyNodes = peepholeSubstituteAlternateSyntax.skipFinallyNodes(arg0);
      assertEquals(41, Node.BRACELESS_TYPE);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSkipFinallyNodesReturningNodeWhereIsGetterDefIsTrue() throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node arg0 = new Node(147);
      Node node = new Node(91, arg0);
      Node skipFinallyNodes = peepholeSubstituteAlternateSyntax.skipFinallyNodes(arg0);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSkipFinallyNodesReturningNodeWhereIsGetElemIsTrue() throws Throwable  {
      Node arg0 = new Node(35, 35, 35);
      arg0.addChildrenToFront(arg0);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node skipFinallyNodes = peepholeSubstituteAlternateSyntax.skipFinallyNodes(arg0);
      assertFalse(skipFinallyNodes.isComma());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSkipFinallyNodesReturningNodeWhereIsForIsTrue() throws Throwable  {
      Node arg0 = new Node(115);
      Node node = new Node(12, arg0, arg0);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node skipFinallyNodes = peepholeSubstituteAlternateSyntax.skipFinallyNodes(arg0);
      assertFalse(skipFinallyNodes.isTry());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSkipFinallyNodesReturningNodeWhereIsFalseIsTrue() throws Throwable  {
      Node arg0 = new Node(43, 43, 43);
      arg0.addChildrenToFront(arg0);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node skipFinallyNodes = peepholeSubstituteAlternateSyntax.skipFinallyNodes(arg0);
      assertEquals(50, Node.FREE_CALL);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSkipFinallyNodesReturningNodeWhereIsExprResultIsTrue() throws Throwable  {
      Node arg0 = new Node(130, 130, 130);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node node = new Node(130, arg0, arg0, arg0, (-1474), (-2781));
      Node skipFinallyNodes = peepholeSubstituteAlternateSyntax.skipFinallyNodes(arg0);
      assertEquals(54, Node.LAST_PROP);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSkipFinallyNodesReturningNodeWhereIsDoIsTrue() throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node arg0 = new Node(114);
      Node node = new Node(114, arg0);
      Node skipFinallyNodes = peepholeSubstituteAlternateSyntax.skipFinallyNodes(arg0);
      assertEquals(50, Node.FREE_CALL);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSkipFinallyNodesReturningNodeWhereIsDelPropIsTrue() throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node arg0 = new Node(31, 31, 31);
      Node node = new Node(45, arg0);
      Node skipFinallyNodes = peepholeSubstituteAlternateSyntax.skipFinallyNodes(arg0);
      assertEquals(41, Node.BRACELESS_TYPE);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSkipFinallyNodesReturningNodeWhereIsDefaultCaseIsTrue() throws Throwable  {
      Node arg0 = new Node(112, 112, 112);
      Node node = new Node(112, arg0);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node skipFinallyNodes = peepholeSubstituteAlternateSyntax.skipFinallyNodes(arg0);
      assertFalse(skipFinallyNodes.isInstanceOf());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSkipFinallyNodesReturningNodeWhereIsDecIsTrue() throws Throwable  {
      Node arg0 = new Node(103, 42, 49);
      Node node = new Node(8303, arg0);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node skipFinallyNodes = peepholeSubstituteAlternateSyntax.skipFinallyNodes(arg0);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSkipFinallyNodesReturningNodeWhereIsContinueIsTrue() throws Throwable  {
      Node arg0 = new Node(117);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node node = new Node(2, arg0, 4095, 4);
      Node skipFinallyNodes = peepholeSubstituteAlternateSyntax.skipFinallyNodes(arg0);
      assertFalse(skipFinallyNodes.isComma());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSkipFinallyNodesReturningNodeWhereIsCommaIsTrue() throws Throwable  {
      Node arg0 = new Node(85, 85, 85);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node node = new Node(16, arg0, arg0, arg0, 4, 0);
      Node skipFinallyNodes = peepholeSubstituteAlternateSyntax.skipFinallyNodes(arg0);
      assertEquals(50, Node.FREE_CALL);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSkipFinallyNodesReturningNodeWhereIsCallIsTrue() throws Throwable  {
      Node arg0 = new Node(37, 63, 37);
      Node node = new Node((-3080), arg0, 1816, 39);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node skipFinallyNodes = peepholeSubstituteAlternateSyntax.skipFinallyNodes(arg0);
      assertFalse(skipFinallyNodes.isDelProp());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSkipFinallyNodesReturningNodeWhereIsBlockIsTrue() throws Throwable  {
      Node arg0 = new Node(125, 125, 125);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node node = new Node((-5724), arg0, 1, 31);
      Node skipFinallyNodes = peepholeSubstituteAlternateSyntax.skipFinallyNodes(arg0);
      assertFalse(skipFinallyNodes.isCall());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSkipFinallyNodesReturningNodeWhereIsArrayLitIsTrue() throws Throwable  {
      Node arg0 = new Node(63);
      arg0.addChildrenToFront(arg0);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node skipFinallyNodes = peepholeSubstituteAlternateSyntax.skipFinallyNodes(arg0);
      assertFalse(skipFinallyNodes.isRegExp());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSkipFinallyNodesReturningNodeWhereGetTypeIsNegative() throws Throwable  {
      Node arg0 = new Node((-752), 10, 108);
      Node node = new Node((-1), arg0, arg0);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node skipFinallyNodes = peepholeSubstituteAlternateSyntax.skipFinallyNodes(arg0);
      assertFalse(skipFinallyNodes.isGetProp());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSkipFinallyNodesReturningNodeWhereIsAddIsTrue() throws Throwable  {
      Node arg0 = new Node(21);
      arg0.addChildrenToFront(arg0);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node skipFinallyNodes = peepholeSubstituteAlternateSyntax.skipFinallyNodes(arg0);
      assertEquals(49, Node.DIRECT_EVAL);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSkipFinallyNodesReturningNodeWhereGetTypeIsZero() throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node arg0 = new Node(0, 0, 0);
      Node node = new Node(2311, arg0, arg0);
      Node skipFinallyNodes = peepholeSubstituteAlternateSyntax.skipFinallyNodes(arg0);
      assertFalse(skipFinallyNodes.isObjectLit());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSkipFinallyNodesReturningNodeWhereIsAndIsTrue() throws Throwable  {
      Node arg0 = new Node(101, (-575), 110);
      Node node = new Node(588, arg0, arg0, arg0, arg0);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node skipFinallyNodes = peepholeSubstituteAlternateSyntax.skipFinallyNodes(arg0);
      assertFalse(skipFinallyNodes.isDo());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsWithIsTrue() throws Throwable  {
      Node arg0 = new Node(119);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsVoidIsTrue() throws Throwable  {
      Node arg0 = new Node(122, 122, 122);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertFalse(optimizeSubtree.isAdd());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsVarIsTrue() throws Throwable  {
      Node arg0 = new Node(118, 118, (-972));
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertFalse(optimizeSubtree.isOr());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsTypeOfIsTrue() throws Throwable  {
      Node arg2 = Node.newString(43, "q}k5-9");
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node arg0 = new Node(32, arg2, arg2, (-610), 4095);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertFalse(optimizeSubtree.isScript());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsTryIsTrue() throws Throwable  {
      Node arg1 = Node.newString("com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax$1");
      Node arg0 = new Node(77, arg1);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertEquals(46, Node.IS_NAMESPACE);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsThisIsTrue() throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node arg0 = new Node(42, 42, 38);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertFalse(optimizeSubtree.isContinue());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsSwitchIsTrue() throws Throwable  {
      Node arg0 = new Node(110, 110, 110);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsStringKeyIsTrue() throws Throwable  {
      Node arg1 = new Node(49, 49, 49);
      Node arg0 = new Node(154, arg1);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertEquals(2, Node.POST_FLAG);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsStringIsTrue() throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node arg1 = Node.newString(190, "");
      Node arg0 = new Node(40, arg1);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsSetterDefIsTrue() throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node arg1 = Node.newString("com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax$3");
      Node arg0 = new Node(148, arg1);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertFalse(optimizeSubtree.isGetProp());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsScriptIsTrue() throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Compiler compiler = new Compiler();
      Node arg0 = compiler.parseTestCode("F^mm=IT+]>[.5z");
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertFalse(optimizeSubtree.isNew());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsOrIsTrue() throws Throwable  {
      Node arg0 = new Node(100, 100, 100);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertFalse(optimizeSubtree.isExprResult());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsObjectLitIsTrue() throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node arg0 = new Node(64, 64, 64);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertEquals(52, Node.LENGTH);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsNumberIsTrue() throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node arg0 = new Node(39);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertEquals(16, Node.SOURCENAME_PROP);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsNullIsTrue() throws Throwable  {
      Node arg2 = Node.newString("undefined");
      Node arg0 = new Node(41, arg2, arg2);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertEquals(50, Node.FREE_CALL);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsNEIsTrue() throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node arg2 = Node.newString("vr");
      Node arg0 = new Node(13, arg2, arg2);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertEquals(41, Node.BRACELESS_TYPE);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsLabelNameIsTrue() throws Throwable  {
      Node arg0 = new Node(153);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertFalse(optimizeSubtree.isFor());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsLabelIsTrue() throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node arg1 = new Node(772);
      Node arg0 = new Node(126, arg1);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertEquals((-1), optimizeSubtree.getLineno());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsInstanceOfIsTrue() throws Throwable  {
      Node arg4 = Node.newString((-2341), "]dUx=9AWM_>-A");
      Node arg0 = new Node(52, arg4, arg4, arg4, arg4);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertFalse(optimizeSubtree.isOr());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsIncIsTrue() throws Throwable  {
      Node arg0 = new Node(102);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertFalse(optimizeSubtree.isAdd());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsInIsTrue() throws Throwable  {
      Node arg0 = new Node(51, 43, 98);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertEquals(29, Node.JSDOC_INFO_PROP);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsGetPropIsTrue() throws Throwable  {
      Node arg0 = new Node(33);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertFalse(optimizeSubtree.isReturn());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsGetElemIsTrue() throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node arg0 = new Node(35);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertEquals(32, Node.INCRDECR_PROP);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsFunctionIsTrue() throws Throwable  {
      Node arg0 = new Node(105);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertFalse(optimizeSubtree.isVar());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsDelPropIsTrue() throws Throwable  {
      Node arg1 = Node.newString((-2341), ";");
      Node arg0 = new Node(31, arg1);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertEquals(50, Node.FREE_CALL);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsDefaultCaseIsTrue() throws Throwable  {
      Node arg0 = new Node(112, 112, 112);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertTrue(optimizeSubtree.isDefaultCase());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsDecIsTrue() throws Throwable  {
      Node arg1 = Node.newString("D51kp*kdlmx");
      Node arg0 = new Node(103, arg1);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertEquals(103, optimizeSubtree.getType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsDebuggerIsTrue() throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node arg0 = new Node(152, 98, 98);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertEquals(50, Node.FREE_CALL);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsContinueIsTrue() throws Throwable  {
      Node arg3 = new Node(110, 110, 110);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node arg0 = new Node(117, arg3, arg3, arg3, (-1082), 51);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertFalse(optimizeSubtree.hasMoreThanOneChild());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsCatchIsTrue() throws Throwable  {
      Node arg0 = new Node(120);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertFalse(optimizeSubtree.isLabelName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsCaseIsTrue() throws Throwable  {
      Node arg1 = Node.newString("");
      Node arg0 = new Node(111, arg1);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertFalse(optimizeSubtree.isReturn());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsBreakIsTrue() throws Throwable  {
      Node arg1 = Node.newString("o", 116, 116);
      Node arg0 = new Node(116, arg1);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertFalse(optimizeSubtree.isContinue());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsAssignAddIsTrue() throws Throwable  {
      Node arg0 = new Node(93, 63, 37);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertFalse(optimizeSubtree.isRegExp());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsAssignIsTrue() throws Throwable  {
      Node arg0 = new Node(86, (-58), 86);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertEquals(54, Node.LAST_PROP);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsAndIsTrue() throws Throwable  {
      Node arg0 = new Node(101, 101, 101);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertFalse(optimizeSubtree.isFalse());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsAddIsTrue() throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node arg0 = new Node(21);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereHasMoreThanOneChildIsTrue() throws Throwable  {
      Node arg3 = new Node(88, 88, 88);
      Node arg2 = Node.newString((-4626), "L!kI", (-1203), 4095);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node arg0 = new Node(124, arg2, arg2, arg3, Integer.MAX_VALUE, (-186));
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertFalse(optimizeSubtree.isVar());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereGetTypeIsZero() throws Throwable  {
      Node arg0 = new Node(0);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertFalse(optimizeSubtree.isThrow());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereGetLinenoIsZero() throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node[] arg1 = new Node[0];
      Node arg0 = new Node(500, arg1);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertFalse(optimizeSubtree.isBreak());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsGetterDefIsTrue() throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node arg0 = new Node(147, 43, 0);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertFalse(optimizeSubtree.isFor());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsExceptionPossibleReturningFalse() throws Throwable  {
      Node arg0 = new Node(4);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      boolean exceptionPossible = peepholeSubstituteAlternateSyntax.isExceptionPossible(arg0);
      assertFalse(exceptionPossible);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetExceptionHandler() throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Compiler compiler = new Compiler();
      Node arg0 = compiler.parseTestCode("F^mm=IT+]>[.5z");
      Node exceptionHandler = peepholeSubstituteAlternateSyntax.getExceptionHandler(arg0);
      assertNull(exceptionHandler);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAreMatchingExits() throws Throwable  {
      Node arg0 = Node.newString("undefined");
      Node arg1 = new Node(4, 37, 52);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      boolean matchingExits = peepholeSubstituteAlternateSyntax.areMatchingExits(arg0, arg1);
      assertFalse(matchingExits);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testContainsUnicodeEscapeReturningTrue() throws Throwable  {
      boolean containsUnicodeEscape = PeepholeSubstituteAlternateSyntax.containsUnicodeEscape("M#vbdiT)oWSMZ8!L_");
      assertTrue(containsUnicodeEscape);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testContainsUnicodeEscapeReturningFalse() throws Throwable  {
      boolean containsUnicodeEscape = PeepholeSubstituteAlternateSyntax.containsUnicodeEscape("");
      assertFalse(containsUnicodeEscape);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeAndOptimizeSubtreeReturningNodeWhereIsCommaIsFalse0() throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node arg2 = Node.newString("", 63, 63);
      Node arg0 = new Node(63, arg2, arg2);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeAndOptimizeSubtreeReturningNodeWhereIsCommaIsFalse1() throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node arg1 = Node.newNumber((double) 63);
      Node arg0 = new Node(63, arg1);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertFalse(optimizeSubtree.isSetterDef());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeWithNodeWhereIsTrueIsTrue() throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node arg0 = new Node(44);
      // Undeclared exception!
      try { 
        peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeWithNodeWhereIsExprResultIsTrue() throws Throwable  {
      Node arg2 = new Node(101, 101, 101);
      Node arg0 = new Node(130, arg2, arg2);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      // Undeclared exception!
      try { 
        peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeThrowsNullPointerException0() throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node arg1 = Node.newString(100, "]dUxF9A1_-A");
      Node arg0 = new Node(108, arg1);
      // Undeclared exception!
      try { 
        peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeWithNodeWhereIsHookIsTrue() throws Throwable  {
      Node arg0 = new Node(98, 98, 98);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      arg0.addChildrenToBack(arg0);
      // Undeclared exception!
      try { 
        peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeThrowsNullPointerException1() throws Throwable  {
      Node arg0 = new Node(26);
      arg0.addChildrenToFront(arg0);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      // Undeclared exception!
      try { 
        peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeThrowsNullPointerException2() throws Throwable  {
      Node arg1 = new Node(108, 108, 108);
      Node arg0 = new Node(108, arg1);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      // Undeclared exception!
      try { 
        peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsNotIsTrue() throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node arg1 = new Node(772, 772, 772);
      Node arg0 = new Node(26, arg1);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertEquals((-1), optimizeSubtree.getCharno());
      assertNotNull(optimizeSubtree);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeThrowsNullPointerException3() throws Throwable  {
      Node arg2 = new Node(45, 45, 45);
      Node arg0 = new Node(26, arg2, arg2);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      // Undeclared exception!
      try { 
        peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsExceptionPossibleReturningTrue() throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node arg0 = new Node(49, 49, 49);
      boolean exceptionPossible = peepholeSubstituteAlternateSyntax.isExceptionPossible(arg0);
      assertTrue(exceptionPossible);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAreMatchingExitsThrowsIllegalStateException() throws Throwable  {
      Node arg1 = Node.newString(130, "ml}He<`[%*");
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      // Undeclared exception!
      try { 
        peepholeSubstituteAlternateSyntax.areMatchingExits(arg1, arg1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsPureWithNodeWhereIsThrowIsTrue() throws Throwable  {
      Node arg0 = new Node(49, 49, 49);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      boolean pure = peepholeSubstituteAlternateSyntax.isPure(arg0);
      assertFalse(pure);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsPureWithNodeWhereIsFalseIsTrue() throws Throwable  {
      Node arg0 = new Node(43, 43, 43);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      boolean pure = peepholeSubstituteAlternateSyntax.isPure(arg0);
      assertTrue(pure);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsPureWithNodeWhereIsNewIsTrue() throws Throwable  {
      Node arg0 = new Node(30);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      boolean pure = peepholeSubstituteAlternateSyntax.isPure(arg0);
      assertFalse(pure);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsPureWithNull() throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      boolean pure = peepholeSubstituteAlternateSyntax.isPure((Node) null);
      assertTrue(pure);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeThrowsNullPointerException4() throws Throwable  {
      Node arg0 = new Node(4, 37, 52);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node arg3 = new Node(4, 37, 52);
      Node node = new Node(12, arg0, arg3, arg3);
      // Undeclared exception!
      try { 
        peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeThrowsNullPointerException5() throws Throwable  {
      Node arg3 = Node.newString("C");
      Node arg0 = new Node(4, 37, 52);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node node = new Node(12, arg0, arg3, arg3);
      // Undeclared exception!
      try { 
        peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsBlockIsTrue() throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node arg1 = new Node(125);
      Node arg0 = new Node(125, arg1);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertFalse(optimizeSubtree.isDelProp());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeAndOptimizeSubtreeReturningNodeWhereIsCommaIsTrue0() throws Throwable  {
      Node arg0 = new Node(85, 85, 85);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node node = new Node(16, arg0, arg0, arg0, 4, 0);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertTrue(optimizeSubtree.isComma());
      assertNotNull(optimizeSubtree);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeThrowsIllegalArgumentException0() throws Throwable  {
      Compiler compiler = new Compiler();
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node arg2 = compiler.parseTestCode("vr");
      Node arg0 = new Node(115, arg2, arg2);
      // Undeclared exception!
      try { 
        peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // malformed 'for' statement FOR
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeThrowsIllegalArgumentException1() throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node arg1 = new Node(4);
      Node arg0 = new Node(115, arg1);
      // Undeclared exception!
      try { 
        peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // malformed 'for' statement FOR
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsExprResultIsTrue() throws Throwable  {
      Node arg1 = new Node((-1480), 38, 38);
      Node arg0 = new Node(130, arg1, (-828), 140);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertFalse(optimizeSubtree.isFor());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeThrowsIllegalArgumentException2() throws Throwable  {
      Node arg0 = new Node(115, 115, 115);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      // Undeclared exception!
      try { 
        peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // malformed 'for' statement FOR 115
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsDoIsTrue() throws Throwable  {
      Node arg1 = new Node(49, 49, 49);
      Node arg0 = new Node(114, arg1);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertFalse(optimizeSubtree.isCall());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsWhileIsTrue() throws Throwable  {
      Compiler compiler = new Compiler();
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node arg2 = compiler.parseTestCode("r");
      Node arg0 = new Node(113, arg2, arg2);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertEquals(39, Node.EMPTY_BLOCK);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeThrowsNullPointerException6() throws Throwable  {
      Node arg1 = Node.newString("");
      Node arg0 = new Node(108, arg1);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      // Undeclared exception!
      try { 
        peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeAndOptimizeSubtreeReturningNodeWhereIsCommaIsTrue1() throws Throwable  {
      Node arg0 = new Node(85, 85, 85);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertEquals(16, Node.SOURCENAME_PROP);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeAndOptimizeSubtreeReturningNodeWhereIsCommaIsFalse2() throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node arg1 = Node.newString("]dUx=9AWM_>-A");
      Node arg0 = new Node(63, arg1);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeWithNodeWhereIsThrowIsTrue() throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node arg0 = new Node(49, 49, 49);
      // Undeclared exception!
      try { 
        peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsTrueIsTrue() throws Throwable  {
      Node arg0 = new Node(44, 44, 44);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertEquals(44, optimizeSubtree.getType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereIsFalseIsTrue() throws Throwable  {
      Node arg0 = new Node(43, 43, 43);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(false);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertFalse(optimizeSubtree.hasOneChild());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeReturningNodeWhereGetTypeIsNegative() throws Throwable  {
      Node arg0 = new Node((-752), 10, 108);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      Node optimizeSubtree = peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
      assertEquals(53, Node.INPUT_ID);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOptimizeSubtreeThrowsNullPointerException7() throws Throwable  {
      Node arg1 = Node.newString("I=Qbtr:^zn1");
      Node arg0 = new Node(4, arg1);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      // Undeclared exception!
      try { 
        peepholeSubstituteAlternateSyntax.optimizeSubtree(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAreMatchingExitsThrowsNullPointerException() throws Throwable  {
      Node arg2 = new Node(4);
      Node arg1 = new Node(4, arg2, arg2);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax = new PeepholeSubstituteAlternateSyntax(true);
      // Undeclared exception!
      try { 
        peepholeSubstituteAlternateSyntax.areMatchingExits(arg1, arg1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }
}
