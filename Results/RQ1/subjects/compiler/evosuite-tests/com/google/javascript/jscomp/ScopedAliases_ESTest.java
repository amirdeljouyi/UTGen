/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 19 13:56:26 GMT 2024
 */

package com.google.javascript.jscomp;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.PreprocessorSymbolTable;
import com.google.javascript.jscomp.ScopedAliases;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ScopedAliases_ESTest extends ScopedAliases_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesScopedAliasesAndCallsProcess() throws Throwable  {
      // Given a compiler object and an alias transformation handler
      Compiler compiler = new Compiler();
      CompilerOptions.AliasTransformationHandler aliasTransformationHandler = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      
      // When we create a synthetic AST with the anonymous name
      SyntheticAst syntheticAst = new SyntheticAst("[anonymous]");
      
      // And we get the root node of the AST
      Node astRoot = syntheticAst.getAstRoot(compiler);
      
      // And we process the scoped aliases on the AST
      ScopedAliases scopedAliases = new ScopedAliases(compiler, (PreprocessorSymbolTable) null, aliasTransformationHandler);
      scopedAliases.process(astRoot, astRoot);
      
      // Then we assert that the root node is not an optional argument
      assertFalse(astRoot.isOptionalArg());
  }
}
