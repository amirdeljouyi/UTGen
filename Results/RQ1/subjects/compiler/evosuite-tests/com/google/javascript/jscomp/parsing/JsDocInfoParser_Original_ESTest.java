/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 19 14:14:45 GMT 2024
 */

package com.google.javascript.jscomp.parsing;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import com.google.javascript.jscomp.parsing.JsDocInfoParser;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsDocInfoParser_Original_ESTest extends JsDocInfoParser_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseTypeStringReturningNodeWhereWasEmptyNodeIsFalseAndNodeWhereHasMoreThanOneChildIsFalse0() throws Throwable  {
      Node parseTypeString = JsDocInfoParser.parseTypeString("{do}\n");
      assertEquals(309, parseTypeString.getType());
      assertNotNull(parseTypeString);
      assertTrue(parseTypeString.hasOneChild());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseTypeStringReturningNull0() throws Throwable  {
      Node parseTypeString = JsDocInfoParser.parseTypeString("{Bz98GO#P:l");
      assertNull(parseTypeString);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseTypeStringReturningNodeWhereWasEmptyNodeIsFalseAndNodeWhereHasMoreThanOneChildIsTrue0() throws Throwable  {
      Node parseTypeString = JsDocInfoParser.parseTypeString("[#-mN]|Y+UyUV(Ob");
      assertNotNull(parseTypeString);
      assertEquals(301, parseTypeString.getType());
      assertEquals(2, parseTypeString.getChildCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseTypeStringReturningNull1() throws Throwable  {
      Node parseTypeString = JsDocInfoParser.parseTypeString("[\n");
      assertNull(parseTypeString);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseTypeStringReturningNull2() throws Throwable  {
      Node parseTypeString = JsDocInfoParser.parseTypeString("[!\",U3v7y{-Z[w");
      assertNull(parseTypeString);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseTypeStringReturningNodeWhereWasEmptyNodeIsFalseAndNodeWhereHasMoreThanOneChildIsFalse1() throws Throwable  {
      Node parseTypeString = JsDocInfoParser.parseTypeString("(\"#F){cT/`dhP54");
      assertEquals(301, parseTypeString.getType());
      assertTrue(parseTypeString.hasOneChild());
      assertNotNull(parseTypeString);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseTypeStringReturningNodeWhereWasEmptyNodeIsFalseAndNodeWhereHasMoreThanOneChildIsTrue1() throws Throwable  {
      Node parseTypeString = JsDocInfoParser.parseTypeString("/oU/||\"|U");
      assertEquals(301, parseTypeString.getType());
      assertNotNull(parseTypeString);
      assertEquals(3, parseTypeString.getChildCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseTypeStringReturningNull3() throws Throwable  {
      Node parseTypeString = JsDocInfoParser.parseTypeString("function");
      assertNull(parseTypeString);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseTypeStringWithNonEmptyString() throws Throwable  {
      Node parseTypeString = JsDocInfoParser.parseTypeString("undefined");
      assertNotNull(parseTypeString);
      assertEquals(0, parseTypeString.getSourcePosition());
      assertTrue(parseTypeString.isString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseTypeStringReturningNull4() throws Throwable  {
      Node parseTypeString = JsDocInfoParser.parseTypeString("function (");
      assertNull(parseTypeString);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseTypeStringReturningNull5() throws Throwable  {
      Node parseTypeString = JsDocInfoParser.parseTypeString("{)^N l");
      assertNull(parseTypeString);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseTypeStringReturningNodeWhereGetCharnoIsZero() throws Throwable  {
      Node parseTypeString = JsDocInfoParser.parseTypeString("*2Da=3Z:'C");
      assertEquals(302, parseTypeString.getType());
      assertNotNull(parseTypeString);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseTypeStringReturningNull6() throws Throwable  {
      Node parseTypeString = JsDocInfoParser.parseTypeString("[ooCam'/E+!qA+*");
      assertNull(parseTypeString);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseTypeStringReturningNodeWhereWasEmptyNodeIsFalseAndNodeWhereHasMoreThanOneChildIsFalse2() throws Throwable  {
      Node parseTypeString = JsDocInfoParser.parseTypeString("pcB9?g;;CJ%6");
      assertNotNull(parseTypeString);
      assertEquals(304, parseTypeString.getType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseTypeStringReturningNull7() throws Throwable  {
      Node parseTypeString = JsDocInfoParser.parseTypeString("?|");
      assertNull(parseTypeString);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseTypeStringReturningNodeWhereGetChildCountIsZeroAndNodeWhereHasChildrenIsFalse() throws Throwable  {
      Node parseTypeString = JsDocInfoParser.parseTypeString("?}P:ITU6U2bc|T`D&<+a");
      assertEquals(304, parseTypeString.getType());
      assertNotNull(parseTypeString);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseTypeString() throws Throwable  {
      Node parseTypeString = JsDocInfoParser.parseTypeString("null");
      assertNotNull(parseTypeString);
      assertEquals(40, parseTypeString.getType());
      assertEquals(0, parseTypeString.getSourcePosition());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseTypeStringReturningNull8() throws Throwable  {
      Node parseTypeString = JsDocInfoParser.parseTypeString("(NLkjX,WDb(|R%{pK");
      assertNull(parseTypeString);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseTypeStringReturningNull9() throws Throwable  {
      Node parseTypeString = JsDocInfoParser.parseTypeString("!");
      assertNull(parseTypeString);
  }
}
