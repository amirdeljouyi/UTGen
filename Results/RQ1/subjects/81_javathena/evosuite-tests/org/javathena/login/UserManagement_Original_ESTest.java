/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Mon Mar 18 06:51:28 GMT 2024
 */

package org.javathena.login;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.Socket;
import java.sql.ResultSet;
import javolution.util.FastMap;
import javolution.util.FastTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Socket_data;
import org.javathena.login.UserManagement;
import org.javathena.login.parse.FromAdmin;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UserManagement_Original_ESTest extends UserManagement_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSendUserListThrowsIndexOutOfBoundsException() throws Throwable  {
      // Undeclared exception!
      try { 
        UserManagement.sendUserList((Socket_data) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javolution.util.FastTable", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRequestAccountReg2ThrowsNullPointerException() throws Throwable  {
      byte[] arg1 = new byte[11];
      // Undeclared exception!
      try { 
        UserManagement.requestAccountReg2((Socket_data) null, arg1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.UserManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRequestAccountDataThrowsNullPointerException() throws Throwable  {
      byte[] arg1 = new byte[6];
      // Undeclared exception!
      try { 
        UserManagement.requestAccountData((Socket_data) null, arg1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.UserManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReceiveAccountReg2ThrowsNullPointerException() throws Throwable  {
      byte[] arg1 = new byte[9];
      // Undeclared exception!
      try { 
        UserManagement.receiveAccountReg2((Socket_data) null, arg1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.UserManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetUserSQLTakingResultSetThrowsNullPointerException() throws Throwable  {
      // Undeclared exception!
      try { 
        UserManagement.getUserSQL((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.UserManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDynamicFailBanCheckMySQLThrowsNullPointerException() throws Throwable  {
      // Undeclared exception!
      try { 
        UserManagement.dynamicFailBanCheckMySQL("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.utiles.sql.MySQLConfig", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddGMThrowsNullPointerException() throws Throwable  {
      // Undeclared exception!
      try { 
        UserManagement.addGM((-2488), (-935));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.UserManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testTabHexToIntReturningPositive() throws Throwable  {
      byte[] arg0 = new byte[3];
      arg0[2] = (byte)30;
      int tabHexToInt = UserManagement.tabHexToInt(arg0);
      assertEquals(1966080, tabHexToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testTabHexToIntReturningNegative() throws Throwable  {
      byte[] arg0 = new byte[7];
      arg0[6] = (byte)10;
      int tabHexToInt = UserManagement.tabHexToInt(arg0);
      assertEquals((-10), tabHexToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereIsResetLogincounIsTrue() throws Throwable  {
      Auth_data arg0 = new Auth_data();
      arg0.setResetLogincoun(true);
      Auth_data addUser = UserManagement.addUser(arg0);
      assertEquals(0L, addUser.getConnect_until_time());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetVersionIsPositive() throws Throwable  {
      Auth_data arg0 = UserManagement.addUserTXT(" OR Variable_name = 'init_connect'", " OR Variable_name = 'init_connect'", "62Rbo5l?t@{v", 'L');
      arg0.setVersion(11);
      Auth_data addUser = UserManagement.addUser(arg0);
      assertEquals("-", addUser.getEmail());
      assertEquals('L', addUser.getSex());
      assertEquals(" OR Variable_name = 'init_connect'", addUser.getUserid());
      assertEquals(0, addUser.getLogincount());
      assertEquals(0, addUser.getState());
      assertEquals(" OR Variable_name = 'init_connect'", addUser.getPass());
      assertEquals(0, (int)addUser.getAccount_id());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetVersionIsNegative() throws Throwable  {
      Auth_data arg0 = new Auth_data();
      arg0.setVersion((-769));
      Auth_data addUser = UserManagement.addUser(arg0);
      assertSame(arg0, addUser);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetStateIsPositive() throws Throwable  {
      Auth_data arg0 = UserManagement.addUserTXT("/*", "/*", "/*", ']');
      assertEquals(0, arg0.getState());
      
      arg0.setState(6);
      UserManagement.addUser(arg0);
      assertEquals(']', arg0.getSex());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetLogincountIsPositive() throws Throwable  {
      Auth_data arg0 = new Auth_data();
      arg0.setLogincount(56);
      Auth_data addUser = UserManagement.addUser(arg0);
      assertFalse(addUser.isResetLogincoun());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetLogincountIsNegative() throws Throwable  {
      Auth_data arg0 = new Auth_data();
      arg0.setLogincount((-1029));
      Auth_data addUser = UserManagement.addUser(arg0);
      assertNull(addUser.getEmail());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetLogin_id2IsPositive() throws Throwable  {
      Auth_data arg0 = new Auth_data();
      arg0.setLogin_id2(99);
      Auth_data addUser = UserManagement.addUser(arg0);
      assertNull(addUser.getEmail());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetLogin_id2IsNegative() throws Throwable  {
      Auth_data arg0 = UserManagement.addUserTXT((String) null, (String) null, "Account limit from company", '^');
      arg0.setLogin_id2((-2346));
      Auth_data addUser = UserManagement.addUser(arg0);
      assertEquals('^', addUser.getSex());
      assertEquals("-", addUser.getEmail());
      assertEquals(0, addUser.getLogincount());
      assertEquals(0, addUser.getState());
      assertEquals(0, (int)addUser.getAccount_id());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetLogin_id1IsPositive() throws Throwable  {
      Auth_data arg0 = UserManagement.addUserTXT("/*", "/*", "/*", ']');
      arg0.setLogin_id1(1652);
      Auth_data addUser = UserManagement.addUser(arg0);
      assertEquals(0, addUser.getState());
      assertEquals(0, addUser.getLogincount());
      assertEquals(0, (int)addUser.getAccount_id());
      assertEquals("-", addUser.getEmail());
      assertEquals(']', addUser.getSex());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetLogin_id1IsNegative() throws Throwable  {
      Auth_data arg0 = UserManagement.addUserTXT((String) null, (String) null, "Account limit from company", '^');
      arg0.setLogin_id1((-1467));
      Auth_data addUser = UserManagement.addUser(arg0);
      assertEquals('^', addUser.getSex());
      assertEquals(0, (int)addUser.getAccount_id());
      assertEquals("-", addUser.getEmail());
      assertEquals(0, addUser.getLogincount());
      assertEquals(0, addUser.getState());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetLevelIsPositive() throws Throwable  {
      Auth_data arg0 = UserManagement.addUserTXT(" OR Variable_name = 'init_connect'", " OR Variable_name = 'init_connect'", "62Rbo5l?t@{v", 'L');
      arg0.setLevel(84);
      Auth_data addUser = UserManagement.addUser(arg0);
      assertEquals(0, (int)addUser.getAccount_id());
      assertEquals(" OR Variable_name = 'init_connect'", addUser.getUserid());
      assertEquals(" OR Variable_name = 'init_connect'", addUser.getPass());
      assertEquals("-", addUser.getEmail());
      assertEquals(0, addUser.getLogincount());
      assertEquals(0, addUser.getState());
      assertEquals('L', addUser.getSex());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetLevelIsNegative() throws Throwable  {
      Auth_data arg0 = new Auth_data();
      arg0.setLevel((-667));
      Auth_data addUser = UserManagement.addUser(arg0);
      assertEquals(0, addUser.getState());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetDelflagIsPositive() throws Throwable  {
      Auth_data arg0 = UserManagement.addUserTXT("SESSION_RAW", "Y!|J7", "Y!|J7", 'g');
      arg0.setDelflag(243);
      Auth_data addUser = UserManagement.addUser(arg0);
      assertEquals(0, addUser.getState());
      assertEquals(0, addUser.getLogincount());
      assertEquals(0, (int)addUser.getAccount_id());
      assertEquals('g', addUser.getSex());
      assertEquals("SESSION_RAW", addUser.getUserid());
      assertEquals("-", addUser.getEmail());
      assertEquals("Y!|J7", addUser.getPass());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetDelflagIsNegative() throws Throwable  {
      Auth_data arg0 = UserManagement.addUserTXT("/*", "/*", "/*", ']');
      arg0.setDelflag((-9));
      Auth_data addUser = UserManagement.addUser(arg0);
      assertEquals(0, addUser.getState());
      assertEquals(0, addUser.getLogincount());
      assertEquals(']', addUser.getSex());
      assertEquals("-", addUser.getEmail());
      assertEquals(0, (int)addUser.getAccount_id());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetConnect_until_timeIsPositive() throws Throwable  {
      Auth_data arg0 = new Auth_data();
      arg0.setConnect_until_time((byte)94);
      Auth_data addUser = UserManagement.addUser(arg0);
      assertNull(addUser.getPass());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetConnect_until_timeIsNegative() throws Throwable  {
      Auth_data arg0 = new Auth_data();
      arg0.setConnect_until_time((-747L));
      Auth_data addUser = UserManagement.addUser(arg0);
      assertEquals((-1), addUser.getCharserver());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetClientTypeIsNegative() throws Throwable  {
      Auth_data arg0 = UserManagement.addUserTXT("", "", "", '1');
      arg0.setClientType((-1752));
      Auth_data addUser = UserManagement.addUser(arg0);
      assertEquals(0, addUser.getState());
      assertEquals("-", addUser.getEmail());
      assertEquals(0, (int)addUser.getAccount_id());
      assertEquals(0, addUser.getLogincount());
      assertEquals('1', addUser.getSex());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetCharserverIsPositive() throws Throwable  {
      Auth_data arg0 = UserManagement.addUserTXT("@e!` 5\"l_]Z7es3\u0004", "@e!` 5\"l_]Z7es3\u0004", "ConnectionProperties.yearIsDateType", 'O');
      assertNotNull(arg0);
      
      arg0.setCharserver(5);
      Auth_data addUser = UserManagement.addUser(arg0);
      assertEquals("@e!` 5\"l_]Z7es3\u0004", addUser.getPass());
      assertEquals(0, addUser.getState());
      assertEquals(0, addUser.getLogincount());
      assertEquals(0, (int)addUser.getAccount_id());
      assertEquals('O', addUser.getSex());
      assertEquals("-", addUser.getEmail());
      assertEquals("@e!` 5\"l_]Z7es3\u0004", addUser.getUserid());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetBan_until_timeIsPositive() throws Throwable  {
      Auth_data arg0 = new Auth_data();
      arg0.setBan_until_time(1125L);
      Auth_data addUser = UserManagement.addUser(arg0);
      assertNull(addUser.getEmail());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserReturningAuth_dataWhereGetBan_until_timeIsNegative() throws Throwable  {
      Auth_data arg0 = new Auth_data();
      arg0.setBan_until_time((byte) (-67));
      Auth_data addUser = UserManagement.addUser(arg0);
      assertEquals(0, addUser.getLogin_id1());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAuth_dats() throws Throwable  {
      FastMap<Integer, Auth_data> auth_dats = UserManagement.getAuth_dats();
      assertFalse(auth_dats.isShared());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReceiveAllOnlinAccounts() throws Throwable  {
      FromAdmin arg1 = new FromAdmin();
      Socket_data arg0 = new Socket_data((Socket) null, arg1);
      UserManagement.receiveAllOnlinAccounts(arg0, (byte[]) null);
      assertEquals(0L, arg0.scheduledExecutionTime());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDynamicFailBanCheckTXT() throws Throwable  {
      UserManagement.dynamicFailBanCheckTXT("*/");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAccountIds() throws Throwable  {
      FastTable<Integer> accountIds = UserManagement.getAccountIds();
      assertEquals(1, accountIds.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUser() throws Throwable  {
      Auth_data arg0 = new Auth_data();
      UserManagement.addUser(arg0);
      Auth_data userTxt = UserManagement.getUserTxt("");
      assertNull(userTxt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetUserTxtTakingStringReturningNull() throws Throwable  {
      Auth_data userTxt = UserManagement.getUserTxt("");
      assertNull(userTxt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsGM() throws Throwable  {
      int gM = UserManagement.isGM((-914L));
      assertEquals((-1), gM);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCharif_sendallwosTaking1And1AndCharif_sendallwosTaking1And1AndCharif_sendallwosTaking1And1ReturningZero0() throws Throwable  {
      byte[] arg1 = new byte[6];
      int charif_sendallwos = UserManagement.charif_sendallwos((int) (byte)73, arg1);
      assertEquals(0, charif_sendallwos);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCharif_sendallwosTaking1And1AndCharif_sendallwosTaking1And1AndCharif_sendallwosTaking1And1ReturningZero1() throws Throwable  {
      int[] arg1 = new int[0];
      int charif_sendallwos = UserManagement.charif_sendallwos(31032, arg1);
      assertEquals(0, charif_sendallwos);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemove_online_userWithPositive() throws Throwable  {
      Integer arg0 = new Integer((byte)99);
      UserManagement.remove_online_user(arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemove_online_userWithZero() throws Throwable  {
      Integer arg0 = new Integer(0);
      UserManagement.remove_online_user(arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLevelIsValid() throws Throwable  {
      int levelIsValid = UserManagement.levelIsValid(6, "Working in DB", (-1), (-1));
      assertEquals(6, levelIsValid);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLevelIsValidReturningNegative() throws Throwable  {
      int levelIsValid = UserManagement.levelIsValid((-428), "ConnectionProperties.allowMultiQueries", (-428), (-428));
      assertEquals((-1), levelIsValid);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLevelIsValidWithPositive() throws Throwable  {
      int levelIsValid = UserManagement.levelIsValid(243, "", 243, 243);
      assertEquals(99, levelIsValid);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testConnectionOfClientWithTrue() throws Throwable  {
      Socket_data arg0 = new Socket_data((Socket) null);
      byte[] arg1 = new byte[9];
      // Undeclared exception!
      try { 
        UserManagement.connectionOfClient(arg0, arg1, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 30
         //
         verifyException("org.javathena.core.utiles.Functions", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testConnectionOfClientWithNullAndFalse() throws Throwable  {
      byte[] arg1 = new byte[41];
      // Undeclared exception!
      try { 
        UserManagement.connectionOfClient((Socket_data) null, arg1, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 54
         //
         verifyException("org.javathena.login.UserManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAdd_online_user() throws Throwable  {
      Auth_data arg0 = new Auth_data();
      int add_online_user = UserManagement.add_online_user(arg0);
      assertEquals(0, add_online_user);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveUser() throws Throwable  {
      Auth_data arg0 = new Auth_data();
      Auth_data removeUser = UserManagement.removeUser(arg0);
      assertNull(removeUser);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testTabHexToIntReturningZero() throws Throwable  {
      byte[] arg0 = new byte[1];
      int tabHexToInt = UserManagement.tabHexToInt(arg0);
      assertEquals(0, tabHexToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserTXT() throws Throwable  {
      Auth_data addUserTXT = UserManagement.addUserTXT("%{hn:BoAk5S]@U.", "%{hn:BoAk5S]@U.", "%{hn:BoAk5S]@U.", 'N');
      assertEquals("%{hn:BoAk5S]@U.", addUserTXT.getEmail());
      assertEquals(0, (int)addUserTXT.getAccount_id());
      assertEquals(0, addUserTXT.getLogincount());
      assertEquals('N', addUserTXT.getSex());
      assertNotNull(addUserTXT);
      assertEquals(0, addUserTXT.getState());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddIpToBanListMySQLThrowsNumberFormatException() throws Throwable  {
      // Undeclared exception!
      try { 
        UserManagement.addIpToBanListMySQL("m%*R:foQ8pUPv{qg*");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.String@0000000001\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAccount_idToOnlineThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      byte[] arg1 = new byte[1];
      // Undeclared exception!
      try { 
        UserManagement.account_idToOnline((Socket_data) null, arg1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.javathena.core.utiles.Functions", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNBUser() throws Throwable  {
      int nBUser = UserManagement.getNBUser();
      assertEquals(0, nBUser);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOnline_db_final() throws Throwable  {
      int online_db_final = UserManagement.online_db_final();
      assertEquals(0, online_db_final);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNBSession() throws Throwable  {
      int nBSession = UserManagement.getNBSession();
      assertEquals(0, nBSession);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetUserSQLTakingIntegerThrowsNullPointerException() throws Throwable  {
      Integer arg0 = UserManagement.getAccountID("Go'VD\"-]@-\f");
      // Undeclared exception!
      try { 
        UserManagement.getUserSQL(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.utiles.sql.MySQLConfig", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIs_user_online() throws Throwable  {
      boolean is_user_online = UserManagement.is_user_online((Integer) null);
      assertFalse(is_user_online);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddAccountIdCountTakingNoArguments() throws Throwable  {
      UserManagement.addAccountIdCount();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAccount_idToOnlineThrowsNullPointerException() throws Throwable  {
      // Undeclared exception!
      try { 
        UserManagement.getSessionAt(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javolution.util.FastTable", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddSession() throws Throwable  {
      UserManagement.addSession((Socket_data) null);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetUserTxtTakingInteger() throws Throwable  {
      Socket_data socket_data = new Socket_data((Socket) null);
      Integer arg0 = socket_data.getAccount_id();
      Auth_data userTxt = UserManagement.getUserTxt(arg0);
      assertNull(userTxt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetUserSQLTakingStringThrowsNullPointerException() throws Throwable  {
      // Undeclared exception!
      try { 
        UserManagement.getUserSQL("FY)CmIl!u$^z;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.utiles.sql.MySQLConfig", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAccountIdCount() throws Throwable  {
      int accountIdCount = UserManagement.getAccountIdCount();
      assertEquals(0, accountIdCount);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUserSQL() throws Throwable  {
      Auth_data addUserSQL = UserManagement.addUserSQL("MysqlIO.21", "MysqlIO.21", "MysqlIO.21", (-1029));
      assertNull(addUserSQL);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToBecomeGM() throws Throwable  {
      UserManagement.toBecomeGM((Socket_data) null);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDebugXML() throws Throwable  {
      UserManagement.debugXML();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetAccountIdCount() throws Throwable  {
      UserManagement.setAccountIdCount(2661);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNBGM() throws Throwable  {
      int nBGM = UserManagement.getNBGM();
      assertEquals(0, nBGM);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddAccountIdCountTakingInt() throws Throwable  {
      UserManagement.addAccountIdCount(0);
  }
}
