/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Mon Mar 18 07:29:15 GMT 2024
 */

package org.javathena.utiles;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.javathena.conf.LoginAthena;
import org.javathena.utiles.ConfigurationManagement;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConfigurationManagement_Original_ESTest extends ConfigurationManagement_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLoginAthenaConf() throws Throwable  {
      LoginAthena loginAthenaConf = ConfigurationManagement.getLoginAthenaConf();
      assertEquals(0, loginAthenaConf.getIpban_cleanup_interval());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLogin_config_readXMLWithNonEmptyString() throws Throwable  {
      int login_config_readXML = ConfigurationManagement.login_config_readXML("@s[");
      assertEquals(0, login_config_readXML);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLogin_config_readXMLWithEmptyString() throws Throwable  {
      int login_config_readXML = ConfigurationManagement.login_config_readXML("");
      assertEquals(0, login_config_readXML);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDisplay_conf_warnings() throws Throwable  {
      ConfigurationManagement.display_conf_warnings();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testYesNoOnOffToBooleanAndYesNoOnOffToBooleanReturningFalse0() throws Throwable  {
      boolean yesNoOnOffToBoolean = ConfigurationManagement.yesNoOnOffToBoolean("OFF");
      assertFalse(yesNoOnOffToBoolean);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testYesNoOnOffToBooleanAndYesNoOnOffToBooleanReturningFalse1() throws Throwable  {
      boolean yesNoOnOffToBoolean = ConfigurationManagement.yesNoOnOffToBoolean("NO");
      assertFalse(yesNoOnOffToBoolean);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testYesNoOnOffToBooleanAndYesNoOnOffToBooleanReturningTrue0() throws Throwable  {
      boolean yesNoOnOffToBoolean = ConfigurationManagement.yesNoOnOffToBoolean("ON");
      assertTrue(yesNoOnOffToBoolean);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testYesNoOnOffToBooleanThrowsIllegalArgumentException() throws Throwable  {
      // Undeclared exception!
      try { 
        ConfigurationManagement.yesNoOnOffToBoolean("&/wI= T@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.utiles.ConfigurationManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testYesNoOnOffToBooleanAndYesNoOnOffToBooleanReturningTrue1() throws Throwable  {
      boolean yesNoOnOffToBoolean = ConfigurationManagement.yesNoOnOffToBoolean("YES");
      assertTrue(yesNoOnOffToBoolean);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLogin_config_readTXTThrowsNullPointerException0() throws Throwable  {
      EvoSuiteFile arg0 = new EvoSuiteFile("p");
      FileSystemHandling.appendStringToFile(arg0, "admin_allowed_host");
      // Undeclared exception!
      try { 
        ConfigurationManagement.login_config_readTXT("p");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.utiles.ConfigurationManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLogin_config_readTXTThrowsNullPointerException1() throws Throwable  {
      EvoSuiteFile arg0 = new EvoSuiteFile("p");
      FileSystemHandling.appendLineToFile(arg0, "p");
      // Undeclared exception!
      try { 
        ConfigurationManagement.login_config_readTXT("p");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.utiles.ConfigurationManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLogin_config_readTXTReturningPositive() throws Throwable  {
      // Undeclared exception!
      try { 
        ConfigurationManagement.login_config_readTXT("p");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.utiles.ConfigurationManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLogin_config_readTXTWithEmptyString() throws Throwable  {
      // Undeclared exception!
      try { 
        ConfigurationManagement.login_config_readTXT("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.utiles.ConfigurationManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLogin_lan_config_readReturningZero() throws Throwable  {
      EvoSuiteFile arg0 = new EvoSuiteFile("p");
      FileSystemHandling.appendLineToFile(arg0, "p");
      // Undeclared exception!
      try { 
        ConfigurationManagement.login_lan_config_read("p");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.utiles.ConfigurationManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLogin_lan_config_readReturningPositive() throws Throwable  {
      // Undeclared exception!
      try { 
        ConfigurationManagement.login_lan_config_read("p");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.utiles.ConfigurationManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLogin_lan_config_readWithEmptyString() throws Throwable  {
      // Undeclared exception!
      try { 
        ConfigurationManagement.login_lan_config_read("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.utiles.ConfigurationManagement", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddGMMaxTakingInt() throws Throwable  {
      ConfigurationManagement.addGMMax(57);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLogin_ip_str() throws Throwable  {
      String login_ip_str = ConfigurationManagement.getLogin_ip_str();
      assertEquals("127.0.0.1", login_ip_str);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetNum_regs() throws Throwable  {
      ConfigurationManagement.setNum_regs(54L);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBackup_txt_flag() throws Throwable  {
      String backup_txt_flag = ConfigurationManagement.getBackup_txt_flag();
      assertNull(backup_txt_flag);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetChar_id_count() throws Throwable  {
      ConfigurationManagement.setChar_id_count(75);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetAccess_denynum() throws Throwable  {
      ConfigurationManagement.setAccess_denynum(76);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetEmail_creation() throws Throwable  {
      int email_creation = ConfigurationManagement.getEmail_creation();
      assertEquals(0, email_creation);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetGm_allow_level() throws Throwable  {
      int gm_allow_level = ConfigurationManagement.getGm_allow_level();
      assertEquals(0, gm_allow_level);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetScdata_txt() throws Throwable  {
      String scdata_txt = ConfigurationManagement.getScdata_txt();
      assertNull(scdata_txt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSubnetmaski() throws Throwable  {
      int[] arg0 = new int[6];
      ConfigurationManagement.setSubnetmaski(arg0);
      assertEquals(6, arg0.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAccess_deny() throws Throwable  {
      String access_deny = ConfigurationManagement.getAccess_deny();
      assertNull(access_deny);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetAccess_allownum() throws Throwable  {
      ConfigurationManagement.setAccess_allownum((-731));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetAccess_deny() throws Throwable  {
      ConfigurationManagement.setAccess_deny((String) null);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetServer_num() throws Throwable  {
      int server_num = ConfigurationManagement.getServer_num();
      assertEquals(0, server_num);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSubneti() throws Throwable  {
      ConfigurationManagement.getNum_regs();
      ConfigurationManagement.setGMMax(2860);
      ConfigurationManagement.setTimestamp_format("");
      ConfigurationManagement.setStart_limited_time(0L);
      ConfigurationManagement.getAccess_allow();
      ConfigurationManagement.setStartLimitedTime(54L);
      ConfigurationManagement.getAccess_deny();
      ConfigurationManagement.getTimestamp_format();
      ConfigurationManagement.setLogin_ip_str("Y  H#BLZ,TP?");
      ConfigurationManagement.getSubneti();
      ConfigurationManagement.getEmail_creation();
      ConfigurationManagement.getChar_id_count();
      ConfigurationManagement.display_conf_warnings();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetLan_char_ip() throws Throwable  {
      ConfigurationManagement.setLan_char_ip("");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLan_char_ip() throws Throwable  {
      String lan_char_ip = ConfigurationManagement.getLan_char_ip();
      assertNull(lan_char_ip);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSubneti() throws Throwable  {
      int[] arg0 = new int[6];
      ConfigurationManagement.setSubneti(arg0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAccess_denynum() throws Throwable  {
      int access_denynum = ConfigurationManagement.getAccess_denynum();
      assertEquals(0, access_denynum);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddGMMaxTakingNoArguments() throws Throwable  {
      ConfigurationManagement.addGMMax();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAutosave_interval() throws Throwable  {
      int autosave_interval = ConfigurationManagement.getAutosave_interval();
      assertEquals(0, autosave_interval);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetNew_reg_tick() throws Throwable  {
      ConfigurationManagement.setNew_reg_tick((-2147483648L));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddNum_regsTakingNoArguments() throws Throwable  {
      ConfigurationManagement.getTimestamp_format();
      ConfigurationManagement.addGMMax();
      ConfigurationManagement.getGMMax();
      ConfigurationManagement.addNum_regs();
      ConfigurationManagement.getBackup_txt_flag();
      ConfigurationManagement.getGMMax();
      ConfigurationManagement.getAccess_denynum();
      ConfigurationManagement.setAccess_denynum(76);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSubnetmaski() throws Throwable  {
      int[] subnetmaski = ConfigurationManagement.getSubnetmaski();
      assertNull(subnetmaski);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLesslessAuth_before_save_file() throws Throwable  {
      int lesslessAuth_before_save_file = ConfigurationManagement.lesslessAuth_before_save_file();
      assertEquals((-1), lesslessAuth_before_save_file);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAccess_order() throws Throwable  {
      ConfigurationManagement.getAccess_order();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddNum_regsTakingLong() throws Throwable  {
      ConfigurationManagement.addNum_regs((long) 57);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNew_reg_tick() throws Throwable  {
      long new_reg_tick = ConfigurationManagement.getNew_reg_tick();
      assertEquals(0L, new_reg_tick);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAccess_allowReturningNull() throws Throwable  {
      String access_allow = ConfigurationManagement.getAccess_allow();
      assertNull(access_allow);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAutosave_time() throws Throwable  {
      int autosave_time = ConfigurationManagement.getAutosave_time();
      assertEquals(0, autosave_time);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetAccess_allow() throws Throwable  {
      ConfigurationManagement.setAccess_allow("x/");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStartLimitedTime() throws Throwable  {
      ConfigurationManagement.getStartLimitedTime();
      ConfigurationManagement.setNum_regs(54L);
      ConfigurationManagement.setAccess_allow("x/");
      int access_allownum = ConfigurationManagement.getAccess_allownum();
      ConfigurationManagement.addNum_regs(4774L);
      ConfigurationManagement.setGMMax((-34));
      int access_denynum = ConfigurationManagement.getAccess_denynum();
      assertTrue(access_denynum == access_allownum);
      
      ConfigurationManagement.setTimestamp_format("BfE{+");
      int auth_before_save_file = ConfigurationManagement.getAuth_before_save_file();
      int char_id_count = ConfigurationManagement.getChar_id_count();
      assertTrue(char_id_count == auth_before_save_file);
      
      ConfigurationManagement.getNew_reg_tick();
      ConfigurationManagement.setAccess_allownum((-731));
      ConfigurationManagement.getWisp_server_name();
      ConfigurationManagement.getTimestamp_format();
      ConfigurationManagement.display_conf_warnings();
      ConfigurationManagement.getMax_connect_user();
      long startLimitedTime = ConfigurationManagement.getStartLimitedTime();
      assertEquals((-1L), startLimitedTime);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetGMMaxReturningZero() throws Throwable  {
      int gMMax = ConfigurationManagement.getGMMax();
      assertEquals(30, gMMax);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFriends_txt() throws Throwable  {
      String friends_txt = ConfigurationManagement.getFriends_txt();
      assertNull(friends_txt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetChar_txt() throws Throwable  {
      String char_txt = ConfigurationManagement.getChar_txt();
      assertNull(char_txt);
  }
}
