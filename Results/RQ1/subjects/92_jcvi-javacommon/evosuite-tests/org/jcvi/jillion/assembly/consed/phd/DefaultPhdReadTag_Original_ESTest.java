/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 21 10:39:49 GMT 2024
 */

package org.jcvi.jillion.assembly.consed.phd;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultPhdReadTag_Original_ESTest extends DefaultPhdReadTag_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTypeReturningNull() throws Throwable  {
      Range arg2 = Range.of((-1L), (-1L));
      MockDate arg3 = new MockDate(2436, 31, 727, (-1409), (-1409));
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, arg2, arg3, "ZI^=sQC9\"-", "");
      String type = defaultPhdReadTag.getType();
      assertNull(type);
      assertEquals("ZI^=sQC9\"-", defaultPhdReadTag.getComment());
      assertEquals("", defaultPhdReadTag.getFreeFormData());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTypeReturningEmptyString() throws Throwable  {
      Range arg2 = Range.of(0L, 0L);
      MockDate arg3 = new MockDate(0, (-534), (-534), (-1244), (-534));
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", arg2, arg3, "SPACE_BASED", "");
      String type = defaultPhdReadTag.getType();
      assertEquals("SPACE_BASED", defaultPhdReadTag.getComment());
      assertEquals("", type);
      assertEquals("", defaultPhdReadTag.getFreeFormData());
      assertEquals("", defaultPhdReadTag.getSource());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSourceReturningNull() throws Throwable  {
      Range arg2 = Range.of((-1L), (-1L));
      MockDate arg3 = new MockDate(2436, 31, 727, (-1409), (-1409));
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, arg2, arg3, "ZI^MbsQC{9-", "");
      String source = defaultPhdReadTag.getSource();
      assertEquals("ZI^MbsQC{9-", defaultPhdReadTag.getComment());
      assertNull(source);
      assertEquals("", defaultPhdReadTag.getFreeFormData());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSourceReturningNonEmptyString() throws Throwable  {
      MockDate arg3 = new MockDate(21L);
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", ":Y9k_:WXKk}Ljm,", (Range) null, arg3, (String) null, "@'BQZ?!eM~{{y\"");
      String source = defaultPhdReadTag.getSource();
      assertEquals("@'BQZ?!eM~{{y\"", defaultPhdReadTag.getFreeFormData());
      assertEquals("", defaultPhdReadTag.getType());
      assertEquals(":Y9k_:WXKk}Ljm,", source);
      assertNotNull(source);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFreeFormDataReturningNull() throws Throwable  {
      Range arg2 = Range.of(0L);
      MockDate arg3 = new MockDate(0L);
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("BJ", "", arg2, arg3, (String) null, (String) null);
      String freeFormData = defaultPhdReadTag.getFreeFormData();
      assertEquals("BJ", defaultPhdReadTag.getType());
      assertNull(freeFormData);
      assertEquals("", defaultPhdReadTag.getSource());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFreeFormDataReturningNonEmptyString() throws Throwable  {
      Range arg2 = Range.of((-1L), (-1L));
      MockDate arg3 = new MockDate(2436, 31, 727, (-1409), (-1409));
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", arg2, arg3, "", "Range coordinates %d, %d are not valid %s coordinates");
      String freeFormData = defaultPhdReadTag.getFreeFormData();
      assertEquals("Range coordinates %d, %d are not valid %s coordinates", freeFormData);
      assertEquals("", defaultPhdReadTag.getComment());
      assertEquals("", defaultPhdReadTag.getType());
      assertEquals("", defaultPhdReadTag.getSource());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDateReturningNull() throws Throwable  {
      Range arg2 = Range.of(884L);
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag", "org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag", arg2, (Date) null, "U", "ZI^MbsQC{9-");
      defaultPhdReadTag.getDate();
      assertEquals("org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag", defaultPhdReadTag.getType());
      assertEquals("org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag", defaultPhdReadTag.getSource());
      assertEquals("U", defaultPhdReadTag.getComment());
      assertEquals("ZI^MbsQC{9-", defaultPhdReadTag.getFreeFormData());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCommentReturningNonEmptyString() throws Throwable  {
      Range.CoordinateSystem arg0 = Range.CoordinateSystem.ZERO_BASED;
      Range arg2 = Range.of(arg0, 3391L, 3391L);
      MockDate arg3 = new MockDate((-5270), (-1752992913), (-534), (-1752992913), 31);
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("?", "", arg2, arg3, "j6_<", "ZI^MbsQC{9-");
      String comment = defaultPhdReadTag.getComment();
      assertEquals("?", defaultPhdReadTag.getType());
      assertEquals("", defaultPhdReadTag.getSource());
      assertEquals("ZI^MbsQC{9-", defaultPhdReadTag.getFreeFormData());
      assertEquals("j6_<", comment);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCommentReturningEmptyString() throws Throwable  {
      Range arg2 = Range.of((-1L), (-1L));
      MockDate arg3 = new MockDate(2436, 31, 727, (-1409), (-1409));
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", (String) null, arg2, arg3, "", "");
      String comment = defaultPhdReadTag.getComment();
      assertEquals("", comment);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse0() throws Throwable  {
      MockDate arg3 = new MockDate();
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("Gu9j/#z3", "Gu9j/#z3", (Range) null, arg3, "Gu9j/#z3", "Gu9j/#z3");
      Range arg2 = Range.of(0L);
      DefaultPhdReadTag arg0 = new DefaultPhdReadTag("Gu9j/#z3", "Gu9j/#z3", arg2, arg3, "Gu9j/#z3", "Gu9j/#z3");
      boolean equals = defaultPhdReadTag.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningTrue0() throws Throwable  {
      Range arg2 = Range.of((-8L), (-8L));
      MockDate arg3 = new MockDate();
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("6@i", "6@i", arg2, arg3, "6@i", "u<1)N$=`B_QPk;");
      DefaultPhdReadTag arg0 = new DefaultPhdReadTag("6@i", "6@i", arg2, arg3, "6@i", "u<1)N$=`B_QPk;");
      boolean equals = defaultPhdReadTag.equals(arg0);
      assertTrue(equals);
      assertEquals("6@i", arg0.getSource());
      assertEquals("6@i", arg0.getType());
      assertEquals("6@i", arg0.getComment());
      assertEquals("u<1)N$=`B_QPk;", arg0.getFreeFormData());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse1() throws Throwable  {
      Range arg2 = Range.of((-1L), (-1L));
      MockDate arg3 = new MockDate((-1409), (-680), (-680));
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("J6@i(", "", arg2, arg3, (String) null, " z:*9");
      DefaultPhdReadTag arg0 = new DefaultPhdReadTag("z:N%k}T", "", arg2, arg3, (String) null, " z:*9");
      boolean equals = defaultPhdReadTag.equals(arg0);
      assertFalse(equals);
      assertEquals(" z:*9", arg0.getFreeFormData());
      assertEquals("", arg0.getSource());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse2() throws Throwable  {
      Range arg2 = Range.ofLength(65595L);
      MockDate arg3 = new MockDate();
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, "Tq+YT0L`]#h+HVi'|x", arg2, arg3, "Tq+YT0L`]#h+HVi'|x", "Tq+YT0L`]#h+HVi'|x");
      DefaultPhdReadTag arg0 = new DefaultPhdReadTag("Tq+YT0L`]#h+HVi'|x", "Tq+YT0L`]#h+HVi'|x", arg2, arg3, "Tq+YT0L`]#h+HVi'|x", "Tq+YT0L`]#h+HVi'|x");
      boolean equals = defaultPhdReadTag.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse3() throws Throwable  {
      Range arg2 = Range.of((-8L));
      MockDate arg3 = new MockDate();
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("J6@i(", (String) null, arg2, arg3, (String) null, (String) null);
      DefaultPhdReadTag arg0 = new DefaultPhdReadTag((String) null, "TaZCO[tz8qkN", arg2, arg3, (String) null, (String) null);
      boolean equals = defaultPhdReadTag.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse4() throws Throwable  {
      Range arg2 = Range.of((-1L), (-1L));
      MockDate arg3 = new MockDate((-1409), (-680), (-680));
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "J6@i(", arg2, arg3, (String) null, "J6@i(");
      DefaultPhdReadTag arg0 = new DefaultPhdReadTag("J6@i(", "", arg2, arg3, (String) null, " z:*9");
      boolean equals = defaultPhdReadTag.equals(arg0);
      assertEquals("J6@i(", arg0.getType());
      assertEquals(" z:*9", arg0.getFreeFormData());
      assertEquals("", arg0.getSource());
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningTrue1() throws Throwable  {
      MockDate arg3 = new MockDate();
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, arg3, (String) null, (String) null);
      DefaultPhdReadTag arg0 = new DefaultPhdReadTag((String) null, (String) null, (Range) null, arg3, (String) null, (String) null);
      boolean equals = defaultPhdReadTag.equals(arg0);
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse5() throws Throwable  {
      MockDate arg3 = new MockDate();
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, arg3, (String) null, (String) null);
      DefaultPhdReadTag arg0 = new DefaultPhdReadTag((String) null, (String) null, (Range) null, arg3, (String) null, "C");
      boolean equals = defaultPhdReadTag.equals(arg0);
      assertFalse(arg0.equals((Object)defaultPhdReadTag));
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse6() throws Throwable  {
      MockDate arg3 = new MockDate();
      DefaultPhdReadTag arg0 = new DefaultPhdReadTag("org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag", "org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag", (Range) null, arg3, "org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag", "org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag");
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag", "number of entries must be >=0", (Range) null, arg3, "org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag", "org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag");
      boolean equals = defaultPhdReadTag.equals(arg0);
      assertFalse(equals);
      assertEquals("org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag", defaultPhdReadTag.getType());
      assertEquals("org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag", defaultPhdReadTag.getFreeFormData());
      assertEquals("org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag", defaultPhdReadTag.getComment());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse7() throws Throwable  {
      MockDate arg3 = new MockDate();
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("-X\"I)d|48u(", "THw*", (Range) null, arg3, "THw*", "-X\"I)d|48u(");
      DefaultPhdReadTag arg0 = new DefaultPhdReadTag("JQ)", "JQ)", (Range) null, arg3, "BVk!l`Rx'#=-3[+Y?", "BVk!l`Rx'#=-3[+Y?");
      boolean equals = defaultPhdReadTag.equals(arg0);
      assertEquals("BVk!l`Rx'#=-3[+Y?", arg0.getFreeFormData());
      assertEquals("THw*", defaultPhdReadTag.getSource());
      assertFalse(equals);
      assertEquals("THw*", defaultPhdReadTag.getComment());
      assertEquals("JQ)", arg0.getSource());
      assertEquals("JQ)", arg0.getType());
      assertEquals("-X\"I)d|48u(", defaultPhdReadTag.getFreeFormData());
      assertEquals("-X\"I)d|48u(", defaultPhdReadTag.getType());
      assertEquals("BVk!l`Rx'#=-3[+Y?", arg0.getComment());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse8() throws Throwable  {
      Range arg2 = Range.of((-1L), (-1L));
      MockDate arg3 = new MockDate(2436, 31, 727, (-1409), (-1409));
      DefaultPhdReadTag arg0 = new DefaultPhdReadTag("", "", arg2, arg3, "", "");
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("ZI^=sQC9\"-", "N4h*s", arg2, arg3, (String) null, "ZI^=sQC9\"-");
      boolean equals = defaultPhdReadTag.equals(arg0);
      assertEquals("ZI^=sQC9\"-", defaultPhdReadTag.getFreeFormData());
      assertFalse(equals);
      assertEquals("ZI^=sQC9\"-", defaultPhdReadTag.getType());
      assertEquals("N4h*s", defaultPhdReadTag.getSource());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse9() throws Throwable  {
      MockDate arg3 = new MockDate();
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, (Date) null, (String) null, (String) null);
      DefaultPhdReadTag arg0 = new DefaultPhdReadTag((String) null, (String) null, (Range) null, arg3, (String) null, (String) null);
      boolean equals = defaultPhdReadTag.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse10() throws Throwable  {
      MockDate arg0 = new MockDate();
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("-X\"I)d|48u(", "THw*", (Range) null, arg0, "THw*", "-X\"I)d|48u(");
      boolean equals = defaultPhdReadTag.equals(arg0);
      assertEquals("-X\"I)d|48u(", defaultPhdReadTag.getFreeFormData());
      assertEquals("-X\"I)d|48u(", defaultPhdReadTag.getType());
      assertFalse(equals);
      assertEquals("THw*", defaultPhdReadTag.getComment());
      assertEquals("THw*", defaultPhdReadTag.getSource());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsWithNull() throws Throwable  {
      MockDate arg3 = new MockDate();
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("-X\"I)d|48u(", "THw*", (Range) null, arg3, "THw*", "-X\"I)d|48u(");
      boolean equals = defaultPhdReadTag.equals((Object) null);
      assertEquals("-X\"I)d|48u(", defaultPhdReadTag.getFreeFormData());
      assertEquals("THw*", defaultPhdReadTag.getSource());
      assertEquals("THw*", defaultPhdReadTag.getComment());
      assertEquals("-X\"I)d|48u(", defaultPhdReadTag.getType());
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningTrue2() throws Throwable  {
      MockDate arg3 = new MockDate();
      DefaultPhdReadTag arg0 = new DefaultPhdReadTag("Jv", "Jv", (Range) null, arg3, "Jv", "Jv");
      boolean equals = arg0.equals(arg0);
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningTrue3() throws Throwable  {
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag", "org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag", (Range) null, (Date) null, "org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag", "org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag");
      DefaultPhdReadTag arg0 = new DefaultPhdReadTag("org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag", "org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag", (Range) null, (Date) null, "org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag", "org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag");
      boolean equals = defaultPhdReadTag.equals(arg0);
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashCode0() throws Throwable  {
      Range arg2 = Range.of((-8L));
      MockDate arg3 = new MockDate();
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("J6@i(", (String) null, arg2, arg3, (String) null, (String) null);
      defaultPhdReadTag.hashCode();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashCode1() throws Throwable  {
      MockDate arg3 = new MockDate();
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, arg3, (String) null, (String) null);
      defaultPhdReadTag.hashCode();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashCode2() throws Throwable  {
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("Jv", "Jv", (Range) null, (Date) null, "Jv", "Jv");
      defaultPhdReadTag.hashCode();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCommentReturningNull() throws Throwable  {
      Range arg2 = Range.of(270L);
      MockDate arg3 = new MockDate((-2009L));
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("wqg.>j", "wqg.>j", arg2, arg3, (String) null, "wqg.>j");
      String comment = defaultPhdReadTag.getComment();
      assertNull(comment);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetUngappedRange() throws Throwable  {
      MockDate arg3 = new MockDate();
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("Gu9j/#z3", "Gu9j/#z3", (Range) null, arg3, "Gu9j/#z3", "Gu9j/#z3");
      Range ungappedRange = defaultPhdReadTag.getUngappedRange();
      assertNull(ungappedRange);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDateReturningNonNull() throws Throwable  {
      Range arg2 = Range.of(270L);
      MockDate arg3 = new MockDate((-2009L));
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("wqg.>j", "wqg.>j", arg2, arg3, (String) null, "wqg.>j");
      Date date = defaultPhdReadTag.getDate();
      assertSame(date, arg3);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSourceReturningEmptyString() throws Throwable  {
      MockDate arg3 = new MockDate(21L);
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) null, arg3, "@'BQZ?!eM~{{y\"", "");
      String source = defaultPhdReadTag.getSource();
      assertEquals("@'BQZ?!eM~{{y\"", defaultPhdReadTag.getComment());
      assertEquals("", defaultPhdReadTag.getType());
      assertEquals("", source);
      assertEquals("", defaultPhdReadTag.getFreeFormData());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTypeReturningNonEmptyString() throws Throwable  {
      Range arg2 = Range.of(270L);
      MockDate arg3 = new MockDate((-2009L));
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("wqg.>j", "wqg.>j", arg2, arg3, (String) null, "wqg.>j");
      String type = defaultPhdReadTag.getType();
      assertEquals("wqg.>j", type);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFreeFormDataReturningEmptyString() throws Throwable  {
      MockDate arg3 = new MockDate(21L);
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) null, arg3, "@'BQZ?!eM~{{y\"", "");
      String freeFormData = defaultPhdReadTag.getFreeFormData();
      assertEquals("", defaultPhdReadTag.getSource());
      assertEquals("", defaultPhdReadTag.getType());
      assertEquals("@'BQZ?!eM~{{y\"", defaultPhdReadTag.getComment());
      assertEquals("", freeFormData);
  }
}
