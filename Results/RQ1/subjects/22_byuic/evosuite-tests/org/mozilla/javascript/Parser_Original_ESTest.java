/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Mon Mar 18 02:24:48 GMT 2024
 */

package org.mozilla.javascript;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.CompilerEnvirons;
import org.mozilla.javascript.Decompiler;
import org.mozilla.javascript.DefaultErrorReporter;
import org.mozilla.javascript.ErrorReporter;
import org.mozilla.javascript.Parser;
import org.mozilla.javascript.ScriptOrFnNode;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Parser_Original_ESTest extends Parser_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReportErrorThrowsRuntimeException() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      Parser parser = new Parser(arg0, (ErrorReporter) null);
      // Undeclared exception!
      try { 
        parser.reportError("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property 
         //
         verifyException("org.mozilla.javascript.ScriptRuntime$DefaultMessageProvider", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddErrorTakingStringThrowsRuntimeException() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      ErrorReporter arg1 = arg0.getErrorReporter();
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.addError("3EK6EObam<1Zj7?G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property 3EK6EObam<1Zj7?G
         //
         verifyException("org.mozilla.javascript.ScriptRuntime$DefaultMessageProvider", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsNullPointerExceptionAndParseWithNegative0() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      Parser parser = new Parser(arg0, (ErrorReporter) null);
      // Undeclared exception!
      try { 
        parser.parse("vc[hm^1]$", "D>SyUZg!N[", (-1817));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Parser", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddWarning() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      ErrorReporter arg1 = arg0.getErrorReporter();
      Parser parser = new Parser(arg0, arg1);
      ScriptOrFnNode parse = parser.parse("!Oqvr7v", "!Oqvr7v", 83);
      assertEquals(83, parse.getBaseLineno());
      
      parser.addWarning("msg.varargs.fun", "");
      assertEquals("\u0087\u001A'\u0006Oqvr7vQ\u0001", parser.getEncodedSource());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseReturningScriptOrFnNodeWhereGetLinenoIsZero() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      ScriptOrFnNode parse = parser.parse("u", "language version", 0);
      assertTrue(parse.hasChildren());
      assertEquals(0, parse.getEndLineno());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testInsideFunction() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      boolean insideFunction = parser.insideFunction();
      assertFalse(insideFunction);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetEncodedSourceReturningNonEmptyString() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      ErrorReporter arg1 = arg0.getErrorReporter();
      Parser parser = new Parser(arg0, arg1);
      ScriptOrFnNode parse = parser.parse("!Oqvr7v", "!Oqvr7v", 95);
      assertEquals(95, parse.getEndLineno());
      
      String encodedSource = parser.getEncodedSource();
      assertEquals("\u0087\u001A'\u0006Oqvr7vQ\u0001", encodedSource);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCurrentLineNumber() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      ErrorReporter arg1 = arg0.getErrorReporter();
      Parser parser = new Parser(arg0, arg1);
      parser.parse("~yMn", "", 1442);
      int currentLineNumber = parser.getCurrentLineNumber();
      assertEquals(1442, currentLineNumber);
      assertEquals("\u0087\u001B'\u0003yMnQ\u0001", parser.getEncodedSource());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateDecompiler() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      Decompiler createDecompiler = parser.createDecompiler(arg0);
      assertEquals(2, Decompiler.TO_SOURCE_FLAG);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive0() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      ErrorReporter arg1 = arg0.getErrorReporter();
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse(";vrSA2@9i-0b-", "!Oqvr7v", 72);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing ; before statement (!Oqvr7v#72)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive1() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("~{!B#7R?aEYjq7", "~{!B#7R?aEYjq7", 10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid property id (~{!B#7R?aEYjq7#10)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive2() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      ErrorReporter arg1 = arg0.getErrorReporter();
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("g%{bQ", "g%{bQ", 113);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing : after property id (g%{bQ#113)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParse0() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      ScriptOrFnNode parse = parser.parse("[]", "[]", 107);
      assertEquals("\u0087RSQ\u0001", parser.getEncodedSource());
      assertEquals(107, parse.getBaseLineno());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive3() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      ErrorReporter arg1 = arg0.getErrorReporter();
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("package", "package", 967);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // identifier is a reserved word (package#967)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive4() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      ErrorReporter arg1 = arg0.getErrorReporter();
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("/=g_WAKZvJ9o&V]!O4", "m;@)Zk[o{Mn'hJw", 21);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated regular expression literal (m;@)Zk[o{Mn'hJw#21)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParse1() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      ScriptOrFnNode parse = parser.parse("this", "this", 47);
      assertEquals("\u0087+Q\u0001", parser.getEncodedSource());
      assertEquals(47, parse.getEndLineno());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsNullPointerExceptionAndParseWithPositive0() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      Parser parser = new Parser(arg0, (ErrorReporter) null);
      // Undeclared exception!
      try { 
        parser.parse("/z2*/|>", "get", 987);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Parser", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive5() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("q::_f=", "q::_f=", 2379);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal character (q::_f=#2379)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive6() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("i.@9&of2|PXwGFeo}yW", "i.@9&of2|PXwGFeo}yW", 188);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing name after .@ (i.@9&of2|PXwGFeo}yW#188)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParse2() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      ScriptOrFnNode parse = parser.parse("ms.bad.throw.eol", "ms.bad.throw.eol", 13);
      assertEquals(27, parse.getEncodedSourceEnd());
      assertEquals(13, parse.getBaseLineno());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsNullPointerExceptionAndParseWithNegative1() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      Parser parser = new Parser(arg0, (ErrorReporter) null);
      // Undeclared exception!
      try { 
        parser.parse("msg.double.switch.default", "msg.double.switch.default", (-1771));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Parser", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive7() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("~Y.(%Bn_/rE", "~Y.(%Bn_/rE", 1480);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error (~Y.(%Bn_/rE#1480)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParse3() throws Throwable  {
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      CompilerEnvirons arg0 = new CompilerEnvirons();
      Parser parser = new Parser(arg0, arg1);
      ScriptOrFnNode parse = parser.parse("(new Boolban(false))", "(new Boolban(false))", 1843);
      assertEquals("\u0087V\u001E'\u0007BoolbanV,WWQ\u0001", parser.getEncodedSource());
      assertEquals(1843, parse.getEndLineno());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParse4() throws Throwable  {
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      CompilerEnvirons arg0 = new CompilerEnvirons();
      Parser parser = new Parser(arg0, arg1);
      ScriptOrFnNode parse = parser.parse("(new B,olban(false))", "(new B,olban(false))", 24);
      assertEquals("\u0087V\u001E'\u0001BX'\u0005olbanV,WWQ\u0001", parser.getEncodedSource());
      assertEquals(24, parse.getLineno());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive8() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("VB(pvfJ,ZoBv", "VB(pvfJ,ZoBv", 2567);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing ) after argument list (VB(pvfJ,ZoBv#2567)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsIllegalArgumentExceptionAndParseWithEmptyString() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("@*(gt", "", (-1970));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1970
         //
         verifyException("org.mozilla.javascript.RhinoException", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsIllegalArgumentException0() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("resumeGenerator() not implemented", "propertyIsEnumerable", (-11));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -11
         //
         verifyException("org.mozilla.javascript.RhinoException", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithEmptyStringAndPositive() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      arg0.setXmlAvailable(false);
      // Undeclared exception!
      try { 
        parser.parse("<><_", "", 5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error (#5)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsIllegalArgumentException1() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("void ", "C)\"~I$3fC~G", (-1683));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1683
         //
         verifyException("org.mozilla.javascript.RhinoException", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive9() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      ErrorReporter arg1 = arg0.getErrorReporter();
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("--", "language version", 110);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected end of file (language version#110)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive10() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("++4(`", "exec", 1903);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal character (exec#1903)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive11() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("typeof", "set", 118);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected end of file (set#118)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive12() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("+D:+>[m/%Z|1BtNBbXP", "+D:+>[m/%Z|1BtNBbXP", 105);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing ; before statement (+D:+>[m/%Z|1BtNBbXP#105)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsIllegalArgumentException2() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      ErrorReporter arg1 = arg0.getErrorReporter();
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("<_{bQ", "<_{bQ", (-1733));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1733
         //
         verifyException("org.mozilla.javascript.RhinoException", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive13() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("K%z}", "K%z}", 12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error (K%z}#12)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive14() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      ErrorReporter arg1 = arg0.getErrorReporter();
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("Zdz-]2w],", "Zdz-]2w],", 129);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error (Zdz-]2w],#129)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsNullPointerExceptionAndParseWithPositive1() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      Parser parser = new Parser(arg0, (ErrorReporter) null);
      // Undeclared exception!
      try { 
        parser.parse("i+tR9g,nxmt?0c\"", "i+tR9g,nxmt?0c\"", 51);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Parser", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive15() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      ErrorReporter arg1 = arg0.getErrorReporter();
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("Dhr>>fJt'g2Z7", "Dhr>>fJt'g2Z7", 2000);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated string literal (Dhr>>fJt'g2Z7#2000)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive16() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("O>nyUc!CN[", "O>nyUc!CN[", 88);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing ; before statement (O>nyUc!CN[#88)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNull() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("vmpq<=vaW0^", (String) null, 26);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected end of file
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive17() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("K<j$ny_?SFUI7;r[", "K<j$ny_?SFUI7;r[", 1154);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing : in conditional expression (K<j$ny_?SFUI7;r[#1154)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParse5() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      parser.parse("factory == null", "factory == null", 120);
      assertEquals("\u0087'\u0007factory\f*Q\u0001", parser.getEncodedSource());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsIllegalStateException0() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("POU&E", "POU&E", (-1206));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsIllegalArgumentException3() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("6&& ", "6&& ", (-330));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -330
         //
         verifyException("org.mozilla.javascript.RhinoException", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive18() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("yOzEE||~]s[0?{wZ<", "yOzEE||~]s[0?{wZ<", 12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error (yOzEE||~]s[0?{wZ<#12)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDefineSymbolAndDefineSymbolWithTrue0() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      ScriptOrFnNode parse = parser.parse("msg.reserved.id", "msg.reserved.id", 56);
      assertEquals(56, parse.getEndLineno());
      
      parser.defineSymbol(152, true, "msg.no.paren.after.let");
      assertEquals("\u0087'\u0003msgk'\breservedk'\u0002idQ\u0001", parser.getEncodedSource());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDefineSymbolAndDefineSymbolWithFalse0() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      ScriptOrFnNode parse = parser.parse("msg.no.parm", "msg.no.parm", 56);
      assertEquals(56, parse.getBaseLineno());
      
      parser.defineSymbol(152, false, "msg.no.paren.after.let");
      assertEquals("\u0087'\u0003msgk'\u0002nok'\u0004parmQ\u0001", parser.getEncodedSource());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDefineSymbolAndDefineSymbolWithFalse1() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      ScriptOrFnNode parse = parser.parse("get", "language version", 120);
      assertEquals(120, parse.getLineno());
      
      parser.defineSymbol(121, false, "get");
      assertEquals("\u0087'\u0003getQ\u0001", parser.getEncodedSource());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDefineSymbolThrowsIllegalStateException() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      parser.parse("$pDDEqoyqLPd:dx", "$pDDEqoyqLPd:dx", 9);
      parser.defineSymbol(108, true, "$pDDEqoyqLPd:dx");
      // Undeclared exception!
      try { 
        parser.defineSymbol((-1), false, "$pDDEqoyqLPd:dx");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDefineSymbolAndDefineSymbolWithTrue1() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      ScriptOrFnNode parse = parser.parse("bQ", "bQ", 16);
      assertEquals(16, parse.getLineno());
      
      parser.defineSymbol(153, true, "setUTCMinutes");
      assertEquals("\u0087'\u0003bQQ\u0001", parser.getEncodedSource());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive19() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("''}1^6\"FwpLQD45a", "''}1^6\"FwpLQD45a", 31);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error (''}1^6\"FwpLQD45a#31)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsNullPointerExceptionAndParseWithPositive2() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      Parser parser = new Parser(arg0, (ErrorReporter) null);
      // Undeclared exception!
      try { 
        parser.parse("zZSI;92^oq[", "zZSI;92^oq[", 47);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Parser", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParse6() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      ErrorReporter arg1 = arg0.getErrorReporter();
      Parser parser = new Parser(arg0, arg1);
      parser.parse("$pDDEqoyqLPd:dx", "$pDDEqoyqLPd:dx", 113);
      ScriptOrFnNode parse = parser.parse("$pDDEqoyqLPd:dx", "$pDDEqoyqLPd:dx", 21);
      assertEquals("\u0087'\f$pDDEqoyqLPdf\u0001'\u0002dxQ\u0001", parser.getEncodedSource());
      assertEquals(21, parse.getLineno());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive20() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("XfnY2Y:", "msg.no.paren.switch", 100);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected end of file (msg.no.paren.switch#100)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParse7() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      ErrorReporter arg1 = arg0.getErrorReporter();
      Parser parser = new Parser(arg0, arg1);
      ScriptOrFnNode parse = parser.parse("debugger", "$pDDEqoyqLPd:dx", 10);
      assertEquals("\u0087\u009FQ\u0001", parser.getEncodedSource());
      assertEquals("$pDDEqoyqLPd:dx", parse.getSourceName());
      assertEquals(10, parse.getLineno());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsNullPointerExceptionAndParseWithPositive3() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      Parser parser = new Parser(arg0, (ErrorReporter) null);
      // Undeclared exception!
      try { 
        parser.parse("const ", "const ", 21);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Parser", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive21() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("with", "with", 29);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing ( before with-statement object (with#29)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsIllegalArgumentException4() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("do ", "do ", (-3130));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3130
         //
         verifyException("org.mozilla.javascript.RhinoException", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive22() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("default", "default", 728);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not a valid default namespace statement. Syntax is: default xml namespace = EXPRESSION; (default#728)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsIllegalArgumentException5() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("switch ", "switch ", (-383));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -383
         //
         verifyException("org.mozilla.javascript.RhinoException", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive23() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse(" if@d6(", " if@d6(", 122);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing ( before condition ( if@d6(#122)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsIllegalArgumentException6() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("try ", "try ", (-6061));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -6061
         //
         verifyException("org.mozilla.javascript.RhinoException", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive24() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("throw", "throw", 105);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected end of file (throw#105)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsIllegalArgumentException7() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      ErrorReporter arg1 = arg0.getErrorReporter();
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("return", "![3kK", (-2048));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2048
         //
         verifyException("org.mozilla.javascript.RhinoException", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsIllegalArgumentException8() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("break", "break", (-1139));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1139
         //
         verifyException("org.mozilla.javascript.RhinoException", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParse8() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      ErrorReporter arg1 = arg0.getErrorReporter();
      Parser parser = new Parser(arg0, arg1);
      ScriptOrFnNode parse = parser.parse("{}eU52auw", "{}eU52auw", 127);
      assertEquals(127, parse.getBaseLineno());
      assertEquals("\u0087'\beU52auwQ\u0001", parser.getEncodedSource());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive25() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("{hkU52auw", "{hkU52auw", 24);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing } in compound statement ({hkU52auw#24)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive26() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      ErrorReporter arg1 = arg0.getErrorReporter();
      Parser parser = new Parser(arg0, arg1);
      parser.calledByCompileFunction = true;
      // Undeclared exception!
      try { 
        parser.parse("function ", "W@c<4iYU?;1,kHcDy9q", 1788);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing ( before function parameters. (W@c<4iYU?;1,kHcDy9q#1788)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive27() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("function ", "function ", 2802);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing ( before function parameters. (function #2802)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsNullPointerExceptionAndParseWithPositive4() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      Parser parser = new Parser(arg0, (ErrorReporter) null);
      // Undeclared exception!
      try { 
        parser.parse("while ", "while ", 317);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Parser", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive28() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      arg0.setXmlAvailable(false);
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("@%OnIbS6c>B", "<_", 2146435072);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // XML runtime not available (<_#2146435072)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsNullPointerExceptionAndParseWithPositive5() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      Parser parser = new Parser(arg0, (ErrorReporter) null);
      // Undeclared exception!
      try { 
        parser.parse("q,W?Y:]{mMEix}Dp", "q,W?Y:]{mMEix}Dp", 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Parser", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseReturningScriptOrFnNodeWhereHasChildrenIsFalse() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      ScriptOrFnNode parse = parser.parse("\n    ", "\n    ", 6067);
      assertEquals("\u0087", parser.getEncodedSource());
      assertEquals(6068, parse.getEndLineno());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddStrictWarning() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      Parser parser = new Parser(arg0, (ErrorReporter) null);
      parser.addStrictWarning("p5*>egB=Qg-GjeGx,n", "p5*>egB=Qg-GjeGx,n");
      assertNull(parser.getEncodedSource());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive29() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("Ya|-w/{3}bC?wq]8", "Ya|-w/{3}bC?wq]8", 110);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing : after property id (Ya|-w/{3}bC?wq]8#110)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetEncodedSourceReturningNull() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      ErrorReporter arg1 = arg0.getErrorReporter();
      Parser parser = new Parser(arg0, arg1);
      String encodedSource = parser.getEncodedSource();
      assertNull(encodedSource);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddErrorTaking2ArgumentsThrowsNullPointerException() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      ErrorReporter arg1 = arg0.getErrorReporter();
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.addError("msg.no.bracket.arg", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Parser", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsNullPointerExceptionAndParseWithPositive6() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      Parser parser = new Parser(arg0, (ErrorReporter) null);
      // Undeclared exception!
      try { 
        parser.parse("![3kK", "![3kK", 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Parser", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsIllegalStateException1() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      Parser parser = new Parser(arg0, (ErrorReporter) null);
      // Undeclared exception!
      try { 
        parser.parse("@ee*uC", "@ee*uC", (-1186));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPopScopeThrowsNullPointerException() throws Throwable  {
      Parser parser = new Parser((CompilerEnvirons) null, (ErrorReporter) null);
      // Undeclared exception!
      try { 
        parser.popScope();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Parser", e);
      }
  }
}
