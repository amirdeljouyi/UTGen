/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Mon Mar 18 09:49:44 GMT 2024
 */

package Newzgrabber;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import Newzgrabber.Downloader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Downloader_Original_ESTest extends Downloader_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalLinesReturningPositive() throws Throwable  {
      Downloader downloader = new Downloader();
      downloader.setTotalLines(500L);
      long totalLines = downloader.getTotalLines();
      assertEquals(500L, totalLines);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTimeoutReturningZero() throws Throwable  {
      Downloader downloader = new Downloader();
      assertEquals((-1), downloader.getTimeout());
      
      int arg0 = 0;
      downloader.setTimeout(arg0);
      int timeout = downloader.getTimeout();
      assertEquals(0, timeout);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetGroupReturningNonEmptyString() throws Throwable  {
      Downloader downloader = new Downloader();
      downloader.setGroup("batch.ini");
      downloader.getGroup();
      assertEquals((-1), downloader.getTimeout());
      assertFalse(downloader.ABORT);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetIds() throws Throwable  {
      Downloader downloader = new Downloader();
      long[] arg0 = new long[3];
      downloader.setIds(arg0);
      // Undeclared exception!
      try { 
        downloader.startDownload();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Newzgrabber.Downloader", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testStartDownloadThrowsNullPointerException() throws Throwable  {
      Downloader downloader = new Downloader();
      // Undeclared exception!
      try { 
        downloader.startDownload();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Newzgrabber.Downloader", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testClose() throws Throwable  {
      Downloader downloader = new Downloader();
      downloader.close();
      assertFalse(downloader.ABORT);
      assertEquals((-1), downloader.getTimeout());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBaseMessageIdReturningZero() throws Throwable  {
      Downloader downloader = new Downloader();
      long[] arg0 = new long[8];
      downloader.setIds(arg0);
      downloader.getBaseMessageId();
      assertEquals((-1), downloader.getTimeout());
      assertFalse(downloader.ABORT);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBaseMessageIdReturningNegative() throws Throwable  {
      Downloader downloader = new Downloader();
      long baseMessageId = downloader.getBaseMessageId();
      assertFalse(downloader.ABORT);
      assertEquals((-1L), baseMessageId);
      assertEquals((-1), downloader.getTimeout());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTimeoutReturningNegative() throws Throwable  {
      Downloader downloader = new Downloader();
      int timeout = downloader.getTimeout();
      assertFalse(downloader.ABORT);
      assertEquals((-1), timeout);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDownloadDirectory() throws Throwable  {
      Downloader downloader = new Downloader();
      MockFile arg0 = new MockFile("U9EZn6", "U9EZn6");
      downloader.setDownloadDirectory(arg0);
      assertFalse(downloader.ABORT);
      assertEquals((-1), downloader.getTimeout());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetPassword() throws Throwable  {
      Downloader downloader = new Downloader();
      downloader.setPassword((String) null);
      assertEquals((-1), downloader.getTimeout());
      assertFalse(downloader.ABORT);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testStartDownload() throws Throwable  {
      Downloader downloader = new Downloader();
      long[] arg0 = new long[0];
      downloader.setIds(arg0);
      downloader.startDownload();
      assertFalse(downloader.ABORT);
      assertEquals((-1), downloader.getTimeout());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTimeoutReturningPositive() throws Throwable  {
      Downloader downloader = new Downloader();
      downloader.setTimeout(4);
      int timeout = downloader.getTimeout();
      assertEquals(4, timeout);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetGroupReturningEmptyString() throws Throwable  {
      Downloader downloader = new Downloader();
      downloader.setGroup("");
      downloader.getGroup();
      assertEquals((-1), downloader.getTimeout());
      assertFalse(downloader.ABORT);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalLinesReturningZero() throws Throwable  {
      Downloader downloader = new Downloader();
      downloader.getTotalLines();
      assertFalse(downloader.ABORT);
      assertEquals((-1), downloader.getTimeout());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetGroupReturningNull() throws Throwable  {
      Downloader downloader = new Downloader();
      downloader.getGroup();
      assertEquals((-1), downloader.getTimeout());
      assertFalse(downloader.ABORT);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetUsername() throws Throwable  {
      Downloader downloader = new Downloader();
      downloader.setUsername("#furI7;m1*");
      assertEquals((-1), downloader.getTimeout());
      assertFalse(downloader.ABORT);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetTitle() throws Throwable  {
      Downloader downloader = new Downloader();
      downloader.setTitle("Created NNTP object");
      assertEquals((-1), downloader.getTimeout());
      assertFalse(downloader.ABORT);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetServer() throws Throwable  {
      Downloader downloader = new Downloader();
      downloader.setServer((String) null);
      assertEquals((-1), downloader.getTimeout());
      assertFalse(downloader.ABORT);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetTableIndex() throws Throwable  {
      Downloader downloader = new Downloader();
      downloader.setTableIndex(7);
      assertFalse(downloader.ABORT);
      assertEquals((-1), downloader.getTimeout());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDownloadData() throws Throwable  {
      Downloader downloader = new Downloader();
      Object[] arg0 = new Object[0];
      downloader.setDownloadData(arg0);
      assertEquals((-1), downloader.getTimeout());
      assertFalse(downloader.ABORT);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalLinesReturningNegative() throws Throwable  {
      Downloader downloader = new Downloader();
      downloader.setTotalLines((-2009L));
      long totalLines = downloader.getTotalLines();
      assertEquals((-2009L), totalLines);
  }
}
