/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 20 11:20:52 GMT 2024
 */

package org.scribe.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.scribe.model.OAuthRequest;
import org.scribe.model.Verb;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OAuthRequest_Original_ESTest extends OAuthRequest_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddOAuthParameterWithNonEmptyString() throws Throwable  {
      Verb arg0 = Verb.PUT;
      OAuthRequest oAuthRequest = new OAuthRequest(arg0, "scope");
      oAuthRequest.addOAuthParameter("scope", "scope");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddOAuthParameterThrowsIllegalArgumentException() throws Throwable  {
      Verb arg0 = Verb.GET;
      OAuthRequest oAuthRequest = new OAuthRequest(arg0, "vyGFDVxt.SSn");
      // Undeclared exception!
      try { 
        oAuthRequest.addOAuthParameter("@OAuthRequest(GET, vyGFDVxt.SSn)", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // OAuth parameters must either be 'scope' or start with 'oauth_'
         //
         verifyException("org.scribe.model.OAuthRequest", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToString() throws Throwable  {
      Verb arg0 = Verb.GET;
      OAuthRequest oAuthRequest = new OAuthRequest(arg0, "@OAuthRequest(GET, vyGFDVxt.SSn)");
      String string = oAuthRequest.toString();
      assertEquals("@OAuthRequest(GET, @OAuthRequest(GET, vyGFDVxt.SSn))", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetOauthParametersReturningMapWhereIsEmptyIsFalse() throws Throwable  {
      Verb arg0 = Verb.PUT;
      OAuthRequest oAuthRequest = new OAuthRequest(arg0, "");
      oAuthRequest.addOAuthParameter("oauth_", "");
      Map<String, String> oauthParameters = oAuthRequest.getOauthParameters();
      assertFalse(oauthParameters.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetOauthParametersReturningMapWhereIsEmptyIsTrue() throws Throwable  {
      Verb arg0 = Verb.PUT;
      OAuthRequest oAuthRequest = new OAuthRequest(arg0, "");
      Map<String, String> oauthParameters = oAuthRequest.getOauthParameters();
      assertEquals(0, oauthParameters.size());
  }
}
