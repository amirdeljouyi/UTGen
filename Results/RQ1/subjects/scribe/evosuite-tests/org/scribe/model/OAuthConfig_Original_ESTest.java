/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 20 11:16:41 GMT 2024
 */

package org.scribe.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.scribe.model.OAuthConfig;
import org.scribe.model.SignatureType;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OAuthConfig_Original_ESTest extends OAuthConfig_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetScopeReturningNull() throws Throwable  {
      OAuthConfig oAuthConfig = new OAuthConfig("ENUM$VALUES", (String) null);
      String scope = oAuthConfig.getScope();
      assertNull(scope);
      assertEquals("oob", oAuthConfig.getCallback());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetScopeReturningEmptyString() throws Throwable  {
      SignatureType arg3 = SignatureType.QueryString;
      OAuthConfig oAuthConfig = new OAuthConfig("{=N", "", "", arg3, "");
      String scope = oAuthConfig.getScope();
      assertEquals("", oAuthConfig.getApiSecret());
      assertEquals("", oAuthConfig.getCallback());
      assertEquals(SignatureType.QueryString, oAuthConfig.getSignatureType());
      assertEquals("{=N", oAuthConfig.getApiKey());
      assertEquals("", scope);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCallbackReturningNonEmptyString() throws Throwable  {
      SignatureType arg3 = SignatureType.Header;
      OAuthConfig oAuthConfig = new OAuthConfig("", "28}+", "28}+", arg3, "28}+");
      String callback = oAuthConfig.getCallback();
      assertEquals("28}+", oAuthConfig.getApiSecret());
      assertEquals("28}+", oAuthConfig.getScope());
      assertEquals("", oAuthConfig.getApiKey());
      assertEquals("28}+", callback);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetApiSecretReturningNull() throws Throwable  {
      OAuthConfig oAuthConfig = new OAuthConfig("ENUM$VALUES", (String) null);
      String apiSecret = oAuthConfig.getApiSecret();
      assertEquals("oob", oAuthConfig.getCallback());
      assertNull(apiSecret);
      assertFalse(oAuthConfig.hasScope());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetApiSecretReturningNonEmptyString() throws Throwable  {
      SignatureType arg3 = SignatureType.Header;
      OAuthConfig oAuthConfig = new OAuthConfig("", "28}+", "28}+", arg3, "28}+");
      String apiSecret = oAuthConfig.getApiSecret();
      assertEquals("28}+", oAuthConfig.getCallback());
      assertEquals("28}+", apiSecret);
      assertEquals("28}+", oAuthConfig.getScope());
      assertEquals("", oAuthConfig.getApiKey());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetApiKeyReturningNonEmptyString() throws Throwable  {
      SignatureType arg3 = SignatureType.QueryString;
      OAuthConfig oAuthConfig = new OAuthConfig("{=N", "", "", arg3, "");
      String apiKey = oAuthConfig.getApiKey();
      assertEquals("{=N", apiKey);
      assertEquals("", oAuthConfig.getCallback());
      assertEquals("", oAuthConfig.getApiSecret());
      assertEquals("", oAuthConfig.getScope());
      assertEquals(SignatureType.QueryString, oAuthConfig.getSignatureType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetApiKeyReturningEmptyString() throws Throwable  {
      SignatureType arg3 = SignatureType.Header;
      OAuthConfig oAuthConfig = new OAuthConfig("", "28}+", "28}+", arg3, "28}+");
      String apiKey = oAuthConfig.getApiKey();
      assertEquals("28}+", oAuthConfig.getScope());
      assertEquals("28}+", oAuthConfig.getApiSecret());
      assertEquals("28}+", oAuthConfig.getCallback());
      assertEquals("", apiKey);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHasScopeReturningTrue() throws Throwable  {
      SignatureType arg3 = SignatureType.Header;
      OAuthConfig oAuthConfig = new OAuthConfig((String) null, "", "", arg3, "Tu4hD1g[S");
      boolean scope = oAuthConfig.hasScope();
      assertEquals("", oAuthConfig.getCallback());
      assertEquals("Tu4hD1g[S", oAuthConfig.getScope());
      assertTrue(scope);
      assertEquals("", oAuthConfig.getApiSecret());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHasScopeReturningFalse() throws Throwable  {
      OAuthConfig oAuthConfig = new OAuthConfig("oob", "oob");
      boolean scope = oAuthConfig.hasScope();
      assertEquals("oob", oAuthConfig.getCallback());
      assertFalse(scope);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCallbackReturningEmptyString() throws Throwable  {
      SignatureType arg3 = SignatureType.Header;
      OAuthConfig oAuthConfig = new OAuthConfig((String) null, "", "", arg3, "Tu4hD1g[S");
      String callback = oAuthConfig.getCallback();
      assertEquals("", callback);
      assertEquals("", oAuthConfig.getApiSecret());
      assertTrue(oAuthConfig.hasScope());
      assertNotNull(callback);
      assertEquals("Tu4hD1g[S", oAuthConfig.getScope());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetScopeReturningNonEmptyString() throws Throwable  {
      SignatureType arg3 = SignatureType.Header;
      OAuthConfig oAuthConfig = new OAuthConfig((String) null, "", "", arg3, "Tu4hD1g[S");
      String scope = oAuthConfig.getScope();
      assertEquals("", oAuthConfig.getCallback());
      assertEquals("Tu4hD1g[S", scope);
      assertEquals("", oAuthConfig.getApiSecret());
      assertNotNull(scope);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetApiKeyReturningNull() throws Throwable  {
      SignatureType arg3 = SignatureType.Header;
      OAuthConfig oAuthConfig = new OAuthConfig((String) null, "", "", arg3, "Tu4hD1g[S");
      String apiKey = oAuthConfig.getApiKey();
      assertEquals("", oAuthConfig.getApiSecret());
      assertTrue(oAuthConfig.hasScope());
      assertEquals("", oAuthConfig.getCallback());
      assertEquals("Tu4hD1g[S", oAuthConfig.getScope());
      assertNull(apiKey);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetApiSecretReturningEmptyString() throws Throwable  {
      SignatureType arg3 = SignatureType.Header;
      OAuthConfig oAuthConfig = new OAuthConfig((String) null, "", "", arg3, "Tu4hD1g[S");
      String apiSecret = oAuthConfig.getApiSecret();
      assertNotNull(apiSecret);
      assertTrue(oAuthConfig.hasScope());
      assertEquals("Tu4hD1g[S", oAuthConfig.getScope());
      assertEquals("", oAuthConfig.getCallback());
      assertEquals("", apiSecret);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSignatureType() throws Throwable  {
      OAuthConfig oAuthConfig = new OAuthConfig(")56$EA%C||c}V3", ")56$EA%C||c}V3");
      oAuthConfig.getSignatureType();
      assertFalse(oAuthConfig.hasScope());
      assertEquals("oob", oAuthConfig.getCallback());
  }
}
