/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 21 08:28:32 GMT 2024
 */

package wheel.asm;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.Item;
import wheel.asm.MethodVisitor;
import wheel.asm.MethodWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassWriter_ESTest extends ClassWriter_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitWithNonEmptyArray() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter classWriter = new ClassWriter(44);
      String[] arg5 = new String[2];
      arg5[0] = "$K8C_&jc&f*Lww7U";
      arg5[1] = "$K8C_&jc&f*Lww7U";
      classWriter.visit((byte)21, 23, "$K8C_&jc&f*Lww7U", "$K8C_&jc&f*Lww7U", "$K8C_&jc&f*Lww7U", arg5);
      classWriter.invalidFrames = true;
      byte[] byteArray = classWriter.toByteArray();
      assertEquals(70, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMergedTypeThrowsRuntimeException() throws Throwable  {
      // No Comments were added
      ClassWriter classWriter = new ClassWriter(69);
      classWriter.addUninitializedType("", 69);
      classWriter.addType("4FZra+v[ZD/^5J");
      // Undeclared exception!
      try { 
        classWriter.getMergedType(1, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: 
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCommonSuperClassThrowsRuntimeException() throws Throwable  {
      // No Comments were added
      ClassWriter classWriter = new ClassWriter(3129);
      // Undeclared exception!
      try { 
        classWriter.getCommonSuperClass("java/lang/Object", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: 
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNewUTF8ReturningPositive() throws Throwable  {
      // No Comments were added
      ClassWriter classWriter = new ClassWriter(16777225);
      int newUTF8 = classWriter.newUTF8("value ");
      assertEquals(1, newUTF8);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNewUTF8ReturningNegative() throws Throwable  {
      // Arrange
      ClassWriter classWriter = new ClassWriter(1445);
      int expectedValue = (-3215);
      
      // Act
      int actualValue = classWriter.newUTF8("Deprecated");
      
      // Assert
      assertEquals(expectedValue, actualValue);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNewNameTypeReturningNegative() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter classWriter = new ClassWriter(1445);
      classWriter.index = (-2127);
      int newNameType = classWriter.newNameType("", "HSJA[0");
      assertEquals((-2125), newNameType);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNewClassItem() throws Throwable  {
      // No Comments were added
      ClassWriter classWriter = new ClassWriter((-6291));
      Item newClassItem = classWriter.newClassItem("`");
      assertNotNull(newClassItem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNewClassReturningNegative() throws Throwable  {
      // No Comments were added
      ClassWriter classWriter = new ClassWriter(1445);
      classWriter.index = (-2127);
      int newClass = classWriter.newClass("hr[-BSk~S0U+R?(INs");
      assertEquals((-2126), newClass);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNewNameType() throws Throwable  {
      // No Comments were added
      ClassWriter classWriter = new ClassWriter(1445);
      int newNameType = classWriter.newNameType("", "HSJA[0");
      assertEquals(3, newNameType);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNewClassReturningPositive() throws Throwable  {
      // No Comments were added
      ClassWriter classWriter = new ClassWriter(1445);
      int newClass = classWriter.newClass("hr[-BSk~S0U+R?(INs");
      assertEquals(2, newClass);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCommonSuperClassReturningNonEmptyString() throws Throwable  {
      // Arrange
      ClassWriter classWriter = new ClassWriter(685);
      String className1 = "wheel.asm.ClassWriter";
      String className2 = "org.apache.commons.io.filefilter.AbstractFileFilter";
      
      // Act
      String commonSuperClass = classWriter.getCommonSuperClass(className1, className2);
      
      // Assert
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCommonSuperClassWithNonEmptyString0() throws Throwable  {
      // Arrange
      ClassWriter classWriter = new ClassWriter(54);
      
      // Act
      String commonSuperClass = classWriter.getCommonSuperClass("java/lang/Object", "java/lang/Object");
      
      // Assert
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCommonSuperClassWithNonEmptyString1() throws Throwable  {
      // No Comments were added
      ClassWriter classWriter = new ClassWriter((-8));
      String commonSuperClass = classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.AbstractFileFilter", "java/lang/Object");
      assertEquals("java/lang/Object", commonSuperClass);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddUninitializedTypeWithNonEmptyString() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter classWriter = new ClassWriter(54);
      Item[] itemArray = new Item[1];
      classWriter.typeTable = itemArray;
      int addUninitializedType = classWriter.addUninitializedType("AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", 54);
      assertEquals(1, addUninitializedType);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNewMethodItem() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter classWriter = new ClassWriter(1841);
      classWriter.newMethodItem("oZH6)", "", "", false);
      int newNameType = classWriter.newNameType("", "");
      assertEquals(4, newNameType);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNewConstItem() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter classWriter = new ClassWriter((-3354));
      Character arg0 = new Character('D');
      Item newConstItem = classWriter.newConstItem(arg0);
      assertNotNull(newConstItem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToByteArrayThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      // No Comments were added
      ClassWriter classWriter = new ClassWriter(44);
      classWriter.invalidFrames = true;
      // Undeclared exception!
      try { 
        classWriter.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitInnerClassWithNegative() throws Throwable  {
      // No Comments were added
      ClassWriter classWriter = new ClassWriter((-2065));
      classWriter.visitInnerClass("wheel.asm.ClassAdapter", "nxhZWu|y#?.|7,", "nxhZWu|y#?.|7,", (-2065));
      byte[] byteArray = classWriter.toByteArray();
      assertEquals(104, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitWithNegative() throws Throwable  {
      // No Comments were added
      ClassWriter classWriter = new ClassWriter((-3354));
      String[] arg5 = new String[0];
      classWriter.visit((-1848), (-3354), "\"Bp:B_", "u~1>FLm>}uv`N1", "X", arg5);
      byte[] byteArray = classWriter.toByteArray();
      assertEquals(99, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisit() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter classWriter = new ClassWriter((-1190));
      String[] arg5 = new String[0];
      classWriter.visit(1, (-1190), "", "", "", arg5);
      byte[] byteArray = classWriter.toByteArray();
      assertEquals(87, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToByteArray() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(54);
      String[] parameterTypes = {};
      MethodWriter methodWriter = new MethodWriter(classWriter, 54, "Tzn;5C,Yx)Wjjiy", "Tzn;5C,Yx)Wjjiy", "Tzn;5C,Yx)Wjjiy", parameterTypes, true, true);
      
      // When
      byte[] byteArray = classWriter.toByteArray();
      
      // Then
      assertEquals(70, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitInnerClassWithNullAndNull() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter classWriter = new ClassWriter(12);
      classWriter.visitInnerClass((String) null, (String) null, (String) null, 12);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitInnerClassWithEmptyString() throws Throwable  {
      // Given a class writer with inner classes
      ClassWriter classWriter = new ClassWriter(48);
      
      // When we visit the inner classes
      classWriter.visitInnerClass("", "", "", 48);
      classWriter.visitInnerClass("", (String) null, "SourceFile", 1);
      
      // Then the correct values are set for the inner classes
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitAnnotationWithNonEmptyStringAndTrue() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter classWriter = new ClassWriter(32);
      classWriter.visitAnnotation("java/lang/Object", true);
      byte[] byteArray = classWriter.toByteArray();
      assertEquals(83, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitAnnotationWithEmptyStringAndFalse() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter classWriter = new ClassWriter(53);
      classWriter.visitAnnotation("", false);
      byte[] byteArray = classWriter.toByteArray();
      assertEquals(69, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitOuterClass() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter classWriter = new ClassWriter((-105));
      classWriter.visitOuterClass("wheel.asm.ClassWriter", "wheel.asm.ClassWriter", "wheel.asm.ClassWriter");
      byte[] byteArray = classWriter.toByteArray();
      assertEquals(84, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitOuterClassWithNullAndNonEmptyString0() throws Throwable  {
      // No Comments were added
      ClassWriter classWriter = new ClassWriter(32);
      classWriter.visitOuterClass("W{+`p<M\"en", "%R\u0001+}UQy88c^~d~v:s", (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitOuterClassWithNullAndNonEmptyString1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter classWriter = new ClassWriter(33);
      classWriter.visitOuterClass("value ", (String) null, "value ");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitSourceWithNonEmptyString() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(6);
      
      // When
      classWriter.visitSource("w~x-q~tWnuBoQb", "w~x-q~tWnuBoQb");
      
      // Then
      byte[] byteArray = classWriter.toByteArray();
      assertEquals(105, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitSource() throws Throwable  {
      // No Comments were added
      ClassWriter classWriter = new ClassWriter((-3354));
      classWriter.visitSource("RZ|xw!o\"mb*u 7", (String) null);
      byte[] byteArray = classWriter.toByteArray();
      assertEquals(62, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitSourceWithNull() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter classWriter = new ClassWriter(3);
      classWriter.visitSource((String) null, (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitWithNull() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter classWriter = new ClassWriter(64);
      String[] arg5 = new String[0];
      classWriter.visit(46, 46, "", "", (String) null, arg5);
      assertEquals(0, arg5.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitWithNullAndNull() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter classWriter = new ClassWriter(864);
      classWriter.visit(2136, 2136, "", (String) null, "", (String[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNewConstThrowsIllegalArgumentException() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter(32);
      // Undeclared exception!
      try { 
        arg0.newConst(arg0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.ClassWriter@5
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitEnd() throws Throwable  {
      // No Comments were added
      ClassWriter classWriter = new ClassWriter(685);
      classWriter.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMethod() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter classWriter = new ClassWriter(2348);
      MethodVisitor visitMethod = classWriter.visitMethod(0, "", "", "", (String[]) null);
      assertNotNull(visitMethod);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNewMethod() throws Throwable  {
      // Given a class writer with a capacity of -2370
      ClassWriter classWriter = new ClassWriter((-2370));
      
      // When creating a new method with an empty name, a return type of "",
      // an empty parameter list, and the flag set to true
      int newMethod = classWriter.newMethod("", "", "", true);
      
      // Then the method id should be 4
      assertEquals(4, newMethod);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesClassWriterTaking2Arguments() throws Throwable  {
      // No Comments were added
      ClassReader arg0 = new ClassReader("wheel.asm.ClassWriter");
      ClassWriter classWriter = new ClassWriter(arg0, 1986);
      int newConst = classWriter.newConst("wheel.asm.ClassWriter");
      assertEquals(641, newConst);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitField() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter classWriter = new ClassWriter(3129);
      classWriter.visitField(1, "M(", "M(", "(F,b%xV>]g_$V4UCL", "M(");
      byte[] byteArray = classWriter.toByteArray();
      assertEquals(106, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNewField() throws Throwable  {
      // Given a class writer with a maximum field size of 127 bytes
      ClassWriter classWriter = new ClassWriter(127);
      
      // When we create a new field with the specified type and name
      int newField = classWriter.newField("org.apache.commons.io.IOCase", "org.apache.commons.io.IOCase", "org.apache.commons.io.IOCase");
      
      // Then the method should return a valid field ID, in this case 4
      assertEquals(4, newField);
  }
}
