/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 21 06:05:47 GMT 2024
 */

package net.sourceforge.ext4j.taglib.bo;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import javax.servlet.http.HttpServletRequest;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import net.sourceforge.ext4j.taglib.bo.Request;
import net.sourceforge.ext4j.taglib.bo.RequestParam;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Request_ESTest extends Request_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToStringReturningEmptyString() throws Throwable  {
      // Create a new Request with the isWebRequest flag set to true
      Request request = new Request(true);
      
      // Set the base URL of the request
      String baseURL = "https://example.com";
      request.setBaseURL(baseURL);
      
      // Get the string representation of the request
      String stringRepresentation = request.toString();
      
      // Verify that isWebRequest() returns false for this request
      assertFalse(request.isWebRequest());
      
      // Verify that the base URL has been set correctly
      assertEquals(baseURL, request.getBaseURL());
      
      // Verify that the string representation of the request is equal to the base URL
      assertEquals(baseURL, stringRepresentation);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToBaseURLReturningIRequestWhereIsWebRequestIsFalse() throws Throwable  {
      // Given a request object
      Request request = new Request();
      
      // When the request is converted to a base URL
      IRequest baseURL = request.toBaseURL();
      
      // Then the resulting base URL should not be a web request
      assertFalse(baseURL.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveParamReturningIRequestWhereIsWebRequestIsTrue() throws Throwable  {
      // rollbacked to evosuite
      Request request = new Request("LI|q1?H=7OA#");
      IRequest removeParam = request.removeParam("LI|q1?H=7OA#");
      assertEquals("LI|q1", removeParam.getBaseURL());
      assertEquals("", removeParam.getHashValue());
      assertTrue(removeParam.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsWebRequestReturningFalse() throws Throwable  {
      // Given: A request object
      Request request = new Request();
      
      // When: The isWebRequest method is called on the request object
      boolean isWebRequest = request.isWebRequest();
      
      // Then: The result of the method should be false
      assertFalse(isWebRequest);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetQueryStringReturningEmptyString() throws Throwable  {
      // Given: A Request object with a query string
      Request request = new Request();
      
      // When: The query string is retrieved from the Request
      String queryString = request.getQueryString();
      
      // Then: The query string should not be empty
      assertFalse(queryString.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRequestTakingHttpServletRequest() throws Throwable  {
      // Given a Request object with a param named "M4ZTGJ"
      Request request = new Request((HttpServletRequest) null);
      RequestParam arg0 = new RequestParam("M4ZTGJ");
      request.setParam(arg0);
      
      // When the getParam() method is called with the param name "M4ZTGJ" and false as a second argument
      request.getParam("M4ZTGJ", false);
      
      // Then the isWebRequest() method should return false
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetParamTakingStringReturningRequestParamWhereGetTotalValuesIsZero() throws Throwable  {
      // Create a new Request object with the operator "=" and set it as a web request
      Request request = new Request("=", true);
      
      // Set the parameter for the request to the operator "="
      RequestParam arg0 = new RequestParam("=");
      request.setParam(arg0);
      
      // Get the parameter for the request using the operator "="
      RequestParam param = request.getParam("=");
      
      // Assert that the parameter is not null
      assertNotNull(param);
      
      // Assert that the request is a web request
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetParamTakingString() throws Throwable  {
      // Given a request object with an empty parameter value
      Request request = new Request((String) null);
      request.addParam("H5Tir,O;B_/_URUY", "");
      
      // When the getParam method is called with the parameter name
      RequestParam param = request.getParam("H5Tir,O;B_/_URUY");
      
      // Then the method should return a non-null value
      assertNotNull(param);
      
      // And the returned value should have the correct name
      assertEquals("H5Tir,O;B_/_URUY", param.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetHashValueReturningNonEmptyString() throws Throwable  {
      // This test verifies that the "setHashValue" method correctly sets the hash value of a request object
      // Set up the request object and the expected result
      Request request = new Request("", false);
      String expectedHashValue = "Could not parse value \"";
      
      // Invoke the setHashValue method on the request object
      Request setHashValue = request.setHashValue(expectedHashValue);
      
      // Assert that the hash value is correctly set
      assertEquals(expectedHashValue, setHashValue.getHashValue());
      
      // Assert that the request object is a web request
      assertTrue(setHashValue.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetHashValueReturningEmptyString() throws Throwable  {
      // Given: A Request object with a hash value set to "="
      Request request = new Request("=", true);
      
      // When: The setHashValue method is called on the Request object with an empty string as the argument
      Request setHashValue = request.setHashValue("");
      
      // Then: The getHashValue method should return an empty string and the isWebRequest method should return false
      assertEquals("", setHashValue.getHashValue());
      assertFalse(setHashValue.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBaseURLReturningNull() throws Throwable  {
      // Given: A request object has been created
      Request request = new Request();
      
      // When: The base URL of the request is retrieved
      String baseURL = request.getBaseURL();
      
      // Then: The request is not a web request
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBaseURLReturningEmptyString() throws Throwable  {
      // Given: A request object with a base URL set to an empty string
      Request request = new Request();
      request.setBaseURL("");
      
      // When: The isWebRequest() method is called on the request object
      boolean isWebRequest = request.isWebRequest();
      
      // Then: The returned value should be false, as a base URL of "" is not a valid web request URL
      assertFalse(isWebRequest);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCloneReturningIRequestWhereIsWebRequestIsFalse() throws Throwable  {
      Request request = new Request("=", true);
      request.setBaseURL("file:/z+{No");
      
      // When the clone method is called on the request object
      IRequest clone = request.clone();
      
      // Then the cloned request should have a different base URL than the original request
      assertFalse(request.getBaseURL().equals(clone.getBaseURL()));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testURLEncodeReturningNull() throws Throwable  {
      // Given a Request object
      Request request = new Request();
      
      // When we call URLEncode(null) on the Request object
      request.URLEncode((String) null);
      
      // Then the isWebRequest() method should return false
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testURLEncodeReturningNonEmptyString() throws Throwable  {
      // Create a new request object
      Request request = new Request();
      
      // Encoding the string "#M_10x&AY|" with URLEncode method
      String URLEncoded = request.URLEncode("#M_10x&AY|");
      
      // Checking that the string is not a web request
      assertFalse(request.isWebRequest());
      
      // Comparing the encoded string with the expected value
      assertEquals("%23M_10x%26AY|", URLEncoded);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testURLEncodeReturningEmptyString() throws Throwable  {
      // No Comments were added
      Request request = new Request("", true);
      String URLEncode = request.URLEncode("");
      assertTrue(request.isWebRequest());
      assertEquals("", URLEncode);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testURLDecodeReturningNonEmptyString() throws Throwable  {
      // No Comments were added
      Request request = new Request();
      String URLDecode = request.URLDecode(";\"gk%3NCVI]Ej?pj");
      assertEquals(";\"gk%3NCVI]Ej?pj", URLDecode);
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testURLDecodeReturningEmptyString() throws Throwable  {
      // Given a Request object with the parameter "f"
      Request request = new Request("f");
      
      // When the URLDecode method is called with an empty string
      String URLDecode = request.URLDecode("");
      
      // Then the web request flag should be set to true
      assertTrue(request.isWebRequest());
      
      // And the URLDecoded string should be an empty string
      assertEquals("", URLDecode);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRequestTakingNoArgumentsAndCallsToString() throws Throwable  {
      // Given a new request object
      Request request = new Request();
      
      // When the toString method is called on the request object
      String string = request.toString();
      
      // Then the string representation of the request should be "null"
      assertEquals("null", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetQueryStringReturningNonEmptyString() throws Throwable  {
      // Given a request object
      Request request = new Request("some-path");
      
      // When parameters are added to the request
      request.addParam("H5Tir,O;B_/_URUY", "");
      request.addParam("", (String) null);
      
      // Then the query string is generated correctly
      String queryString = request.getQueryString();
      assertFalse(request.isWebRequest());
      assertEquals("?H5Tir,O;B_/_URUY=&=null", queryString);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetParamTaking2ArgumentsReturningIRequestWhereIsWebRequestIsTrue() throws Throwable  {
      // Create a new request with a hash value
      Request request = new Request("L?s~Bq1?H=O#");
      
      // Set the "L?s~Bq1?H=O#" param to "L?s~Bq1?H=O#"
      request.setParam("L?s~Bq1?H=O#", "L?s~Bq1?H=O#");
      
      // Add the "e-" param and get the added parameter
      IRequest addParam = request.addParam("L?s~Bq1?H=O#", "e-");
      
      // Assert that the hash value is empty
      assertEquals("", addParam.getHashValue());
      
      // Assert that the request is a web request
      assertTrue(addParam.isWebRequest());
      
      // Assert that the base URL is "L"
      assertEquals("L", addParam.getBaseURL());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetParamTaking2ArgumentsReturningNull() throws Throwable  {
      // No Comments were added
      Request request = new Request("e;n", true);
      request.setParam("4<O;(CEf\"ehy?[q,)", "4<O;(CEf\"ehy?[q,)");
      RequestParam param = request.getParam("net.sourceforge.ext4j.taglib.bo.CurrentURLBO$RootRequest", true);
      assertNull(param);
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetParamTaking2ArgumentsReturningRequestParamWhereGetTotalValuesIsPositive() throws Throwable  {
      // rollbacked to evosuite
      Request request = new Request("", true);
      IRequest setParam = request.setParam("", "");
      RequestParam param = setParam.getParam("", true);
      assertNotNull(param);
      assertTrue(setParam.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetParamTaking2ArgumentsWithNull() throws Throwable  {
      // rollbacked to evosuite
      Request request = new Request(false);
      request.getParam((String) null, false);
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetParams() throws Throwable  {
      // No Comments were added
      Request request = new Request("'B5~$H\":", true);
      request.getParams();
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBaseURLReturningNonEmptyString() throws Throwable  {
      // No Comments were added
      Request request = new Request("'B5~$H\":", true);
      request.getBaseURL();
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetHashValueReturningNull() throws Throwable  {
      // rollbacked to evosuite
      Request request = new Request("=", true);
      request.getHashValue();
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testURLDecodeReturningNull() throws Throwable  {
      // Setup
      Request request = new Request();
      
      // Action
      request.URLDecode(null);
      
      // Assertion
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRequestTaking2Arguments() throws Throwable  {
      // Create a new Request object with a web URL and set it to be a GET request
      Request request = new Request("https://www.example.com", true);
      
      // Assert that the request is a web request
      assertTrue(request.isWebRequest());
      
      // Assert that the base URL of the request is "https://www.example.com"
      assertEquals("https://www.example.com", request.getBaseURL());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetParamTaking2ArgumentsWithEmptyStringAndEmptyString() throws Throwable  {
      // Given: A Request object with a parameter set to an empty string
      Request request = new Request();
      request.setParam("", "");
      
      // When: The Request object is cloned
      IRequest clone = request.clone();
      
      // Then: The clone should be a web request and the original request should not
      assertTrue(clone.isWebRequest());
      assertFalse(request.isWebRequest());
      
      // And: The base URL of the clone should be null
      assertEquals("null", clone.getBaseURL());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRequestTakingString0() throws Throwable  {
      // Create a new request with a query parameter
      Request request = new Request("?");
      
      // Assert that the base URL is an empty string
      assertEquals("", request.getBaseURL());
      
      // Assert that the request is a web request
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRequestTakingString1() throws Throwable  {
      // Create a request with an invalid URL
      Request request = new Request("file:/file:/file:/");
      
      // Check that the request is not a web request
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNull() throws Throwable  {
      // Given: A new request object is created
      Request request = new Request();
      
      // When: The request is parsed using the parse() method
      request.parse((String) null);
      
      // Then: The request should not be a web request
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetHashValueReturningRequestWhereIsWebRequestIsFalse() throws Throwable  {
      // rollbacked to evosuite
      Request request = new Request();
      request.setBaseURL("http://example.com");
      Request arg0 = new Request("http://example.com");
      assertTrue(arg0.equals((Object)request));
      
      request.setHashValue("org.apache.log4j.helpers.Loader");
      request.equals(arg0);
      assertTrue(arg0.isWebRequest());
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetHashValue() throws Throwable  {
      // No Comments were added
      Request arg0 = new Request("G1?^&");
      arg0.setHashValue("G1?^&");
      Request request = new Request("G1?^&");
      // Undeclared exception!
      try { 
        request.equals(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRequestTakingStringAndCallsEquals0() throws Throwable  {
      // Create two Request objects, arg0 and request, with different hash values.
      Request arg0 = new Request("LI|q1?H=7OM#");
      Request request = new Request("LI|q1?H=7OA#");
      
      // Check that the objects are not equal.
      assertFalse(request.equals(arg0));
      
      // Test the hash value of each object separately.
      // Note that assertEquals() is used to test whether two strings are equal.
      assertEquals("", request.getHashValue());
      assertEquals("LI|q1", request.getBaseURL());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParse() throws Throwable  {
      // No Comments were added
      Request request = new Request("LI|q1?H=7OA#");
      Request arg0 = new Request("LI|q1?H=7OA#");
      assertTrue(arg0.equals((Object)request));
      
      arg0.parse("LI|q1?H=7OA#");
      boolean equals = request.equals(arg0);
      assertFalse(arg0.equals((Object)request));
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRequestTakingStringAndCallsEquals1() throws Throwable  {
      // Arrange
      Request request = new Request("L?h|q?H=^OA#");
      Request arg0 = new Request("L?I|q?H=7OA#");
      
      // Act
      boolean equals = request.equals(arg0);
      
      // Assert
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRequestTakingStringAndEqualsAndEqualsReturningTrue() throws Throwable  {
      // No Comments were added
      Request arg0 = new Request("LI|q1?H=7OM#");
      boolean equals = arg0.equals(arg0);
      assertEquals("LI|q1", arg0.getBaseURL());
      assertTrue(arg0.isWebRequest());
      assertEquals("", arg0.getHashValue());
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetParamTaking2ArgumentsWithNull() throws Throwable  {
      // Create two Request objects with the same base URL and hash value
      Request arg0 = new Request("LI|q1?H=7OA#");
      arg0.setParam("file:/[^:!Sh%{x4[GBYu", (String) null);
      Request request = new Request("LI|q1?H=7OA#");
      
      // Check if the two objects are equal
      assertTrue(request.equals(arg0));
      
      // Check if the hash value is empty for both objects
      assertEquals("", request.getHashValue());
      
      // Check if the base URL of the two objects is the same
      assertEquals("LI|q1", request.getBaseURL());
      
      // Check if the two objects are not equal to each other
      assertFalse(arg0.equals((Object)request));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndCreatesRequestTakingStringAndCreatesRequestTakingNoArguments() throws Throwable  {
      // No Comments were added
      Request request = new Request();
      request.setBaseURL("https://www.example.com");
      Request arg0 = new Request("org.apache.log4j.helpers.Loader");
      boolean equals = request.equals(arg0);
      assertFalse(equals);
      assertFalse(request.isWebRequest());
      assertTrue(arg0.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEquals() throws Throwable  {
      // Arrange
      Request request = new Request();
      request.setBaseURL("&");
      Request arg0 = new Request();
      arg0.setBaseURL("$");
      
      // Act
      boolean equals = request.equals(arg0);
      
      // Assert
      assertFalse(equals);
      assertFalse(arg0.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsThrowsNullPointerException() throws Throwable  {
      // rollbacked to evosuite
      Request arg0 = new Request();
      // Undeclared exception!
      try { 
        arg0.equals(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRequestTakingNoArgumentsAndCallsEquals() throws Throwable  {
      // Given a Request object with no parameters
      Request request = new Request();
      
      // When the Request is compared to an empty string
      boolean equals = request.equals("");
      
      // Then the request should not be considered a web request
      assertFalse(request.isWebRequest());
      
      // And the result of the comparison should be false
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRequestTakingStringAndCallsToString() throws Throwable  {
      // Given: We have a Request object with a specific query parameter and its value
      Request request = new Request("?@b0+dJ&s.fk5W#|l~.");
      
      // When: The toString method is called on the Request object
      String string = request.toString();
      
      // Then: The resulting string should be a properly encoded URL with the query parameter and value
      assertEquals("?@b0+dJ=&s.fk5W=#|l~.", string);
      
      // And: The Request object should indicate that it is a web request
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetParamTakingRequestParamWithNull() throws Throwable  {
      // Given a Request object
      Request request = new Request("'aZ!voBzEAr<9Dx=qbd");
      
      // When we set a parameter on this Request object to null
      IRequest setParam = request.setParam((RequestParam) null);
      
      // Then we expect the resulting object to be a WebRequest
      assertTrue(setParam.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetParamTaking2Arguments() throws Throwable  {
      // Given a Request with a parameter "r`&<" set to "r`&<"
      Request request = new Request();
      request.setParam("r`&<", "r`&<");
      
      // When the removeParam method is called with the key "r`&<"
      IRequest removedParam = request.removeParam("r`&<");
      
      // Then the returned value should be a Request without the parameter "r`&<"
      assertFalse(removedParam.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveParam() throws Throwable  {
      // rollbacked to evosuite
      Request request = new Request();
      IRequest removeParam = request.removeParam("my_param");
      assertFalse(removeParam.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValueTaking1And1() throws Throwable  {
      // Given a Request object with a valid parameter
      Request request = new Request();
      RequestParam arg0 = new RequestParam("ks{");
      request.setParam(arg0);
      
      // When the getValue method is called with a valid parameter name
      int value = request.getValue("ks{", (-452));
      
      // Then the expected value should be returned and the web request flag should be false
      assertEquals((-452), value);
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValueTaking1And1ReturningPositive() throws Throwable  {
      // Given a Request object with parameters set
      Request request = new Request();
      request.setParam("param1", "value1");
      request.setParam("param2", "value2");
      
      // When the value of the parameter is retrieved using getValue() method
      int value = request.getValue("param1", 1083);
      
      // Then the value returned should be equal to 1083
      assertEquals(1083, value);
      
      // And the isWebRequest() method should return false
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValueTaking1And1ReturningZero() throws Throwable  {
      // Given
      Request request = new Request("", true);
      
      // When
      int value = request.getValue("", 0);
      
      // Then
      assertEquals(0, value);
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRequestTakingStringAndCallsGetValueTaking1And1() throws Throwable  {
      // No Comments were added
      Request request = new Request("LI|q1?H=7OA#");
      int value = request.getValue("LIF;<Gp\"W G", (-1079924597));
      assertEquals("", request.getHashValue());
      assertEquals((-1079924597), value);
      assertTrue(request.isWebRequest());
      assertEquals("LI|q1", request.getBaseURL());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddParam() throws Throwable  {
      // Given a Request object with one parameter "K"
      Request request = new Request("K");
      
      // When the parameter is added to the request with key "K" and value "K"
      request.addParam("K", "K");
      
      // Then the value of the parameter for key "K" should be "K"
      String value = request.getValue("K", "K");
      assertEquals("K", value);
      
      // And the request is a web request
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRequestTakingStringAndCallsGetValueTaking2Strings() throws Throwable  {
      // No Comments were added
      Request request = new Request("LI|q1?H=%X7OA#");
      String value = request.getValue("LI|q1?H=%X7OA#", "LI|q1?H=%X7OA#");
      assertTrue(request.isWebRequest());
      assertEquals("LI|q1?H=%X7OA#", value);
      assertEquals("LI|q1", request.getBaseURL());
      assertEquals("", request.getHashValue());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValueTaking2StringsReturningNull() throws Throwable  {
      // Arrange
      Request request = new Request("=", true);
      
      // Act
      String value = request.getValue("=", (String) null);
      
      // Assert
      assertTrue(request.isWebRequest());
      assertNull(value);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValueTaking2Strings() throws Throwable  {
      // Given a Request object with a parameter named "file:/^NM2]"
      Request request = new Request();
      RequestParam arg0 = new RequestParam("file:/^NM2]");
      request.setParam(arg0);
      
      // When the value of the parameter is retrieved with the given name and key
      String value = request.getValue("file:/^NM2]", "file:/^NM2]");
      
      // Then the method should return the correct value for the parameter
      assertEquals("file:/^NM2]", value);
      
      // And the method should not consider the request as a web request
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetParamTakingStringReturningNull() throws Throwable  {
      // Given: a Request object with no parameters
      Request request = new Request();
      
      // When: we call getParam with a null parameter
      Object result = request.getParam(null);
      
      // Then: the method should return null
      assertNull(result);
      
      // And: the isWebRequest method should return false
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCleanEmptyParamsReturningIRequestWhereIsWebRequestIsFalse() throws Throwable  {
      // Given a Request with an empty param
      Request request = new Request();
      request.addParam("", (String) null);
      
      // When the cleanEmptyParams method is called on the request
      IRequest cleanEmptyParams = request.cleanEmptyParams();
      
      // Then the resulting IRequest should not be a WebRequest
      assertFalse(cleanEmptyParams.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCleanEmptyParams() throws Throwable  {
      // No Comments were added
      Request request = new Request("?<I-*\"|d(>$6%er/z");
      request.parse("?<I-*\"|d(>$6%er/z");
      IRequest cleanEmptyParams = request.cleanEmptyParams();
      assertEquals("", cleanEmptyParams.getBaseURL());
      assertTrue(cleanEmptyParams.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetParamTakingRequestParamReturningIRequestWhereIsWebRequestIsTrue() throws Throwable  {
      // Given a Request object with a base URL and a hash value
      Request request = new Request("LI|q1?H=%X7OA#");
      
      // When the cleanEmptyParams method is called on the Request object
      IRequest cleanEmptyParams = request.cleanEmptyParams();
      
      // Then the base URL, hash value and other parameters are removed from the Request object
      assertTrue(cleanEmptyParams.isWebRequest());
      assertEquals("LI|q1", cleanEmptyParams.getBaseURL());
      assertEquals("", cleanEmptyParams.getHashValue());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsWebRequestReturningTrue() throws Throwable  {
      // Given a request with a web URL and a flag indicating it is a web request
      Request request = new Request("http://www.example.com", true);
      
      // When the method is called to check if it is a web request
      boolean webRequest = request.isWebRequest();
      
      // Then the result should be true, as the flag is set to true
      assertTrue(webRequest);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToBaseURLReturningIRequestWhereIsWebRequestIsTrue() throws Throwable  {
      // Given a request with a URL that is not in a standard format
      Request request = new Request("'aZ!voBzEAr<9Dx=qbd");
      
      // When the toBaseURL method is called on the request
      IRequest baseURL = request.toBaseURL();
      
      // Then the resulting URL should be in a standard format
      assertTrue(baseURL.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningTrue() throws Throwable  {
      // Given a Request object with a base URL of "http://example.com"
      Request request = new Request();
      request.setBaseURL("http://example.com");
      
      // When the equals method is called on the same instance with itself
      boolean equals = request.equals(request);
      
      // Then the result should be true, as the object is equal to itself
      assertTrue(equals);
      
      // And the isWebRequest method should return false, as this is not a web request
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testClone() throws Throwable  {
      // Given a Request object and its clone
      Request request = new Request();
      IRequest arg0 = request.clone();
      
      // When we compare the original object to its clone
      boolean equals = request.equals(arg0);
      
      // Then we expect that the two objects are not equal, as they have different values
      assertFalse(request.isWebRequest());
      assertTrue(arg0.isWebRequest());
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashCode() throws Throwable  {
      // No Comments were added
      Request request = new Request();
      request.hashCode();
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValueTaking2StringsReturningEmptyString() throws Throwable  {
      // Given a Request object with the value set to true
      Request request = new Request(true);
      
      // When we call getValue("", "") on the Request object
      request.getValue("", "");
      
      // Then isWebRequest should return false
      assertFalse(request.isWebRequest());
  }
}
