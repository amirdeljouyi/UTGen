/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 21 06:05:47 GMT 2024
 */

package net.sourceforge.ext4j.taglib.bo;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import javax.servlet.http.HttpServletRequest;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import net.sourceforge.ext4j.taglib.bo.Request;
import net.sourceforge.ext4j.taglib.bo.RequestParam;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Request_Original_ESTest extends Request_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToStringReturningEmptyString() throws Throwable  {
      Request request = new Request(true);
      request.setBaseURL("");
      String string = request.toString();
      assertEquals("", string);
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToBaseURLReturningIRequestWhereIsWebRequestIsFalse() throws Throwable  {
      Request request = new Request();
      IRequest baseURL = request.toBaseURL();
      assertFalse(baseURL.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsWebRequestReturningFalse() throws Throwable  {
      Request request = new Request();
      boolean webRequest = request.isWebRequest();
      assertFalse(webRequest);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValueTaking2StringsReturningEmptyString() throws Throwable  {
      Request request = new Request(true);
      request.getValue("", "");
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetQueryStringReturningEmptyString() throws Throwable  {
      Request request = new Request();
      request.getQueryString();
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetParamTakingStringReturningRequestParamWhereGetTotalValuesIsZero() throws Throwable  {
      Request request = new Request("=", true);
      RequestParam arg0 = new RequestParam("=");
      request.setParam(arg0);
      RequestParam param = request.getParam("=");
      assertNotNull(param);
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetParamTakingString() throws Throwable  {
      Request request = new Request((String) null);
      request.addParam("H5Tir,O;B_/_URUY", "");
      RequestParam param = request.getParam("H5Tir,O;B_/_URUY");
      assertNotNull(param);
      assertFalse(request.isWebRequest());
      assertEquals("H5Tir,O;B_/_URUY", param.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetHashValueReturningEmptyString() throws Throwable  {
      Request request = new Request("=", true);
      Request setHashValue = request.setHashValue("");
      setHashValue.getHashValue();
      assertTrue(setHashValue.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBaseURLReturningNull() throws Throwable  {
      Request request = new Request();
      request.getBaseURL();
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBaseURLReturningEmptyString() throws Throwable  {
      Request request = new Request();
      request.setBaseURL("");
      request.getBaseURL();
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testURLEncodeReturningNull() throws Throwable  {
      Request request = new Request();
      request.URLEncode((String) null);
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testURLEncodeReturningNonEmptyString() throws Throwable  {
      Request request = new Request();
      String URLEncode = request.URLEncode("#M_10x&AY|");
      assertEquals("%23M_10x%26AY|", URLEncode);
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testURLEncodeReturningEmptyString() throws Throwable  {
      Request request = new Request("", true);
      String URLEncode = request.URLEncode("");
      assertTrue(request.isWebRequest());
      assertEquals("", URLEncode);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testURLDecodeReturningNonEmptyString() throws Throwable  {
      Request request = new Request();
      String URLDecode = request.URLDecode(";\"gk%3NCVI]Ej?pj");
      assertEquals(";\"gk%3NCVI]Ej?pj", URLDecode);
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testURLDecodeReturningEmptyString() throws Throwable  {
      Request request = new Request("f");
      String URLDecode = request.URLDecode("");
      assertEquals("", URLDecode);
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRequestTakingNoArgumentsAndCallsToString() throws Throwable  {
      Request request = new Request();
      String string = request.toString();
      assertEquals("null", string);
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetQueryStringReturningNonEmptyString() throws Throwable  {
      Request request = new Request((String) null);
      request.addParam("H5Tir,O;B_/_URUY", "");
      request.addParam("", (String) null);
      String queryString = request.getQueryString();
      assertEquals("?H5Tir,O;B_/_URUY=&=null", queryString);
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetParamTaking2ArgumentsReturningIRequestWhereIsWebRequestIsTrue() throws Throwable  {
      Request request = new Request("L?s~Bq1?H=O#");
      request.setParam("L?s~Bq1?H=O#", "L?s~Bq1?H=O#");
      IRequest addParam = request.addParam("L?s~Bq1?H=O#", "e-");
      assertEquals("", addParam.getHashValue());
      assertEquals("L", addParam.getBaseURL());
      assertTrue(addParam.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetParamTaking2ArgumentsReturningNull() throws Throwable  {
      Request request = new Request("e;n", true);
      request.setParam("4<O;(CEf\"ehy?[q,)", "4<O;(CEf\"ehy?[q,)");
      RequestParam param = request.getParam("net.sourceforge.ext4j.taglib.bo.CurrentURLBO$RootRequest", true);
      assertNull(param);
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetParams() throws Throwable  {
      Request request = new Request("'B5~$H\":", true);
      request.getParams();
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRequestTakingHttpServletRequest() throws Throwable  {
      Request request = new Request((HttpServletRequest) null);
      RequestParam arg0 = new RequestParam("M4ZTGJ");
      request.setParam(arg0);
      request.getParam("M4ZTGJ", false);
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBaseURLReturningNonEmptyString() throws Throwable  {
      Request request = new Request("'B5~$H\":", true);
      request.getBaseURL();
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetHashValueReturningNull() throws Throwable  {
      Request request = new Request("=", true);
      request.getHashValue();
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testURLDecodeReturningNull() throws Throwable  {
      Request request = new Request();
      request.URLDecode((String) null);
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRequestTaking2ArgumentsAndCreatesRequestTaking2Arguments0() throws Throwable  {
      Request request = new Request("a?:CAg>J%WKW^g~(~", true);
      assertTrue(request.isWebRequest());
      assertEquals("a", request.getBaseURL());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetParamTaking2ArgumentsWithEmptyStringAndEmptyString() throws Throwable  {
      Request request = new Request();
      request.setParam("", "");
      IRequest clone = request.clone();
      assertTrue(clone.isWebRequest());
      assertFalse(request.isWebRequest());
      assertEquals("null", clone.getBaseURL());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRequestTakingString0() throws Throwable  {
      Request request = new Request("file:/file:/file:/");
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNull() throws Throwable  {
      Request request = new Request();
      request.parse((String) null);
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetHashValueReturningRequestWhereIsWebRequestIsFalse() throws Throwable  {
      Request request = new Request();
      request.setBaseURL("W>.");
      request.setHashValue("org.apache.log4j.helpers.Loader");
      IRequest arg0 = request.clone();
      request.equals(arg0);
      assertTrue(arg0.isWebRequest());
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetHashValue() throws Throwable  {
      Request arg0 = new Request("G1?^&");
      arg0.setHashValue("G1?^&");
      Request request = new Request("G1?^&");
      // Undeclared exception!
      try { 
        request.equals(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRequestTakingStringAndEqualsAndEqualsReturningFalse0() throws Throwable  {
      Request arg0 = new Request("LI|q1?H=7OM#");
      Request request = new Request("LI|q1?H=7OA#");
      boolean equals = request.equals(arg0);
      assertFalse(equals);
      assertEquals("", request.getHashValue());
      assertEquals("LI|q1", request.getBaseURL());
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParse() throws Throwable  {
      Request request = new Request("LI|q1?H=7OA#");
      Request arg0 = new Request("LI|q1?H=7OA#");
      assertTrue(arg0.equals((Object)request));
      
      arg0.parse("LI|q1?H=7OA#");
      boolean equals = request.equals(arg0);
      assertFalse(arg0.equals((Object)request));
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRequestTakingStringAndEqualsAndEqualsReturningFalse1() throws Throwable  {
      Request request = new Request("L?h|q?H=^OA#");
      Request arg0 = new Request("L?I|q?H=7OA#");
      boolean equals = request.equals(arg0);
      assertTrue(arg0.isWebRequest());
      assertEquals("L", arg0.getBaseURL());
      assertEquals("", arg0.getHashValue());
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRequestTakingStringAndEqualsAndEqualsReturningTrue0() throws Throwable  {
      Request arg0 = new Request("LI|q1?H=7OM#");
      boolean equals = arg0.equals(arg0);
      assertEquals("", arg0.getHashValue());
      assertTrue(arg0.isWebRequest());
      assertTrue(equals);
      assertEquals("LI|q1", arg0.getBaseURL());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetParamTaking2ArgumentsWithNull() throws Throwable  {
      Request arg0 = new Request("LI|q1?H=7OA#");
      arg0.setParam("file:/[^:!Sh%{x4[GBYu", (String) null);
      Request request = new Request("LI|q1?H=7OA#");
      boolean equals = request.equals(arg0);
      assertEquals("", request.getHashValue());
      assertFalse(arg0.equals((Object)request));
      assertTrue(request.isWebRequest());
      assertEquals("LI|q1", request.getBaseURL());
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRequestTakingStringAndCallsEquals() throws Throwable  {
      Request request = new Request();
      request.setBaseURL("W>.");
      Request arg0 = new Request("org.apache.log4j.helpers.Loader");
      boolean equals = request.equals(arg0);
      assertFalse(equals);
      assertTrue(arg0.isWebRequest());
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testClone() throws Throwable  {
      Request request = new Request();
      IRequest arg0 = request.clone();
      boolean equals = request.equals(arg0);
      assertFalse(equals);
      assertTrue(arg0.isWebRequest());
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEquals() throws Throwable  {
      Request request = new Request();
      request.setBaseURL("&");
      Request arg0 = new Request();
      boolean equals = request.equals(arg0);
      assertFalse(arg0.isWebRequest());
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsThrowsNullPointerException() throws Throwable  {
      Request arg0 = new Request();
      // Undeclared exception!
      try { 
        arg0.equals(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRequestTakingNoArgumentsAndCallsEquals() throws Throwable  {
      Request request = new Request();
      boolean equals = request.equals("");
      assertFalse(request.isWebRequest());
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetParamTakingRequestParamWithNull() throws Throwable  {
      Request request = new Request("'aZ!voBzEAr<9Dx=qbd");
      IRequest setParam = request.setParam((RequestParam) null);
      assertTrue(setParam.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetParamTaking2Arguments() throws Throwable  {
      Request request = new Request();
      request.setParam("r`&<", "r`&<");
      IRequest removeParam = request.removeParam("r`&<");
      assertFalse(removeParam.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveParamReturningIRequestWhereIsWebRequestIsTrue() throws Throwable  {
      Request request = new Request("LI|q1?H=7OA#");
      IRequest removeParam = request.removeParam("LI|q1?H=7OA#");
      assertEquals("", removeParam.getHashValue());
      assertEquals("LI|q1", removeParam.getBaseURL());
      assertTrue(removeParam.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveParam() throws Throwable  {
      Request request = new Request();
      IRequest removeParam = request.removeParam("w^TxyD1");
      assertFalse(removeParam.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValueTaking1And1() throws Throwable  {
      Request request = new Request();
      RequestParam arg0 = new RequestParam("ks{");
      request.setParam(arg0);
      int value = request.getValue("ks{", (-452));
      assertFalse(request.isWebRequest());
      assertEquals((-452), value);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValueTaking1And1ReturningPositive() throws Throwable  {
      Request request = new Request();
      request.setParam("", "");
      int value = request.getValue("", 1083);
      assertFalse(request.isWebRequest());
      assertEquals(1083, value);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValueTaking1And1ReturningZero() throws Throwable  {
      Request request = new Request("", true);
      int value = request.getValue("", 0);
      assertEquals(0, value);
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRequestTakingStringAndCallsGetValueTaking1And1() throws Throwable  {
      Request request = new Request("LI|q1?H=7OA#");
      int value = request.getValue("LIF;<Gp\"W G", (-1079924597));
      assertEquals("LI|q1", request.getBaseURL());
      assertTrue(request.isWebRequest());
      assertEquals("", request.getHashValue());
      assertEquals((-1079924597), value);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValueTaking2Strings() throws Throwable  {
      Request request = new Request();
      RequestParam arg0 = new RequestParam("file:/^NM2]");
      request.setParam(arg0);
      String value = request.getValue("file:/^NM2]", "file:/^NM2]");
      assertEquals("file:/^NM2]", value);
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddParam() throws Throwable  {
      Request request = new Request("K");
      request.addParam("K", "K");
      String value = request.getValue("K", "K");
      assertTrue(request.isWebRequest());
      assertEquals("K", value);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValueTaking2StringsReturningNull() throws Throwable  {
      Request request = new Request("=", true);
      String value = request.getValue("=", (String) null);
      assertTrue(request.isWebRequest());
      assertNull(value);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRequestTakingStringAndCallsGetValueTaking2Strings() throws Throwable  {
      Request request = new Request("LI|q1?H=%X7OA#");
      String value = request.getValue("LI|q1?H=%X7OA#", "LI|q1?H=%X7OA#");
      assertEquals("LI|q1", request.getBaseURL());
      assertTrue(request.isWebRequest());
      assertEquals("LI|q1?H=%X7OA#", value);
      assertEquals("", request.getHashValue());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRequestTakingStringAndCallsToString() throws Throwable  {
      Request request = new Request("?@b0+dJ&s.fk5W#|l~.");
      String string = request.toString();
      assertTrue(request.isWebRequest());
      assertEquals("?@b0+dJ=&s.fk5W=#|l~.", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCleanEmptyParamsReturningIRequestWhereIsWebRequestIsFalse() throws Throwable  {
      Request request = new Request();
      request.addParam("", (String) null);
      IRequest cleanEmptyParams = request.cleanEmptyParams();
      assertFalse(cleanEmptyParams.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCleanEmptyParams() throws Throwable  {
      Request request = new Request("?<I-*\"|d(>$6%er/z");
      request.parse("?<I-*\"|d(>$6%er/z");
      IRequest cleanEmptyParams = request.cleanEmptyParams();
      assertTrue(cleanEmptyParams.isWebRequest());
      assertEquals("", cleanEmptyParams.getBaseURL());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetParamTakingRequestParamReturningIRequestWhereIsWebRequestIsTrue() throws Throwable  {
      Request request = new Request("LI|q1?H=%X7OA#");
      RequestParam arg0 = new RequestParam("LI|q1?H=%X7OA#");
      request.setParam(arg0);
      IRequest cleanEmptyParams = request.cleanEmptyParams();
      assertEquals("", cleanEmptyParams.getHashValue());
      assertEquals("LI|q1", cleanEmptyParams.getBaseURL());
      assertTrue(cleanEmptyParams.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRequestTaking2ArgumentsAndCreatesRequestTaking2Arguments1() throws Throwable  {
      Request request = new Request((HttpServletRequest) null, false);
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsWebRequestReturningTrue() throws Throwable  {
      Request request = new Request(".,(L<azSy:<gq ", false);
      boolean webRequest = request.isWebRequest();
      assertTrue(webRequest);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCloneReturningIRequestWhereIsWebRequestIsFalse() throws Throwable  {
      Request request = new Request("=", true);
      request.setBaseURL("file:/z+{No");
      IRequest clone = request.clone();
      assertFalse(clone.isWebRequest());
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToBaseURLReturningIRequestWhereIsWebRequestIsTrue() throws Throwable  {
      Request request = new Request("'aZ!voBzEAr<9Dx=qbd");
      IRequest baseURL = request.toBaseURL();
      assertTrue(baseURL.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetParamTaking2ArgumentsReturningRequestParamWhereGetTotalValuesIsPositive() throws Throwable  {
      Request request = new Request("", true);
      IRequest setParam = request.setParam("", "");
      RequestParam param = setParam.getParam("", true);
      assertTrue(setParam.isWebRequest());
      assertNotNull(param);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRequestTakingStringAndEqualsAndEqualsReturningTrue1() throws Throwable  {
      Request arg0 = new Request("3");
      boolean equals = arg0.equals(arg0);
      assertTrue(equals);
      assertTrue(arg0.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetHashValueReturningNonEmptyString() throws Throwable  {
      Request request = new Request("", false);
      Request setHashValue = request.setHashValue("Could not parse value \"");
      setHashValue.getHashValue();
      assertTrue(setHashValue.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetParamTakingStringReturningNull() throws Throwable  {
      Request request = new Request();
      request.getParam((String) null);
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashCode() throws Throwable  {
      Request request = new Request();
      request.hashCode();
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRequestTakingString1() throws Throwable  {
      Request request = new Request("?");
      assertTrue(request.isWebRequest());
      assertEquals("", request.getBaseURL());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetParamTaking2ArgumentsWithNull() throws Throwable  {
      Request request = new Request(false);
      request.getParam((String) null, false);
      assertFalse(request.isWebRequest());
  }
}
