/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 20 19:58:48 GMT 2024
 */


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class jgaapGUI_ESTest extends jgaapGUI_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testActionPerformedWithActionEventWhereGetWhenIsNegative() throws Throwable  {
      ActionEvent arg0 = new ActionEvent("Analyze", (-1623507042), "Analyze", (-1623507042), (-1623507042));
      jgaapGUI _jgaapGUI = new jgaapGUI();
      
      // Given: A new instance of the jgaapGUI class and an ActionEvent with a null argument
      
      try {
      // When: The actionPerformed method is called with the null argument
      _jgaapGUI.actionPerformed(arg0);
      
      // Then: A NullPointerException should be thrown
      fail("Expecting exception: NullPointerException");
      } catch (NullPointerException e) {
      // Verify that the correct exception is being thrown
      verifyException("jgaapGUI", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testActionPerformedThrowsNullPointerException() throws Throwable  {
      // Given a jgaapGUI object and an ActionEvent with a valid name and value
      ActionEvent arg0 = new ActionEvent("CreateEventSet", 20, "CreateEventSet", 20);
      jgaapGUI _jgaapGUI = new jgaapGUI();
      
      // When the actionPerformed method is called on the object with the event as an argument
      try {
      _jgaapGUI.actionPerformed(arg0);
      } catch (NullPointerException e) {
      // Then an exception is thrown due to a null pointer reference in the method implementation
      verifyException("jgaapGUI", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testActionPerformed() throws Throwable  {
      // Given: a new ActionEvent with the action command "Canonicize"
      ActionEvent arg0 = new ActionEvent("Canonicize", (-1847340047), "Canonicize", (-1847340047));
      
      // When: the actionPerformed method is called on a jgaapGUI object with this event as an argument
      jgaapGUI _jgaapGUI = new jgaapGUI();
      _jgaapGUI.actionPerformed(arg0);
      
      // Then: the action command of the event should be "Canonicize"
      assertEquals("Canonicize", arg0.getActionCommand());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testActionPerformedThrowsHeadlessException() throws Throwable  {
      ActionEvent arg0 = new ActionEvent("Import", 20, "Import", 20, 20);
      jgaapGUI jgaapGUI = new jgaapGUI();
      
      // Test that the method throws a HeadlessException when run in headless mode
      try {
      jgaapGUI.actionPerformed(arg0);
      fail("Expecting exception: HeadlessException");
      } catch (HeadlessException e) {
      verifyException("java.awt.GraphicsEnvironment", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLoadDemo() throws Throwable  {
      // Given a JGAAP GUI instance with demo data loaded
      jgaapGUI _jgaapGUI = new jgaapGUI();
      _jgaapGUI.loadDemo();
      
      // When the focus traversal policy provider is requested
      boolean actualResult = _jgaapGUI.isFocusTraversalPolicyProvider();
      
      // Then the result should be false, as the demo data does not have a focus traversal policy set
      assertFalse(actualResult);
  }
}
