/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 20 22:41:12 GMT 2024
 */

package net.kencochrane.a4j.file;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import java.io.File;
import java.io.FileInputStream;
import java.util.ArrayList;
import net.kencochrane.a4j.file.FileUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FileUtil_Original_ESTest extends FileUtil_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRenameFile0() throws Throwable  {
      FileUtil fileUtil = new FileUtil();
      fileUtil.renameFile("/", "/");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFetchSimilarItems() throws Throwable  {
      EvoSuiteFile arg0 = new EvoSuiteFile("/S_J2D/>2?*T.XML");
      FileSystemHandling.createFolder(arg0);
      FileUtil fileUtil = new FileUtil();
      FileInputStream fetchSimilarItems = fileUtil.fetchSimilarItems("j2D/>2?*T", "j2D/>2?*T");
      assertNull(fetchSimilarItems);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFetchASINFile0() throws Throwable  {
      FileUtil fileUtil = new FileUtil();
      EvoSuiteFile arg0 = new EvoSuiteFile("/.XML_.XML_.XML_.XML.XML");
      FileSystemHandling.createFolder(arg0);
      FileInputStream fetchASINFile = fileUtil.fetchASINFile(".xml", ".xml", ".xml", ".xml");
      assertNull(fetchASINFile);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSimilarItemsReturningFileWhereCanExecuteIsFalse() throws Throwable  {
      EvoSuiteFile arg0 = new EvoSuiteFile("/S_J2D/>2?*T.XML");
      FileSystemHandling.createFolder(arg0);
      FileUtil fileUtil = new FileUtil();
      FileSystemHandling.setPermissions(arg0, false, false, false);
      File similarItems = fileUtil.getSimilarItems("j2D/>2?*T", "KeywordSear^Pch=");
      assertNotNull(similarItems);
      assertEquals(">2?*T.XML", similarItems.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBrowseNodeFileReturningFileWhereLengthIsPositive() throws Throwable  {
      FileUtil fileUtil = new FileUtil();
      EvoSuiteFile arg0 = new EvoSuiteFile("/PBUS#KS@O?FNYLZ_POPCORNMONSTE2-20_86400000.XML");
      byte[] arg1 = new byte[2];
      FileSystemHandling.appendDataToFile(arg0, arg1);
      File browseNodeFile = fileUtil.getBrowseNodeFile("PbUS#ks@O?Fnylz", "popcornmonste2-20", "86400000");
      assertEquals(2L, browseNodeFile.length());
      assertNotNull(browseNodeFile);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAccessoriesReturningFileWhereLengthIsZero() throws Throwable  {
      FileUtil fileUtil = new FileUtil();
      ArrayList<Object> arg1 = new ArrayList<Object>();
      EvoSuiteFile arg0 = new EvoSuiteFile("/A_.XML.XML");
      FileSystemHandling.createFolder(arg0);
      File accessories = fileUtil.getAccessories(".xml", arg1);
      assertNotNull(accessories);
      assertEquals("A_.XML.XML", accessories.getName());
      assertFalse(accessories.isFile());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetASINFileReturningFileWhereLengthIsZero() throws Throwable  {
      FileUtil fileUtil = new FileUtil();
      EvoSuiteFile arg0 = new EvoSuiteFile("/J2L/>2?9T_J2L/>2?9T_J2L/>2?9T_J2L/>2?9T.XML");
      FileSystemHandling.createFolder(arg0);
      File aSINFile = fileUtil.getASINFile("j2L/>2?9T", "j2L/>2?9T", "j2L/>2?9T", "j2L/>2?9T");
      assertNotNull(aSINFile);
      assertEquals(">2?9T.XML", aSINFile.getName());
      assertTrue(aSINFile.canExecute());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFetchSimilarItemsReturningFileInputStreamWhereAvailableIsZero() throws Throwable  {
      EvoSuiteFile arg0 = new EvoSuiteFile("/S_SHOPPIN*CART=REMOVE&F=XML&DEV-T=.XML");
      FileSystemHandling.appendStringToFile(arg0, "");
      FileUtil fileUtil = new FileUtil();
      FileInputStream fetchSimilarItems = fileUtil.fetchSimilarItems("Shoppin*Cart=remove&f=xml&dev-t=", "Shoppin*Cart=remove&f=xml&dev-t=");
      assertEquals(0, fetchSimilarItems.available());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFetchBNFileReturningFileInputStreamWhereAvailableIsPositive() throws Throwable  {
      FileUtil fileUtil = new FileUtil();
      EvoSuiteFile arg0 = new EvoSuiteFile("/NULL__NULL.XML");
      byte[] arg1 = new byte[5];
      FileSystemHandling.appendDataToFile(arg0, arg1);
      FileInputStream fetchBNFile = fileUtil.fetchBNFile((String) null, "", (String) null);
      assertEquals(5, fetchBNFile.available());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFetchASINFileReturningFileInputStreamWhereAvailableIsPositive() throws Throwable  {
      FileUtil fileUtil = new FileUtil();
      EvoSuiteFile arg0 = new EvoSuiteFile("/.XML_.XML_.XML_.XML.XML");
      byte[] arg1 = new byte[5];
      FileSystemHandling.appendDataToFile(arg0, arg1);
      FileInputStream fetchASINFile = fileUtil.fetchASINFile(".xml", ".xml", ".xml", ".xml");
      assertEquals(5, fetchASINFile.available());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSimilarItems() throws Throwable  {
      EvoSuiteFile arg0 = new EvoSuiteFile("/S_J2D/>2?*T.XML");
      FileSystemHandling.createFolder(arg0);
      FileUtil fileUtil = new FileUtil();
      File similarItems = fileUtil.getSimilarItems("j2D/>2?*T", "KeywordSear^Pch=");
      assertNotNull(similarItems);
      assertEquals("/S_J2D/>2?*T.XML", similarItems.toString());
      assertFalse(similarItems.isFile());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSimilarItemsReturningNull() throws Throwable  {
      FileUtil fileUtil = new FileUtil();
      File similarItems = fileUtil.getSimilarItems("Shoppin*Cart=remove&f=xml&dev-t=", "Shoppin*Cart=remove&f=xml&dev-t=");
      assertNull(similarItems);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDownloadThirdPartySearchFile() throws Throwable  {
      FileUtil fileUtil = new FileUtil();
      File downloadThirdPartySearchFile = fileUtil.downloadThirdPartySearchFile((String) null, "b_", (String) null, (String) null);
      assertNull(downloadThirdPartySearchFile);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDownloadGenericSearchFile() throws Throwable  {
      FileUtil fileUtil = new FileUtil();
      File downloadGenericSearchFile = fileUtil.downloadGenericSearchFile("P\"<it28H_9Q){y", "P\"<it28H_9Q){y", ".xml", "", "P\"<it28H_9Q){y", "ts_");
      assertNull(downloadGenericSearchFile);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBrowseNodeFileReturningFileWhereLengthIsZero() throws Throwable  {
      FileUtil fileUtil = new FileUtil();
      EvoSuiteFile arg0 = new EvoSuiteFile("/PBUS#KS@O?FNYLZ_POPCORNMONSTE2-20_86400000.XML");
      FileSystemHandling.createFolder(arg0);
      File browseNodeFile = fileUtil.getBrowseNodeFile("PbUS#ks@O?Fnylz", "popcornmonste2-20", "86400000");
      assertEquals("PBUS#KS@O?FNYLZ_POPCORNMONSTE2-20_86400000.XML", browseNodeFile.getName());
      assertNotNull(browseNodeFile);
      assertTrue(browseNodeFile.canWrite());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetASINFileReturningFileWhereLengthIsPositive() throws Throwable  {
      FileUtil fileUtil = new FileUtil();
      EvoSuiteFile arg0 = new EvoSuiteFile("/J2L/>2?9T_J2L/>2?9T_J2L/>2?9T_J2L/>2?9T.XML");
      FileSystemHandling.appendStringToFile(arg0, "C09hYItX{sAL^");
      File aSINFile = fileUtil.getASINFile("j2L/>2?9T", "j2L/>2?9T", "j2L/>2?9T", "j2L/>2?9T");
      assertEquals(13L, aSINFile.length());
      assertNotNull(aSINFile);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetASINFileReturningNull() throws Throwable  {
      FileUtil fileUtil = new FileUtil();
      File aSINFile = fileUtil.getASINFile("j2L/>2?9T", "j2L/>2?9T", "j2L/>2?9T", "j2L/>2?9T");
      assertNull(aSINFile);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDownloadOneASINFile() throws Throwable  {
      FileUtil fileUtil = new FileUtil();
      EvoSuiteURL arg0 = new EvoSuiteURL("http://xml.amazon.net/onca/xml3?t=popcornmonste2-20&dev-t=DSB0XDDW1GQ3S&AsinSearch=~Q0bLw?YA^L^swiVW&type=~Q0bLw?YA^L^swiVW&offerpage=d,qu #%P&offer=new&f=xml");
      NetworkHandling.createRemoteTextFile(arg0, "new");
      boolean downloadOneASINFile = fileUtil.downloadOneASINFile("~Q0bLw?YA^L^swiVW", "~Q0bLw?YA^L^swiVW", "new", "d,qu #%P", ":_");
      assertFalse(downloadOneASINFile);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDownloadCart() throws Throwable  {
      FileUtil fileUtil = new FileUtil();
      File downloadCart = fileUtil.downloadCart("");
      assertNull(downloadCart);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDownloadSimilaritesFile() throws Throwable  {
      FileUtil fileUtil = new FileUtil();
      EvoSuiteURL arg0 = new EvoSuiteURL("http://xml.amazon.net/onca/xml3?t=popcornmonste2-20&dev-t=DSB0XDDW1GQ3S&SimilaritySearch=Shoppin*Cart=remove&f=xml&dev-t=&type=lite&offerpage=Shoppin*Cart=remove&f=xml&dev-t=&offer=all&f=xml");
      NetworkHandling.createRemoteTextFile(arg0, "Shoppin*Cart=remove&f=xml&dev-t=");
      boolean downloadSimilaritesFile = fileUtil.downloadSimilaritesFile("Shoppin*Cart=remove&f=xml&dev-t=", "Shoppin*Cart=remove&f=xml&dev-t=", "Shoppin*Cart=remove&f=xml&dev-t=");
      assertFalse(downloadSimilaritesFile);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFetchSimilarItemsReturningFileInputStreamWhereAvailableIsPositive() throws Throwable  {
      EvoSuiteFile arg0 = new EvoSuiteFile("/S_J2D/>2?*T.XML");
      FileSystemHandling.appendLineToFile(arg0, "WKLyOWMnvi");
      FileUtil fileUtil = new FileUtil();
      FileInputStream fetchSimilarItems = fileUtil.fetchSimilarItems("j2D/>2?*T", "j2D/>2?*T");
      assertEquals(11, fetchSimilarItems.available());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFetchSimilarItemsWithEmptyStringAndEmptyString() throws Throwable  {
      FileUtil fileUtil = new FileUtil();
      FileInputStream fetchSimilarItems = fileUtil.fetchSimilarItems("", "");
      assertNull(fetchSimilarItems);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFetchAccessories() throws Throwable  {
      FileUtil fileUtil = new FileUtil();
      ArrayList<Object> arg1 = new ArrayList<Object>();
      EvoSuiteFile arg0 = new EvoSuiteFile("/A_.XML.XML");
      FileSystemHandling.createFolder(arg0);
      FileInputStream fetchAccessories = fileUtil.fetchAccessories(".xml", arg1);
      assertNull(fetchAccessories);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAccessoriesReturningNull() throws Throwable  {
      FileUtil fileUtil = new FileUtil();
      File accessories = fileUtil.getAccessories("?[)&kq", (ArrayList) null);
      assertNull(accessories);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFetchThirdPartySearchFile() throws Throwable  {
      FileUtil fileUtil = new FileUtil();
      EvoSuiteURL arg0 = new EvoSuiteURL("http://xml.amazon.net/onca/xml3?t=popcornmonste2-20&dev-t=DSB0XDDW1GQ3S&SellerSearch=Shop%ingCart=moRify&f=xml&de|-t=&type=j2D/>2?*T&page=Shop%ingCart=moRify&f=xml&de|-t=&offerstatus=Shop%ingCart=moRify&f=xml&de|-t=&f=xml");
      NetworkHandling.createRemoteTextFile(arg0, "Shop%ingCart=moRify&f=xml&de|-t=");
      FileInputStream fetchThirdPartySearchFile = fileUtil.fetchThirdPartySearchFile("Shop%ingCart=moRify&f=xml&de|-t=", "j2D/>2?*T", "Shop%ingCart=moRify&f=xml&de|-t=", "Shop%ingCart=moRify&f=xml&de|-t=");
      assertNull(fetchThirdPartySearchFile);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFetchGenericSearchFile() throws Throwable  {
      FileUtil fileUtil = new FileUtil();
      EvoSuiteURL arg0 = new EvoSuiteURL("http://xml.amazon.net/onca/xml3?t=popcornmonste2-20&dev-t=DSB0XDDW1GQ3S&sw6qrw\"-b=sw6qrw%22-b&mode=sw6qrw\"-b&type=sw6qrw\"-b&page=sw6qrw\"-b&offer=sw6qrw\"-b&f=xml");
      NetworkHandling.createRemoteTextFile(arg0, "amazonServerURL");
      FileInputStream fetchGenericSearchFile = fileUtil.fetchGenericSearchFile("sw6qrw\"-b", "sw6qrw\"-b", "sw6qrw\"-b", "sw6qrw\"-b", "sw6qrw\"-b", "sw6qrw\"-b");
      assertNull(fetchGenericSearchFile);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFetchKeywordSearchFile() throws Throwable  {
      FileUtil fileUtil = new FileUtil();
      FileInputStream fetchKeywordSearchFile = fileUtil.fetchKeywordSearchFile("g?nxqb#", "g?nxqb#", "g?nxqb#", "g?nxqb#");
      assertNull(fetchKeywordSearchFile);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFetchBlendedSearchFile() throws Throwable  {
      FileUtil fileUtil = new FileUtil();
      FileInputStream fetchBlendedSearchFile = fileUtil.fetchBlendedSearchFile("cacheLife", "cacheLife");
      assertNull(fetchBlendedSearchFile);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDownloadKeywordSearchFile() throws Throwable  {
      FileUtil fileUtil = new FileUtil();
      EvoSuiteURL arg0 = new EvoSuiteURL("http://xml.amazon.net/onca/xml3?t=popcornmonste2-20&dev-t=DSB0XDDW1GQ3S&KeywordSearch=Shoppin*Cart%3Dremove%26f%3Dxml%26dev-t%3D&mode=Shoppin*Cart=remove&f=xml&dev-t=&type=Shoppin*Cart=remove&f=xml&dev-t=&page=Shoppin*Cart=remove&f=xml&dev-t=&f=xml");
      NetworkHandling.createRemoteTextFile(arg0, "Shoppin*Cart=remove&f=xml&dev-t=");
      File downloadKeywordSearchFile = fileUtil.downloadKeywordSearchFile("Shoppin*Cart=remove&f=xml&dev-t=", "Shoppin*Cart=remove&f=xml&dev-t=", "Shoppin*Cart=remove&f=xml&dev-t=", "Shoppin*Cart=remove&f=xml&dev-t=");
      assertNull(downloadKeywordSearchFile);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDownloadBlendedSearchFile() throws Throwable  {
      FileUtil fileUtil = new FileUtil();
      EvoSuiteURL arg0 = new EvoSuiteURL("http://xml.amazon.net/onca/xml3?t=popcornmonste2-20&dev-t=DSB0XDDW1GQ3S&BlendedSearch=%7Bftfee5nO-s+_&type=&f=xml");
      NetworkHandling.createRemoteTextFile(arg0, "{ftfee5nO-s _");
      File downloadBlendedSearchFile = fileUtil.downloadBlendedSearchFile("{ftfee5nO-s _", "");
      assertNull(downloadBlendedSearchFile);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFetchBNFileWithNonEmptyString() throws Throwable  {
      FileUtil fileUtil = new FileUtil();
      FileInputStream fetchBNFile = fileUtil.fetchBNFile("Shoppin*Cart=remove&f=xml&dev-t=", "Shoppin*Cart=remove&f=xml&dev-t=", "Shoppin*Cart=remove&f=xml&dev-t=");
      assertNull(fetchBNFile);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFetchBNFileWithEmptyStringAndEmptyString() throws Throwable  {
      EvoSuiteFile arg0 = new EvoSuiteFile("/__.XML");
      FileSystemHandling.createFolder(arg0);
      FileUtil fileUtil = new FileUtil();
      FileInputStream fetchBNFile = fileUtil.fetchBNFile("", "", "");
      assertNull(fetchBNFile);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBrowseNodeFileReturningNull() throws Throwable  {
      FileUtil fileUtil = new FileUtil();
      File browseNodeFile = fileUtil.getBrowseNodeFile("cacheLife", "cacheLife", "cacheLife");
      assertNull(browseNodeFile);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDownloadBrowseNodeFile() throws Throwable  {
      FileUtil fileUtil = new FileUtil();
      EvoSuiteURL arg0 = new EvoSuiteURL("http://xml.amazon.net/onca/xml3?t=popcornmonste2-20&dev-t=DSB0XDDW1GQ3S&BrowseNodeSearch=Shoppin*Cart=remove&f=xml&dev-t=&mode=Shoppin*Cart=remove&f=xml&dev-t=&type=lite&page=Shoppin*Cart=remove&f=xml&dev-t=&offer=new&f=xml");
      NetworkHandling.createRemoteTextFile(arg0, "Shoppin*Cart=remove&f=xml&dev-t=");
      boolean downloadBrowseNodeFile = fileUtil.downloadBrowseNodeFile("Shoppin*Cart=remove&f=xml&dev-t=", "Shoppin*Cart=remove&f=xml&dev-t=", "Shoppin*Cart=remove&f=xml&dev-t=", "Shoppin*Cart=remove&f=xml&dev-t=");
      assertFalse(downloadBrowseNodeFile);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFetchASINFileReturningFileInputStreamWhereAvailableIsZero() throws Throwable  {
      FileUtil fileUtil = new FileUtil();
      EvoSuiteFile arg0 = new EvoSuiteFile("/.#M=_SHOPPINGCART=MODIFY&F=XML&DEV-T=_.#M=_SHOPPINGCART=MODIFY&F=XML&DEV-T=.XML");
      FileSystemHandling.appendStringToFile(arg0, "");
      FileInputStream fetchASINFile = fileUtil.fetchASINFile(".#m=", ".#m=", "ShoppingCart=modify&f=xml&dev-t=", "ShoppingCart=modify&f=xml&dev-t=");
      assertEquals(0, fetchASINFile.available());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRenameFile1() throws Throwable  {
      FileUtil fileUtil = new FileUtil();
      fileUtil.renameFile("o_pC", ".#)H,");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSimilarItemsReturningFileWhereLengthIsPositive() throws Throwable  {
      EvoSuiteFile arg0 = new EvoSuiteFile("/S_J2D/>2?*T.XML");
      FileSystemHandling.appendLineToFile(arg0, "Shop%ingCart=moRify&f=xmlde|-t=");
      FileSystemHandling.appendLineToFile(arg0, "Shop%ingCart=moRify&f=xmlde|-t=");
      FileSystemHandling.appendStringToFile(arg0, "Shop%ingCart=moRify&f=xmlde|-t=");
      FileSystemHandling.appendLineToFile(arg0, "Shop%ingCart=moRify&f=xmlde|-t=");
      FileSystemHandling.appendStringToFile(arg0, "Shop%ingCart=moRify&f=xmlde|-t=");
      FileSystemHandling.appendLineToFile(arg0, "Shop%ingCart=moRify&f=xmlde|-t=");
      FileSystemHandling.appendLineToFile(arg0, "Shop%ingCart=moRify&f=xmlde|-t=");
      FileSystemHandling.appendLineToFile(arg0, "Shop%ingCart=moRify&f=xmlde|-t=");
      FileUtil fileUtil = new FileUtil();
      FileSystemHandling.appendLineToFile(arg0, "Shop%ingCart=moRify&f=xmlde|-t=");
      byte[] arg1 = new byte[111];
      FileSystemHandling.appendLineToFile(arg0, "Shop%ingCart=moRify&f=xmlde|-t=");
      FileSystemHandling.appendLineToFile(arg0, "net.kencochrane.a4j.u?il.a4jUtil");
      FileSystemHandling.appendDataToFile(arg0, arg1);
      FileSystemHandling.appendDataToFile(arg0, arg1);
      FileSystemHandling.appendLineToFile(arg0, "Shop%ingCart=moRify&f=xmlde|-t=");
      FileSystemHandling.appendStringToFile(arg0, "Shop%ingCart=moRify&f=xmlde|-t=");
      FileSystemHandling.appendDataToFile(arg0, arg1);
      FileSystemHandling.appendDataToFile(arg0, arg1);
      FileSystemHandling.appendStringToFile(arg0, "Shop%ingCart=moRify&f=xmlde|-t=");
      FileSystemHandling.appendDataToFile(arg0, arg1);
      File similarItems = fileUtil.getSimilarItems("j2D/>2?*T", "Shop%ingCart=moRify&f=xmlde|-t=");
      assertFalse(similarItems.isDirectory());
      assertNotNull(similarItems);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsAgeGoodWithFileWhereLengthIsZero() throws Throwable  {
      FileUtil fileUtil = new FileUtil();
      MockFile arg0 = new MockFile((File) null, "");
      boolean ageGood = fileUtil.isAgeGood(arg0);
      assertFalse(ageGood);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsAgeGoodWithNull() throws Throwable  {
      FileUtil fileUtil = new FileUtil();
      boolean ageGood = fileUtil.isAgeGood((File) null);
      assertFalse(ageGood);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDeleteFileWithNonEmptyString() throws Throwable  {
      FileUtil fileUtil = new FileUtil();
      fileUtil.deleteFile("Ot%!ebM;Fk-_");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFetchASINFile1() throws Throwable  {
      EvoSuiteURL arg0 = new EvoSuiteURL("http://xml.amazon.net/onca/xml3?t=popcornmonste2-20&dev-t=DSB0XDDW1GQ3S&AsinSearch=.#m=&type=.#m=&offerpage=ShoppingCart=modify&f=xml&dev-t=&offer=ShoppingCart=modify&f=xml&dev-t=&f=xml");
      NetworkHandling.createRemoteTextFile(arg0, "ShoppingCart=modify&f=xml&dev-t=");
      FileUtil fileUtil = new FileUtil();
      FileInputStream fetchASINFile = fileUtil.fetchASINFile(".#m=", ".#m=", "ShoppingCart=modify&f=xml&dev-t=", "ShoppingCart=modify&f=xml&dev-t=");
      assertNull(fetchASINFile);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDeleteFileWithEmptyString() throws Throwable  {
      FileUtil fileUtil = new FileUtil();
      fileUtil.deleteFile("");
  }
}
