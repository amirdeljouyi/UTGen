/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Mon Mar 18 01:22:08 GMT 2024
 */

package org.jsecurity.web.filter.authc;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.AfterEach;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class BasicHttpAuthenticationFilter_Original_ESTest_scaffolding {

  @org.junit.jupiter.api.extension.RegisterExtension
  public org.evosuite.runtime.vnet.NonFunctionalRequirementExtension nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementExtension();

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeAll
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.jsecurity.web.filter.authc.BasicHttpAuthenticationFilter"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.OFF; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @BeforeEach
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @AfterEach
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    /*No java.lang.System property to set*/
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(BasicHttpAuthenticationFilter_Original_ESTest_scaffolding.class.getClassLoader() ,
      "org.jsecurity.util.Nameable",
      "org.jsecurity.util.AntPathMatcher",
      "org.jsecurity.codec.CodecException",
      "org.apache.log4j.PropertyWatchdog",
      "org.jsecurity.util.PatternMatcher",
      "org.apache.log4j.or.ObjectRenderer",
      "org.jsecurity.web.servlet.AdviceFilter",
      "org.apache.log4j.DefaultCategoryFactory",
      "org.apache.log4j.PropertyConfigurator",
      "org.jsecurity.subject.Subject",
      "org.jsecurity.web.servlet.OncePerRequestFilter",
      "org.jsecurity.web.filter.authc.AuthenticationFilter",
      "org.apache.log4j.helpers.Loader",
      "org.jsecurity.web.filter.AccessControlFilter",
      "org.apache.log4j.or.RendererMap",
      "org.apache.commons.logging.impl.Log4JLogger",
      "org.apache.log4j.ProvisionNode",
      "org.apache.log4j.Hierarchy",
      "org.apache.log4j.Logger",
      "org.jsecurity.authc.AuthenticationToken",
      "org.apache.log4j.helpers.FileWatchdog",
      "org.jsecurity.web.filter.PathMatchingFilter",
      "org.apache.log4j.Level",
      "org.jsecurity.web.filter.authc.AuthenticatingFilter",
      "org.jsecurity.web.filter.authc.BasicHttpAuthenticationFilter",
      "org.apache.log4j.helpers.LogLog",
      "org.apache.log4j.Category",
      "org.apache.log4j.spi.DefaultRepositorySelector",
      "org.jsecurity.codec.Base64",
      "org.apache.log4j.spi.RootLogger",
      "org.apache.log4j.spi.AppenderAttachable",
      "org.apache.log4j.spi.RepositorySelector",
      "org.apache.log4j.spi.RendererSupport",
      "org.jsecurity.web.servlet.ServletContextSupport",
      "org.jsecurity.authc.AuthenticationException",
      "org.apache.log4j.Priority",
      "org.apache.log4j.spi.LoggerFactory",
      "org.apache.log4j.CategoryKey",
      "org.apache.log4j.spi.Configurator",
      "org.jsecurity.web.WebUtils",
      "org.apache.log4j.spi.LoggerRepository",
      "org.apache.log4j.LogManager",
      "org.apache.log4j.or.DefaultRenderer",
      "org.apache.log4j.helpers.OptionConverter",
      "org.jsecurity.web.filter.PathConfigProcessor",
      "org.jsecurity.JSecurityException",
      "org.jsecurity.codec.CodecSupport"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("javax.servlet.ServletRequest", false, BasicHttpAuthenticationFilter_Original_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("javax.servlet.ServletResponse", false, BasicHttpAuthenticationFilter_Original_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(BasicHttpAuthenticationFilter_Original_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.jsecurity.web.servlet.ServletContextSupport",
      "org.apache.log4j.Level",
      "org.apache.log4j.Priority",
      "org.apache.commons.logging.impl.Log4JLogger",
      "org.apache.log4j.Category",
      "org.apache.log4j.Logger",
      "org.apache.log4j.Hierarchy",
      "org.apache.log4j.spi.RootLogger",
      "org.apache.log4j.or.DefaultRenderer",
      "org.apache.log4j.or.RendererMap",
      "org.apache.log4j.DefaultCategoryFactory",
      "org.apache.log4j.spi.DefaultRepositorySelector",
      "org.apache.log4j.helpers.OptionConverter",
      "org.apache.log4j.helpers.Loader",
      "org.apache.log4j.helpers.LogLog",
      "org.apache.log4j.PropertyConfigurator",
      "org.apache.log4j.LogManager",
      "org.apache.log4j.CategoryKey",
      "org.apache.log4j.ProvisionNode",
      "org.jsecurity.web.servlet.OncePerRequestFilter",
      "org.jsecurity.web.servlet.AdviceFilter",
      "org.jsecurity.web.filter.PathMatchingFilter",
      "org.jsecurity.web.filter.AccessControlFilter",
      "org.jsecurity.web.filter.authc.AuthenticationFilter",
      "org.jsecurity.web.filter.authc.AuthenticatingFilter",
      "org.jsecurity.web.filter.authc.BasicHttpAuthenticationFilter",
      "org.jsecurity.codec.Base64",
      "org.jsecurity.util.AntPathMatcher",
      "org.jsecurity.web.WebUtils",
      "org.jsecurity.SecurityUtils",
      "org.jsecurity.util.ThreadContext$1",
      "org.jsecurity.util.ThreadContext",
      "org.jsecurity.authc.UsernamePasswordToken",
      "org.jsecurity.web.servlet.ProxiedFilterChain",
      "org.jsecurity.codec.CodecSupport",
      "org.jsecurity.util.StringUtils",
      "org.jsecurity.authc.SimpleAccount",
      "org.jsecurity.authc.SimpleAuthenticationInfo",
      "org.jsecurity.subject.SimplePrincipalCollection",
      "org.jsecurity.session.mgt.AbstractSessionManager",
      "org.jsecurity.session.mgt.AbstractValidatingSessionManager",
      "org.jsecurity.session.mgt.DefaultSessionManager",
      "org.jsecurity.session.mgt.eis.CachingSessionDAO",
      "org.jsecurity.session.mgt.eis.MemorySessionDAO",
      "org.jsecurity.cache.HashtableCacheManager",
      "org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler",
      "org.jsecurity.cache.HashtableCache",
      "org.jsecurity.JSecurityException",
      "org.jsecurity.session.SessionException",
      "org.jsecurity.session.InvalidSessionException",
      "org.jsecurity.session.UnknownSessionException",
      "org.jsecurity.realm.CachingRealm",
      "org.jsecurity.realm.AuthenticatingRealm",
      "org.jsecurity.realm.AuthorizingRealm",
      "org.jsecurity.realm.SimpleAccountRealm",
      "org.jsecurity.authc.credential.SimpleCredentialsMatcher",
      "org.jsecurity.authz.permission.WildcardPermissionResolver",
      "org.jsecurity.mgt.CachingSecurityManager",
      "org.jsecurity.mgt.RealmSecurityManager",
      "org.jsecurity.mgt.AuthenticatingSecurityManager",
      "org.jsecurity.mgt.AuthorizingSecurityManager",
      "org.jsecurity.mgt.SessionsSecurityManager",
      "org.jsecurity.mgt.DefaultSecurityManager",
      "org.jsecurity.cache.ehcache.EhCacheManager",
      "net.sf.ehcache.CacheManager",
      "org.jsecurity.io.ResourceUtils",
      "org.jsecurity.util.ClassUtils",
      "net.sf.ehcache.event.CacheManagerEventListenerRegistry",
      "net.sf.ehcache.Status",
      "net.sf.ehcache.config.ConfigurationFactory",
      "net.sf.ehcache.config.Configuration",
      "net.sf.ehcache.config.BeanHandler",
      "net.sf.ehcache.config.BeanHandler$ElementInfo",
      "net.sf.ehcache.config.DiskStoreConfiguration",
      "net.sf.ehcache.config.CacheConfiguration",
      "net.sf.ehcache.config.ConfigurationHelper",
      "net.sf.ehcache.store.MemoryStoreEvictionPolicy",
      "net.sf.ehcache.Cache",
      "net.sf.ehcache.event.RegisteredEventListeners",
      "net.sf.ehcache.util.PropertyUtil",
      "net.sf.ehcache.store.DiskStore",
      "net.sf.ehcache.store.DiskStore$SpoolAndExpiryThread",
      "net.sf.ehcache.store.MemoryStore",
      "net.sf.ehcache.store.LruMemoryStore",
      "net.sf.ehcache.store.LruMemoryStore$SpoolingLinkedHashMap",
      "org.jsecurity.authc.AbstractAuthenticator",
      "org.jsecurity.authc.pam.ModularRealmAuthenticator",
      "org.jsecurity.authc.pam.AbstractAuthenticationStrategy",
      "org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy",
      "org.jsecurity.authz.ModularRealmAuthorizer",
      "org.jsecurity.cache.ehcache.EhCache",
      "org.jsecurity.session.mgt.SimpleSession",
      "org.jsecurity.util.JavaEnvironment",
      "net.sf.ehcache.Element",
      "org.jsecurity.session.mgt.DelegatingSession",
      "org.jsecurity.session.ProxiedSession",
      "net.sf.ehcache.CacheException"
    );
  }
}
