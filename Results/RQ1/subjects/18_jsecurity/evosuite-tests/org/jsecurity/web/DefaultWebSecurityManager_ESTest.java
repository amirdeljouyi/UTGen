/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Mon Mar 18 01:30:36 GMT 2024
 */

package org.jsecurity.web;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.ServletResponseWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsecurity.session.Session;
import org.jsecurity.subject.Subject;
import org.jsecurity.web.DefaultWebSecurityManager;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultWebSecurityManager_ESTest extends DefaultWebSecurityManager_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSessionIdCookieSecure() throws Throwable  {
      // Given: A DefaultWebSecurityManager instance is created and initialized with a session mode of "jsecurity" and the session ID cookie secure flag set to true.
      DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
      defaultWebSecurityManager.setSessionMode("jsecurity");
      defaultWebSecurityManager.setSessionIdCookieSecure(true);
      
      // When: The session mode is retrieved from the DefaultWebSecurityManager instance.
      String actualSessionMode = defaultWebSecurityManager.getSessionMode();
      
      // Then: The expected session mode of "jsecurity" is returned, and the session ID cookie secure flag is set to true.
      assertEquals("jsecurity", actualSessionMode);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSessionIdCookiePath() throws Throwable  {
      // Given
      DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
      
      // When
      defaultWebSecurityManager.setSessionMode("jsecurity");
      defaultWebSecurityManager.setSessionIdCookiePath("public static final String constants in the ");
      
      // Then
      assertEquals("jsecurity", defaultWebSecurityManager.getSessionMode());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSessionIdCookieName() throws Throwable  {
      // Given a DefaultWebSecurityManager instance
      DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
      
      // When we set the session mode to "jsecurity" and the session ID cookie name to "+dE3 73"
      defaultWebSecurityManager.setSessionMode("jsecurity");
      defaultWebSecurityManager.setSessionIdCookieName("+dE3 73");
      
      // Then we expect the session mode to be set to "jsecurity" and the session ID cookie name to be set to "+dE3 73"
      assertEquals("jsecurity", defaultWebSecurityManager.getSessionMode());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsAuthenticated() throws Throwable  {
      // Given: A new instance of DefaultWebSecurityManager is created
      DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
      
      // When: The authenticated status of the session is checked
      boolean authenticated = defaultWebSecurityManager.isAuthenticated(null);
      
      // Then: The result should be false, as no user has been logged in yet
      assertFalse(authenticated);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPrincipals() throws Throwable  {
      // Given: A new instance of DefaultWebSecurityManager is created
      DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
      
      // When: The getPrincipals() method is called on the DefaultWebSecurityManager instance with null as the Session parameter
      defaultWebSecurityManager.getPrincipals((Session) null);
      
      // Then: The isHttpSessionMode() method of the DefaultWebSecurityManager instance should return true
      assertTrue(defaultWebSecurityManager.isHttpSessionMode());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNewSessionManagerInstance() throws Throwable  {
      // Given
      DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
      
      // When
      defaultWebSecurityManager.setSessionMode("jsecurity");
      defaultWebSecurityManager.newSessionManagerInstance();
      
      // Then
      assertEquals("jsecurity", defaultWebSecurityManager.getSessionMode());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsHttpSessionModeReturningFalse() throws Throwable  {
      // Given a DefaultWebSecurityManager instance with session mode set to "jsecurity"
      DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
      defaultWebSecurityManager.setSessionMode("jsecurity");
      
      // When the getSessionMode method is called on the DefaultWebSecurityManager instance
      String actualSessionMode = defaultWebSecurityManager.getSessionMode();
      
      // Then the session mode should be "jsecurity"
      assertEquals("jsecurity", actualSessionMode);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsHttpSessionModeReturningTrue() throws Throwable  {
      // Given: We have a DefaultWebSecurityManager instance named "defaultWebSecurityManager"
      DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
      
      // When: We call the isHttpSessionMode() method on this instance
      boolean httpSessionMode = defaultWebSecurityManager.isHttpSessionMode();
      
      // Then: The return value should be true, indicating that HTTP session mode is enabled
      assertTrue(httpSessionMode);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSessionModeThrowsIllegalArgumentException() throws Throwable  {
      // Given
      DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
      
      // When
      try {
      defaultWebSecurityManager.setSessionMode("custom-security-mode");
      fail("Expecting exception: IllegalArgumentException");
      } catch (IllegalArgumentException e) {
      // Then
      verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSessionMode() throws Throwable  {
      DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();
      securityManager.setSessionMode("http");
      assertTrue(securityManager.isHttpSessionMode());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSessionModeWithNull() throws Throwable  {
      // No Comments were added
      DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager.setSessionMode((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [null].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSessionIdCookieMaxAge() throws Throwable  {
      // Given a DefaultWebSecurityManager instance
      DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
      
      // When setting the session mode to "jsecurity"
      defaultWebSecurityManager.setSessionMode("jsecurity");
      
      // Then the session mode is set to "jsecurity"
      assertEquals("jsecurity", defaultWebSecurityManager.getSessionMode());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetRememberMeCookiePath() throws Throwable  {
      // rollbacked to evosuite
      DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
      defaultWebSecurityManager.setRememberMeCookiePath("7#'0`bMhbZd");
      assertTrue(defaultWebSecurityManager.isHttpSessionMode());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSessionIdCookieSecureThrowsIllegalStateException() throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
      // Setting the session ID cookie secure flag to false is not allowed when using the default SessionManager implementation
      try {
      defaultWebSecurityManager.setSessionIdCookieSecure(false);
      fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
      // The session ID cookie secure flag can only be set to true when using the default SessionManager implementation
      verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSessionMode() throws Throwable  {
      // rollbacked to evosuite
      DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
      String sessionMode = defaultWebSecurityManager.getSessionMode();
      assertEquals("http", sessionMode);
      assertTrue(defaultWebSecurityManager.isHttpSessionMode());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateSubjectTakingNoArgumentsThrowsIllegalStateException() throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
      try {
      defaultWebSecurityManager.createSubject();
      fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
      // Verify that the exception is thrown because no ServletRequest was found in ThreadContext.
      verifyException("org.jsecurity.web.WebUtils", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateSubjectTaking3Arguments() throws Throwable  {
      // Given
      DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
      ServletRequest arg1 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("org.jsecurity.web.DefaultWebSecurityManager_PRINCIPALS_SESSION_KEY").when(arg1).getRemoteHost();
      ServletResponse arg0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper arg2 = new ServletResponseWrapper(arg0);
      
      // When
      Subject createSubject = defaultWebSecurityManager.createSubject((Session) null, arg1, (ServletResponse) arg2);
      
      // Then
      assertFalse(createSubject.isAuthenticated());
      assertTrue(defaultWebSecurityManager.isHttpSessionMode());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetRememberMeCookieMaxAge() throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
      // Set the maximum age of the remember me cookie
      Integer rememberMeCookieMaxAge = Integer.getInteger("org.jsecurity.web.DefaultWebSecurityManager_AUTHENTICATED_SESSION_KEY", (-1787));
      defaultWebSecurityManager.setRememberMeCookieMaxAge(rememberMeCookieMaxAge);
      // Verify that the manager is in http session mode
      assertTrue(defaultWebSecurityManager.isHttpSessionMode());
  }
}
