/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 21 05:44:17 GMT 2024
 */

package macaw.util;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.HeadlessException;
import javax.swing.JPanel;
import macaw.businessLayer.User;
import macaw.system.SessionProperties;
import macaw.util.DisplayableListItemAdder;
import macaw.util.DisplayableListItemDeleter;
import macaw.util.DisplayableListItemEditor;
import macaw.util.DisplayableListItemSelector;
import macaw.util.DisplayableListItemViewer;
import macaw.util.DisplayableListPanel;
import macaw.util.DisplayableListParentForm;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DisplayableListPanel_ESTest extends DisplayableListPanel_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testUpdateButtonStates0() throws Throwable  {
      // rollbacked to evosuite
      SessionProperties arg0 = new SessionProperties();
      User arg1 = new User("securityService", "securityService");
      arg0.setProperty("currentUser", arg1);
      DisplayableListPanel displayableListPanel = new DisplayableListPanel(arg0, (DisplayableListParentForm) null, "userInterfaceFactory", true, false);
      displayableListPanel.updateButtonStates();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testUpdateButtonStates1() throws Throwable  {
      // rollbacked to evosuite
      SessionProperties arg0 = new SessionProperties();
      User arg1 = new User("securityService", "securityService");
      arg0.setProperty("currentUser", arg1);
      DisplayableListPanel displayableListPanel = new DisplayableListPanel(arg0, (DisplayableListParentForm) null, "startupOptions", false, false);
      displayableListPanel.updateButtonStates();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testUpdateButtonStates2() throws Throwable  {
      // rollbacked to evosuite
      SessionProperties arg0 = new SessionProperties();
      User arg1 = new User("securityService", "securityService");
      arg0.setProperty("currentUser", arg1);
      DisplayableListPanel displayableListPanel = new DisplayableListPanel(arg0, (DisplayableListParentForm) null, "currentUser", true, true);
      displayableListPanel.updateButtonStates();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDeleteSelectedListItemsThrowsHeadlessException() throws Throwable  {
      SessionProperties sessionProperties = new SessionProperties();
      User user = new User("securityService", "securityService");
      sessionProperties.setProperty("currentUser", user);
      DisplayableListPanel displayableListPanel = new DisplayableListPanel(sessionProperties, (DisplayableListParentForm) null, "log", true);
      // Undeclared exception!
      try {
      displayableListPanel.deleteSelectedListItems();
      fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
      // no message in exception (getMessage() returned null)
      verifyException("java.awt.GraphicsEnvironment", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddListItemThrowsHeadlessException() throws Throwable  {
      // rollbacked to evosuite
      SessionProperties arg0 = new SessionProperties();
      User arg1 = new User();
      arg0.setProperty("currentUser", arg1);
      DisplayableListPanel displayableListPanel = new DisplayableListPanel(arg0, (DisplayableListParentForm) null, "startupOptions", false, false);
      // Undeclared exception!
      try { 
        displayableListPanel.addListItem();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPanel0() throws Throwable  {
      // Given a logged in user
      User currentUser = new User();
      
      // And a SessionProperties object with the current user set
      SessionProperties sessionProperties = new SessionProperties();
      sessionProperties.setProperty("currentUser", currentUser);
      
      // When we create a DisplayableListPanel instance with the session properties and parent form as null
      DisplayableListPanel displayableListPanel = new DisplayableListPanel(sessionProperties, (DisplayableListParentForm) null, "startupOptions", true, true);
      
      // Then the panel should have ignoreRepaint set to false
      assertFalse(displayableListPanel.getPanel().getIgnoreRepaint());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDisplayableListItemSelector() throws Throwable  {
      // rollbacked to evosuite
      SessionProperties arg0 = new SessionProperties();
      User arg1 = new User("retrievalService", "userInterfaceFactory");
      arg0.setProperty("currentUser", arg1);
      DisplayableListPanel displayableListPanel = new DisplayableListPanel(arg0, (DisplayableListParentForm) null, "startupOptions", true);
      displayableListPanel.setDisplayableListItemSelector((DisplayableListItemSelector) null);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDisplayableListItemViewer() throws Throwable  {
      // rollbacked to evosuite
      SessionProperties arg0 = new SessionProperties();
      User arg1 = new User("database", "currentUser");
      arg0.setProperty("currentUser", arg1);
      DisplayableListPanel displayableListPanel = new DisplayableListPanel(arg0, (DisplayableListParentForm) null, "startupOptions", true);
      displayableListPanel.setDisplayableListItemViewer((DisplayableListItemViewer) null);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDisplayableListItemEditor() throws Throwable  {
      // rollbacked to evosuite
      SessionProperties arg0 = new SessionProperties();
      User arg1 = new User();
      arg0.setProperty("currentUser", arg1);
      DisplayableListPanel displayableListPanel = new DisplayableListPanel(arg0, (DisplayableListParentForm) null, "securityService", true);
      displayableListPanel.setDisplayableListItemEditor((DisplayableListItemEditor) null);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSave() throws Throwable  {
      // rollbacked to evosuite
      SessionProperties arg0 = new SessionProperties();
      User arg1 = new User("securityService", "securityService");
      arg0.setProperty("currentUser", arg1);
      DisplayableListPanel displayableListPanel = new DisplayableListPanel(arg0, (DisplayableListParentForm) null, "startupOptions", true, true);
      displayableListPanel.save();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDisplayableListItemAdder() throws Throwable  {
      // rollbacked to evosuite
      SessionProperties arg0 = new SessionProperties();
      User arg1 = new User();
      arg0.setProperty("currentUser", arg1);
      DisplayableListPanel displayableListPanel = new DisplayableListPanel(arg0, (DisplayableListParentForm) null, "startupOptions", true, true);
      displayableListPanel.setDisplayableListItemAdder((DisplayableListItemAdder) null);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetNewRecord() throws Throwable  {
      // rollbacked to evosuite
      SessionProperties arg0 = new SessionProperties();
      User arg1 = new User("securityService", "securityService");
      arg0.setProperty("currentUser", arg1);
      DisplayableListPanel displayableListPanel = new DisplayableListPanel(arg0, (DisplayableListParentForm) null, "database", true, true);
      displayableListPanel.setNewRecord(true);
      displayableListPanel.updateButtonStates();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDisplayableListItemDeleter() throws Throwable  {
      // Given a session properties object
      SessionProperties sessionProperties = new SessionProperties();
      
      // And a user object with the name "securityService"
      User securityService = new User("securityService", "securityService");
      
      // When we set the current user on the session properties object
      sessionProperties.setProperty("currentUser", securityService);
      
      // And create a displayable list panel with the session properties and form parameters
      DisplayableListPanel displayableListPanel = new DisplayableListPanel(sessionProperties, (DisplayableListParentForm) null, "f#S*Y", false, false);
      
      // Then we should be able to set the displayable list item deleter on the panel
      displayableListPanel.setDisplayableListItemDeleter((DisplayableListItemDeleter) null);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetListOwnerName() throws Throwable  {
      // Create a new SessionProperties object and set its current user to a valid value
      SessionProperties sessionProperties = new SessionProperties();
      sessionProperties.setProperty("currentUser", "securityService");
      
      // Create a new User object with the specified username and password
      User user = new User("securityService", "]6gx9Vm}+uh(X");
      
      // Set the current user in the SessionProperties object using the setProperty method
      sessionProperties.setProperty("currentUser", user);
      
      // Create a new DisplayableListPanel object and set its list owner name to "startupOptions"
      DisplayableListPanel displayableListPanel = new DisplayableListPanel(sessionProperties, (DisplayableListParentForm) null, "startupOptions", true, true);
      
      // Set the list owner name of the DisplayableListPanel object to "currentUser"
      displayableListPanel.setListOwnerName("currentUser");
      
      // Assert that the current user in the SessionProperties object is equal to the User object created earlier
      assertEquals(sessionProperties.getProperty("currentUser"), user);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPanel1() throws Throwable  {
      // Create a new session properties object
      SessionProperties sessionProperties = new SessionProperties();
      
      // Create a new user object
      User securityService = new User("securityService", "securityService");
      
      // Set the current user property in the session properties object
      sessionProperties.setProperty("currentUser", securityService);
      
      // Create a new DisplayableListPanel object with the given arguments
      DisplayableListPanel displayableListPanel = new DisplayableListPanel(sessionProperties, (DisplayableListParentForm) null, "f#S*Y", false, false);
      
      // Get the JPanel object from the DisplayableListPanel object
      JPanel panel = displayableListPanel.getPanel();
      
      // Assert that the focus traversal keys are enabled for the JPanel object
      assertTrue(panel.getFocusTraversalKeysEnabled());
  }
}
