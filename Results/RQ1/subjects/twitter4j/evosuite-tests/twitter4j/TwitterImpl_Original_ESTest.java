/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 20 16:08:22 GMT 2024
 */

package twitter4j;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import twitter4j.TwitterImpl;
import twitter4j.auth.Authorization;
import twitter4j.auth.BasicAuthorization;
import twitter4j.auth.OAuth2Authorization;
import twitter4j.auth.OAuthAuthorization;
import twitter4j.conf.PropertyConfiguration;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TwitterImpl_Original_ESTest extends TwitterImpl_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetUserListMembershipsThrowsException() throws Throwable  {
      BasicAuthorization arg1 = new BasicAuthorization(")rm|yNr9_-+", ")rm|yNr9_-+");
      PropertyConfiguration arg0 = new PropertyConfiguration((InputStream) null);
      TwitterImpl twitterImpl = new TwitterImpl(arg0, arg1);
      try { 
        twitterImpl.getUserListMemberships(1L, 1704, 2562L, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not find: api.twitter.com
         //
         verifyException("twitter4j.HttpClientImpl", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBlocksIDsThrowsIllegalStateException() throws Throwable  {
      PropertyConfiguration arg0 = new PropertyConfiguration((InputStream) null);
      TwitterImpl twitterImpl = new TwitterImpl(arg0, (Authorization) null);
      // Undeclared exception!
      try { 
        twitterImpl.getBlocksIDs((-1722L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Authentication credentials are missing. See http://twitter4j.org/en/configuration.html for details. See and register at http://apps.twitter.com/
         //
         verifyException("twitter4j.TwitterBaseImpl", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDestroyUserListSubscriptionThrowsException() throws Throwable  {
      PropertyConfiguration arg0 = new PropertyConfiguration((InputStream) null);
      BasicAuthorization arg1 = new BasicAuthorization("EEE MMM dd HH:mm:ss z yyyy", "EEE MMM dd HH:mm:ss z yyyy");
      TwitterImpl twitterImpl = new TwitterImpl(arg0, arg1);
      try { 
        twitterImpl.destroyUserListSubscription("EEE MMM dd HH:mm:ss z yyyy", "4#H-~kG+'D<s");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // protocol doesn't support output
         //
         verifyException("twitter4j.HttpClientImpl", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testUpdateProfileThrowsIllegalStateException() throws Throwable  {
      PropertyConfiguration arg0 = new PropertyConfiguration((InputStream) null);
      TwitterImpl twitterImpl = new TwitterImpl(arg0, (Authorization) null);
      // Undeclared exception!
      try { 
        twitterImpl.updateProfile("nf 3SO',1g%;kK_/d.", (String) null, (String) null, "nf 3SO',1g%;kK_/d.");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Authentication credentials are missing. See http://twitter4j.org/en/configuration.html for details. See and register at http://apps.twitter.com/
         //
         verifyException("twitter4j.TwitterBaseImpl", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetContributorsThrowsIllegalStateException() throws Throwable  {
      PropertyConfiguration arg0 = new PropertyConfiguration((InputStream) null);
      OAuth2Authorization arg1 = new OAuth2Authorization(arg0);
      TwitterImpl twitterImpl = new TwitterImpl(arg0, arg1);
      // Undeclared exception!
      try { 
        twitterImpl.getContributors((-565L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Authentication credentials are missing. See http://twitter4j.org/en/configuration.html for details. See and register at http://apps.twitter.com/
         //
         verifyException("twitter4j.TwitterBaseImpl", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFriendsListThrowsIllegalStateException() throws Throwable  {
      PropertyConfiguration arg0 = new PropertyConfiguration((InputStream) null);
      OAuthAuthorization arg1 = new OAuthAuthorization(arg0);
      TwitterImpl twitterImpl = new TwitterImpl(arg0, arg1);
      // Undeclared exception!
      try { 
        twitterImpl.getFriendsList("BgAZLE<h", 858L, 1, false, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Authentication credentials are missing. See http://twitter4j.org/en/configuration.html for details. See and register at http://apps.twitter.com/
         //
         verifyException("twitter4j.TwitterBaseImpl", e);
      }
  }
}
