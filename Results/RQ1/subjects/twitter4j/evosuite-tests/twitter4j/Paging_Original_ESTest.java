/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 20 15:18:48 GMT 2024
 */

package twitter4j;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import twitter4j.HttpParameter;
import twitter4j.Paging;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Paging_Original_ESTest extends Paging_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSinceIdReturningPositive() throws Throwable  {
      Paging paging = new Paging(31, 2335, 2335);
      long sinceId = paging.getSinceId();
      assertEquals((-1L), paging.getMaxId());
      assertEquals(2335L, sinceId);
      assertEquals(2335, paging.getCount());
      assertEquals(31, paging.getPage());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPageReturningPositive() throws Throwable  {
      Paging paging = new Paging(2102, 2102, 2102, 2102);
      int page = paging.getPage();
      assertEquals(2102L, paging.getSinceId());
      assertEquals(2102L, paging.getMaxId());
      assertEquals(2102, paging.getCount());
      assertEquals(2102, page);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxIdReturningPositive() throws Throwable  {
      Paging paging = new Paging();
      paging.maxId(26L);
      long maxId = paging.getMaxId();
      assertEquals(26L, maxId);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCountReturningPagingWhereGetPageIsPositive() throws Throwable  {
      Paging paging = new Paging(69);
      paging.sinceId(69);
      paging.count(39);
      assertEquals(69L, paging.getSinceId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCountReturningPagingWhereGetMaxIdIsPositive() throws Throwable  {
      Paging paging = new Paging();
      Paging maxId = paging.maxId(1);
      maxId.count(579);
      assertEquals(579, paging.getCount());
      assertEquals(1L, paging.getMaxId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAsPostParameterListTaking2ArgumentsReturningListWhereIsEmptyIsTrue() throws Throwable  {
      Paging paging = new Paging();
      char[] arg0 = new char[6];
      List<HttpParameter> asPostParameterList = paging.asPostParameterList(arg0, "QoyZ");
      assertTrue(asPostParameterList.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAsPostParameterListTaking2ArgumentsAndSetCount() throws Throwable  {
      Paging paging = new Paging();
      paging.setCount(2146842416);
      char[] arg0 = new char[2];
      arg0[0] = 'c';
      paging.asPostParameterList(arg0, "");
      assertEquals(2146842416, paging.getCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAsPostParameterListTakingCharArrayReturningListWhereIsEmptyIsFalse() throws Throwable  {
      Paging paging = new Paging();
      char[] arg0 = new char[9];
      paging.maxId(99L);
      arg0[2] = 'm';
      paging.asPostParameterList(arg0);
      assertEquals(99L, paging.getMaxId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAsPostParameterListTakingNoArgumentsReturningListWhereIsEmptyIsFalse() throws Throwable  {
      Paging paging = new Paging();
      Paging count = paging.count(5977);
      count.asPostParameterList();
      assertEquals(5977, paging.getCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSinceId() throws Throwable  {
      Paging paging = new Paging(69);
      paging.setSinceId(69);
      assertEquals(69L, paging.getSinceId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetPage() throws Throwable  {
      Paging paging = new Paging();
      paging.setPage(8);
      assertEquals(8, paging.getPage());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSinceIdReturningNegative() throws Throwable  {
      Paging paging = new Paging();
      long sinceId = paging.getSinceId();
      assertEquals((-1L), sinceId);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxIdReturningNegative() throws Throwable  {
      Paging paging = new Paging();
      long maxId = paging.getMaxId();
      assertEquals((-1L), maxId);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCount() throws Throwable  {
      Paging paging = new Paging();
      int count = paging.getCount();
      assertEquals((-1), count);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPageReturningNegative() throws Throwable  {
      Paging paging = new Paging();
      int page = paging.getPage();
      assertEquals((-1), page);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSinceIdReturningPagingWhereGetPageIsNegative() throws Throwable  {
      Paging paging = new Paging();
      paging.sinceId(3600L);
      Paging arg0 = new Paging();
      boolean equals = paging.equals(arg0);
      assertEquals(3600L, paging.getSinceId());
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesPagingTakingInt() throws Throwable  {
      Paging paging = new Paging();
      Paging arg0 = new Paging(8);
      boolean equals = paging.equals(arg0);
      assertEquals((-1), arg0.getCount());
      assertFalse(equals);
      assertEquals(8, arg0.getPage());
      assertFalse(arg0.equals((Object)paging));
      assertEquals((-1L), arg0.getSinceId());
      assertEquals((-1L), arg0.getMaxId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetMaxId() throws Throwable  {
      Paging arg0 = new Paging();
      Paging paging = new Paging(8);
      paging.setMaxId(8);
      boolean equals = paging.equals(arg0);
      assertEquals(8L, paging.getMaxId());
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCount() throws Throwable  {
      Paging arg0 = new Paging();
      arg0.count(9);
      Paging paging = new Paging();
      boolean equals = paging.equals(arg0);
      assertEquals(9, arg0.getCount());
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningTrue() throws Throwable  {
      Paging arg0 = new Paging();
      Paging paging = new Paging();
      boolean equals = paging.equals(arg0);
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesPagingTakingNoArguments() throws Throwable  {
      Paging arg0 = new Paging();
      boolean equals = arg0.equals(arg0);
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningFalse() throws Throwable  {
      Paging paging = new Paging();
      boolean equals = paging.equals("Paging{page=2, count=84, sinceId=1731, maxId=1731}");
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetMaxIdThrowsIllegalArgumentException() throws Throwable  {
      Paging paging = new Paging();
      // Undeclared exception!
      try { 
        paging.setMaxId(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max_id should be positive integer. passed:0
         //
         verifyException("twitter4j.Paging", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSinceIdThrowsIllegalArgumentException() throws Throwable  {
      Paging paging = new Paging();
      // Undeclared exception!
      try { 
        paging.setSinceId((-2481L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // since_id should be positive integer. passed:-2481
         //
         verifyException("twitter4j.Paging", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetPageThrowsIllegalArgumentException() throws Throwable  {
      Paging paging = new Paging();
      // Undeclared exception!
      try { 
        paging.setPage(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // page should be positive integer. passed:0
         //
         verifyException("twitter4j.Paging", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAsPostParameterListTakingCharArrayThrowsIllegalStateException() throws Throwable  {
      Paging paging = new Paging(2866, 2866, 2866);
      char[] arg0 = new char[0];
      // Undeclared exception!
      try { 
        paging.asPostParameterList(arg0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Paging parameter [since_id] is not supported with this operation.
         //
         verifyException("twitter4j.Paging", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAsPostParameterArrayTakingNoArgumentsReturningEmptyArray() throws Throwable  {
      Paging paging = new Paging();
      HttpParameter[] asPostParameterArray = paging.asPostParameterArray();
      assertEquals(0, asPostParameterArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAsPostParameterArrayTakingNoArgumentsReturningNonEmptyArray() throws Throwable  {
      Paging paging = new Paging();
      paging.setCount(2146842416);
      paging.asPostParameterArray();
      assertEquals(2146842416, paging.getCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSinceIdReturningPagingWhereGetCountIsPositive() throws Throwable  {
      Paging paging = new Paging(4, 4, 4, 1952257861L);
      paging.sinceId(1952257861L);
      assertEquals(1952257861L, paging.getSinceId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAsPostParameterListTakingNoArgumentsReturningListWhereIsEmptyIsTrue() throws Throwable  {
      Paging paging = new Paging();
      List<HttpParameter> asPostParameterList = paging.asPostParameterList();
      assertEquals(0, asPostParameterList.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesPagingTakingLong() throws Throwable  {
      Paging paging = new Paging(1L);
      assertEquals((-1L), paging.getMaxId());
      assertEquals((-1), paging.getPage());
      assertEquals((-1), paging.getCount());
      assertEquals(1L, paging.getSinceId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToString() throws Throwable  {
      Paging paging = new Paging();
      String string = paging.toString();
      assertEquals("Paging{page=-1, count=-1, sinceId=-1, maxId=-1}", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetCountThrowsIllegalArgumentException() throws Throwable  {
      Paging paging = new Paging(4, 4);
      // Undeclared exception!
      try { 
        paging.setCount((-960));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count should be positive integer. passed:-960
         //
         verifyException("twitter4j.Paging", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAsPostParameterListTakingCharArrayReturningListWhereIsEmptyIsTrue() throws Throwable  {
      Paging paging = new Paging();
      char[] arg0 = new char[0];
      List<HttpParameter> asPostParameterList = paging.asPostParameterList(arg0);
      assertEquals(0, asPostParameterList.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesPagingTaking2ArgumentsAndCallsHashCode() throws Throwable  {
      Paging paging = new Paging(69, 69);
      paging.hashCode();
      assertEquals(69, paging.getPage());
      assertEquals((-1L), paging.getSinceId());
      assertEquals(69, paging.getCount());
      assertEquals((-1L), paging.getMaxId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAsPostParameterArrayTaking2ArgumentsReturningNonEmptyArray() throws Throwable  {
      Paging paging = new Paging();
      paging.count(2);
      char[] arg0 = new char[1];
      arg0[0] = 'c';
      paging.asPostParameterArray(arg0, ", sinceId=");
      assertEquals(2, paging.getCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMaxIdReturningPagingWhereGetSinceIdIsPositive() throws Throwable  {
      Paging paging = new Paging(2102, 2102, 2102, 2102);
      Paging maxId = paging.maxId(2102);
      assertEquals(2102, maxId.getCount());
      assertEquals(2102L, maxId.getMaxId());
      assertEquals(2102L, maxId.getSinceId());
      assertEquals(2102, maxId.getPage());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAsPostParameterArrayTaking2ArgumentsReturningEmptyArray() throws Throwable  {
      Paging paging = new Paging();
      assertEquals((-1), paging.getPage());
      assertEquals((-1), paging.getCount());
      assertEquals((-1L), paging.getSinceId());
      assertEquals((-1L), paging.getMaxId());
      
      char[] arg0 = new char[1];
      HttpParameter[] asPostParameterArray = paging.asPostParameterArray(arg0, ", sinceId=");
      assertEquals(0, asPostParameterArray.length);
  }
}
