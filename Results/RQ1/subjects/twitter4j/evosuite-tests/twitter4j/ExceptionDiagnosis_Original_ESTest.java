/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 20 14:59:20 GMT 2024
 */

package twitter4j;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;
import twitter4j.ExceptionDiagnosis;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExceptionDiagnosis_Original_ESTest extends ExceptionDiagnosis_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStackLineHashReturningPositive() throws Throwable  {
      MockThrowable arg0 = new MockThrowable();
      String[] arg1 = new String[6];
      arg1[0] = "9hWN$";
      arg1[1] = "00000000-00000000sun.reflect.GeneratedConstructorAccessor38";
      arg1[2] = "sun.reflect.";
      arg1[3] = "s";
      arg1[4] = "nk1xA4T;w(p12Id!#o";
      arg1[5] = "";
      ExceptionDiagnosis exceptionDiagnosis = new ExceptionDiagnosis(arg0, arg1);
      int stackLineHash = exceptionDiagnosis.getStackLineHash();
      assertEquals(1281931231, stackLineHash);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStackLineHashReturningNegative() throws Throwable  {
      MockThrowable arg0 = new MockThrowable();
      String[] arg1 = new String[4];
      arg1[0] = "EW.l.2Jn";
      arg1[1] = ", lineNumberHash=";
      arg1[2] = "56MMf";
      arg1[3] = "sun.reflect.Gen";
      ExceptionDiagnosis exceptionDiagnosis = new ExceptionDiagnosis(arg0, arg1);
      int stackLineHash = exceptionDiagnosis.getStackLineHash();
      assertEquals((-675335713), stackLineHash);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLineNumberHashReturningNegative() throws Throwable  {
      MockThrowable arg0 = new MockThrowable();
      String[] arg1 = new String[2];
      arg1[0] = "";
      ExceptionDiagnosis exceptionDiagnosis = new ExceptionDiagnosis(arg0, arg1);
      int lineNumberHash = exceptionDiagnosis.getLineNumberHash();
      assertEquals((-993), lineNumberHash);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEquals() throws Throwable  {
      MockThrowable arg0 = new MockThrowable((String) null);
      ExceptionDiagnosis exceptionDiagnosis = new ExceptionDiagnosis(arg0);
      boolean equals = exceptionDiagnosis.equals((Object) null);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesExceptionDiagnosisTakingThrowable() throws Throwable  {
      MockThrowable arg1 = new MockThrowable();
      MockThrowable arg0 = new MockThrowable("ZEfL%tZd{.Po~", arg1);
      ExceptionDiagnosis exceptionDiagnosis = new ExceptionDiagnosis(arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAsHexString() throws Throwable  {
      MockThrowable arg0 = new MockThrowable((String) null);
      ExceptionDiagnosis exceptionDiagnosis = new ExceptionDiagnosis(arg0);
      String asHexString = exceptionDiagnosis.asHexString();
      assertEquals("00000000-00000000", asHexString);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStackLineHashReturningZero() throws Throwable  {
      MockThrowable arg0 = new MockThrowable();
      ExceptionDiagnosis exceptionDiagnosis = new ExceptionDiagnosis(arg0);
      int stackLineHash = exceptionDiagnosis.getStackLineHash();
      assertEquals(0, stackLineHash);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLineNumberHashReturningZero() throws Throwable  {
      MockThrowable arg0 = new MockThrowable();
      ExceptionDiagnosis exceptionDiagnosis = new ExceptionDiagnosis(arg0);
      int lineNumberHash = exceptionDiagnosis.getLineNumberHash();
      assertEquals(0, lineNumberHash);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToString() throws Throwable  {
      MockThrowable arg0 = new MockThrowable();
      ExceptionDiagnosis exceptionDiagnosis = new ExceptionDiagnosis(arg0);
      String string = exceptionDiagnosis.toString();
      assertEquals("ExceptionDiagnosis{stackLineHash=0, lineNumberHash=0}", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashCode() throws Throwable  {
      MockThrowable arg0 = new MockThrowable();
      ExceptionDiagnosis exceptionDiagnosis = new ExceptionDiagnosis(arg0);
      exceptionDiagnosis.hashCode();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLineNumberHashAsHex() throws Throwable  {
      MockThrowable arg0 = new MockThrowable();
      ExceptionDiagnosis exceptionDiagnosis = new ExceptionDiagnosis(arg0);
      String lineNumberHashAsHex = exceptionDiagnosis.getLineNumberHashAsHex();
      assertEquals("00000000", lineNumberHashAsHex);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStackLineHashAsHex() throws Throwable  {
      MockThrowable arg0 = new MockThrowable();
      String[] arg1 = new String[5];
      arg1[0] = "j7u\"IWR)<h";
      arg1[1] = "/E}QJ# 6=`TJ6'f--oM";
      arg1[2] = "5q(l7<32}X/:[p5Q";
      arg1[3] = "";
      ExceptionDiagnosis exceptionDiagnosis = new ExceptionDiagnosis(arg0, arg1);
      String stackLineHashAsHex = exceptionDiagnosis.getStackLineHashAsHex();
      assertEquals("4c68b7df", stackLineHashAsHex);
  }
}
