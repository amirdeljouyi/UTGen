/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 20 15:09:32 GMT 2024
 */

package twitter4j;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import twitter4j.GeoLocation;
import twitter4j.GeoQuery;
import twitter4j.HttpParameter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GeoQuery_Original_ESTest extends GeoQuery_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGranularityReturningGeoQueryWhereGetMaxResultsIsZero() throws Throwable  {
      GeoQuery geoQuery = new GeoQuery("png");
      assertEquals((-1), geoQuery.getMaxResults());
      
      GeoQuery maxResults = geoQuery.maxResults(0);
      maxResults.granularity("");
      assertEquals(0, geoQuery.getMaxResults());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGranularityReturningGeoQueryWhereGetMaxResultsIsPositive() throws Throwable  {
      GeoQuery geoQuery = new GeoQuery((GeoLocation) null);
      GeoQuery maxResults = geoQuery.maxResults(148);
      maxResults.granularity("qR");
      assertEquals(148, geoQuery.getMaxResults());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetQueryReturningNonEmptyString() throws Throwable  {
      GeoQuery geoQuery = new GeoQuery((GeoLocation) null);
      geoQuery.setQuery("v");
      geoQuery.getQuery();
      assertEquals((-1), geoQuery.getMaxResults());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxResultsReturningZero() throws Throwable  {
      GeoQuery geoQuery = new GeoQuery("");
      assertEquals((-1), geoQuery.getMaxResults());
      
      geoQuery.maxResults(0);
      int maxResults = geoQuery.getMaxResults();
      assertEquals(0, maxResults);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxResultsReturningPositive() throws Throwable  {
      GeoLocation arg0 = new GeoLocation((-1.0), 0.0);
      GeoQuery geoQuery = new GeoQuery(arg0);
      geoQuery.maxResults(4621);
      int maxResults = geoQuery.getMaxResults();
      assertEquals(4621, maxResults);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLocationReturningGeoLocationWhereGetLongitudeIsNegative() throws Throwable  {
      GeoLocation arg0 = new GeoLocation(1946.0, (-1.0));
      GeoQuery geoQuery = new GeoQuery(arg0);
      geoQuery.getLocation();
      assertEquals((-1), geoQuery.getMaxResults());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLocationReturningGeoLocationWhereGetLatitudeIsZero() throws Throwable  {
      GeoLocation arg0 = new GeoLocation();
      GeoQuery geoQuery = new GeoQuery(arg0);
      geoQuery.getLocation();
      assertEquals((-1), geoQuery.getMaxResults());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLocationReturningGeoLocationWhereGetLongitudeIsPositive() throws Throwable  {
      GeoLocation arg0 = new GeoLocation(1526.465221193, 1526.465221193);
      GeoQuery geoQuery = new GeoQuery(arg0);
      geoQuery.getLocation();
      assertEquals((-1), geoQuery.getMaxResults());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLocationReturningGeoLocationWhereGetLatitudeIsNegative() throws Throwable  {
      GeoLocation arg0 = new GeoLocation((-1.0), 0.0);
      GeoQuery geoQuery = new GeoQuery(arg0);
      geoQuery.getLocation();
      assertEquals((-1), geoQuery.getMaxResults());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIpReturningNull() throws Throwable  {
      GeoLocation arg0 = new GeoLocation(1946.0, (-1.0));
      GeoQuery geoQuery = new GeoQuery(arg0);
      geoQuery.getIp();
      assertEquals((-1), geoQuery.getMaxResults());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIpReturningNonEmptyString() throws Throwable  {
      GeoQuery geoQuery = new GeoQuery("v");
      geoQuery.getIp();
      assertEquals((-1), geoQuery.getMaxResults());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetGranularityReturningNonEmptyString() throws Throwable  {
      GeoLocation arg0 = new GeoLocation();
      GeoQuery geoQuery = new GeoQuery(arg0);
      geoQuery.granularity("9nfv%~PV-V");
      geoQuery.getGranularity();
      assertEquals((-1), geoQuery.getMaxResults());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetGranularityReturningEmptyString() throws Throwable  {
      GeoLocation arg0 = new GeoLocation();
      GeoQuery geoQuery = new GeoQuery(arg0);
      geoQuery.setGranularity("");
      geoQuery.getGranularity();
      assertEquals((-1), geoQuery.getMaxResults());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAccuracyReturningNonEmptyString() throws Throwable  {
      GeoLocation arg0 = new GeoLocation((-1.0), 0.0);
      GeoQuery geoQuery = new GeoQuery(arg0);
      GeoQuery accuracy = geoQuery.accuracy("image/png");
      accuracy.getAccuracy();
      assertEquals((-1), accuracy.getMaxResults());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAccuracyReturningEmptyString() throws Throwable  {
      GeoLocation arg0 = new GeoLocation();
      GeoQuery geoQuery = new GeoQuery(arg0);
      GeoQuery accuracy = geoQuery.accuracy("");
      accuracy.getAccuracy();
      assertEquals((-1), accuracy.getMaxResults());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAsHttpParameterArrayReturningEmptyArray() throws Throwable  {
      GeoQuery geoQuery = new GeoQuery((GeoLocation) null);
      HttpParameter[] asHttpParameterArray = geoQuery.asHttpParameterArray();
      assertEquals((-1), geoQuery.getMaxResults());
      assertEquals(0, asHttpParameterArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAccuracyReturningGeoQueryWhereGetMaxResultsIsZero() throws Throwable  {
      GeoQuery geoQuery = new GeoQuery("png");
      assertEquals((-1), geoQuery.getMaxResults());
      
      geoQuery.maxResults(0);
      geoQuery.accuracy("%2a");
      assertEquals(0, geoQuery.getMaxResults());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetGranularity() throws Throwable  {
      GeoLocation arg0 = new GeoLocation();
      GeoQuery geoQuery = new GeoQuery(arg0);
      geoQuery.setGranularity("");
      geoQuery.hashCode();
      assertEquals((-1), geoQuery.getMaxResults());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashCode() throws Throwable  {
      GeoLocation arg0 = new GeoLocation(1946.0, (-1.0));
      GeoQuery geoQuery = new GeoQuery(arg0);
      geoQuery.setAccuracy("GeoQuery{location=GeoLocation{latitude=-1.0, longitude=-428.0}, query='Cr~Xdq@', ip='null', accuracy='null', granularity='null', maxResults=-1}");
      geoQuery.hashCode();
      assertEquals((-1), geoQuery.getMaxResults());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesGeoQueryTakingStringAndCallsHashCode() throws Throwable  {
      GeoQuery geoQuery = new GeoQuery("");
      geoQuery.hashCode();
      assertEquals((-1), geoQuery.getMaxResults());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetGranularityWithNonEmptyString() throws Throwable  {
      GeoQuery geoQuery = new GeoQuery("A:m5.7ZsBRF%");
      GeoQuery arg0 = new GeoQuery("A:m5.7ZsBRF%");
      geoQuery.setGranularity("ME]G15T|");
      assertFalse(geoQuery.equals((Object)arg0));
      
      arg0.granularity("ME]G15T|");
      boolean equals = geoQuery.equals(arg0);
      assertTrue(geoQuery.equals((Object)arg0));
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEquals() throws Throwable  {
      GeoQuery geoQuery = new GeoQuery("A:m5.7ZsBRF%");
      GeoQuery arg0 = new GeoQuery("A:m5.7ZsBRF%");
      assertTrue(arg0.equals((Object)geoQuery));
      
      arg0.setAccuracy("A:m5.7ZsBRF%");
      boolean equals = geoQuery.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesGeoQueryTakingGeoLocationAndCallsEquals() throws Throwable  {
      GeoLocation arg0 = new GeoLocation();
      GeoQuery geoQuery = new GeoQuery(arg0);
      boolean equals = geoQuery.equals("");
      assertEquals((-1), geoQuery.getMaxResults());
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsWithNull() throws Throwable  {
      GeoQuery geoQuery = new GeoQuery("n\"F");
      boolean equals = geoQuery.equals((Object) null);
      assertFalse(equals);
      assertEquals((-1), geoQuery.getMaxResults());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningTrue() throws Throwable  {
      GeoQuery arg0 = new GeoQuery("n\"F");
      boolean equals = arg0.equals(arg0);
      assertTrue(equals);
      assertEquals((-1), arg0.getMaxResults());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMaxResults() throws Throwable  {
      GeoLocation arg0 = new GeoLocation();
      GeoQuery geoQuery = new GeoQuery(arg0);
      geoQuery.maxResults(647);
      geoQuery.asHttpParameterArray();
      assertEquals(647, geoQuery.getMaxResults());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAsHttpParameterArray() throws Throwable  {
      GeoQuery geoQuery = new GeoQuery("GeoLocation{latitude=0.0, longitude=0.0}");
      HttpParameter[] asHttpParameterArray = geoQuery.asHttpParameterArray();
      assertEquals((-1), geoQuery.getMaxResults());
      assertEquals(1, asHttpParameterArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLocationReturningNull() throws Throwable  {
      GeoQuery geoQuery = new GeoQuery((GeoLocation) null);
      geoQuery.getLocation();
      assertEquals((-1), geoQuery.getMaxResults());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMaxResultsReturningGeoQueryWhereGetMaxResultsIsNegative() throws Throwable  {
      GeoLocation arg0 = new GeoLocation((-1.0), 0.0);
      GeoQuery geoQuery = new GeoQuery(arg0);
      geoQuery.maxResults((-1511));
      assertEquals((-1511), geoQuery.getMaxResults());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetGranularityReturningNull() throws Throwable  {
      GeoLocation arg0 = new GeoLocation();
      GeoQuery geoQuery = new GeoQuery(arg0);
      geoQuery.getGranularity();
      assertEquals((-1), geoQuery.getMaxResults());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetMaxResults() throws Throwable  {
      GeoQuery geoQuery = new GeoQuery((GeoLocation) null);
      geoQuery.setMaxResults(650);
      assertEquals(650, geoQuery.getMaxResults());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAccuracyReturningNull() throws Throwable  {
      GeoLocation arg0 = new GeoLocation(1946.0, (-1.0));
      GeoQuery geoQuery = new GeoQuery(arg0);
      geoQuery.getAccuracy();
      assertEquals((-1), geoQuery.getMaxResults());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIpReturningEmptyString() throws Throwable  {
      GeoQuery geoQuery = new GeoQuery("");
      geoQuery.getIp();
      assertEquals((-1), geoQuery.getMaxResults());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetQueryReturningEmptyString() throws Throwable  {
      GeoQuery geoQuery = new GeoQuery("");
      geoQuery.setQuery("");
      geoQuery.getQuery();
      assertEquals((-1), geoQuery.getMaxResults());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxResultsReturningNegative() throws Throwable  {
      GeoQuery geoQuery = new GeoQuery("n\"F");
      int maxResults = geoQuery.getMaxResults();
      assertEquals((-1), maxResults);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetQueryReturningNull() throws Throwable  {
      GeoLocation arg0 = new GeoLocation(1946.0, (-1.0));
      GeoQuery geoQuery = new GeoQuery(arg0);
      geoQuery.getQuery();
      assertEquals((-1), geoQuery.getMaxResults());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToString() throws Throwable  {
      GeoQuery geoQuery = new GeoQuery("A:m5.7ZsBRF%");
      String string = geoQuery.toString();
      assertEquals("GeoQuery{location=null, query='null', ip='A:m5.7ZsBRF%', accuracy='null', granularity='null', maxResults=-1}", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGranularity() throws Throwable  {
      GeoQuery geoQuery = new GeoQuery("A:m5.7ZsBRF%");
      GeoQuery granularity = geoQuery.granularity("A:m5.7ZsBRF%");
      GeoQuery arg0 = new GeoQuery("A:m5.7ZsBRF%");
      boolean equals = granularity.equals(arg0);
      assertEquals((-1), arg0.getMaxResults());
      assertFalse(equals);
  }
}
