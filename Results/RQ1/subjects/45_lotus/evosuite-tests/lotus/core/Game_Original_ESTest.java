/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 21 01:57:57 GMT 2024
 */

package lotus.core;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import lotus.UI.console.LocalConsoleUserInterface;
import lotus.core.CardCollection;
import lotus.core.Game;
import lotus.core.Player;
import lotus.core.card.Card;
import lotus.core.card.Instant;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Game_Original_ESTest extends Game_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGivePriorityToCurrentPlayerThrowsNullPointerException() throws Throwable  {
      // Undeclared exception!
      try { 
        Game.givePriorityToCurrentPlayer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("lotus.core.Game", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPlayingPlayer() throws Throwable  {
      Player arg0 = Game.getPlayingPlayer();
      Player otherPlayer = Game.getOtherPlayer(arg0);
      assertNull(otherPlayer);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testInit() throws Throwable  {
      LocalConsoleUserInterface arg1 = new LocalConsoleUserInterface();
      CardCollection arg5 = new CardCollection();
      Instant arg0 = new Instant();
      arg5.add((Card) arg0);
      Game.init(arg1, arg1, "", "WftGQ", arg5, arg5);
      assertFalse(arg5.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetOtherPlayerReturningNonNull() throws Throwable  {
      Player otherPlayer = Game.getOtherPlayer((Player) null);
      assertNull(otherPlayer);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesGame() throws Throwable  {
      Game game = new Game();
      assertEquals(0, Game.playingPlayer);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNonPlayingPlayer() throws Throwable  {
      Player nonPlayingPlayer = Game.getNonPlayingPlayer();
      assertNull(nonPlayingPlayer);
  }
}
