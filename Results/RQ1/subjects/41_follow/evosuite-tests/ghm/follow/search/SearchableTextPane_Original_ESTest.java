/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 21 01:25:52 GMT 2024
 */

package ghm.follow.search;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import ghm.follow.search.LineResult;
import ghm.follow.search.SearchableTextPane;
import java.awt.Font;
import java.io.StringReader;
import java.text.AttributedCharacterIterator;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SearchableTextPane_Original_ESTest extends SearchableTextPane_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSearchTaking2ArgumentsReturningZero() throws Throwable  {
      SearchableTextPane searchableTextPane = new SearchableTextPane((Font) null, 2721);
      int search = searchableTextPane.search("", (-1));
      assertEquals(0, search);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSearchTaking2ArgumentsReturningPositive() throws Throwable  {
      SearchableTextPane searchableTextPane = new SearchableTextPane((Font) null, 2363);
      StringReader arg0 = new StringReader("^ckF*#T]P0i%b+");
      AttributedCharacterIterator.Attribute arg1 = AttributedCharacterIterator.Attribute.READING;
      searchableTextPane.read(arg0, arg1);
      int search = searchableTextPane.search("", 1);
      assertEquals(1, search);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSearchTakingStringReturningPositive() throws Throwable  {
      SearchableTextPane searchableTextPane = new SearchableTextPane((Font) null, (-2180));
      StringReader arg0 = new StringReader("JXi~H=w1q=:xz^\"A!");
      searchableTextPane.read(arg0, (Object) null);
      int search = searchableTextPane.search("=");
      assertEquals(5, search);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveHighlights() throws Throwable  {
      SearchableTextPane searchableTextPane = new SearchableTextPane((Font) null, 0);
      searchableTextPane.removeHighlights();
      assertFalse(searchableTextPane.isFocusCycleRoot());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHighlightReturningListWhereIsEmptyIsTrue() throws Throwable  {
      SearchableTextPane searchableTextPane = new SearchableTextPane((Font) null, (-2180));
      List<LineResult> highlight = searchableTextPane.highlight("xo@EO", (-147));
      assertTrue(highlight.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHighlightWithEmptyStringAndZero() throws Throwable  {
      SearchableTextPane searchableTextPane = new SearchableTextPane((Font) null, 0);
      List<LineResult> highlight = searchableTextPane.highlight("", 0);
      assertTrue(highlight.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetScrollableTracksViewportWidth() throws Throwable  {
      SearchableTextPane searchableTextPane = new SearchableTextPane((Font) null, (-2180));
      boolean scrollableTracksViewportWidth = searchableTextPane.getScrollableTracksViewportWidth();
      assertTrue(scrollableTracksViewportWidth);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSearchTaking2ArgumentsReturningNegative() throws Throwable  {
      SearchableTextPane searchableTextPane = new SearchableTextPane((Font) null, (-2180));
      int search = searchableTextPane.search("JXi~H=w1q=:xz^\"A!", 0);
      assertEquals((-1), search);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHighlightReturningListWhereIsEmptyIsFalse() throws Throwable  {
      SearchableTextPane searchableTextPane = new SearchableTextPane((Font) null, (-2180));
      StringReader arg0 = new StringReader("JXi~H=w1q=:xz^\"A!");
      searchableTextPane.read(arg0, (Object) null);
      List<LineResult> highlight = searchableTextPane.highlight("=", (-147));
      assertEquals(1, highlight.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSearchTakingStringReturningNegative() throws Throwable  {
      SearchableTextPane searchableTextPane = new SearchableTextPane((Font) null, (-1060));
      int search = searchableTextPane.search((String) null);
      assertEquals((-1), search);
  }
}
