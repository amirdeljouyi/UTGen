/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 20 23:56:37 GMT 2024
 */

package jipa;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import jipa.Main;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Main_ESTest extends Main_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsNumericReturningFalse() throws Throwable  {
      // Test that the method returns false for a non-numeric string
      boolean actualResult = Main.isNumeric("df");
      assertFalse(actualResult);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValueReturningZero() throws Throwable  {
      // Test the getValue() method of the Main class
      // with a string that is too long to fit in a single byte.
      int value = Main.getValue("abcdefghijklmnopqrstuvwxyz");
      assertEquals(0, value);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFileNameReturningNonEmptyString() throws Throwable  {
      // Given: The system is initialized with a file named "file1.txt"
      SystemInUtil.addInputLine("file1.txt");
      
      // When: The user requests the filename
      String fileName = Main.getFileName();
      
      // Then: The system returns the name of the file that was provided as input
      assertEquals("file1.txt", fileName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFileNameReturningEmptyString() throws Throwable  {
      // Given a system input with no filename
      SystemInUtil.addInputLine("");
      
      // When the method to get the filename is called
      String fileName = Main.getFileName();
      
      // Then an empty string should be returned
      assertEquals("", fileName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetJumpValueReturningNegative() throws Throwable  {
      // No Comments were added
      int jumpValue = Main.getJumpValue("jump");
      assertEquals((-2), jumpValue);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValueReturningPositive() throws Throwable  {
      // No Comments were added
      int value = Main.getValue("4");
      assertEquals(4, value);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValueReturningNegative() throws Throwable  {
      // No Comments were added
      int value = Main.getValue("*");
      assertEquals((-1), value);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSplitArgumentsWithEmptyString() throws Throwable  {
      // Test that splitting an empty string returns a single-element array with an empty string
      String[] splitArguments = Main.splitArguments("");
      assertEquals(1, splitArguments.length);
      assertEquals("", splitArguments[0]);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testResetInstructions() throws Throwable  {
      // No Comments were added
      Main.resetInstructions();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveCommentReturningEmptyString() throws Throwable  {
      // Test that an empty string is returned for an empty input string
      String removeComment = Main.removeComment("");
      assertEquals("", removeComment);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLoadInstructionsReturningTrue() throws Throwable  {
      // Given: a valid EvoSuiteFile and byte array
      EvoSuiteFile evosuiteFile = new EvoSuiteFile("d0b=N?l");
      byte[] data = new byte[1];
      
      // When: appendDataToFile is called with the valid input
      boolean result = FileSystemHandling.appendDataToFile(evosuiteFile, data);
      
      // Then: assert that the method returns true
      assertTrue(result);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLoadInstructionsReturningFalse() throws Throwable  {
      // Test that the "loadInstructions" method returns false when the user enters nothing for their name.
      boolean loadInstructions = Main.loadInstructions("Please enter your name: ");
      assertFalse(loadInstructions);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLoadInstructionsThrowsNoSuchElementException() throws Throwable  {
      // Test for when the input is an empty string, expecting a NoSuchElementException to be thrown.
      try {
      Main.loadInstructions("");
      fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
      // Verify that the correct exception was thrown, and provide a comment explaining the intent of this test case.
      verifyException("java.util.Scanner", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToOpcode() throws Throwable  {
      // Test that the toOpcode method returns the correct Opcode object for a given String value
      Main.opcodes opcode = Main.opcodes.toOpcode("LDC");
      assertEquals(Main.opcodes.novalue, opcode);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsNumericReturningTrue() throws Throwable  {
      // Test that the "isNumeric" method can correctly identify numbers with different number of digits and radix
      boolean numeric = Main.isNumeric("1234567890");
      assertTrue(numeric);
      
      // Test that the "isNumeric" method can correctly identify negative numbers
      numeric = Main.isNumeric("-1234567890");
      assertTrue(numeric);
      
      // Test that the "isNumeric" method can correctly identify positive numbers
      numeric = Main.isNumeric("+1234567890");
      assertTrue(numeric);
      
      // Test that the "isNumeric" method can correctly identify scientific notation numbers
      numeric = Main.isNumeric("123E-10");
      assertTrue(numeric);
      
      // Test that the "isNumeric" method can correctly identify hexadecimal numbers
      numeric = Main.isNumeric("0xff");
      assertTrue(numeric);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStringValueReturningEmptyString() throws Throwable  {
      // No Comments were added
      String stringValue = Main.getStringValue("\"");
      assertEquals("", stringValue);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStringValue0() throws Throwable  {
      // No Comments were added
      String stringValue = Main.getStringValue("\"2\"HwC?");
      assertEquals("20", stringValue);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStringValue1() throws Throwable  {
      // No Comments were added
      String stringValue = Main.getStringValue("ig/w1x5i>+n");
      assertEquals("0", stringValue);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadValue0() throws Throwable  {
      // This test is designed to verify that the program can properly read a value of 0 from standard input.
      SystemInUtil.addInputLine("0");
      int readValue = Main.readValue();
      assertEquals(0, readValue);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadValue1() throws Throwable  {
      // Given a user input of "12345678901234567890"
      SystemInUtil.addInputLine("12345678901234567890");
      
      // When the readValue() method is called
      int readValue = Main.readValue();
      
      // Then the value returned should be 0, as the input string is longer than 10 characters
      assertEquals(0, readValue);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStringValue2() throws Throwable  {
      // No Comments were added
      String stringValue = Main.getStringValue("8\"W3j,>^?<TY{");
      assertEquals("80", stringValue);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSplitArguments0() throws Throwable  {
      // No Comments were added
      String[] splitArguments = Main.splitArguments("!@#$%^&*()_+-=[]{}|;':\"<>,./?`~");
      assertEquals(1, splitArguments.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSplitArguments1() throws Throwable  {
      // No Comments were added
      String[] splitArguments = Main.splitArguments("qBSfJjW\"[b 7\"QIe,*");
      assertEquals(2, splitArguments.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveComment0() throws Throwable  {
      // No Comments were added
      String removeComment = Main.removeComment("&Sah^sA;hOV\"DY");
      assertEquals("&Sah^sA;hOV\"DY", removeComment);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveComment1() throws Throwable  {
      // No Comments were added
      String removeComment = Main.removeComment("^[@%Z'kV_-;");
      assertEquals("^[@%Z'kV_-", removeComment);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLoadInstructionsThrowsSystemExitException() throws Throwable  {
      // Given a method that loads instructions from a file
      // When the file path is invalid (e.g., a non-existent file)
      try {
      Main.loadInstructions("q");
      fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
      // Then the method should throw an exception with a message indicating the invalid file path
      verifyException("org.evosuite.runtime.System", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsArrayIndexOutOfBoundsException0() throws Throwable  {
      try {
      Main.processInstruction("cmp");
      fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      // This exception is expected, as the instruction "cmp" is not supported by the program.
      verifyException("jipa.Main", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException0() throws Throwable  {
      // Undeclared exception!
      try {
      Main.processInstruction("jne");
      fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      //
      // Check if the thrown exception is an instance of "jipa.Variable"
      //
      verifyException("jipa.Variable", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException1() throws Throwable  {
      // Given: A instruction "je" that is not in the allowed list of instructions
      
      // When: The instruction is processed
      
      // Then: A NullPointerException should be thrown with a message indicating the invalid instruction
      
      try {
      Main.processInstruction("je");
      
      fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      
      verifyException("jipa.Variable", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException2() throws Throwable  {
      // Test that an exception is thrown when trying to execute a "jz" instruction with a null variable as the condition
      try {
      Main.processInstruction("jz"); // Try to execute a "jz" instruction with a null variable as the condition
      fail("Expecting exception: NullPointerException");
      } catch (NullPointerException e) {
      // Verify that the exception is thrown due to a null variable being passed as the condition
      verifyException("jipa.Variable", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException3() throws Throwable  {
      // No Comments were added
      // Undeclared exception!
      try { 
        Main.processInstruction("jbe");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jipa.Variable", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException4() throws Throwable  {
      // Test for correct handling of invalid instruction "jb"
      try {
      Main.processInstruction("jb");
      fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      // Verify that the exception is related to the expected variable type (jipa.Variable)
      verifyException("jipa.Variable", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException5() throws Throwable  {
      // Ensure that the program throws a NullPointerException when attempting to execute an invalid instruction
      try {
      Main.processInstruction("jae");
      fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      //
      // no message in exception (getMessage() returned null)
      //
      verifyException("jipa.Variable", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException6() throws Throwable  {
      // Test that a NullPointerException is thrown when passing a null argument to the processInstruction method
      
      try {
      Main.processInstruction(null);
      fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      // no message in exception (getMessage() returned null)
      verifyException("jipa.Variable", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException7() throws Throwable  {
      // Undeclared exception!
      try {
      Main.processInstruction("jnz");
      fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      // This block of code is responsible for verifying the expected behavior when a null pointer exception occurs
      
      // Verify that the variable "jipa.Variable" is in the message of the exception, which indicates that the instruction was not found
      verifyException("jipa.Variable", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException8() throws Throwable  {
      // No Comments were added
      // Undeclared exception!
      try { 
        Main.processInstruction("AND");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jipa.Variable", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException9() throws Throwable  {
      // Test that an exception is thrown when trying to process an invalid instruction
      try {
      Main.processInstruction("OR"); // Try to process the "OR" instruction
      fail("Expecting exception: NullPointerException"); // If no exception is thrown, this will fail the test
      
      } catch(NullPointerException e) {
      // Verify that the exception is of type jipa.Variable and has a null message
      verifyException("jipa.Variable", e);
      assertNull(e.getMessage());}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException10() throws Throwable  {
      // No Comments were added
      // Undeclared exception!
      try { 
        Main.processInstruction("xor");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jipa.Variable", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException11() throws Throwable  {
      // No Comments were added
      // Undeclared exception!
      try { 
        Main.processInstruction("mod");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jipa.Variable", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException12() throws Throwable  {
      // No Comments were added
      // Undeclared exception!
      try { 
        Main.processInstruction("div");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jipa.Variable", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException13() throws Throwable  {
      try {
      Main.processInstruction("mul");
      fail("Expecting exception: NullPointerException");
      } catch (NullPointerException e) {
      // Verify that the exception is of type jipa.Variable
      verifyException("jipa.Variable", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException14() throws Throwable  {
      // No Comments were added
      // Undeclared exception!
      try { 
        Main.processInstruction("sub");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jipa.Variable", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException15() throws Throwable  {
      // No Comments were added
      // Undeclared exception!
      try { 
        Main.processInstruction("add");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jipa.Variable", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException16() throws Throwable  {
      try {
      Main.processInstruction("dec");
      fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      // Verify that the exception is of type "jipa.Variable" and that there is no message in the exception (getMessage() returned null).
      verifyException("jipa.Variable", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException17() throws Throwable  {
      try {
      Main.processInstruction("inc");
      fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      //
      // no message in exception (getMessage() returned null)
      //
      verifyException("jipa.Variable", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException18() throws Throwable  {
      // No Comments were added
      // Undeclared exception!
      try { 
        Main.processInstruction("var");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jipa.Variable", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException19() throws Throwable  {
      // Test for the correct behavior when a NullPointerException is thrown by the processInstruction method
      try {
      Main.processInstruction("arr");
      fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      //
      // Verify that the expected exception was thrown and that it has the correct type
      verifyException("jipa.Variable", e);
      
      //
      // Verify that the message in the exception is null (as expected)
      assertEquals(null, e.getMessage());}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException20() throws Throwable  {
      // Given a Main class with a processInstruction method that expects a String argument
      // and a variable with the name "jipa.Variable" defined in the system properties
      System.setProperty("jipa.Variable", "some value");
      
      // When the processInstruction method is called with the "del" instruction
      try {
      Main.processInstruction("del");
      fail("Expecting exception: NullPointerException");
      } catch (NullPointerException e) {
      // Then a NullPointerException should be thrown because the variable with the name "jipa.Variable" is not defined in the system properties
      verifyException("jipa.Variable", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsArrayIndexOutOfBoundsException1() throws Throwable  {
      try {
      Main.processInstruction("set");
      fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch (ArrayIndexOutOfBoundsException e) {
      // This is the expected behavior, as the instruction 'set' requires a value to be set and there is no value provided.
      verifyException("jipa.Main", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsArrayIndexOutOfBoundsException2() throws Throwable  {
      // rollbacked to evosuite
      // Undeclared exception!
      try { 
        Main.processInstruction("cpy");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jipa.Main", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsArrayIndexOutOfBoundsException3() throws Throwable  {
      // Given a valid input string "mov" for the instruction,
      // When the processInstruction method is called with this input,
      // Then an ArrayIndexOutOfBoundsException should be thrown.
      
      try {
      Main.processInstruction("mov");
      fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      //
      // 1
      //
      verifyException("jipa.Main", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNoSuchElementException() throws Throwable  {
      // Undeclared exception!
      try {
      Main.processInstruction("in");
      fail("Expecting exception: NoSuchElementException");
      } catch (NoSuchElementException e) {
      verifyException("java.util.Scanner", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsNullPointerException21() throws Throwable  {
      // rollbacked to evosuite
      // Undeclared exception!
      try { 
        Main.processInstruction("out");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jipa.Main", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstructionThrowsSystemExitException() throws Throwable  {
      // rollbacked to evosuite
      // Undeclared exception!
      try { 
        Main.processInstruction("halt");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstruction0() throws Throwable  {
      // rollbacked to evosuite
      Main.processInstruction("jump to next element");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMainThrowsTooManyResourcesException() throws Throwable  {
      // rollbacked to evosuite
      String[] arg0 = new String[1];
      arg0[0] = "jipa.Label";
      // Undeclared exception!
      Main.main(arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMainThrowsNoSuchElementException() throws Throwable  {
      // Test the Main method with an empty array of arguments
      String[] arg0 = new String[0];
      
      // Expecting exception: NoSuchElementException
      try {
      Main.main(arg0);
      fail("No line found");
      } catch (NoSuchElementException e) {
      // Verify that the correct exception was thrown
      verifyException("java.util.Scanner", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testProcessInstruction1() throws Throwable  {
      // No Comments were added
      Main.processInstruction("jmp");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMain() throws Throwable  {
      // Given: A new instance of the Main class
      Main main = new Main();
      
      // When: The value of iPtr is accessed
      int iPtrValue = Main.iPtr;
      
      // Then: The value of iPtr should be 0
      assertEquals(0, iPtrValue);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetJumpValueReturningPositive() throws Throwable  {
      // Given: a method called getJumpValue with an input string "100"
      // When: the method is invoked with the input "100"
      int jumpValue = Main.getJumpValue("100");
      
      // Then: the method returns a value of 99
      assertEquals(99, jumpValue);
  }
}
