/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Mon Mar 18 08:27:31 GMT 2024
 */

package jigl.image.ops;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import jigl.image.ColorModel;
import jigl.image.ops.Shift;
import jigl.image.types.ColorImage;
import jigl.image.types.GrayImage;
import jigl.image.types.ImageKernel;
import jigl.image.types.InterpolatedColorImage;
import jigl.image.types.InterpolatedGrayImage;
import jigl.image.types.InterpolatedRealColorImage;
import jigl.image.types.RealColorImage;
import jigl.image.types.RealGrayImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Shift_Original_ESTest extends Shift_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testApplyTakingRealGrayImageReturningRealGrayImageWhereXIsZero() throws Throwable  {
      Shift shift = new Shift((-692), (-692), (-692));
      RealGrayImage arg0 = new RealGrayImage(0, 0);
      RealGrayImage apply = shift.apply(arg0);
      assertNotSame(arg0, apply);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testApplyTakingGrayImageReturningGrayImageWhereYIsZero() throws Throwable  {
      Shift shift = new Shift(1806, 1806, 1806);
      GrayImage arg0 = new GrayImage(1, 0);
      GrayImage apply = shift.apply(arg0);
      assertEquals(0, apply.Y());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testApplyTakingGrayImage() throws Throwable  {
      Shift shift = new Shift(1800, 1800, 1800);
      InterpolatedGrayImage arg0 = new InterpolatedGrayImage(1, 1);
      GrayImage apply = shift.apply((GrayImage) arg0);
      assertEquals(1, apply.X());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testApplyTakingRealColorImage0() throws Throwable  {
      Shift shift = new Shift((-17), (-17), (-17));
      InterpolatedRealColorImage arg0 = new InterpolatedRealColorImage(188, 1);
      RealColorImage apply = shift.apply((RealColorImage) arg0);
      assertEquals(1, apply.Y());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testApplyTakingRealGrayImageReturningRealGrayImageWhereSqrSumIsPositive() throws Throwable  {
      Shift shift = new Shift((-2749), (-441), 1);
      ImageKernel arg0 = new ImageKernel((-446.95F), 1);
      RealGrayImage apply = shift.apply((RealGrayImage) arg0);
      assertEquals((-446.95F), apply.addSum(), 0.01F);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testApplyTakingRealGrayImage() throws Throwable  {
      Shift shift = new Shift(1, (-3863), 1);
      ImageKernel arg0 = new ImageKernel(0.0F, 1);
      RealGrayImage apply = shift.apply((RealGrayImage) arg0);
      assertEquals(0.0, apply.sqrSum(), 0.01);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testApplyTakingRealColorImage1() throws Throwable  {
      RealColorImage arg0 = new RealColorImage(10, 10);
      Shift shift = new Shift(1, 375, 1);
      RealColorImage apply = shift.apply(arg0);
      assertEquals(ColorModel.RGB, apply.getColorModel());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testApplyTakingGrayImageThrowsNullPointerException() throws Throwable  {
      Shift shift = new Shift(8, 8, 8);
      GrayImage arg0 = new GrayImage(31, 31);
      // Undeclared exception!
      try { 
        shift.apply(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testApplyTakingColorImage() throws Throwable  {
      Shift shift = new Shift(20, 20, 20);
      InterpolatedColorImage arg0 = new InterpolatedColorImage(9990, 1);
      ColorImage apply = shift.apply((ColorImage) arg0);
      assertEquals(1, apply.Y());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testApplyTakingColorImageReturningColorImageWhereXIsPositive() throws Throwable  {
      Shift shift = new Shift(10, (-897), 1360);
      ColorImage arg0 = new ColorImage(525, 1);
      ColorImage apply = shift.apply(arg0);
      assertNotSame(apply, arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testApplyTakingColorImageThrowsNullPointerException0() throws Throwable  {
      Shift shift = new Shift((-441), 1347, 1);
      InterpolatedColorImage arg0 = new InterpolatedColorImage(1, 35);
      // Undeclared exception!
      try { 
        shift.apply((ColorImage) arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testApplyTakingColorImageThrowsNullPointerException1() throws Throwable  {
      Shift shift = new Shift(1, 1, 1);
      ColorImage arg0 = new ColorImage(1, 1);
      // Undeclared exception!
      try { 
        shift.apply(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testApplyTakingColorImageThrowsNullPointerException2() throws Throwable  {
      Shift shift = new Shift((-441), (-441), 1);
      InterpolatedColorImage arg0 = new InterpolatedColorImage(1, 35);
      // Undeclared exception!
      try { 
        shift.apply((ColorImage) arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testApplyTakingGrayImageReturningGrayImageWhereXIsZero() throws Throwable  {
      Shift shift = new Shift(1, 1, 1);
      InterpolatedGrayImage arg0 = new InterpolatedGrayImage(0, 1);
      GrayImage apply = shift.apply((GrayImage) arg0);
      assertEquals(1, apply.Y());
      assertEquals(0, apply.X());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testApplyTakingColorImageReturningColorImageWhereXIsZero() throws Throwable  {
      Shift shift = new Shift(1, 1, 1);
      ColorImage arg0 = new ColorImage(0, 0);
      ColorImage apply = shift.apply(arg0);
      assertNotSame(apply, arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testApplyTakingColorImageThrowsTooManyResourcesException() throws Throwable  {
      Shift shift = new Shift((-210), (-210), (-210));
      ColorImage arg0 = new ColorImage(1277, 1277);
      // Undeclared exception!
      shift.apply(arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testApplyTakingRealColorImageReturningRealColorImageWhereXIsZero() throws Throwable  {
      Shift shift = new Shift((-16777216), 0, 0);
      InterpolatedRealColorImage arg0 = new InterpolatedRealColorImage(0, 0);
      RealColorImage apply = shift.apply((RealColorImage) arg0);
      assertEquals(0, apply.Y());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testApplyTakingRealColorImageThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      InterpolatedRealColorImage arg0 = new InterpolatedRealColorImage(10, 10);
      Shift shift = new Shift((-1058), 10, 1);
      // Undeclared exception!
      try { 
        shift.apply((RealColorImage) arg0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testApplyTakingColorImageThrowsNullPointerException3() throws Throwable  {
      Shift shift = new Shift(1, (-2272), 1);
      ColorImage arg0 = new ColorImage(16, 2);
      // Undeclared exception!
      try { 
        shift.apply(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
