/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Mon Mar 18 06:12:49 GMT 2024
 */

package com.lts.swing.combobox;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lts.swing.combobox.SimpleComboBox;
import com.lts.swing.combobox.SimpleComboBoxModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SimpleComboBox_Original_ESTest extends SimpleComboBox_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetModel() throws Throwable  {
      SimpleComboBoxModel arg0 = new SimpleComboBoxModel();
      SimpleComboBox simpleComboBox = new SimpleComboBox(arg0);
      simpleComboBox.setModel(arg0);
      assertTrue(simpleComboBox.getFocusTraversalKeysEnabled());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSelectedValueReturningNonNull() throws Throwable  {
      SimpleComboBoxModel arg0 = new SimpleComboBoxModel();
      SimpleComboBox simpleComboBox = new SimpleComboBox(arg0);
      Object arg1 = simpleComboBox.getTreeLock();
      arg0.add((Object) null, arg1);
      Object selectedValue = simpleComboBox.getSelectedValue();
      assertFalse(selectedValue.equals((Object)simpleComboBox));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSelectedLongReturningPositive() throws Throwable  {
      SimpleComboBoxModel arg0 = new SimpleComboBoxModel();
      SimpleComboBox simpleComboBox = new SimpleComboBox(arg0);
      Byte arg1 = new Byte((byte)1);
      arg0.add((Object) null, arg1);
      long selectedLong = simpleComboBox.getSelectedLong();
      assertEquals(1L, selectedLong);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSelectedIntReturningPositive() throws Throwable  {
      SimpleComboBoxModel arg0 = new SimpleComboBoxModel();
      SimpleComboBox simpleComboBox = new SimpleComboBox(arg0);
      Byte arg1 = new Byte((byte)3);
      arg0.add((Object) null, arg1);
      int selectedInt = simpleComboBox.getSelectedInt();
      assertEquals(3, selectedInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSelectedValueReturningNull() throws Throwable  {
      SimpleComboBoxModel arg0 = new SimpleComboBoxModel();
      SimpleComboBox simpleComboBox = new SimpleComboBox(arg0);
      Object selectedValue = simpleComboBox.getSelectedValue();
      assertNull(selectedValue);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSelectedLongReturningZero() throws Throwable  {
      SimpleComboBoxModel arg0 = new SimpleComboBoxModel();
      Byte arg1 = new Byte((byte)0);
      SimpleComboBox simpleComboBox = new SimpleComboBox(arg0);
      arg0.add((Object) null, arg1);
      long selectedLong = simpleComboBox.getSelectedLong();
      assertEquals(0L, selectedLong);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSelectedLongReturningNegative() throws Throwable  {
      SimpleComboBoxModel arg0 = new SimpleComboBoxModel();
      SimpleComboBox simpleComboBox = new SimpleComboBox(arg0);
      long selectedLong = simpleComboBox.getSelectedLong();
      assertEquals((-1L), selectedLong);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSelectedLongThrowsIllegalArgumentException() throws Throwable  {
      SimpleComboBoxModel arg0 = new SimpleComboBoxModel();
      SimpleComboBox arg1 = new SimpleComboBox(arg0);
      arg0.add((Object) null, arg1);
      // Undeclared exception!
      try { 
        arg1.getSelectedLong();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.swing.combobox.SimpleComboBox", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSelectedIntReturningZero() throws Throwable  {
      SimpleComboBoxModel arg0 = new SimpleComboBoxModel();
      Byte arg1 = new Byte((byte)0);
      SimpleComboBox simpleComboBox = new SimpleComboBox(arg0);
      arg0.add((Object) null, arg1);
      int selectedInt = simpleComboBox.getSelectedInt();
      assertEquals(0, selectedInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSelectedIntThrowsIllegalArgumentException() throws Throwable  {
      SimpleComboBoxModel arg0 = new SimpleComboBoxModel();
      SimpleComboBox arg1 = new SimpleComboBox(arg0);
      arg0.add((Object) null, arg1);
      // Undeclared exception!
      try { 
        arg1.getSelectedInt();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.swing.combobox.SimpleComboBox", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSelectedIntReturningNegative() throws Throwable  {
      SimpleComboBoxModel arg0 = new SimpleComboBoxModel();
      SimpleComboBox simpleComboBox = new SimpleComboBox(arg0);
      int selectedInt = simpleComboBox.getSelectedInt();
      assertEquals((-1), selectedInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateSimpleComboBoxThrowsNullPointerException() throws Throwable  {
      SimpleComboBox simpleComboBox = null;
      try {
        simpleComboBox = new SimpleComboBox((SimpleComboBoxModel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
