/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 21 07:32:11 GMT 2024
 */

package fr.unice.gfarce.dao;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import fr.unice.gfarce.dao.OracleIdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OracleIdentiteDao_ESTest extends OracleIdentiteDao_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFindReturningNull() throws Throwable  {
      // No Comments were added
      OracleIdentiteDao oracleIdentiteDao = new OracleIdentiteDao();
      Identite.TypeIdentite arg4 = Identite.TypeIdentite.CANDIDAT;
      List<Identite> find = oracleIdentiteDao.find((String) null, (String) null, (String) null, "1-\"Dg", arg4);
      assertNull(find);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFindWithNull() throws Throwable  {
      // rollbacked to evosuite
      OracleIdentiteDao oracleIdentiteDao = new OracleIdentiteDao();
      List<Identite> find = oracleIdentiteDao.find("1-2345", (String) null, (String) null, (String) null, (Identite.TypeIdentite) null);
      assertNull(find);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDAO() throws Throwable  {
      // Arrange
      OracleIdentiteDao dAO = OracleIdentiteDao.getDAO();
      Identite.TypeIdentite arg4 = Identite.TypeIdentite.FORMATEUR;
      
      // Act
      List<Identite> find = dAO.find(null, ",bP", "", ".Uuk:>&p]>sHd", arg4);
      
      // Assert
      assertTrue(find.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFindRespForm() throws Throwable  {
      // Given
      OracleIdentiteDao oracleIdentiteDao = new OracleIdentiteDao();
      
      // When
      RespFormation[] findRespForm = oracleIdentiteDao.findRespForm("", "", (String) null, (String) null);
      
      // Then
      assertNull(findRespForm);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFindCandidat() throws Throwable  {
      // rollbacked to evosuite
      OracleIdentiteDao oracleIdentiteDao = new OracleIdentiteDao();
      Candidat[] findCandidat = oracleIdentiteDao.findCandidat((String) null, (String) null, (String) null, (String) null);
      assertNull(findCandidat);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDelete() throws Throwable  {
      // Given a candidate object
      Candidat candidate = new Candidat();
      
      // When the delete method is called on the OracleIdentiteDao class
      OracleIdentiteDao oracleIdentiteDao = new OracleIdentiteDao();
      oracleIdentiteDao.delete(candidate);
      
      // Then the candidate's bource should be 0
      assertEquals(0, candidate.getBource());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testUpdate() throws Throwable  {
      // No Comments were added
      OracleIdentiteDao oracleIdentiteDao = new OracleIdentiteDao();
      oracleIdentiteDao.update((Identite) null);
  }
}
