/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Mon Mar 18 09:16:11 GMT 2024
 */

package org.quickserver.util.xmlreader;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.QuickServer;
import org.quickserver.util.xmlreader.AccessConstraintConfig;
import org.quickserver.util.xmlreader.ApplicationConfiguration;
import org.quickserver.util.xmlreader.DBObjectPoolConfig;
import org.quickserver.util.xmlreader.InitServerHooks;
import org.quickserver.util.xmlreader.QSAdminServerConfig;
import org.quickserver.util.xmlreader.QuickServerConfig;
import org.quickserver.util.xmlreader.ServerHooks;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class QuickServerConfig_ESTest extends QuickServerConfig_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSecurityManagerClassReturningNonEmptyString() throws Throwable  {
      // Given
      QuickServer quickServer = new QuickServer();
      QuickServerConfig config = quickServer.getConfig();
      
      // When
      config.setSecurityManagerClass("v. ^c\u0003gIJ");
      String securityManagerClass = config.getSecurityManagerClass();
      
      // Then
      assertNotNull(securityManagerClass);
      assertEquals("QuickServer v2.0.0 RC1", config.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSecurityManagerClassReturningEmptyString() throws Throwable  {
      // Create a new QuickServer instance
      QuickServer quickServer = new QuickServer();
      
      // Get the QuickServer configuration object
      QuickServerConfig config = quickServer.getConfig();
      
      // Set the security manager class to an empty string
      config.setSecurityManagerClass("");
      
      // Get the security manager class from the configuration object
      String securityManagerClass = config.getSecurityManagerClass();
      
      // Assert that the name of the QuickServer is correct
      assertEquals("QuickServer v2.0.0 RC1", config.getName());
      
      // Assert that the security manager class is not null
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetQSAdminServerConfigReturningQSAdminServerConfigWhereGetCommunicationLoggingIsFalse() throws Throwable  {
      // Given: A new instance of the QuickServerConfig class with a valid timeout value
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      QSAdminServerConfig arg0 = new QSAdminServerConfig();
      quickServerConfig.setQSAdminServerConfig(arg0);
      arg0.setTimeout(-1310);
      
      // When: The getName method is called on the QuickServerConfig instance
      String name = quickServerConfig.getName();
      
      // Then: The method returns a string with the expected value
      assertEquals("QuickServer v2.0.0 RC1", name);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetQSAdminServerConfigReturningQSAdminServerConfigWhereGetCommunicationLoggingIsTrue() throws Throwable  {
      // rollbacked to evosuite
      QuickServer quickServer = new QuickServer();
      QuickServerConfig config = quickServer.getConfig();
      QSAdminServerConfig arg0 = new QSAdminServerConfig();
      arg0.setCommunicationLogging(true);
      config.setQSAdminServerConfig(arg0);
      config.getQSAdminServerConfig();
      assertEquals("QuickServer v2.0.0 RC1", config.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetInitServerHooksReturningInitServerHooksWhereIsEmptyIsTrue() throws Throwable  {
      // Given a QuickServerConfig object with an initialized InitServerHooks object
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      InitServerHooks initServerHooks = new InitServerHooks();
      quickServerConfig.setInitServerHooks(initServerHooks);
      
      // When the name of the server is retrieved
      String serverName = quickServerConfig.getName();
      
      // Then the expected name of the server is returned
      assertEquals("QuickServer v2.0.0 RC1", serverName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDBObjectPoolConfigReturningNonNull() throws Throwable  {
      // Given: A QuickServerConfig object has been created and a DBObjectPoolConfig object has been passed to it.
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      DBObjectPoolConfig arg0 = new DBObjectPoolConfig();
      quickServerConfig.setDBObjectPoolConfig(arg0);
      
      // When: The getDBObjectPoolConfig() method is called on the QuickServerConfig object.
      quickServerConfig.getDBObjectPoolConfig();
      
      // Then: The returned value should be the same as the DBObjectPoolConfig object that was passed to it.
      assertEquals(arg0, quickServerConfig.getDBObjectPoolConfig());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetConfigFileReturningEmptyString() throws Throwable  {
      // Create a new QuickServer instance with an empty string for the hostname
      QuickServer quickServer = new QuickServer("", 2908);
      
      // Get the config object from the QuickServer instance
      QuickServerConfig config = quickServer.getConfig();
      
      // Set the name of the config file to an empty string
      config.setConfigFile("");
      
      // Get the value of the name property of the config object
      String configName = config.getName();
      
      // Assert that the name of the config is "QuickServer v2.0.0 RC1"
      assertEquals("QuickServer v2.0.0 RC1", configName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetApplicationJarPathReturningNonEmptyString() throws Throwable  {
      // Given a QuickServerConfig with a set application jar path
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setApplicationJarPath("path/to/my/app.jar");
      
      // When the name is retrieved
      String actualName = quickServerConfig.getName();
      
      // Then it should be the expected name
      assertEquals("QuickServer v2.0.0 RC1", actualName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetApplicationJarPathReturningEmptyString() throws Throwable  {
      // Set up the QuickServerConfig with a version number in the name
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setName("QuickServer v2.0.0 RC1");
      
      // Test that the getName method returns the correct name with the version number included
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetApplicationConfiguration() throws Throwable  {
      // Given a new instance of QuickServerConfig with an ApplicationConfiguration object
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      ApplicationConfiguration arg0 = new ApplicationConfiguration();
      quickServerConfig.setApplicationConfiguration(arg0);
      
      // When the getName method is called on the QuickServerConfig object
      String name = quickServerConfig.getName();
      
      // Then the correct name for the QuickServerConfig object should be returned, which in this case is "QuickServer v2.0.0 RC1"
      assertEquals("QuickServer v2.0.0 RC1", name);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetQSAdminServerConfigReturningNull() throws Throwable  {
      // Given: We have a QuickServerConfig object
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      
      // When: We call getQSAdminServerConfig() on the QuickServerConfig object
      quickServerConfig.getQSAdminServerConfig();
      
      // Then: The name of the QuickServer is "QuickServer v2.0.0 RC1"
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetApplicationConfigurationReturningNull() throws Throwable  {
      // Given: We have a QuickServerConfig object with a specific application configuration
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      
      // When: We call the getApplicationConfiguration() method on the QuickServerConfig object
      quickServerConfig.getApplicationConfiguration();
      
      // Then: The name of the QuickServer is "QuickServer v2.0.0 RC1"
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDBObjectPoolConfigReturningNull() throws Throwable  {
      // Given a QuickServerConfig object with the name "QuickServer v2.0.0 RC1"
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setName("QuickServer v2.0.0 RC1");
      
      // When the getName method is called on this object
      String actualName = quickServerConfig.getName();
      
      // Then the name "QuickServer v2.0.0 RC1" should be returned
      assertEquals("QuickServer v2.0.0 RC1", actualName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetApplicationJarPathReturningNull() throws Throwable  {
      // Given: A QuickServerConfig object with a specific name
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setName("QuickServer v2.0.0 RC1");
      
      // When: The getName method is called on the object
      String actualName = quickServerConfig.getName();
      
      // Then: The correct name is returned
      assertEquals("QuickServer v2.0.0 RC1", actualName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetInitServerHooksReturningNull() throws Throwable  {
      // Arrange
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      
      // Act
      String name = quickServerConfig.getName();
      
      // Assert
      assertEquals("QuickServer v2.0.0 RC1", name);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSecurityManagerClassReturningNull() throws Throwable  {
      // Given
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      
      // When
      String actualName = quickServerConfig.getName();
      
      // Then
      assertEquals("QuickServer v2.0.0 RC1", actualName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToXMLReturningNonEmptyString() throws Throwable  {
      // Given: A QuickServerConfig instance with a ServerHooks object
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      ServerHooks arg0 = new ServerHooks();
      
      // When: Calling setServerHooks with the ServerHooks object as an argument
      quickServerConfig.setServerHooks(arg0);
      
      // Then: The server hooks should be set to the provided ServerHooks object
      assertEquals(arg0, quickServerConfig.getServerHooks());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetApplicationJarPath() throws Throwable  {
      // Given a QuickServerConfig object with a valid applicationJarPath
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      String applicationJarPath = "path/to/jar/file.jar";
      quickServerConfig.setApplicationJarPath(applicationJarPath);
      
      // When the toXML method is called with a null argument
      quickServerConfig.toXML((String) null);
      
      // Then the name of the QuickServer should be "QuickServer v2.0.0 RC1"
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetApplicationConfiguration() throws Throwable  {
      // Create a new QuickServerConfig instance
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      
      // Set the ApplicationConfiguration for the QuickServerConfig instance
      ApplicationConfiguration arg0 = new ApplicationConfiguration();
      quickServerConfig.setApplicationConfiguration(arg0);
      
      // Set the XML configuration file path for the QuickServerConfig instance
      quickServerConfig.toXML("/default-data-mode");
      
      // Assert that the name of the QuickServerConfig instance is "QuickServer v2.0.0 RC1"
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToXMLWithNonEmptyString() throws Throwable  {
      // Given: A QuickServerConfig object and an AccessConstraintConfig object
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      AccessConstraintConfig arg0 = new AccessConstraintConfig();
      
      // When: The AccessConstraintConfig is set on the QuickServerConfig
      quickServerConfig.setAccessConstraintConfig(arg0);
      
      // Then: The XML representation of the QuickServerConfig is generated with the correct access constraints
      quickServerConfig.toXML("<access-constraint><auth-provider>basic</auth-provider><realm-name>my_realm</realm-name><role>admin</role></access-constraint>\n");
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToXMLWithNull() throws Throwable  {
      // Given a QuickServerConfig object with some initial values set
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setConsoleLoggingFormatter("M4:{xa{hg");
      
      // When the toXML method is called with null as argument
      String xmlOutput = quickServerConfig.toXML(null);
      
      // Then the name of the QuickServerConfig object is returned correctly
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesQuickServerConfig0() throws Throwable  {
      // Create a new QuickServerConfig object with some initial values
      QuickServerConfig config = new QuickServerConfig();
      config.setClientExtendedEventHandler(".|{w3WmA_X~klr;Te");
      config.toXML("Timeout - Client [{0}]");
      
      // Check that the name of the server is set correctly
      assertEquals("QuickServer v2.0.0 RC1", config.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesQuickServerConfig1() throws Throwable  {
      // rollbacked to evosuite
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      Data arg0 = new Data();
      quickServerConfig.setClientData((ClientData) arg0);
      quickServerConfig.toXML("<root><client_id>1234567890</client_id></root>");
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesQuickServerConfig2() throws Throwable  {
      // Given a QuickServerConfig object with the authenticator set to "BASIC"
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setAuthenticator("BASIC");
      
      // When the XML representation of the object is generated with the "BASIC" authenticator
      quickServerConfig.toXML("BASIC");
      
      // Then the name of the QuickServerConfig should be "QuickServer v2.0.0 RC1"
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesQuickServerConfig3() throws Throwable  {
      // Given a QuickServerConfig instance with a valid client write handler
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setClientWriteHandler("^a=}q>D2>h9S`CsdQ,?");
      
      // When the toXML() method is called on the instance
      String xmlOutput = quickServerConfig.toXML("<access-constraint>\n</access-constraint>\n");
      
      // Then the name of the QuickServer should be returned correctly
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesQuickServerConfig4() throws Throwable  {
      // No Comments were added
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setClientBinaryHandler("<![CDATA[<max-auth-try-msg>\n]]>");
      quickServerConfig.toXML("Exception forcing the close : ");
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToString() throws Throwable  {
      // Given a QuickServer instance and its configuration
      QuickServer quickServer = new QuickServer((String) null);
      QuickServerConfig config = quickServer.getConfig();
      
      // When the client object handler is set to a specific value
      config.setClientObjectHandler("</max-connection-msg>\n");
      
      // Then the configuration's name should be updated accordingly
      String arg0 = config.toString();
      config.toXML(arg0);
      assertEquals("QuickServer v2.0.0 RC1", config.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToXMLWithEmptyString() throws Throwable  {
      // Given a QuickServerConfig object with a client command handler set to a specific value
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setClientCommandHandler("<?xml version=\"1.0\" encoding=\"UTF-8\"?><root></root>");
      
      // When the name is retrieved using the getName method
      String actualName = quickServerConfig.getName();
      
      // Then the expected name should be returned
      assertEquals("QuickServer v2.0.0 RC1", actualName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesQuickServerConfig5() throws Throwable  {
      // rollbacked to evosuite
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setClientEventHandler("Closed {0}");
      quickServerConfig.toXML("prHQS9!2m?zFdsj~>T");
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesQuickServerConfig6() throws Throwable  {
      // Create a new instance of QuickServerConfig with default values
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      
      // Set the bind address to 192.168.0.1
      quickServerConfig.setBindAddr("192.168.0.1");
      
      // Convert the config to an XML string with init-server-hooks
      String xmlString = quickServerConfig.toXML("<init-server-hooks>\n</init-server-hooks>\n");
      
      // Verify that the name of the server is "QuickServer v2.0.0 RC1"
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesQuickServerConfig7() throws Throwable  {
      // Create a new QuickServerConfig object and set the server banner to "Welcome to the V+U server"
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setServerBanner("Welcome to the V+U server");
      
      // Convert the QuickServerConfig object to XML
      String xmlString = quickServerConfig.toXML("The server is now configured and ready for use.");
      
      // Assert that the name of the server is "QuickServer v2.0.0 RC1"
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSecurityManagerClass() throws Throwable  {
      // Set up a new QuickServer configuration with custom security manager
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setSecurityManagerClass("com.example.security.CustomSecurityManager");
      
      // Write the configuration to an XML file
      quickServerConfig.toXML("my_configuration.xml");
      
      // Assert that the name of the QuickServer is set correctly
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSecurityManagerClassWithNull() throws Throwable  {
      // Given a QuickServerConfig object with a null security manager class
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setSecurityManagerClass(null);
      
      // When the getName method is called on the object
      String name = quickServerConfig.getName();
      
      // Then the correct name is returned
      assertEquals("QuickServer v2.0.0 RC1", name);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDBObjectPoolConfig() throws Throwable  {
      // Given: A new QuickServerConfig object is created
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      
      // When: The DBObjectPoolConfig is set for the server configuration
      DBObjectPoolConfig arg0 = new DBObjectPoolConfig();
      quickServerConfig.setDBObjectPoolConfig(arg0);
      
      // Then: The server name and version are correctly set
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetConfigFileReturningNull() throws Throwable  {
      // Given: A QuickServerConfig object is created and a configuration file is loaded
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.getConfigFile();
      
      // When: The name of the server is accessed
      String serverName = quickServerConfig.getName();
      
      // Then: The name of the server should be "QuickServer v2.0.0 RC1"
      assertEquals("QuickServer v2.0.0 RC1", serverName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetQSAdminServerConfig() throws Throwable  {
      // Given a QuickServerConfig object and a QSAdminServerConfig object,
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      QSAdminServerConfig arg0 = new QSAdminServerConfig();
      quickServerConfig.setQSAdminServerConfig(arg0);
      
      // When the toXML method is called with a name parameter,
      String xmlName = "QuickServer v2.0.0 RC1";
      quickServerConfig.toXML("</name>\n");
      
      // Then the returned XML string should contain the specified name,
      assertEquals(xmlName, quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetInitServerHooks() throws Throwable  {
      // Given
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      InitServerHooks initServerHooks = new InitServerHooks();
      
      // When
      quickServerConfig.setInitServerHooks(initServerHooks);
      
      // Then
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetConfigFileReturningNonEmptyString() throws Throwable  {
      // Given: A QuickServerConfig object is created with a config file path.
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setConfigFile("./config/server_config.json");
      
      // When: The getName method is called on the QuickServerConfig object.
      String name = quickServerConfig.getName();
      
      // Then: The returned value should match the expected value.
      assertEquals("QuickServer v2.0.0 RC1", name);
  }
}
