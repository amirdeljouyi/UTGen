/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Mon Mar 18 09:16:12 GMT 2024
 */

package org.quickserver.util.xmlreader;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.QuickServer;
import org.quickserver.util.xmlreader.AccessConstraintConfig;
import org.quickserver.util.xmlreader.ApplicationConfiguration;
import org.quickserver.util.xmlreader.DBObjectPoolConfig;
import org.quickserver.util.xmlreader.InitServerHooks;
import org.quickserver.util.xmlreader.QSAdminServerConfig;
import org.quickserver.util.xmlreader.QuickServerConfig;
import org.quickserver.util.xmlreader.ServerHooks;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class QuickServerConfig_Original_ESTest extends QuickServerConfig_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSecurityManagerClassReturningNonEmptyString() throws Throwable  {
      QuickServer quickServer = new QuickServer();
      QuickServerConfig config = quickServer.getConfig();
      config.setSecurityManagerClass("v. ^c\u0003gIJ");
      String securityManagerClass = config.getSecurityManagerClass();
      assertEquals("QuickServer v2.0.0 RC1", config.getName());
      assertNotNull(securityManagerClass);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSecurityManagerClassReturningEmptyString() throws Throwable  {
      QuickServer quickServer = new QuickServer();
      QuickServerConfig config = quickServer.getConfig();
      config.setSecurityManagerClass("");
      String securityManagerClass = config.getSecurityManagerClass();
      assertNotNull(securityManagerClass);
      assertEquals("QuickServer v2.0.0 RC1", config.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetQSAdminServerConfigReturningQSAdminServerConfigWhereGetCommunicationLoggingIsFalse() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      QSAdminServerConfig arg0 = new QSAdminServerConfig();
      quickServerConfig.setQSAdminServerConfig(arg0);
      arg0.setTimeout((-1310));
      quickServerConfig.getQSAdminServerConfig();
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetQSAdminServerConfigReturningQSAdminServerConfigWhereGetCommunicationLoggingIsTrue() throws Throwable  {
      QuickServer quickServer = new QuickServer();
      QuickServerConfig config = quickServer.getConfig();
      QSAdminServerConfig arg0 = new QSAdminServerConfig();
      arg0.setCommunicationLogging(true);
      config.setQSAdminServerConfig(arg0);
      config.getQSAdminServerConfig();
      assertEquals("QuickServer v2.0.0 RC1", config.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetInitServerHooksReturningInitServerHooksWhereIsEmptyIsTrue() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      InitServerHooks arg0 = new InitServerHooks();
      quickServerConfig.setInitServerHooks(arg0);
      quickServerConfig.getInitServerHooks();
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDBObjectPoolConfigReturningNonNull() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      DBObjectPoolConfig arg0 = new DBObjectPoolConfig();
      quickServerConfig.setDBObjectPoolConfig(arg0);
      quickServerConfig.getDBObjectPoolConfig();
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetConfigFileReturningEmptyString() throws Throwable  {
      QuickServer quickServer = new QuickServer("", 2908);
      QuickServerConfig config = quickServer.getConfig();
      config.setConfigFile("");
      config.getConfigFile();
      assertEquals("QuickServer v2.0.0 RC1", config.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetApplicationJarPathReturningNonEmptyString() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setApplicationJarPath("</console-logging-level>\n");
      quickServerConfig.getApplicationJarPath();
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetApplicationJarPathReturningEmptyString() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setApplicationJarPath("");
      quickServerConfig.getApplicationJarPath();
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetApplicationConfiguration() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      ApplicationConfiguration arg0 = new ApplicationConfiguration();
      quickServerConfig.setApplicationConfiguration(arg0);
      quickServerConfig.getApplicationConfiguration();
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetQSAdminServerConfigReturningNull() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.getQSAdminServerConfig();
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetApplicationConfigurationReturningNull() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.getApplicationConfiguration();
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDBObjectPoolConfigReturningNull() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.getDBObjectPoolConfig();
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetApplicationJarPathReturningNull() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.getApplicationJarPath();
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetInitServerHooksReturningNull() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.getInitServerHooks();
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSecurityManagerClassReturningNull() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.getSecurityManagerClass();
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesQuickServerConfig0() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      ServerHooks arg0 = new ServerHooks();
      quickServerConfig.setServerHooks(arg0);
      quickServerConfig.toXML("&oc(P");
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesQuickServerConfig1() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      AccessConstraintConfig arg0 = new AccessConstraintConfig();
      quickServerConfig.setAccessConstraintConfig(arg0);
      quickServerConfig.toXML("<access-constraint>\n</access-constraint>\n");
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesQuickServerConfigAndCallsToString() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setConsoleLoggingFormatter("M4:{xa{hg");
      String arg0 = quickServerConfig.toString();
      quickServerConfig.toXML(arg0);
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesQuickServerConfig2() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setClientExtendedEventHandler(".|{w3WmA_X~klr;Te");
      quickServerConfig.toXML("Timeout - Client [{0}]");
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesQuickServerConfig3() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      Data arg0 = new Data();
      quickServerConfig.setClientData((ClientData) arg0);
      quickServerConfig.toXML("*^Tnh#3[*i");
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesQuickServerConfig4() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setAuthenticator("&oc(P");
      quickServerConfig.toXML("&oc(P");
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesQuickServerConfig5() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setClientWriteHandler("^a=}q>D2>h9S`CsdQ,?");
      quickServerConfig.toXML("<access-constraint>\n</access-constraint>\n");
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesQuickServerConfig6() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setClientBinaryHandler("</max-auth-try-msg>\n");
      quickServerConfig.toXML("Exception forcing the close : ");
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToString() throws Throwable  {
      QuickServer quickServer = new QuickServer((String) null);
      QuickServerConfig config = quickServer.getConfig();
      config.setClientObjectHandler("</max-connection-msg>\n");
      String arg0 = config.toString();
      config.toXML(arg0);
      assertEquals("QuickServer v2.0.0 RC1", config.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToXMLWithEmptyString() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      String arg0 = quickServerConfig.toXML("&oc(P");
      quickServerConfig.setClientCommandHandler(arg0);
      quickServerConfig.toXML("");
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesQuickServerConfig7() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setClientEventHandler("Closed {0}");
      quickServerConfig.toXML("prHQS9!2m?zFdsj~>T");
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesQuickServerConfig8() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setBindAddr("An");
      quickServerConfig.toXML("<init-server-hooks>\n</init-server-hooks>\n");
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesQuickServerConfig9() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setServerBanner("V+U.");
      quickServerConfig.toXML("+O6-G<pk:X#8");
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSecurityManagerClass() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setSecurityManagerClass("::yD.%OSensl");
      quickServerConfig.toXML("prHQS9!2m?zFdsj~>T");
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSecurityManagerClassWithNull() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setSecurityManagerClass((String) null);
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetApplicationConfiguration() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      ApplicationConfiguration arg0 = new ApplicationConfiguration();
      quickServerConfig.setApplicationConfiguration(arg0);
      quickServerConfig.toXML("/default-data-mode");
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDBObjectPoolConfig() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      DBObjectPoolConfig arg0 = new DBObjectPoolConfig();
      quickServerConfig.setDBObjectPoolConfig(arg0);
      quickServerConfig.toXML("Exception forcing the close : ");
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetConfigFileReturningNull() throws Throwable  {
      QuickServer quickServer = new QuickServer("", 2908);
      QuickServerConfig config = quickServer.getConfig();
      config.getConfigFile();
      assertEquals("QuickServer v2.0.0 RC1", config.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetQSAdminServerConfig() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      QSAdminServerConfig arg0 = new QSAdminServerConfig();
      quickServerConfig.setQSAdminServerConfig(arg0);
      quickServerConfig.toXML("</name>\n");
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetInitServerHooks() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      InitServerHooks arg0 = new InitServerHooks();
      quickServerConfig.setInitServerHooks(arg0);
      quickServerConfig.toXML("<init-server-hooks>\n</init-server-hooks>\n");
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetConfigFileReturningNonEmptyString() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setConfigFile(".Dp;d4_K7@^3+`rM+[*");
      quickServerConfig.getConfigFile();
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToXMLWithNull() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setApplicationJarPath("");
      quickServerConfig.toXML((String) null);
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }
}
