/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Mon Mar 18 12:04:46 GMT 2024
 */

package org.apache.commons.collections4.sequence;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import java.util.LinkedList;
import org.apache.commons.collections4.sequence.EditScript;
import org.apache.commons.collections4.sequence.SequencesComparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SequencesComparator_Original_ESTest extends SequencesComparator_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetScriptReturningEditScriptWhereGetLCSLengthIsPositive() throws Throwable  {
      LinkedList<Object> arg1 = new LinkedList<Object>();
      arg1.add((Object) arg1);
      LinkedList<Object> arg0 = new LinkedList<Object>();
      arg0.add((Object) arg1);
      arg1.add((Object) arg0);
      SequencesComparator<Object> sequencesComparator = new SequencesComparator<Object>(arg0, arg1);
      EditScript<Object> script = sequencesComparator.getScript();
      assertEquals(1, script.getModifications());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetScriptReturningEditScriptWhereGetModificationsIsPositive() throws Throwable  {
      LinkedList<Object> arg1 = new LinkedList<Object>();
      arg1.add((Object) arg1);
      LinkedList<Object> arg0 = new LinkedList<Object>();
      arg0.add((Object) arg1);
      arg1.add((Object) arg0);
      arg1.add((Object) arg0);
      SequencesComparator<Object> sequencesComparator = new SequencesComparator<Object>(arg0, arg1);
      EditScript<Object> script = sequencesComparator.getScript();
      assertEquals(2, script.getModifications());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetScriptReturningEditScriptWhereGetModificationsIsZero() throws Throwable  {
      LinkedList<Object> arg1 = new LinkedList<Object>();
      arg1.add((Object) arg1);
      SequencesComparator<Object> sequencesComparator = new SequencesComparator<Object>(arg1, arg1);
      EditScript<Object> script = sequencesComparator.getScript();
      assertEquals(0, script.getModifications());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetScriptReturningEditScriptWhereGetLCSLengthIsZero() throws Throwable  {
      LinkedList<Object> arg1 = new LinkedList<Object>();
      SequencesComparator<Object> sequencesComparator = new SequencesComparator<Object>(arg1, arg1);
      EditScript<Object> script = sequencesComparator.getScript();
      assertEquals(0, script.getModifications());
  }
}
