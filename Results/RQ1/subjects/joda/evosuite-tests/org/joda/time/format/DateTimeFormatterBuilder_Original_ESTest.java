/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 20 07:45:31 GMT 2024
 */

package org.joda.time.format;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.Partial;
import org.joda.time.ReadablePartial;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimeParserBucket;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateTimeFormatterBuilder_Original_ESTest extends DateTimeFormatterBuilder_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMatchingParserTakingDateTimeParserArrayAndCallsParseInto() throws Throwable  {
      DateTimeParser[] arg0 = new DateTimeParser[2];
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser = new DateTimeFormatterBuilder.MatchingParser(arg0);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_MatchingParser.parseInto((DateTimeParserBucket) null, "utJ<OnJ", 2819);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$MatchingParser", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesCompositeTakingListAndCallsEstimatePrintedLength() throws Throwable  {
      LinkedList<Object> arg0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite = new DateTimeFormatterBuilder.Composite(arg0);
      int estimatePrintedLength = dateTimeFormatterBuilder_Composite.estimatePrintedLength();
      assertEquals(0, estimatePrintedLength);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPrintToTaking11And1AndPrintToTaking11And1AndCreatesCharacterLiteralTakingChar0() throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral = new DateTimeFormatterBuilder.CharacterLiteral('B');
      StringWriter stringWriter = new StringWriter(5);
      StringBuffer arg0 = stringWriter.getBuffer();
      YearMonth arg1 = YearMonth.now();
      Locale arg2 = Locale.GERMAN;
      dateTimeFormatterBuilder_CharacterLiteral.printTo(arg0, (ReadablePartial) arg1, arg2);
      assertEquals("B", arg0.toString());
      assertEquals("B", stringWriter.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesCharacterLiteralTakingCharAndCallsEstimatePrintedLength() throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral = new DateTimeFormatterBuilder.CharacterLiteral(')');
      int estimatePrintedLength = dateTimeFormatterBuilder_CharacterLiteral.estimatePrintedLength();
      assertEquals(1, estimatePrintedLength);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendTimeZoneOffsetTaking4Arguments() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder appendTimeZoneOffset = dateTimeFormatterBuilder.appendTimeZoneOffset((String) null, false, 43, 833);
      assertSame(appendTimeZoneOffset, dateTimeFormatterBuilder);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendMonthOfYear() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder appendMonthOfYear = dateTimeFormatterBuilder.appendMonthOfYear(48);
      assertSame(appendMonthOfYear, dateTimeFormatterBuilder);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendLiteralTakingChar() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder appendLiteral = dateTimeFormatterBuilder.appendLiteral('2');
      assertSame(appendLiteral, dateTimeFormatterBuilder);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendFractionOfHour() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder appendFractionOfHour = dateTimeFormatterBuilder.appendFractionOfHour(1, 0);
      assertSame(appendFractionOfHour, dateTimeFormatterBuilder);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendDayOfMonth() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder appendDayOfMonth = dateTimeFormatterBuilder.appendDayOfMonth(592);
      assertSame(dateTimeFormatterBuilder, appendDayOfMonth);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToFormatter() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFieldType arg0 = DateTimeFieldType.dayOfWeek();
      dateTimeFormatterBuilder.appendSignedDecimal(arg0, 57, 115);
      dateTimeFormatterBuilder.toFormatter();
      DateTimeFormatter formatter = dateTimeFormatterBuilder.toFormatter();
      assertTrue(formatter.isPrinter());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendFractionWithZeroAndZero() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFieldType arg0 = DateTimeFieldType.clockhourOfHalfday();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder.appendFraction(arg0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendFraction() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFieldType arg0 = DateTimeFieldType.secondOfMinute();
      DateTimeFormatterBuilder appendFraction = dateTimeFormatterBuilder.appendFraction(arg0, 2054, (-1989));
      assertSame(dateTimeFormatterBuilder, appendFraction);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendShortText() throws Throwable  {
      DateTimeFieldType arg0 = DateTimeFieldType.era();
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder appendShortText = dateTimeFormatterBuilder.appendShortText(arg0);
      assertSame(dateTimeFormatterBuilder, appendShortText);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendText() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFieldType arg0 = DateTimeFieldType.clockhourOfDay();
      DateTimeFormatterBuilder appendText = dateTimeFormatterBuilder.appendText(arg0);
      assertSame(dateTimeFormatterBuilder, appendText);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendSignedDecimalWithNegativeAndAppendSignedDecimal() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFieldType arg0 = DateTimeFieldType.hourOfHalfday();
      DateTimeFormatterBuilder appendSignedDecimal = dateTimeFormatterBuilder.appendSignedDecimal(arg0, 1, (-455));
      assertSame(dateTimeFormatterBuilder, appendSignedDecimal);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendSignedDecimalWithNegativeAndAppendSignedDecimalThrowsIllegalArgumentException() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFieldType arg0 = DateTimeFieldType.dayOfWeek();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder.appendSignedDecimal(arg0, (-5), 115);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendDecimalWithPositive() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFieldType arg0 = DateTimeFieldType.hourOfHalfday();
      DateTimeFormatterBuilder appendDecimal = dateTimeFormatterBuilder.appendDecimal(arg0, 776, 1);
      assertSame(appendDecimal, dateTimeFormatterBuilder);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendDecimalWithZeroAndAppendDecimal() throws Throwable  {
      DateTimeFieldType arg0 = DateTimeFieldType.secondOfMinute();
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder appendDecimal = dateTimeFormatterBuilder.appendDecimal(arg0, 1, 0);
      assertSame(dateTimeFormatterBuilder, appendDecimal);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendTwoDigitYearTaking2Arguments() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder appendTwoDigitYear = dateTimeFormatterBuilder.appendTwoDigitYear(9, false);
      assertSame(appendTwoDigitYear, dateTimeFormatterBuilder);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesCompositeTakingListAndCallsParseInto() throws Throwable  {
      LinkedList<Object> arg0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite = new DateTimeFormatterBuilder.Composite(arg0);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Composite.parseInto((DateTimeParserBucket) null, "en", 11);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesCompositeTakingListAndCallsPrintToTaking11And1() throws Throwable  {
      Locale arg2 = Locale.CHINESE;
      LinkedList<Object> arg0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite = new DateTimeFormatterBuilder.Composite(arg0);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Composite.printTo((Writer) null, (ReadablePartial) null, arg2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test0() throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.parse("-S-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-S-\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test1() throws Throwable  {
      // Undeclared exception!
      try { 
        MonthDay.parse("+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test2() throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.parse("+3o%PN!?.<ReDb1$Sb]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+3o%PN!?.<ReDb1$Sb]\" is malformed at \"o%PN!?.<ReDb1$Sb]\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesUnpaddedNumberTaking3ArgumentsAndCallsPrintToTaking11And1() throws Throwable  {
      DateTimeFieldType arg0 = DateTimeFieldType.millisOfSecond();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber = new DateTimeFormatterBuilder.UnpaddedNumber(arg0, (-1731453292), true);
      LocalTime arg1 = LocalTime.fromMillisOfDay((long) (-1763));
      Locale arg2 = Locale.CHINESE;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_UnpaddedNumber.printTo((Writer) null, (ReadablePartial) arg1, arg2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test3() throws Throwable  {
      // Undeclared exception!
      try { 
        MonthDay.parse("--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"--\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test4() throws Throwable  {
      // Undeclared exception!
      try { 
        Instant.parse("tn%B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"tn%B\" is malformed at \"n%B\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test5() throws Throwable  {
      LocalDate parse = LocalDate.parse("3");
      assertEquals(3, parse.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesFixedNumberTaking3ArgumentsAndCallsPrintToTaking11And1() throws Throwable  {
      LocalDateTime arg1 = new LocalDateTime((DateTimeZone) null);
      DateTimeFieldType arg0 = DateTimeFieldType.dayOfMonth();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber = new DateTimeFormatterBuilder.FixedNumber(arg0, 305, true);
      Locale arg2 = Locale.US;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_FixedNumber.printTo((Writer) null, (ReadablePartial) arg1, arg2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test6() throws Throwable  {
      // Undeclared exception!
      try { 
        MonthDay.parse("24OW>UY$@u>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"24OW>UY$@u>\" is malformed at \"OW>UY$@u>\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test7() throws Throwable  {
      // Undeclared exception!
      try { 
        DateTime.parse("-4--b-ch&bg-y/ih_j");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-4--b-ch&bg-y/ih_j\" is malformed at \"--b-ch&bg-y/ih_j\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendDayOfWeekShortText() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder appendEraText = dateTimeFormatterBuilder.appendEraText();
      appendEraText.appendDayOfWeekShortText();
      boolean canBuildParser = appendEraText.canBuildParser();
      assertTrue(canBuildParser);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPrintToTaking11111And1AndPrintToTaking11111And1AndCreatesTwoDigitYearTaking3Arguments0() throws Throwable  {
      JulianChronology arg2 = JulianChronology.getInstanceUTC();
      EthiopicChronology instance = EthiopicChronology.getInstance();
      DateTimeZone arg4 = instance.getZone();
      StringBuffer arg0 = new StringBuffer(1);
      Locale arg5 = Locale.forLanguageTag("US/Samoa");
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear = new DateTimeFormatterBuilder.TwoDigitYear((DateTimeFieldType) null, 1034, true);
      dateTimeFormatterBuilder_TwoDigitYear.printTo(arg0, 3056L, (Chronology) arg2, (-837), arg4, arg5);
      assertEquals(2, arg0.length());
      assertEquals("\uFFFD\uFFFD", arg0.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTwoDigitYearTaking3Arguments() throws Throwable  {
      DateTimeFieldType arg0 = DateTimeFieldType.millisOfSecond();
      DateTimeFormatterBuilder.TwoDigitYear arg1 = new DateTimeFormatterBuilder.TwoDigitYear(arg0, 156, true);
      DateTimeFormatter dateTimeFormatter = new DateTimeFormatter(arg1, arg1);
      String print = dateTimeFormatter.print((long) 156);
      assertEquals(2, arg1.estimatePrintedLength());
      assertEquals("56", print);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTwoDigitYearTaking3ArgumentsAndCallsParseInto0() throws Throwable  {
      DateTimeFieldType arg0 = DateTimeFieldType.hourOfHalfday();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear = new DateTimeFormatterBuilder.TwoDigitYear(arg0, 18, false);
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear.estimateParsedLength());
      
      int parseInto = dateTimeFormatterBuilder_TwoDigitYear.parseInto((DateTimeParserBucket) null, "rbW770J,FQpb{Fj:;Fe", 5);
      assertEquals((-6), parseInto);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTwoDigitYearTaking3ArgumentsAndCallsParseInto1() throws Throwable  {
      DateTimeFieldType arg0 = DateTimeFieldType.hourOfHalfday();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear = new DateTimeFormatterBuilder.TwoDigitYear(arg0, 18, false);
      int parseInto = dateTimeFormatterBuilder_TwoDigitYear.parseInto((DateTimeParserBucket) null, ">Z8eKY2 Q'", 18);
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear.estimateParsedLength());
      assertEquals((-19), parseInto);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesFractionTaking3ArgumentsAndCallsPrintToTaking11And10() throws Throwable  {
      DateTimeFieldType arg0 = DateTimeFieldType.minuteOfHour();
      Locale arg2 = Locale.ROOT;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction = new DateTimeFormatterBuilder.Fraction(arg0, 2, 2);
      LocalDateTime arg1 = LocalDateTime.now();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Fraction.printTo((StringBuffer) null, (ReadablePartial) arg1, arg2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesFractionTaking3ArgumentsAndCallsPrintToTaking11And11() throws Throwable  {
      DateTimeFieldType arg0 = DateTimeFieldType.yearOfEra();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction = new DateTimeFormatterBuilder.Fraction(arg0, 2845, 84);
      Partial arg1 = new Partial(arg0, 2845, (Chronology) null);
      Locale arg2 = new Locale("org.joda.time.format.DateTimeFormatterBuilder$Fraction");
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Fraction.printTo((StringBuffer) null, (ReadablePartial) arg1, arg2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPrintToTaking11And1AndCreatesFractionTaking3ArgumentsAndPrintToTaking11And1() throws Throwable  {
      DateTimeFieldType arg0 = DateTimeFieldType.secondOfMinute();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction = new DateTimeFormatterBuilder.Fraction(arg0, (-3780), 348);
      YearMonth arg1 = new YearMonth((long) (-3780));
      Locale arg2 = Locale.CHINA;
      dateTimeFormatterBuilder_Fraction.printTo((StringBuffer) null, (ReadablePartial) arg1, arg2);
      assertEquals(18, dateTimeFormatterBuilder_Fraction.estimateParsedLength());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesFractionTaking3ArgumentsAndCallsPrintToTaking11111And10() throws Throwable  {
      EthiopicChronology arg2 = EthiopicChronology.getInstance();
      DateTimeZone arg4 = arg2.getZone();
      Locale arg5 = Locale.ENGLISH;
      DateTimeFieldType arg0 = DateTimeFieldType.era();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction = new DateTimeFormatterBuilder.Fraction(arg0, 1, 1);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Fraction.printTo((StringBuffer) null, (long) 1, (Chronology) arg2, 3600000, arg4, arg5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTimeZoneOffsetTaking5ArgumentsAndCallsPrintToTaking11111And10() throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset = new DateTimeFormatterBuilder.TimeZoneOffset("-PJTh^7zWF0N*97-{w", "-PJTh^7zWF0N*97-{w", true, 3, 3);
      CharArrayWriter arg0 = new CharArrayWriter();
      BuddhistChronology arg2 = BuddhistChronology.getInstance();
      DateTimeZone arg4 = DateTimeZone.getDefault();
      dateTimeFormatterBuilder_TimeZoneOffset.printTo((Writer) arg0, (-3944L), (Chronology) arg2, 0, arg4, (Locale) null);
      assertEquals("-PJTh^7zWF0N*97-{w", arg0.toString());
      assertEquals(18, arg0.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTimeZoneOffsetTaking5ArgumentsAndCallsPrintToTaking11111And11() throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset = new DateTimeFormatterBuilder.TimeZoneOffset("PDTUS/Pacific-New", "org.joda.time.field.BaseDateTimeField", false, 2, 2);
      CharArrayWriter arg0 = new CharArrayWriter();
      EthiopicChronology arg2 = EthiopicChronology.getInstanceUTC();
      dateTimeFormatterBuilder_TimeZoneOffset.printTo((Writer) arg0, 72L, (Chronology) arg2, 1, (DateTimeZone) null, (Locale) null);
      assertEquals("", arg0.toString());
      assertEquals(0, arg0.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTimeZoneOffsetTaking5ArgumentsAndCallsPrintToTaking11111And12() throws Throwable  {
      BuddhistChronology arg1 = BuddhistChronology.getInstance();
      Locale arg5 = Locale.CHINESE;
      DateTimeParserBucket dateTimeParserBucket = new DateTimeParserBucket(24L, arg1, arg5, (Integer) 1, 1);
      StringBuffer arg0 = new StringBuffer("The datetime zone must not be null");
      CopticChronology arg2 = CopticChronology.getInstanceUTC();
      DateTimeZone arg4 = dateTimeParserBucket.getZone();
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset = new DateTimeFormatterBuilder.TimeZoneOffset("PDTUS/Pacific-New", "The datetime zone must not be null", false, 3, 3);
      dateTimeFormatterBuilder_TimeZoneOffset.printTo(arg0, (long) 1, (Chronology) arg2, (-882), arg4, arg5);
      assertEquals(41, arg0.length());
      assertEquals("The datetime zone must not be null-000000", arg0.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTimeZoneOffsetTaking5ArgumentsAndCallsPrintToTaking11111And13() throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset = new DateTimeFormatterBuilder.TimeZoneOffset("US/Hawaii", "US/Hawaii", false, 3600000, 3600000);
      StringBuffer arg0 = new StringBuffer("US/Hawaii");
      IslamicChronology arg2 = IslamicChronology.getInstance();
      FixedDateTimeZone arg4 = (FixedDateTimeZone)DateTimeZone.UTC;
      Locale arg5 = Locale.US;
      dateTimeFormatterBuilder_TimeZoneOffset.printTo(arg0, (long) 1, (Chronology) arg2, 3600000, (DateTimeZone) arg4, arg5);
      assertEquals(19, arg0.length());
      assertEquals("US/Hawaii+010000000", arg0.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTimeZoneOffsetTaking5ArgumentsAndCallsPrintToTaking11111And14() throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset = new DateTimeFormatterBuilder.TimeZoneOffset("Singapore", "*k`'W5_6*#pu,47ui", false, 2, 2);
      StringBuffer arg0 = new StringBuffer("6|LK_/VIs");
      IslamicChronology arg2 = IslamicChronology.getInstance();
      FixedDateTimeZone arg4 = (FixedDateTimeZone)DateTimeZone.UTC;
      Locale arg5 = Locale.FRANCE;
      dateTimeFormatterBuilder_TimeZoneOffset.printTo(arg0, (long) 2, (Chronology) arg2, 1, (DateTimeZone) arg4, arg5);
      assertEquals("6|LK_/VIs+0000", arg0.toString());
      assertEquals(14, arg0.length());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTimeZoneOffsetTaking5Arguments0() throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset arg1 = new DateTimeFormatterBuilder.TimeZoneOffset((String) null, (String) null, true, 43, 48);
      DateTimeFormatter dateTimeFormatter = new DateTimeFormatter(arg1, arg1);
      String print = dateTimeFormatter.print((long) 828);
      assertEquals("+00:00:00.000", print);
      assertEquals(13, arg1.estimatePrintedLength());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTimeZoneOffsetTaking5ArgumentsAndCallsPrintToTaking11111And15() throws Throwable  {
      EthiopicChronology arg2 = EthiopicChronology.getInstance();
      DateTimeZone arg4 = arg2.getZone();
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset = new DateTimeFormatterBuilder.TimeZoneOffset("", "", false, 1, 1);
      Locale arg5 = Locale.FRANCE;
      StringBuffer arg0 = new StringBuffer();
      dateTimeFormatterBuilder_TimeZoneOffset.printTo(arg0, (long) 1, (Chronology) arg2, 1, arg4, arg5);
      assertEquals(3, arg0.length());
      assertEquals(4, dateTimeFormatterBuilder_TimeZoneOffset.estimatePrintedLength());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTimeZoneOffsetTaking5ArgumentsAndCallsPrintToTaking11111And16() throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset = new DateTimeFormatterBuilder.TimeZoneOffset("*r\u0002+$@?=wy9psJUnl'", "*r\u0002+$@?=wy9psJUnl'", true, 3600000, 3600000);
      StringBuffer arg0 = new StringBuffer(3600000);
      IslamicChronology arg2 = IslamicChronology.getInstanceUTC();
      FixedDateTimeZone arg4 = (FixedDateTimeZone)DateTimeZone.UTC;
      Locale arg5 = Locale.FRANCE;
      dateTimeFormatterBuilder_TimeZoneOffset.printTo(arg0, (long) 3600000, (Chronology) arg2, (-1), (DateTimeZone) arg4, arg5);
      assertEquals("-00:00:00.001", arg0.toString());
      assertEquals(13, arg0.length());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTimeZoneOffsetTaking5ArgumentsAndCallsPrintToTaking11111And17() throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset = new DateTimeFormatterBuilder.TimeZoneOffset("US/Hawaii", "US/Hawaii", true, 3600000, 3600000);
      StringBuffer arg0 = new StringBuffer(3600000);
      IslamicChronology arg2 = IslamicChronology.getInstanceUTC();
      Locale arg5 = Locale.FRANCE;
      dateTimeFormatterBuilder_TimeZoneOffset.printTo(arg0, 238L, (Chronology) arg2, 1, (DateTimeZone) null, arg5);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset.estimatePrintedLength());
      assertEquals(0, arg0.length());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendHalfdayOfDayText() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder.appendHalfdayOfDayText();
      dateTimeFormatterBuilder.appendTimeZoneOffset("org.joda.time.format.DateTimeFormatterBuilder$Fraction", "GJChronology", false, 3600000, 3600000);
      DateTimeFormatterBuilder.Composite printer = (DateTimeFormatterBuilder.Composite)dateTimeFormatterBuilder.toPrinter();
      assertEquals(74, printer.estimateParsedLength());
      assertEquals(74, printer.estimatePrintedLength());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTimeZoneOffsetTaking5Arguments1() throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset arg1 = new DateTimeFormatterBuilder.TimeZoneOffset((String) null, "US/MichiganUS/Pacific-New", false, 1, 3366);
      DateTimeFormatter dateTimeFormatter = new DateTimeFormatter(arg1, arg1);
      String print = dateTimeFormatter.print((-2356L));
      assertEquals(4, arg1.estimateParsedLength());
      assertEquals("+00", print);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTimeZoneNameTaking2Arguments0() throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneName arg1 = new DateTimeFormatterBuilder.TimeZoneName(3600, (Map<String, DateTimeZone>) null);
      DateTimeFormatter dateTimeFormatter = new DateTimeFormatter(arg1, arg1);
      dateTimeFormatter.print((long) 3600);
      assertEquals(20, arg1.estimatePrintedLength());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTwoDigitYearTaking3ArgumentsAndCallsPrintToTaking11And1() throws Throwable  {
      LocalTime arg1 = LocalTime.MIDNIGHT;
      DateTimeFieldType arg0 = DateTimeFieldType.secondOfMinute();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear = new DateTimeFormatterBuilder.TwoDigitYear(arg0, 44, true);
      Locale arg2 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_TwoDigitYear.printTo((Writer) null, (ReadablePartial) arg1, arg2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPrintToTaking11111And1AndPrintToTaking11111And1AndCreatesTwoDigitYearTaking3Arguments1() throws Throwable  {
      StringWriter arg0 = new StringWriter(0);
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear = new DateTimeFormatterBuilder.TwoDigitYear((DateTimeFieldType) null, (-3481), false);
      Locale arg5 = Locale.US;
      ISOChronology arg2 = ISOChronology.getInstanceUTC();
      DateTimeZone arg4 = DateTimeZone.forOffsetHours(0);
      dateTimeFormatterBuilder_TwoDigitYear.printTo((Writer) arg0, (long) (-3481), (Chronology) arg2, (-3481), arg4, arg5);
      assertEquals("\uFFFD\uFFFD", arg0.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTimeZoneOffsetTaking5ArgumentsAndCallsPrintToTaking11111And18() throws Throwable  {
      BuddhistChronology arg2 = BuddhistChronology.getInstance();
      Locale arg5 = Locale.CHINESE;
      DateTimeParserBucket dateTimeParserBucket = new DateTimeParserBucket(24L, arg2, arg5, (Integer) 1, 1);
      DateTimeZone arg4 = dateTimeParserBucket.getZone();
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset = new DateTimeFormatterBuilder.TimeZoneOffset("PDTUS/Pacific-New", "The datetime zone must not be null", false, 3, 3);
      CharArrayWriter arg0 = new CharArrayWriter();
      dateTimeFormatterBuilder_TimeZoneOffset.printTo((Writer) arg0, (long) 1, (Chronology) arg2, 1, arg4, arg5);
      assertEquals("+000000", arg0.toString());
      assertEquals(7, arg0.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTimeZoneOffsetTaking5ArgumentsAndCallsPrintToTaking11111And19() throws Throwable  {
      StringWriter arg0 = new StringWriter();
      Locale arg5 = Locale.CHINESE;
      CopticChronology arg1 = CopticChronology.getInstanceUTC();
      DateTimeParserBucket dateTimeParserBucket = new DateTimeParserBucket(1, arg1, arg5, (Integer) 1, 4);
      DateTimeZone arg4 = dateTimeParserBucket.getZone();
      GregorianChronology arg2 = GregorianChronology.getInstance();
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset = new DateTimeFormatterBuilder.TimeZoneOffset("m&\"`h", "hIh*Ip;", true, 1, 4);
      dateTimeFormatterBuilder_TimeZoneOffset.printTo((Writer) arg0, (long) 4, (Chronology) arg2, 3600000, arg4, arg5);
      assertEquals("+01", arg0.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTimeZoneOffsetTaking5ArgumentsAndCallsPrintToTaking11111And110() throws Throwable  {
      EthiopicChronology arg2 = EthiopicChronology.getInstance();
      DateTimeZone arg4 = arg2.getZone();
      Locale arg5 = Locale.GERMANY;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset = new DateTimeFormatterBuilder.TimeZoneOffset("US/Pacific", ".:`</.$b7g.PP", true, 1, 1);
      CharArrayWriter arg0 = new CharArrayWriter(1);
      dateTimeFormatterBuilder_TimeZoneOffset.printTo((Writer) arg0, 10L, (Chronology) arg2, 1, arg4, arg5);
      assertEquals("+00", arg0.toString());
      assertEquals(3, arg0.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTimeZoneOffsetTaking5ArgumentsAndCallsPrintToTaking11111And111() throws Throwable  {
      EthiopicChronology arg2 = EthiopicChronology.getInstance();
      DateTimeZone arg4 = arg2.getZone();
      Locale arg5 = Locale.GERMANY;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset = new DateTimeFormatterBuilder.TimeZoneOffset("Singapore", "Singapore", false, 3, 50);
      CharArrayWriter arg0 = new CharArrayWriter();
      dateTimeFormatterBuilder_TimeZoneOffset.printTo((Writer) arg0, (long) 50, (Chronology) arg2, 50, arg4, arg5);
      assertEquals("+000000050", arg0.toString());
      assertEquals(10, arg0.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTimeZoneOffsetTaking5ArgumentsAndCallsPrintToTaking11111And112() throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset = new DateTimeFormatterBuilder.TimeZoneOffset("m<)>7", "m<)>7", true, 4233, 4233);
      IslamicChronology arg2 = IslamicChronology.getInstanceUTC();
      FixedDateTimeZone arg4 = (FixedDateTimeZone)DateTimeZone.UTC;
      Locale arg5 = Locale.UK;
      CharArrayWriter arg0 = new CharArrayWriter();
      dateTimeFormatterBuilder_TimeZoneOffset.printTo((Writer) arg0, (long) 3, (Chronology) arg2, (-1415), (DateTimeZone) arg4, arg5);
      assertEquals(13, arg0.size());
      assertEquals("-00:00:01.415", arg0.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTimeZoneOffsetTaking5ArgumentsAndCallsParseInto() throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset = new DateTimeFormatterBuilder.TimeZoneOffset("PDT", "hB/", false, 1687, 1687);
      int parseInto = dateTimeFormatterBuilder_TimeZoneOffset.parseInto((DateTimeParserBucket) null, "PDT", 1687);
      assertEquals((-1688), parseInto);
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset.estimateParsedLength());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesCompositeTakingListAndCallsPrintToTaking11111And10() throws Throwable  {
      LinkedList<Object> arg0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite = new DateTimeFormatterBuilder.Composite(arg0);
      JulianChronology arg2 = JulianChronology.getInstanceUTC();
      FixedDateTimeZone arg4 = (FixedDateTimeZone)DateTimeZone.UTC;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Composite.printTo((Writer) null, (-3604L), (Chronology) arg2, 3, (DateTimeZone) arg4, (Locale) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesCompositeTakingListAndCallsPrintToTaking11111And11() throws Throwable  {
      EthiopicChronology arg2 = EthiopicChronology.getInstanceUTC();
      LinkedList<Object> arg0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite = new DateTimeFormatterBuilder.Composite(arg0);
      FixedDateTimeZone arg4 = (FixedDateTimeZone)DateTimeZone.UTC;
      Locale arg5 = Locale.ITALIAN;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Composite.printTo((StringBuffer) null, (long) 1, (Chronology) arg2, 1, (DateTimeZone) arg4, arg5);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPrintToTaking11111And1AndPrintToTaking11111And10() throws Throwable  {
      CharArrayWriter arg0 = new CharArrayWriter(3021);
      Locale arg5 = Locale.FRENCH;
      CopticChronology arg2 = CopticChronology.getInstanceUTC();
      DateTimeParserBucket dateTimeParserBucket = new DateTimeParserBucket(1293L, arg2, arg5, (Integer) 0, 3021);
      DateTimeZone arg4 = dateTimeParserBucket.getZone();
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      dateTimeFormatterBuilder_TimeZoneId.printTo((Writer) arg0, (-2009L), (Chronology) arg2, 93, arg4, arg5);
      assertEquals("UTC", arg0.toString());
      assertEquals(3, arg0.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPrintToTaking11111And1() throws Throwable  {
      EthiopicChronology arg0 = EthiopicChronology.getInstance();
      StrictChronology arg2 = StrictChronology.getInstance(arg0);
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_TimeZoneId.printTo((Writer) null, 10000000000000000L, (Chronology) arg2, 3136, (DateTimeZone) null, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test8() throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId arg1 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter = new DateTimeFormatter(arg1, arg1);
      dateTimeFormatter.print(1319L);
      assertEquals(32, arg1.estimatePrintedLength());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPrintToTaking11111And1AndPrintToTaking11111And11() throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      StringBuffer arg0 = new StringBuffer("CDTUShMountain");
      ISOChronology arg2 = ISOChronology.getInstance((DateTimeZone) null);
      Locale arg5 = Locale.ENGLISH;
      dateTimeFormatterBuilder_TimeZoneId.printTo(arg0, 3413L, (Chronology) arg2, (-292269337), (DateTimeZone) null, arg5);
      assertEquals("eng", arg5.getISO3Language());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPrintUnknownString() throws Throwable  {
      MockPrintWriter arg0 = new MockPrintWriter(" - ");
      DateTimeFormatterBuilder.printUnknownString(arg0, (-2091));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendUnknownString() throws Throwable  {
      StringBuffer arg0 = new StringBuffer();
      DateTimeFormatterBuilder.appendUnknownString(arg0, (-2922));
      assertEquals(0, arg0.length());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCanBuildFormatterReturningFalse() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      boolean canBuildFormatter = dateTimeFormatterBuilder.canBuildFormatter();
      assertFalse(canBuildFormatter);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCanBuildPrinterReturningTrue() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder appendTimeZoneName = dateTimeFormatterBuilder.appendTimeZoneName();
      boolean canBuildPrinter = appendTimeZoneName.canBuildPrinter();
      assertTrue(canBuildPrinter);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendFractionWithNegative() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFieldType arg0 = DateTimeFieldType.weekOfWeekyear();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder.appendFraction(arg0, (-438071376), (-438071376));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendFractionWithNullAndPositive() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder.appendFraction((DateTimeFieldType) null, 21, 48);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendShortTextThrowsIllegalArgumentException() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder.appendShortText((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendTextThrowsIllegalArgumentException() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder.appendText((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendFixedSignedDecimal() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFieldType arg0 = DateTimeFieldType.yearOfCentury();
      DateTimeFormatterBuilder appendFixedSignedDecimal = dateTimeFormatterBuilder.appendFixedSignedDecimal(arg0, 1);
      assertSame(appendFixedSignedDecimal, dateTimeFormatterBuilder);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendFixedSignedDecimalWithNullAndZero() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder.appendFixedSignedDecimal((DateTimeFieldType) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendFixedSignedDecimalWithNegative() throws Throwable  {
      DateTimeFieldType arg0 = DateTimeFieldType.clockhourOfDay();
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder.appendFixedSignedDecimal(arg0, (-435));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal number of digits: -435
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendSignedDecimalWithZero() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFieldType arg0 = DateTimeFieldType.yearOfCentury();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder.appendSignedDecimal(arg0, 0, (-552));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendWeekyear() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder appendWeekyear = dateTimeFormatterBuilder.appendWeekyear(2075, 46);
      assertSame(appendWeekyear, dateTimeFormatterBuilder);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendSignedDecimalWithNull() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder.appendSignedDecimal((DateTimeFieldType) null, 624, (-1589));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendFixedDecimal() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFieldType arg0 = DateTimeFieldType.year();
      DateTimeFormatterBuilder appendFixedDecimal = dateTimeFormatterBuilder.appendFixedDecimal(arg0, 43);
      assertSame(appendFixedDecimal, dateTimeFormatterBuilder);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendFixedDecimalWithNull() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder.appendFixedDecimal((DateTimeFieldType) null, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendFixedDecimalWithNegative() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFieldType arg0 = DateTimeFieldType.weekOfWeekyear();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder.appendFixedDecimal(arg0, (-1672));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal number of digits: -1672
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendDecimalWithZeroAndAppendDecimalThrowsIllegalArgumentException() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFieldType arg0 = DateTimeFieldType.secondOfMinute();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder.appendDecimal(arg0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendDecimalWithNegativeAndNegative() throws Throwable  {
      DateTimeFieldType arg0 = DateTimeFieldType.secondOfMinute();
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder.appendDecimal(arg0, (-1989), (-560));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendDecimalWithNull() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder.appendDecimal((DateTimeFieldType) null, Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendLiteralTakingString() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder appendLiteral = dateTimeFormatterBuilder.appendLiteral("0");
      assertSame(dateTimeFormatterBuilder, appendLiteral);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendLiteralTakingStringWithEmptyString() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder appendLiteral = dateTimeFormatterBuilder.appendLiteral("");
      assertSame(appendLiteral, dateTimeFormatterBuilder);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendLiteralTakingStringThrowsIllegalArgumentException() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder.appendLiteral((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Literal must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendTakingDateTimeParserThrowsIllegalArgumentException() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder.append((DateTimeParser) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No parser supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendTaking1And1ThrowsIllegalArgumentException() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      HashMap<String, DateTimeZone> arg1 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName arg0 = new DateTimeFormatterBuilder.TimeZoneName(3, arg1);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder.append((DateTimePrinter) arg0, (DateTimeParser[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No parsers supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendTaking1And1ThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeParser[] arg1 = new DateTimeParser[0];
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder.append((DateTimePrinter) null, arg1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendTakingDateTimeFormatterThrowsIllegalArgumentException() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder.append((DateTimeFormatter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No formatter supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToParserThrowsUnsupportedOperationException() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder.toParser();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing is not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToPrinterThrowsUnsupportedOperationException() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder.toPrinter();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing is not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToFormatterReturningDateTimeFormatterWhereIsPrinterIsFalse() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder.CharacterLiteral arg0 = new DateTimeFormatterBuilder.CharacterLiteral('g');
      dateTimeFormatterBuilder.appendOptional(arg0);
      DateTimeFormatter formatter = dateTimeFormatterBuilder.toFormatter();
      assertTrue(formatter.isParser());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToFormatterThrowsUnsupportedOperationException() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder.toFormatter();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Both printing and parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesFractionTaking3ArgumentsAndCallsPrintToTaking11111And11() throws Throwable  {
      DateTimeFieldType arg0 = DateTimeFieldType.hourOfDay();
      Locale arg5 = Locale.ROOT;
      ISOChronology arg2 = ISOChronology.getInstance((DateTimeZone) null);
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction = new DateTimeFormatterBuilder.Fraction(arg0, (-219279065), 5);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Fraction.printTo((StringBuffer) null, (long) 5, (Chronology) arg2, 84, (DateTimeZone) null, arg5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test9() throws Throwable  {
      MonthDay monthDay = new MonthDay();
      Locale arg1 = Locale.ITALIAN;
      String string = monthDay.toString(":S", arg1);
      assertEquals(":0", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTextFieldTaking2ArgumentsAndCallsPrintToTaking11111And10() throws Throwable  {
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField = new DateTimeFormatterBuilder.TextField((DateTimeFieldType) null, true);
      PipedWriter arg0 = new PipedWriter();
      ISOChronology arg2 = ISOChronology.getInstanceUTC();
      FixedDateTimeZone arg4 = (FixedDateTimeZone)DateTimeZone.UTC;
      Locale arg5 = Locale.CANADA_FRENCH;
      try { 
        dateTimeFormatterBuilder_TextField.printTo((Writer) arg0, 1549L, (Chronology) arg2, 3, (DateTimeZone) arg4, arg5);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTextFieldTaking2ArgumentsAndCallsPrintToTaking11111And11() throws Throwable  {
      DateTimeFieldType arg0 = DateTimeFieldType.centuryOfEra();
      DateTimeZone arg4 = DateTimeZone.getDefault();
      GJChronology arg2 = GJChronology.getInstance(arg4);
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField = new DateTimeFormatterBuilder.TextField(arg0, false);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_TextField.printTo((StringBuffer) null, (long) 1493, (Chronology) arg2, 8, arg4, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TextField", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesUnpaddedNumberTaking3ArgumentsAndCallsPrintToTaking11111And10() throws Throwable  {
      JulianChronology arg2 = JulianChronology.getInstanceUTC();
      FixedDateTimeZone arg4 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTimeFieldType arg0 = DateTimeFieldType.dayOfYear();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber = new DateTimeFormatterBuilder.UnpaddedNumber(arg0, 4767, true);
      Locale arg5 = Locale.ITALY;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_UnpaddedNumber.printTo((Writer) null, (-3658L), (Chronology) arg2, 4767, (DateTimeZone) arg4, arg5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesUnpaddedNumberTaking3ArgumentsAndCallsPrintToTaking11111And11() throws Throwable  {
      JulianChronology arg2 = JulianChronology.getInstanceUTC();
      FixedDateTimeZone arg4 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTimeFieldType arg0 = DateTimeFieldType.hourOfHalfday();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber = new DateTimeFormatterBuilder.UnpaddedNumber(arg0, (-1986), true);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_UnpaddedNumber.printTo((StringBuffer) null, (long) (-1986), (Chronology) arg2, (-1986), (DateTimeZone) arg4, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPrintToTaking11111And1AndPrintToTaking11111And1AndCreatesStringLiteralTakingString0() throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral = new DateTimeFormatterBuilder.StringLiteral(",y");
      StringBuffer arg0 = new StringBuffer((CharSequence) ",y");
      DateTimeZone arg4 = DateTimeZone.forOffsetHoursMinutes(4, 4);
      dateTimeFormatterBuilder_StringLiteral.printTo(arg0, 0L, (Chronology) null, 4, arg4, (Locale) null);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral.estimateParsedLength());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesStringLiteralTakingStringAndCallsPrintToTaking11And1() throws Throwable  {
      CharArrayWriter arg0 = new CharArrayWriter(3021);
      MonthDay arg1 = new MonthDay();
      Locale arg2 = Locale.FRENCH;
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral = new DateTimeFormatterBuilder.StringLiteral("-w");
      dateTimeFormatterBuilder_StringLiteral.printTo((Writer) arg0, (ReadablePartial) arg1, arg2);
      assertEquals("fra", arg2.getISO3Language());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPrintToTaking11111And1AndPrintToTaking11111And1AndCreatesStringLiteralTakingString1() throws Throwable  {
      CharArrayWriter arg0 = new CharArrayWriter(3021);
      Locale arg5 = Locale.FRENCH;
      CopticChronology arg2 = CopticChronology.getInstanceUTC();
      DateTimeParserBucket dateTimeParserBucket = new DateTimeParserBucket(1293L, arg2, arg5, (Integer) 0, 3021);
      DateTimeZone arg4 = dateTimeParserBucket.getZone();
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral = new DateTimeFormatterBuilder.StringLiteral("");
      dateTimeFormatterBuilder_StringLiteral.printTo((Writer) arg0, 132L, (Chronology) arg2, 3021, arg4, arg5);
      assertEquals("fra", arg5.getISO3Language());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPrintToTaking11111And1AndPrintToTaking11111And1AndCreatesCharacterLiteralTakingChar0() throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral = new DateTimeFormatterBuilder.CharacterLiteral(')');
      StringWriter arg0 = new StringWriter(1);
      JulianChronology arg2 = JulianChronology.getInstance();
      DateTimeZone arg4 = DateTimeZone.forOffsetMillis((-1389));
      Locale arg5 = Locale.UK;
      dateTimeFormatterBuilder_CharacterLiteral.printTo((Writer) arg0, (long) 1, (Chronology) arg2, 6, arg4, arg5);
      assertEquals(")", arg0.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPrintToTaking11And1AndPrintToTaking11And1AndCreatesCharacterLiteralTakingChar1() throws Throwable  {
      CharArrayWriter arg0 = new CharArrayWriter(3021);
      MonthDay arg1 = new MonthDay();
      Locale arg2 = Locale.FRENCH;
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral = new DateTimeFormatterBuilder.CharacterLiteral('\\');
      dateTimeFormatterBuilder_CharacterLiteral.printTo((Writer) arg0, (ReadablePartial) arg1, arg2);
      assertEquals("\\", arg0.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPrintToTaking11111And1AndPrintToTaking11111And1AndCreatesCharacterLiteralTakingChar1() throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral = new DateTimeFormatterBuilder.CharacterLiteral(')');
      EthiopicChronology arg2 = EthiopicChronology.getInstance();
      DateTimeZone arg4 = arg2.getZone();
      StringBuffer arg0 = new StringBuffer(3663);
      dateTimeFormatterBuilder_CharacterLiteral.printTo(arg0, (long) (-1242), (Chronology) arg2, (-2423), arg4, (Locale) null);
      assertEquals(")", arg0.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTimeZoneNameTaking2Arguments1() throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneName arg1 = new DateTimeFormatterBuilder.TimeZoneName(1, (Map<String, DateTimeZone>) null);
      DateTimeFormatter dateTimeFormatter = new DateTimeFormatter(arg1, arg1);
      String print = dateTimeFormatter.print(10000L);
      assertEquals("+00:00", print);
      assertEquals(4, arg1.estimatePrintedLength());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendTimeZoneId() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder appendTimeZoneId = dateTimeFormatterBuilder.appendTimeZoneId();
      assertSame(appendTimeZoneId, dateTimeFormatterBuilder);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendClockhourOfDay() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder appendClockhourOfDay = dateTimeFormatterBuilder.appendClockhourOfDay(2);
      assertSame(appendClockhourOfDay, dateTimeFormatterBuilder);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendTimeZoneShortName() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder appendTimeZoneShortName = dateTimeFormatterBuilder.appendTimeZoneShortName();
      assertSame(appendTimeZoneShortName, dateTimeFormatterBuilder);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendTakingDateTimePrinterThrowsIllegalArgumentException() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder.append((DateTimePrinter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No printer supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendSecondOfMinute() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder appendSecondOfMinute = dateTimeFormatterBuilder.appendSecondOfMinute(58);
      assertSame(dateTimeFormatterBuilder, appendSecondOfMinute);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendTwoDigitWeekyearTakingInt() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder appendTwoDigitWeekyear = dateTimeFormatterBuilder.appendTwoDigitWeekyear(10209375);
      appendTwoDigitWeekyear.appendLiteral("2.-In");
      DateTimeFormatterBuilder.Composite parser = (DateTimeFormatterBuilder.Composite)appendTwoDigitWeekyear.toParser();
      assertEquals(7, parser.estimateParsedLength());
      assertEquals(7, parser.estimatePrintedLength());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendTwoDigitWeekyearTaking2Arguments() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder appendTwoDigitWeekyear = dateTimeFormatterBuilder.appendTwoDigitWeekyear(2256, true);
      assertSame(appendTwoDigitWeekyear, dateTimeFormatterBuilder);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendTimeZoneOffsetTaking4ArgumentsThrowsIllegalArgumentException() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder.appendTimeZoneOffset("YearWeekDayTime", false, 43, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendMinuteOfDay() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder appendMinuteOfDay = dateTimeFormatterBuilder.appendMinuteOfDay(0);
      assertSame(dateTimeFormatterBuilder, appendMinuteOfDay);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendMinuteOfHourAndAppendTimeZoneNameTakingMap() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      HashMap<String, DateTimeZone> arg0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder appendTimeZoneName = dateTimeFormatterBuilder.appendTimeZoneName((Map<String, DateTimeZone>) arg0);
      DateTimeFormatterBuilder appendMinuteOfHour = appendTimeZoneName.appendMinuteOfHour(292272992);
      DateTimeFormatterBuilder.Composite parser = (DateTimeFormatterBuilder.Composite)appendMinuteOfHour.toParser();
      assertEquals(292273012, parser.estimateParsedLength());
      assertEquals(292273012, parser.estimatePrintedLength());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendTimeZoneOffsetTaking5ArgumentsThrowsIllegalArgumentException() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder.appendTimeZoneOffset("M}c&RW^n", "M}c&RW^n", true, (-1119), (-1119));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendMillisOfDay() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder appendMillisOfDay = dateTimeFormatterBuilder.appendMillisOfDay(292272992);
      assertSame(dateTimeFormatterBuilder, appendMillisOfDay);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendMonthOfYearShortText() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder appendMonthOfYearShortText = dateTimeFormatterBuilder.appendMonthOfYearShortText();
      assertSame(appendMonthOfYearShortText, dateTimeFormatterBuilder);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCanBuildPrinterReturningFalse() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      boolean canBuildPrinter = dateTimeFormatterBuilder.canBuildPrinter();
      assertFalse(canBuildPrinter);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendMillisOfSecond() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder appendMillisOfSecond = dateTimeFormatterBuilder.appendMillisOfSecond(43);
      assertSame(dateTimeFormatterBuilder, appendMillisOfSecond);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCanBuildParser() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      boolean canBuildParser = dateTimeFormatterBuilder.canBuildParser();
      assertFalse(canBuildParser);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendSecondOfDay() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder appendSecondOfDay = dateTimeFormatterBuilder.appendSecondOfDay(1559);
      assertSame(dateTimeFormatterBuilder, appendSecondOfDay);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendFractionOfMinute() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder appendTimeZoneName = dateTimeFormatterBuilder.appendTimeZoneName();
      appendTimeZoneName.appendFractionOfMinute(18, 18);
      boolean canBuildParser = dateTimeFormatterBuilder.canBuildParser();
      assertFalse(canBuildParser);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendClockhourOfHalfday() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder appendClockhourOfHalfday = dateTimeFormatterBuilder.appendClockhourOfHalfday(3);
      assertSame(dateTimeFormatterBuilder, appendClockhourOfHalfday);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testClear() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder.clear();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendPattern() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder appendPattern = dateTimeFormatterBuilder.appendPattern("--");
      assertSame(dateTimeFormatterBuilder, appendPattern);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendYear() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder appendYear = dateTimeFormatterBuilder.appendYear(15, 15);
      assertSame(appendYear, dateTimeFormatterBuilder);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendFractionOfSecond() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder appendFractionOfSecond = dateTimeFormatterBuilder.appendFractionOfSecond(1, 0);
      assertSame(appendFractionOfSecond, dateTimeFormatterBuilder);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendDayOfWeekText() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder appendDayOfWeekText = dateTimeFormatterBuilder.appendDayOfWeekText();
      assertSame(dateTimeFormatterBuilder, appendDayOfWeekText);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendWeekOfWeekyear() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder appendWeekOfWeekyear = dateTimeFormatterBuilder.appendWeekOfWeekyear(115);
      assertSame(appendWeekOfWeekyear, dateTimeFormatterBuilder);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendFractionOfDay() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder appendFractionOfDay = dateTimeFormatterBuilder.appendFractionOfDay(46, 15);
      assertSame(appendFractionOfDay, dateTimeFormatterBuilder);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendMonthOfYearText() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder appendMonthOfYearText = dateTimeFormatterBuilder.appendMonthOfYearText();
      assertSame(dateTimeFormatterBuilder, appendMonthOfYearText);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendDayOfYear() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder appendDayOfYear = dateTimeFormatterBuilder.appendDayOfYear(43);
      appendDayOfYear.appendTimeZoneShortName();
      DateTimeFormatter formatter = appendDayOfYear.toFormatter();
      assertFalse(formatter.isParser());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendHourOfHalfday() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder appendHourOfHalfday = dateTimeFormatterBuilder.appendHourOfHalfday(1);
      assertSame(dateTimeFormatterBuilder, appendHourOfHalfday);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendHourOfDay() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder appendHourOfDay = dateTimeFormatterBuilder.appendHourOfDay(59);
      assertSame(dateTimeFormatterBuilder, appendHourOfDay);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendTaking1And1() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormat.StyleFormatter arg1 = new DateTimeFormat.StyleFormatter((-2546), (-466), 9);
      DateTimeFormatterBuilder append = dateTimeFormatterBuilder.append((DateTimePrinter) arg1, (DateTimeParser) arg1);
      assertSame(append, dateTimeFormatterBuilder);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendCenturyOfEra() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder appendCenturyOfEra = dateTimeFormatterBuilder.appendCenturyOfEra(1, 1);
      assertSame(dateTimeFormatterBuilder, appendCenturyOfEra);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendDayOfWeek() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder appendDayOfWeek = dateTimeFormatterBuilder.appendDayOfWeek(0);
      DateTimeFormatterBuilder appendTimeZoneName = appendDayOfWeek.appendTimeZoneName();
      boolean canBuildParser = appendTimeZoneName.canBuildParser();
      assertFalse(canBuildParser);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendYearOfEra() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder appendYearOfEra = dateTimeFormatterBuilder.appendYearOfEra(1963, (-1277));
      assertSame(dateTimeFormatterBuilder, appendYearOfEra);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendTwoDigitYearTakingInt() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder appendTwoDigitYear = dateTimeFormatterBuilder.appendTwoDigitYear((-4052));
      assertSame(dateTimeFormatterBuilder, appendTwoDigitYear);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendOptional() throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset arg0 = new DateTimeFormatterBuilder.TimeZoneOffset("US/Hawaii", "US/Hawaii", true, 3600000, 3600000);
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder.appendOptional(arg0);
      assertEquals(13, arg0.estimatePrintedLength());
      assertEquals(13, arg0.estimateParsedLength());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTimeZoneOffsetTaking5ArgumentsAndCallsPrintToTaking11And1() throws Throwable  {
      MonthDay arg1 = new MonthDay();
      Locale arg2 = Locale.FRENCH;
      StringBuffer arg0 = new StringBuffer("");
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset = new DateTimeFormatterBuilder.TimeZoneOffset("", "_@", false, 595, 1958);
      dateTimeFormatterBuilder_TimeZoneOffset.printTo(arg0, (ReadablePartial) arg1, arg2);
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset.estimatePrintedLength());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPrintToTaking11And1AndPrintToTaking11And1() throws Throwable  {
      MonthDay arg1 = new MonthDay();
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      MockFileWriter arg0 = new MockFileWriter("--", true);
      Locale arg2 = Locale.CANADA_FRENCH;
      dateTimeFormatterBuilder_TimeZoneId.printTo((Writer) arg0, (ReadablePartial) arg1, arg2);
      assertEquals("", arg2.getVariant());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAppendTakingDateTimeParser() throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder appendEraText = dateTimeFormatterBuilder.appendEraText();
      DateTimeFormatterBuilder.TimeZoneId arg0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      appendEraText.append((DateTimeParser) arg0);
      assertEquals(32, arg0.estimateParsedLength());
      
      boolean canBuildFormatter = appendEraText.canBuildFormatter();
      assertTrue(canBuildFormatter);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEstimatePrintedLengthAndEstimatePrintedLength() throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      int estimatePrintedLength = dateTimeFormatterBuilder_TimeZoneId.estimatePrintedLength();
      assertEquals(32, estimatePrintedLength);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test10() throws Throwable  {
      MonthDay now = MonthDay.now();
      String string = now.toString();
      assertEquals("--02-14", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesFixedNumberTaking3ArgumentsAndCallsPrintToTaking11111And1() throws Throwable  {
      EthiopicChronology arg2 = EthiopicChronology.getInstance();
      DateTimeZone arg4 = arg2.getZone();
      Locale arg5 = Locale.CHINA;
      DateTimeFieldType arg0 = DateTimeFieldType.era();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber = new DateTimeFormatterBuilder.FixedNumber(arg0, 2055, true);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_FixedNumber.printTo((Writer) null, (long) 2055, (Chronology) arg2, 61, arg4, arg5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
