/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 20 06:25:09 GMT 2024
 */

package org.joda.time.tz;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.util.Map;
import java.util.StringTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.tz.DateTimeZoneBuilder;
import org.joda.time.tz.ZoneInfoCompiler;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZoneInfoCompiler_Original_ESTest extends ZoneInfoCompiler_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseOptionalReturningNonEmptyString() throws Throwable  {
      String parseOptional = ZoneInfoCompiler.parseOptional("-verbose");
      assertEquals("-verbose", parseOptional);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompileThrowsNullPointerException() throws Throwable  {
      ZoneInfoCompiler zoneInfoCompiler = new ZoneInfoCompiler();
      File arg0 = MockFile.createTempFile("n(C{V%E", "ReadablePartial objects must not be null");
      File[] arg1 = new File[6];
      // Undeclared exception!
      try { 
        zoneInfoCompiler.compile(arg0, arg1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesDateTimeOfYearTakingStringTokenizer() throws Throwable  {
      StringTokenizer arg0 = new StringTokenizer("c5m1zrd7k,", "");
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear = null;
      try {
        zoneInfoCompiler_DateTimeOfYear = new ZoneInfoCompiler.DateTimeOfYear(arg0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"c5m1zrd7k,\" for monthOfYear is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesDateTimeOfYearTakingStringTokenizerAndCreatesDateTimeOfYearTakingStringTokenizer() throws Throwable  {
      StringTokenizer arg0 = new StringTokenizer("e*e6#&8HT+~", "e*e6#&8HT+~");
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear = new ZoneInfoCompiler.DateTimeOfYear(arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompileThrowsIOException() throws Throwable  {
      ZoneInfoCompiler zoneInfoCompiler = new ZoneInfoCompiler();
      File arg0 = MockFile.createTempFile("dv]w=", "dv]w=");
      File[] arg1 = new File[0];
      try { 
        zoneInfoCompiler.compile(arg0, arg1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination is not a directory: /tmp/dv]w=0dv]w=
         //
         verifyException("org.joda.time.tz.ZoneInfoCompiler", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testTest0() throws Throwable  {
      DateTimeZone arg1 = DateTimeZone.getDefault();
      boolean test = ZoneInfoCompiler.test("cdo}2V.>vi@W", arg1);
      assertTrue(test);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testTest1() throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder = new DateTimeZoneBuilder();
      DateTimeZone arg1 = dateTimeZoneBuilder.toDateTimeZone("maximum", false);
      boolean test = ZoneInfoCompiler.test("maximum", arg1);
      assertTrue(test);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseZoneCharAndParseZoneCharWithAlphabeticChar0() throws Throwable  {
      char parseZoneChar = ZoneInfoCompiler.parseZoneChar('z');
      assertEquals('u', parseZoneChar);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseZoneChar0() throws Throwable  {
      char parseZoneChar = ZoneInfoCompiler.parseZoneChar('w');
      assertEquals('w', parseZoneChar);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseZoneChar1() throws Throwable  {
      char parseZoneChar = ZoneInfoCompiler.parseZoneChar('u');
      assertEquals('u', parseZoneChar);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseZoneChar2() throws Throwable  {
      char parseZoneChar = ZoneInfoCompiler.parseZoneChar('s');
      assertEquals('s', parseZoneChar);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseZoneChar3() throws Throwable  {
      char parseZoneChar = ZoneInfoCompiler.parseZoneChar('g');
      assertEquals('u', parseZoneChar);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseZoneCharAndParseZoneCharWithAlphabeticChar1() throws Throwable  {
      char parseZoneChar = ZoneInfoCompiler.parseZoneChar('Z');
      assertEquals('u', parseZoneChar);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseZoneChar4() throws Throwable  {
      char parseZoneChar = ZoneInfoCompiler.parseZoneChar('W');
      assertEquals('w', parseZoneChar);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseZoneChar5() throws Throwable  {
      char parseZoneChar = ZoneInfoCompiler.parseZoneChar('U');
      assertEquals('u', parseZoneChar);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseZoneChar6() throws Throwable  {
      char parseZoneChar = ZoneInfoCompiler.parseZoneChar('S');
      assertEquals('s', parseZoneChar);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseZoneCharWithOtherChar() throws Throwable  {
      char parseZoneChar = ZoneInfoCompiler.parseZoneChar(')');
      assertEquals('w', parseZoneChar);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseZoneChar7() throws Throwable  {
      char parseZoneChar = ZoneInfoCompiler.parseZoneChar('G');
      assertEquals('u', parseZoneChar);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseTimeReturningNegative() throws Throwable  {
      int parseTime = ZoneInfoCompiler.parseTime("-93`%HP\"");
      assertEquals((-334800000), parseTime);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseTimeReturningPositive() throws Throwable  {
      int parseTime = ZoneInfoCompiler.parseTime("493`%HP\"");
      assertEquals(176400000, parseTime);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseOptionalReturningNull() throws Throwable  {
      String parseOptional = ZoneInfoCompiler.parseOptional("-");
      assertNull(parseOptional);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseOptionalReturningEmptyString() throws Throwable  {
      String parseOptional = ZoneInfoCompiler.parseOptional("");
      assertEquals("", parseOptional);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseYearReturningNegative() throws Throwable  {
      int parseYear = ZoneInfoCompiler.parseYear("only", (-74185799));
      assertEquals((-74185799), parseYear);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseYear0() throws Throwable  {
      int parseYear = ZoneInfoCompiler.parseYear("max", (-3891));
      assertEquals(Integer.MAX_VALUE, parseYear);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseYear1() throws Throwable  {
      int parseYear = ZoneInfoCompiler.parseYear("maximum", (-1339));
      assertEquals(Integer.MAX_VALUE, parseYear);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseYearWithPositive() throws Throwable  {
      int parseYear = ZoneInfoCompiler.parseYear("min", 2150);
      assertEquals(Integer.MIN_VALUE, parseYear);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseYearThrowsNumberFormatException() throws Throwable  {
      // Undeclared exception!
      try { 
        ZoneInfoCompiler.parseYear("-c5m1zrd7k,", 2259);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-c5m1zrd7k,\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompileWithNullAndFileWhereLengthIsZero() throws Throwable  {
      MockFile arg0 = new MockFile(",/", ")R3");
      ZoneInfoCompiler zoneInfoCompiler = new ZoneInfoCompiler();
      Map<String, DateTimeZone> compile = zoneInfoCompiler.compile(arg0, (File[]) null);
      assertTrue(compile.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseTimeThrowsIllegalArgumentException() throws Throwable  {
      // Undeclared exception!
      try { 
        ZoneInfoCompiler.parseTime("-verbose");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -verbose
         //
         verifyException("org.joda.time.tz.ZoneInfoCompiler", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLenientISOChronology() throws Throwable  {
      Chronology lenientISOChronology = ZoneInfoCompiler.getLenientISOChronology();
      assertNotNull(lenientISOChronology);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStartOfYear() throws Throwable  {
      ZoneInfoCompiler.DateTimeOfYear startOfYear = ZoneInfoCompiler.getStartOfYear();
      assertNotNull(startOfYear);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMainThrowsNullPointerException() throws Throwable  {
      String[] arg0 = new String[9];
      arg0[0] = "-src";
      arg0[1] = "-src";
      try { 
        ZoneInfoCompiler.main(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMain0() throws Throwable  {
      String[] arg0 = new String[5];
      arg0[0] = "-?";
      ZoneInfoCompiler.main(arg0);
      assertEquals(5, arg0.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMain1() throws Throwable  {
      String[] arg0 = new String[1];
      arg0[0] = "-verbose";
      ZoneInfoCompiler.main(arg0);
      assertEquals(1, arg0.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseDayOfWeekThrowsIllegalArgumentException() throws Throwable  {
      // Undeclared exception!
      try { 
        ZoneInfoCompiler.parseDayOfWeek(" != ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \" != \" for dayOfWeek is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseMonthThrowsIllegalArgumentException() throws Throwable  {
      // Undeclared exception!
      try { 
        ZoneInfoCompiler.parseMonth("MonthOfYear: 1\nDayOfMonth: 1\nDayOfWeek: 0\nAdvanceDayOfWeek: false\nMillisOfDay: 0\nZoneChar: w\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"MonthOfYear: 1
         // DayOfMonth: 1
         // DayOfWeek: 0
         // AdvanceDayOfWeek: false
         // MillisOfDay: 0
         // ZoneChar: w
         // \" for monthOfYear is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVerbose() throws Throwable  {
      boolean verbose = ZoneInfoCompiler.verbose();
      assertFalse(verbose);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompileWithNullAndEmptyArray() throws Throwable  {
      ZoneInfoCompiler zoneInfoCompiler = new ZoneInfoCompiler();
      File[] arg1 = new File[0];
      Map<String, DateTimeZone> compile = zoneInfoCompiler.compile((File) null, arg1);
      assertEquals(0, compile.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMainWithEmptyArray() throws Throwable  {
      String[] arg0 = new String[0];
      ZoneInfoCompiler.main(arg0);
      assertEquals(0, arg0.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToString() throws Throwable  {
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear = new ZoneInfoCompiler.DateTimeOfYear();
      String string = zoneInfoCompiler_DateTimeOfYear.toString();
      assertEquals("MonthOfYear: 1\nDayOfMonth: 1\nDayOfWeek: 0\nAdvanceDayOfWeek: false\nMillisOfDay: 0\nZoneChar: w\n", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddRecurring() throws Throwable  {
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear = new ZoneInfoCompiler.DateTimeOfYear();
      DateTimeZoneBuilder arg0 = new DateTimeZoneBuilder();
      zoneInfoCompiler_DateTimeOfYear.addRecurring(arg0, "c5m1yRD7K,", (-3365), 52, 2001);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddCutover() throws Throwable  {
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear = new ZoneInfoCompiler.DateTimeOfYear();
      DateTimeZoneBuilder arg0 = new DateTimeZoneBuilder();
      zoneInfoCompiler_DateTimeOfYear.addCutover(arg0, (-1112639283));
  }
}
