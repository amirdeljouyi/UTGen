/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 20 17:23:46 GMT 2024
 */

package de.tudarmstadt.ukp.wikipedia.api;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import de.tudarmstadt.ukp.wikipedia.api.Title;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Title_Original_ESTest extends Title_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToStringReturningNonEmptyString() throws Throwable  {
      Title title = new Title(")");
      String string = title.toString();
      assertEquals(")", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetWikiStyleTitleReturningNonEmptyString() throws Throwable  {
      Title title = new Title(")");
      String wikiStyleTitle = title.getWikiStyleTitle();
      assertEquals(")", wikiStyleTitle);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSectionTextReturningNull() throws Throwable  {
      Title title = new Title(")");
      String sectionText = title.getSectionText();
      assertNull(sectionText);
      assertEquals(")", title.getPlainTitle());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSectionTextReturningEmptyString() throws Throwable  {
      Title title = new Title("#");
      String sectionText = title.getSectionText();
      assertNotNull(sectionText);
      assertEquals("", sectionText);
      assertEquals("", title.getEntity());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPlainTitleReturningNonEmptyString() throws Throwable  {
      Title title = new Title(")");
      String plainTitle = title.getPlainTitle();
      assertEquals(")", plainTitle);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetEntityReturningNonEmptyString() throws Throwable  {
      Title title = new Title(")");
      String entity = title.getEntity();
      assertEquals(")", entity);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDisambiguationTextReturningNull() throws Throwable  {
      Title title = new Title("#w8H\"@YdlhtOq*NF");
      title.getDisambiguationText();
      assertEquals("", title.getEntity());
      assertEquals("w8H\"@YdlhtOq*NF", title.getSectionText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetEntityReturningEmptyString() throws Throwable  {
      Title title = new Title("#w8H\"@YdlhtOq*NF");
      String entity = title.getEntity();
      assertEquals("w8H\"@YdlhtOq*NF", title.getSectionText());
      assertEquals("", entity);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTitle0() throws Throwable  {
      Title title = new Title("S\"jn[D2l{^PY(_Bi)");
      assertEquals("S\"jn[D2l{^P_(_Bi)", title.getWikiStyleTitle());
      assertEquals(" Bi", title.getDisambiguationText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTitle1() throws Throwable  {
      Title title = null;
      try {
        title = new Title("");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Title is empty.
         //
         verifyException("de.tudarmstadt.ukp.wikipedia.api.Title", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToStringReturningEmptyString() throws Throwable  {
      Title title = new Title("#w8H\"@YdlhtOq*NF");
      String string = title.toString();
      assertEquals("w8H\"@YdlhtOq*NF", title.getSectionText());
      assertEquals("", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSectionTextReturningNonEmptyString() throws Throwable  {
      Title title = new Title("#w8H\"@YdlhtOq*NF");
      String sectionText = title.getSectionText();
      assertEquals("w8H\"@YdlhtOq*NF", sectionText);
      assertEquals("", title.getWikiStyleTitle());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRawTitleText() throws Throwable  {
      Title title = new Title("#w8H\"@YdlhtOq*NF");
      title.getRawTitleText();
      assertEquals("w8H\"@YdlhtOq*NF", title.getSectionText());
      assertEquals("", title.getWikiStyleTitle());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPlainTitleReturningEmptyString() throws Throwable  {
      Title title = new Title("#w8H\"@YdlhtOq*NF");
      String plainTitle = title.getPlainTitle();
      assertEquals("w8H\"@YdlhtOq*NF", title.getSectionText());
      assertEquals("", plainTitle);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDisambiguationTextReturningNonEmptyString() throws Throwable  {
      Title title = new Title("(.v?).((K?))");
      title.getDisambiguationText();
      assertEquals("(.v?)_((K?))", title.getWikiStyleTitle());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetWikiStyleTitleReturningEmptyString() throws Throwable  {
      Title title = new Title("#w8H\"@YdlhtOq*NF");
      String wikiStyleTitle = title.getWikiStyleTitle();
      assertEquals("w8H\"@YdlhtOq*NF", title.getSectionText());
      assertEquals("", wikiStyleTitle);
  }
}
