/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Mon Mar 18 04:39:14 GMT 2024
 */

package bierse.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import bierse.model.Drink;
import bierse.model.Model;
import bierse.model.Settings;
import java.io.File;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Drink_ESTest extends Drink_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSaveThrowsTooManyResourcesException() throws Throwable  {
      // rollbacked to evosuite
      Model arg1 = new Model();
      Drink drink = new Drink("y)q.J+'", arg1, 32);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      drink.save();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToStringReturningNull() throws Throwable  {
      // Given a new Drink object with various attributes set
      Model arg1 = new Model();
      Drink drink = new Drink("", arg1, 1621);
      
      // When the toString method is called on the Drink object
      String string = drink.toString();
      
      // Then the string representation of the Drink object should be null
      assertNull(string);
      
      // And the various attributes of the Drink object should have the expected values
      assertEquals(15, drink.getDeltaAmount());
      assertEquals(20, drink.getTargetAmount());
      assertEquals(0, drink.getTotalSold());
      assertEquals(0, drink.getDirectPrice());
      assertEquals(20, drink.getMaxStep());
      assertEquals(70, drink.getMinPrice());
      assertEquals(0.0F, drink.getAveragePrice(), 0.01F);
      assertFalse(drink.isKeepPrice());
      assertEquals(0, drink.getLastSold());
      assertEquals(112, drink.getKey());
      assertEquals(100, drink.getStartPrice());
      assertEquals(0.0F, drink.getAverageSoldPrice(), 0.01F);
      assertEquals(130, drink.getMaxPrice());
      assertEquals(0.0F, drink.getAverageAmount(), 0.01F);
      assertTrue(drink.isUsed());
      assertEquals(0, drink.getTrend());
      assertEquals(1621, drink.getCurrentPrice());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToStringReturningNonEmptyString() throws Throwable  {
      // Arrange
      Model arg1 = new Model();
      Drink drink = new Drink("xOa&E5", arg1);
      
      // Act
      String string = drink.toString();
      
      // Assert
      assertEquals(70, drink.getMinPrice());
      assertEquals(112, drink.getKey());
      assertEquals(0, drink.getLastSold());
      assertEquals(0.0F, drink.getAverageSoldPrice(), 0.01F);
      assertEquals(20, drink.getTargetAmount());
      assertTrue(drink.isUsed());
      assertEquals(0.0F, drink.getAverageAmount(), 0.01F);
      assertEquals(0, drink.getTrend());
      assertEquals(15, drink.getDeltaAmount());
      assertEquals(100, drink.getCurrentPrice());
      assertEquals(130, drink.getMaxPrice());
      assertEquals(20, drink.getMaxStep());
      assertFalse(drink.isKeepPrice());
      assertEquals("xOa&E5", string);
      assertEquals(0, drink.getDirectPrice());
      assertEquals(0, drink.getTotalSold());
      assertEquals(0.0F, drink.getAveragePrice(), 0.01F);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSaveReturningFileWhereLastModifiedIsNegative() throws Throwable  {
      // Given: A Drink object with a specific key and trend value
      Model arg1 = new Model();
      Drink drink = new Drink("`XB", arg1);
      
      // When: The save method is called on the Drink object
      File save = drink.save();
      
      // Then:
      // - The maxPrice of the Drink object should be 130
      assertEquals(130, drink.getMaxPrice());
      
      // - The trend value of the Drink object should be 0
      assertEquals(0, drink.getTrend());
      
      // - The directPrice value of the Drink object should be 0
      assertEquals(0, drink.getDirectPrice());
      
      // - The deltaAmount value of the Drink object should be 15
      assertEquals(15, drink.getDeltaAmount());
      
      // - The save method should return a non-null File object
      assertNotNull(save);
      
      // - The lastSold value of the Drink object should be 0
      assertEquals(0, drink.getLastSold());
      
      // - The length of the File object returned by the save method should be 244
      assertEquals(244L, save.length());
      
      // - The name of the File object should be "`XB.xml"
      assertEquals("`XB.xml", save.getName());
      
      // - The averageAmount value of the Drink object should be close to 0.0F with a tolerance of 0.01F
      assertEquals(0.0F, drink.getAverageAmount(), 0.01F);
      
      // - The targetAmount value of the Drink object should be 20
      assertEquals(20, drink.getTargetAmount());
      
      // - The minPrice value of the Drink object should be 70
      assertEquals(70, drink.getMinPrice());
      
      // - The totalSold value of the Drink object should be 0
      assertEquals(0, drink.getTotalSold());
      
      // - The key value of the Drink object should be 112
      assertEquals(112, drink.getKey());
      
      // - The averageSoldPrice value of the Drink object should be close to 0.0F with a tolerance of 0.01F
      assertEquals(0.0F, drink.getAverageSoldPrice(), 0.01F);
      
      // - The maxStep value of the Drink object should be 20
      assertEquals(20, drink.getMaxStep());
      
      // - The averagePrice value of the Drink object should be close to 0.0F with a tolerance of 0.01F
      assertEquals(0.0F, drink.getAveragePrice(), 0.01F);
      
      // - The currentPrice value of the Drink object should be 100
      assertEquals(100, drink.getCurrentPrice());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetCurrentPrice() throws Throwable  {
      // Given a Drink object with a negative min price and a current price
      Model arg1 = new Model();
      Drink drink = new Drink("./data/", arg1);
      drink.setMinPrice(-1227133513);
      drink.setCurrentPrice(20);
      
      // When the recalculate method is called on the Drink object
      int recalculate = drink.recalculate();
      
      // Then the min price should not change and the recalculate method should return 0
      assertEquals(-1227133513, drink.getMinPrice());
      assertEquals(0, recalculate);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsKeepPriceReturningTrue() throws Throwable  {
      // Create a new instance of the Drink class with some test data
      Model arg1 = new Model();
      Drink drink = new Drink("xOa&E5", arg1);
      
      // Assert that the default value for keepPrice is false
      assertFalse(drink.isKeepPrice());
      
      // Set the value of keepPrice to true
      drink.setKeepPrice(true);
      
      // Assert that the value of keepPrice has been updated to true
      boolean keepPrice = drink.isKeepPrice();
      assertTrue(keepPrice);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTrendReturningPositive() throws Throwable  {
      // Given a Drink object with some initial values
      Model arg1 = new Model();
      Drink drink = new Drink("To@cy", arg1, 8);
      
      // When the recalculate method is called on the Drink object
      drink.recalculate();
      
      // Then the trend should be calculated correctly and the current price should be set to 70
      assertEquals(70, drink.getCurrentPrice());
      assertEquals(1, drink.getTrend());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTrendReturningNegative() throws Throwable  {
      // Given a Drink object with a specific configuration file and model
      Model arg1 = new Model();
      Drink drink = new Drink("./conf/", arg1);
      
      // When the Drink object is recalculated using its recalculate method
      drink.recalculate();
      
      // Then the trend of the Drink should be -1
      int trend = drink.getTrend();
      assertEquals(-1, trend);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalSoldReturningPositive() throws Throwable  {
      // Given a Drink object with a name and total sold
      Model arg1 = new Model();
      Drink drink = new Drink("xOa&E5", arg1);
      drink.setTotalSold(8);
      
      // When the getTotalSold method is called on the Drink object
      int totalSold = drink.getTotalSold();
      
      // Then the method should return the correct total sold value
      assertEquals(8, totalSold);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNameReturningNull() throws Throwable  {
      // No Comments were added
      Model arg1 = new Model();
      Drink drink = new Drink((String) null, arg1, 16);
      String name = drink.getName();
      assertFalse(drink.isKeepPrice());
      assertEquals(20, drink.getTargetAmount());
      assertEquals(20, drink.getMaxStep());
      assertNull(name);
      assertEquals(70, drink.getMinPrice());
      assertEquals(15, drink.getDeltaAmount());
      assertEquals(0, drink.getTotalSold());
      assertEquals(0, drink.getDirectPrice());
      assertEquals(0.0F, drink.getAveragePrice(), 0.01F);
      assertEquals(16, drink.getCurrentPrice());
      assertEquals(0.0F, drink.getAverageSoldPrice(), 0.01F);
      assertTrue(drink.isUsed());
      assertEquals(0, drink.getLastSold());
      assertEquals(0, drink.getTrend());
      assertEquals(100, drink.getStartPrice());
      assertEquals(112, drink.getKey());
      assertEquals(130, drink.getMaxPrice());
      assertEquals(0.0F, drink.getAverageAmount(), 0.01F);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNameReturningNonEmptyString() throws Throwable  {
      // Create a new instance of the Drink class with some predefined values
      Model arg1 = new Model();
      Drink drink = new Drink("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", arg1);
      
      // Verify that the drink name is set correctly
      String name = drink.getName();
      assertEquals("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", name);
      
      // Verify that the current price is set correctly
      assertEquals(100, drink.getCurrentPrice());
      
      // Verify that the average price is set correctly
      assertEquals(0.0F, drink.getAveragePrice(), 0.01F);
      
      // Verify that the average sold price is set correctly
      assertEquals(0.0F, drink.getAverageSoldPrice(), 0.01F);
      
      // Verify that the total sold amount is set correctly
      assertEquals(0, drink.getTotalSold());
      
      // Verify that the trend is set correctly
      assertEquals(0, drink.getTrend());
      
      // Verify that the key is set correctly
      assertEquals(112, drink.getKey());
      
      // Verify that the min price is set correctly
      assertEquals(70, drink.getMinPrice());
      
      // Verify that the keep price flag is set correctly
      assertFalse(drink.isKeepPrice());
      
      // Verify that the target amount is set correctly
      assertEquals(20, drink.getTargetAmount());
      
      // Verify that the max step is set correctly
      assertEquals(20, drink.getMaxStep());
      
      // Verify that the last sold amount is set correctly
      assertEquals(0, drink.getLastSold());
      
      // Verify that the used flag is set correctly
      assertTrue(drink.isUsed());
      
      // Verify that the direct price is set correctly
      assertEquals(130, drink.getDirectPrice());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMinPriceReturningZero() throws Throwable  {
      // Given a Drink object with some default values
      Model arg1 = new Model();
      Drink drink = new Drink("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", arg1);
      
      // When the getMinPrice method is called
      int minPrice = drink.getMinPrice();
      
      // Then the minimum price should be equal to 70
      assertEquals(70, minPrice);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMinPriceReturningNegative() throws Throwable  {
      // Given a Drink object with a negative price
      Model arg1 = new Model();
      Drink drink = new Drink("z0", arg1);
      drink.setMinPrice(-1500);
      
      // When the min price is set to a negative value
      drink.setMinPrice(-1500);
      
      // Then the min price should be -1500
      int minPrice = drink.getMinPrice();
      assertEquals(-1500, minPrice);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxStepReturningZero() throws Throwable  {
      // Setup
      Model arg1 = new Model();
      Drink drink = new Drink("F3Q~0i", arg1, -611);
      
      // Exercise
      drink.setMaxStep(0);
      
      // Verify
      assertEquals(0, drink.getMaxStep());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxStepReturningNegative() throws Throwable  {
      // rollbacked to evosuite
      Model arg1 = new Model();
      Drink drink = new Drink("./conf/", arg1, 313);
      drink.setMaxStep((-1885497974));
      int maxStep = drink.getMaxStep();
      assertEquals((-1885497974), maxStep);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLastSoldReturningNegative() throws Throwable  {
      // Arrange
      Model arg1 = new Model();
      Drink drink = new Drink(null, arg1, -1912169796);
      
      // Act
      drink.sell(-1912169796);
      
      // Assert
      int lastSold = drink.getLastSold();
      assertEquals(-1912169796, lastSold);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDirectPriceReturningPositive() throws Throwable  {
      // Create a new Model object
      Model arg1 = new Model();
      
      // Create a new Drink object with the configuration file path and the Model object as parameters
      Drink drink = new Drink("./conf/", arg1);
      
      // Set the direct price of the Drink object to 4 using the setDirectPrice() method
      drink.setDirectPrice(4);
      
      // Get the direct price of the Drink object using the getDirectPrice() method
      int directPrice = drink.getDirectPrice();
      
      // Assert that the direct price is equal to 4
      assertEquals(4, directPrice);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDirectPriceReturningNegative() throws Throwable  {
      // Given a Drink object with a negative direct price
      Model arg1 = new Model();
      Drink drink = new Drink("6", arg1);
      drink.setDirectPrice((-1122));
      
      // When the setDirectPrice method is called with a negative value
      drink.setDirectPrice((-1122));
      
      // Then the direct price of the Drink object should be updated to the negative value
      int directPrice = drink.getDirectPrice();
      assertEquals((-1122), directPrice);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDeltaAmountReturningZero() throws Throwable  {
      // Given a Drink object with a non-empty name and a valid Model object
      Model model = new Model();
      Drink drink = new Drink("MyDrink", model, 1);
      
      // When we call getDeltaAmount on the Drink object
      int deltaAmount = drink.getDeltaAmount();
      
      // Then we should receive the correct value
      assertEquals(15, deltaAmount);
      
      // Given a Drink object with a valid Model object and a non-zero delta amount
      drink.setDeltaAmount(0);
      deltaAmount = drink.getDeltaAmount();
      
      // When we call getDeltaAmount on the Drink object again
      int updatedDeltaAmount = drink.getDeltaAmount();
      
      // Then we should receive the updated value
      assertEquals(0, deltaAmount);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCurrentPriceReturningZero() throws Throwable  {
      // Given
      Model arg1 = new Model();
      Drink drink = new Drink("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", arg1, 0);
      
      // When
      int currentPrice = drink.getCurrentPrice();
      
      // Then
      assertEquals(100, drink.getStartPrice());
      assertEquals(112, drink.getKey());
      assertEquals(0, drink.getLastSold());
      assertEquals(70, drink.getMinPrice());
      assertEquals(0, currentPrice);
      assertEquals(0, drink.getDirectPrice());
      assertEquals("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", drink.getName());
      assertEquals(0.0F, drink.getAveragePrice(), 0.01F);
      assertEquals(15, drink.getDeltaAmount());
      assertEquals(0, drink.getTotalSold());
      assertFalse(drink.isKeepPrice());
      assertEquals(130, drink.getMaxPrice());
      assertTrue(drink.isUsed());
      assertEquals(20, drink.getMaxStep());
      assertEquals(0.0F, drink.getAverageAmount(), 0.01F);
      assertEquals(20, drink.getTargetAmount());
      assertEquals(0.0F, drink.getAverageSoldPrice(), 0.01F);
      assertEquals(0, drink.getTrend());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAverageSoldPriceReturningNegative() throws Throwable  {
      // Given: a Drink object with a name and some basic properties
      Model arg1 = new Model();
      Drink drink = new Drink("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", arg1);
      
      // When: the average sold price of the drink is set to a specific value
      drink.setAverageSoldPrice((-2310.89F));
      
      // Then: the average sold price of the drink should be equal to the specified value, with a maximum deviation of 0.01
      float averageSoldPrice = drink.getAverageSoldPrice();
      assertEquals((-2310.89F), averageSoldPrice, 0.01F);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAveragePriceReturningPositive() throws Throwable  {
      // rollbacked to evosuite
      Model arg1 = new Model();
      Drink drink = new Drink("./conf/", arg1, 16);
      drink.recalculate();
      float averagePrice = drink.getAveragePrice();
      assertEquals(1, drink.getTrend());
      assertEquals(16.0F, averagePrice, 0.01F);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAveragePriceReturningNegative() throws Throwable  {
      // Set up the test data
      Model model = new Model();
      Drink drink = new Drink("./data/", model, -2776);
      
      // Recalculate the average price of the drink
      drink.recalculate();
      
      // Assert that the current price of the drink is equal to 70
      assertEquals(70, drink.getCurrentPrice());
      
      // Assert that the calculated average price of the drink is close to the expected value
      assertEquals((-2776.0F), drink.getAveragePrice(), 0.01F);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAverageAmountReturningNegative() throws Throwable  {
      // Given a Drink object with a negative iteration and a price of -1986
      Model model = new Model();
      model.setIteration(-1986);
      Drink drink = new Drink("Average price: ", model, 8);
      
      // When the sell method is called with an amount of 16
      drink.sell(16);
      
      // Then the current price should be 70
      assertEquals(70, drink.getCurrentPrice());
      
      // And the average amount should be approximately (-0.008056395F) with a tolerance of 0.01F
      assertEquals((-0.008056395F), drink.getAverageAmount(), 0.01F);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLoad() throws Throwable  {
      // Given
      Model arg1 = new Model();
      Drink drink = new Drink("=Q@~[x1M_", arg1, 32);
      
      // When
      drink.load();
      
      // Then
      assertEquals(15, drink.getDeltaAmount());
      assertEquals(0, drink.getTrend());
      assertEquals(130, drink.getMaxPrice());
      assertTrue(drink.isUsed());
      assertEquals("=Q@~[x1M_", drink.toString());
      assertEquals(20, drink.getMaxStep());
      assertEquals(0.0F, drink.getAverageSoldPrice(), 0.01F);
      assertEquals(32, drink.getCurrentPrice());
      assertEquals(112, drink.getKey());
      assertEquals(70, drink.getMinPrice());
      assertEquals(20, drink.getTargetAmount());
      assertEquals(100, drink.getStartPrice());
      assertEquals(0.0F, drink.getAverageAmount(), 0.01F);
      assertEquals(0, drink.getLastSold());
      assertFalse(drink.isKeepPrice());
      assertEquals(0.0F, drink.getAveragePrice(), 0.01F);
      assertEquals(0, drink.getDirectPrice());
      assertEquals(0, drink.getTotalSold());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesDrinkTaking3ArgumentsAndEqualsAndEqualsReturningFalse0() throws Throwable  {
      // Set up two drinks for comparison
      Model arg1 = new Model();
      Drink drink = new Drink("", arg1, (-3234));
      Drink arg0 = new Drink((String) null, arg1, 1773);
      
      // Test that the drinks are equal
      boolean equals = drink.equals(arg0);
      assertEquals(15, arg0.getDeltaAmount()); // Ensure the delta amount is correct
      assertEquals(0, arg0.getTrend()); // Ensure the trend is zero
      assertEquals(0, arg0.getDirectPrice()); // Ensure the direct price is zero
      assertEquals(1773, arg0.getCurrentPrice()); // Ensure the current price is correct
      assertEquals(20, arg0.getMaxStep()); // Ensure the max step is 20
      assertEquals(0.0F, arg0.getAveragePrice(), 0.01F); // Ensure the average price is zero
      assertFalse(arg0.isKeepPrice()); // Ensure the keep price flag is false
      assertEquals(0.0F, arg0.getAverageSoldPrice(), 0.01F); // Ensure the average sold price is zero
      assertEquals("", drink.getName()); // Ensure the name is an empty string
      assertEquals(70, arg0.getMinPrice()); // Ensure the min price is 70
      assertEquals(100, arg0.getStartPrice()); // Ensure the start price is 100
      assertEquals(112, arg0.getKey()); // Ensure the key is correct
      assertEquals(20, arg0.getTargetAmount()); // Ensure the target amount is 20
      assertEquals(0, arg0.getTotalSold()); // Ensure the total sold is zero
      assertFalse(equals); // Ensure the drinks are not equal
      assertEquals(0.0F, arg0.getAverageAmount(), 0.01F); // Ensure the average amount is zero
      assertEquals(0, arg0.getLastSold()); // Ensure the last sold is zero
      assertEquals(130, arg0.getMaxPrice()); // Ensure the max price is 130
      assertTrue(arg0.isUsed()); // Ensure the used flag is true
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesDrinkTaking3ArgumentsAndEqualsAndEqualsReturningFalse1() throws Throwable  {
      // Create two Drink objects with different names but same values
      Model arg1 = new Model();
      Drink arg0 = new Drink("./conf/", arg1, 8);
      Drink drink = new Drink((String) null, arg1, 4);
      
      // Assert that the two objects are not equal
      assertFalse(drink.equals(arg0));
      
      // Assert that the getAverageSoldPrice method returns the expected value
      assertEquals(0.0F, drink.getAverageSoldPrice(), 0.01F);
      
      // Assert that the getLastSold method returns the expected value
      assertEquals(0, drink.getLastSold());
      
      // Assert that the getDirectPrice method returns the expected value
      assertEquals(0, drink.getDirectPrice());
      
      // Assert that the getTargetAmount method returns the expected value
      assertEquals(20, drink.getTargetAmount());
      
      // Assert that the getStartPrice method returns the expected value
      assertEquals(100, drink.getStartPrice());
      
      // Assert that the getKey method returns the expected value
      assertEquals(112, drink.getKey());
      
      // Assert that the getMaxStep method returns the expected value
      assertEquals(20, drink.getMaxStep());
      
      // Assert that the getCurrentPrice method returns the expected value
      assertEquals(4, drink.getCurrentPrice());
      
      // Assert that the getMinPrice method returns the expected value
      assertEquals(70, drink.getMinPrice());
      
      // Assert that the isKeepPrice method returns the expected value
      assertFalse(drink.isKeepPrice());
      
      // Assert that the getName method returns the expected value
      assertEquals("./conf/", arg0.getName());
      
      // Assert that the getAveragePrice method returns the expected value
      assertEquals(0.0F, drink.getAveragePrice(), 0.01F);
      
      // Assert that the getTotalSold method returns the expected value
      assertEquals(0, drink.getTotalSold());
      
      // Assert that the getTrend method returns the expected value
      assertEquals(0, drink.getTrend());
      
      // Assert that the getMaxPrice method returns the expected value
      assertEquals(130, drink.getMaxPrice());
      
      // Assert that the getDeltaAmount method returns the expected value
      assertEquals(15, drink.getDeltaAmount());
      
      // Assert that the getAverageAmount method returns the expected value
      assertEquals(0.0F, drink.getAverageAmount(), 0.01F);
      
      // Assert that the equals method returns false when comparing two objects with different names but same values
      assertFalse(arg0.equals((Object)drink));
      
      // Assert that the isUsed method returns true for both objects
      assertTrue(drink.isUsed());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesDrinkTaking3ArgumentsAndEqualsAndEqualsReturningTrue0() throws Throwable  {
      // No Comments were added
      Model arg1 = new Model();
      Drink arg0 = new Drink((String) null, arg1, 587);
      boolean equals = arg0.equals(arg0);
      assertEquals(15, arg0.getDeltaAmount());
      assertEquals(20, arg0.getMaxStep());
      assertFalse(arg0.isKeepPrice());
      assertEquals(0.0F, arg0.getAverageAmount(), 0.01F);
      assertEquals(20, arg0.getTargetAmount());
      assertEquals(130, arg0.getMaxPrice());
      assertTrue(arg0.isUsed());
      assertEquals(0, arg0.getTrend());
      assertEquals(0.0F, arg0.getAverageSoldPrice(), 0.01F);
      assertTrue(equals);
      assertEquals(112, arg0.getKey());
      assertEquals(70, arg0.getMinPrice());
      assertEquals(100, arg0.getStartPrice());
      assertEquals(0, arg0.getLastSold());
      assertEquals(587, arg0.getCurrentPrice());
      assertEquals(0, arg0.getTotalSold());
      assertEquals(0.0F, arg0.getAveragePrice(), 0.01F);
      assertEquals(0, arg0.getDirectPrice());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesDrinkTaking3ArgumentsAndEqualsAndEqualsReturningTrue1() throws Throwable  {
      // Given a Drink object with certain attributes
      Model model = new Model();
      Drink drink = new Drink("", model, -3234);
      
      // When the equals method is called on the Drink object
      boolean equals = drink.equals(drink);
      
      // Then the equals method returns true and all other assertions are met
      assertEquals(130, drink.getMaxPrice());
      assertEquals(15, drink.getDeltaAmount());
      assertTrue(drink.isUsed());
      assertEquals(0.0F, drink.getAverageSoldPrice(), 0.01F);
      assertEquals(0, drink.getTrend());
      assertEquals(20, drink.getTargetAmount());
      assertEquals(100, drink.getStartPrice());
      assertEquals((-3234), drink.getCurrentPrice());
      assertEquals(0.0F, drink.getAverageAmount(), 0.01F);
      assertEquals("", drink.getName());
      assertEquals(20, drink.getMaxStep());
      assertEquals(70, drink.getMinPrice());
      assertFalse(drink.isKeepPrice());
      assertEquals(0, drink.getLastSold());
      assertEquals(0.0F, drink.getAveragePrice(), 0.01F);
      assertEquals(0, drink.getTotalSold());
      assertTrue(equals);
      assertEquals(0, drink.getDirectPrice());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLoadThrowsTooManyResourcesException() throws Throwable  {
      // rollbacked to evosuite
      Model arg1 = new Model();
      Drink drink = new Drink("=Q@~[x1M_", arg1, 32);
      drink.save();
      // Undeclared exception!
      drink.load();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSave() throws Throwable  {
      // Given a Drink object with default values
      Model arg1 = new Model();
      Drink drink = new Drink("=<F5 *h", arg1);
      
      // When the drink is saved
      File save = drink.save();
      
      // Then the last sold amount should be 0
      assertEquals(0, drink.getLastSold());
      
      // And the length of the file should be 244
      assertEquals(244L, save.length());
      
      // And the file should not be null
      assertNotNull(save);
      
      // And the drink should not be keep price
      assertFalse(drink.isKeepPrice());
      
      // And the min price of the drink should be 70
      assertEquals(70, drink.getMinPrice());
      
      // And the max step of the drink should be 20
      assertEquals(20, drink.getMaxStep());
      
      // And the key of the drink should be 112
      assertEquals(112, drink.getKey());
      
      // And the average sold price of the drink should be 0.0F with a tolerance of 0.01F
      assertEquals(0.0F, drink.getAverageSoldPrice(), 0.01F);
      
      // And the target amount of the drink should be 20
      assertEquals(20, drink.getTargetAmount());
      
      // And the current price of the drink should be 100
      assertEquals(100, drink.getCurrentPrice());
      
      // And the average price of the drink should be 0.0F with a tolerance of 0.01F
      assertEquals(0.0F, drink.getAveragePrice(), 0.01F);
      
      // And the trend of the drink should be 0
      assertEquals(0, drink.getTrend());
      
      // And the file should not be hidden
      assertFalse(save.isHidden());
      
      // And the average amount of the drink should be 0.0F with a tolerance of 0.01F
      assertEquals(0.0F, drink.getAverageAmount(), 0.01F);
      
      // And the direct price of the drink should be 0
      assertEquals(0, drink.getDirectPrice());
      
      // And the max price of the drink should be 130
      assertEquals(130, drink.getMaxPrice());
      
      // And the delta amount of the drink should be 15
      assertEquals(15, drink.getDeltaAmount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSaveReturningNull() throws Throwable  {
      // rollbacked to evosuite
      Model arg1 = new Model();
      Drink drink = new Drink("Neues Getr\u00E4nk", arg1, 2);
      File save = drink.save();
      assertNull(save);
      assertEquals(0, drink.getLastSold());
      assertEquals(0, drink.getDirectPrice());
      assertTrue(drink.isUsed());
      assertEquals(130, drink.getMaxPrice());
      assertEquals(0, drink.getTotalSold());
      assertEquals(15, drink.getDeltaAmount());
      assertEquals(20, drink.getMaxStep());
      assertEquals(0.0F, drink.getAveragePrice(), 0.01F);
      assertEquals(2, drink.getCurrentPrice());
      assertFalse(drink.isKeepPrice());
      assertEquals(0.0F, drink.getAverageAmount(), 0.01F);
      assertEquals(0, drink.getTrend());
      assertEquals(70, drink.getMinPrice());
      assertEquals(100, drink.getStartPrice());
      assertEquals(20, drink.getTargetAmount());
      assertEquals(112, drink.getKey());
      assertEquals(0.0F, drink.getAverageSoldPrice(), 0.01F);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesDrinkTaking3ArgumentsAndCallsRecalculate() throws Throwable  {
      // Arrange
      Model arg1 = new Model();
      Drink drink = new Drink("./conf/", arg1, 313);
      
      // Act
      int recalculate = drink.recalculate();
      
      // Assert
      assertEquals(-1, drink.getTrend());
      assertEquals(130, recalculate);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRecalculate0() throws Throwable  {
      // Given a drink with last sold value of 3713 and standard logic set to false
      Model arg1 = new Model();
      Settings settings = arg1.getSettings();
      settings.setStandardLogic(false);
      Drink drink = new Drink("./conf/settings/", arg1);
      drink.setLastSold(3713);
      
      // When the trend is calculated for this drink
      int recalculate = drink.recalculate();
      
      // Then the trend should be -1 and the total revenue should be 80
      assertEquals((-1), drink.getTrend());
      assertEquals(80, recalculate);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesDrinkTaking2ArgumentsAndCallsRecalculate() throws Throwable  {
      // Given a Drink object with some data
      Model arg1 = new Model();
      Settings settings = arg1.getSettings();
      settings.setStandardLogic(false);
      Drink drink = new Drink("./conf/settings/", arg1);
      
      // When the recalculate method is called on that object
      int recalculate = drink.recalculate();
      
      // Then the average price should be 100.0F, and the return value of the recalculate method should be 120
      assertEquals(100.0F, drink.getAveragePrice(), 0.01F);
      assertEquals(120, recalculate);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRecalculate1() throws Throwable  {
      // Create a new instance of the model and set its last sold value to 3713.
      Model arg1 = new Model();
      Drink drink = new Drink("./conf/settings/", arg1);
      drink.setLastSold(3713);
      
      // Call the recalculate method on the drink object.
      int recalculate = drink.recalculate();
      
      // Assert that the current price of the drink is 120, and also assert that the return value of the recalculate method is equal to 120.
      assertEquals(120, drink.getCurrentPrice());
      assertEquals(120, recalculate);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDeltaAmountReturningPositive() throws Throwable  {
      // Given
      Model arg1 = new Model();
      Drink drink = new Drink("#qt18}9+L]/(", arg1);
      
      // When
      int deltaAmount = drink.getDeltaAmount();
      
      // Then
      assertEquals(100, drink.getCurrentPrice());
      assertFalse(drink.isKeepPrice());
      assertEquals(20, drink.getMaxStep());
      assertEquals("#qt18}9+L]/(", drink.toString());
      assertEquals(130, drink.getMaxPrice());
      assertEquals(0, drink.getTrend());
      assertTrue(drink.isUsed());
      assertEquals(15, deltaAmount);
      assertEquals(0.0F, drink.getAverageAmount(), 0.01F);
      assertEquals(0.0F, drink.getAverageSoldPrice(), 0.01F);
      assertEquals(0, drink.getLastSold());
      assertEquals(112, drink.getKey());
      assertEquals(20, drink.getTargetAmount());
      assertEquals(0, drink.getTotalSold());
      assertEquals(70, drink.getMinPrice());
      assertEquals(0, drink.getDirectPrice());
      assertEquals(0.0F, drink.getAveragePrice(), 0.01F);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAverageSoldPriceReturningZero() throws Throwable  {
      // Set up the model and drink objects
      Model arg1 = new Model();
      Drink drink = new Drink("./data/", arg1);
      
      // Verify the attributes of the drink object
      assertEquals(0, drink.getDirectPrice());
      assertEquals(15, drink.getDeltaAmount());
      assertEquals(0, drink.getTrend());
      assertEquals(0.0F, drink.getAverageAmount(), 0.01F);
      assertTrue(drink.isUsed());
      assertEquals(0, drink.getLastSold());
      assertEquals(130, drink.getMaxPrice());
      assertEquals(0.0F, drink.getAveragePrice(), 0.01F);
      assertEquals(20, drink.getMaxStep());
      assertEquals(0.0F, drink.getAverageSoldPrice(), 0.01F);
      assertEquals(0, drink.getTotalSold());
      assertEquals(20, drink.getTargetAmount());
      assertEquals("./data/", drink.getName());
      assertEquals(112, drink.getKey());
      assertEquals(100, drink.getCurrentPrice());
      assertEquals(70, drink.getMinPrice());
      assertFalse(drink.isKeepPrice());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToStringReturningEmptyString() throws Throwable  {
      Model arg1 = new Model();
      Drink drink = new Drink("", arg1, 32);
      String string = drink.toString();
      
      // Verify that the total sold of the drink is zero
      assertEquals(0, drink.getTotalSold());
      
      // Verify that the average amount of the drink is zero
      assertEquals(0.0F, drink.getAverageAmount(), 0.01F);
      
      // Verify that the target amount of the drink is 20
      assertEquals(20, drink.getTargetAmount());
      
      // Verify that the maximum step of the drink is 20
      assertEquals(20, drink.getMaxStep());
      
      // Verify that the average price of the drink is zero
      assertEquals(0.0F, drink.getAveragePrice(), 0.01F);
      
      // Verify that the current price of the drink is 32
      assertEquals(32, drink.getCurrentPrice());
      
      // Verify that the key of the drink is 112
      assertEquals(112, drink.getKey());
      
      // Verify that the start price of the drink is 100
      assertEquals(100, drink.getStartPrice());
      
      // Verify that the minimum price of the drink is 70
      assertEquals(70, drink.getMinPrice());
      
      // Verify that the drink is not being kept at its current price
      assertFalse(drink.isKeepPrice());
      
      // Verify that the drink is used
      assertTrue(drink.isUsed());
      
      // Verify that the direct price of the drink is zero
      assertEquals(0, drink.getDirectPrice());
      
      // Verify that the trend of the drink is zero
      assertEquals(0, drink.getTrend());
      
      // Verify that the delta amount of the drink is 15
      assertEquals(15, drink.getDeltaAmount());
      
      // Verify that the average sold price of the drink is zero
      assertEquals(0.0F, drink.getAverageSoldPrice(), 0.01F);
      
      // Verify that the last sold time of the drink is zero
      assertEquals(0, drink.getLastSold());
      
      // Verify that the string representation of the drink is an empty string
      assertEquals("", string);
      
      // Verify that the maximum price of the drink is 130
      assertEquals(130, drink.getMaxPrice());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetKey() throws Throwable  {
      // Given: A new Drink object has been created and initialized
      Model arg1 = new Model();
      Drink drink = new Drink("./data/", arg1);
      
      // When: The setKey method is called on the Drink object with a specific key value
      drink.setKey((-1227133513));
      
      // Then: The getKey method should return the same key value as was set
      int key = drink.getKey();
      assertEquals((-1227133513), key);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLastSoldReturningPositive() throws Throwable  {
      // Given: a new Drink object with a name and a Model argument
      Model arg1 = new Model();
      Drink drink = new Drink("+NG'+02f]8", arg1);
      
      // When: the setLastSold method is called with an integer value
      drink.setLastSold(32);
      
      // Then: the lastSold field of the Drink object should be updated to the specified value
      assertEquals(32, drink.getLastSold());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetAveragePrice() throws Throwable  {
      // Given a Drink object with a non-empty file path and a valid Model object
      Model arg1 = new Model();
      Drink drink = new Drink("./data/", arg1);
      
      // When the setAveragePrice method is called with a valid price value (32)
      drink.setAveragePrice(32);
      
      // Then the average price of the Drink object should be equal to 32.0F, with an error tolerance of 0.01F
      assertEquals(32.0F, drink.getAveragePrice(), 0.01F);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLastSoldReturningZero() throws Throwable  {
      // Given a new Drink object with default values
      Model arg1 = new Model();
      Drink drink = new Drink("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", arg1);
      
      // When the last sold value is retrieved
      int lastSold = drink.getLastSold();
      
      // Then the direct price should be 0
      assertEquals(0, drink.getDirectPrice());
      
      // And the toString method should return a string with the correct format
      assertEquals("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", drink.toString());
      
      // And the average sold price should be 0
      assertEquals(0.0F, drink.getAverageSoldPrice(), 0.01F);
      
      // And the key should be 112
      assertEquals(112, drink.getKey());
      
      // And the trend should be 0
      assertEquals(0, drink.getTrend());
      
      // And the max price should be 130
      assertEquals(130, drink.getMaxPrice());
      
      // And the drink is used
      assertTrue(drink.isUsed());
      
      // And the last sold value should be 0
      assertEquals(0, lastSold);
      
      // And the average amount should be 0
      assertEquals(0.0F, drink.getAverageAmount(), 0.01F);
      
      // And the max step should be 20
      assertEquals(20, drink.getMaxStep());
      
      // And the average price should be 0
      assertEquals(0.0F, drink.getAveragePrice(), 0.01F);
      
      // And the drink is not kept with its current price
      assertFalse(drink.isKeepPrice());
      
      // And the total sold should be 0
      assertEquals(0, drink.getTotalSold());
      
      // And the target amount should be 20
      assertEquals(20, drink.getTargetAmount());
      
      // And the delta amount should be 15
      assertEquals(15, drink.getDeltaAmount());
      
      // And the min price should be 70
      assertEquals(70, drink.getMinPrice());
      
      // And the current price should be 100
      assertEquals(100, drink.getCurrentPrice());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAverageSoldPriceReturningPositive() throws Throwable  {
      // Given: A new instance of a Drink with an average sold price set to 2769.4924F
      Model arg1 = new Model();
      Drink drink = new Drink("./data/", arg1);
      drink.setAverageSoldPrice(2769.4924F);
      
      // When: The average sold price is retrieved
      float averageSoldPrice = drink.getAverageSoldPrice();
      
      // Then: The retrieved average sold price should be equal to 2769.4924F
      assertEquals(2769.4924F, averageSoldPrice, 0.01F);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRecalculateReturningNegative() throws Throwable  {
      // Given a drink object with a negative price
      Model arg1 = new Model();
      Drink drink = new Drink("./data/", arg1, (-353));
      
      // When the recalculate method is called
      int recalculate = drink.recalculate();
      
      // Then the min price should be set to the negative value
      assertEquals((-337), drink.getMinPrice());
      
      // And the return value of the recalculate method should also be the negative value
      assertEquals((-337), recalculate);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetAverageAmount() throws Throwable  {
      Model arg1 = new Model();
      Drink drink = new Drink("./conf/", arg1);
      drink.setAverageAmount(2);
      float averageAmount = drink.getAverageAmount();
      // Test that the average amount of the drink is equal to 2.0F with a tolerance of 0.01F
      assertEquals(2.0F, averageAmount, 0.01F);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxPriceReturningPositive() throws Throwable  {
      // Arrange
      Model arg1 = new Model();
      Drink drink = new Drink("F3Q~0i", arg1, 100);
      
      // Act
      int maxPrice = drink.getMaxPrice();
      
      // Assert
      assertTrue(drink.isUsed());
      assertEquals(0, drink.getDirectPrice());
      assertEquals(0, drink.getTrend());
      assertEquals(0, drink.getLastSold());
      assertEquals(15, drink.getDeltaAmount());
      assertEquals(0.0F, drink.getAverageAmount(), 0.01F);
      assertEquals(130, maxPrice);
      assertEquals(100, drink.getCurrentPrice());
      assertEquals(0, drink.getTotalSold());
      assertEquals("F3Q~0i", drink.getName());
      assertEquals(0.0F, drink.getAveragePrice(), 0.01F);
      assertEquals(0.0F, drink.getAverageSoldPrice(), 0.01F);
      assertEquals(20, drink.getMaxStep());
      assertEquals(100, drink.getStartPrice());
      assertFalse(drink.isKeepPrice());
      assertEquals(112, drink.getKey());
      assertEquals(70, drink.getMinPrice());
      assertEquals(20, drink.getTargetAmount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetMaxStep() throws Throwable  {
      // Given a Drink object with a negative max step
      Model arg1 = new Model();
      Drink drink = new Drink("./conf/", arg1, 313);
      drink.setMaxStep((-1885497974));
      
      // When the recalculate method is called
      drink.recalculate();
      
      // Then the current price should be set to 130 and the method should return the same value
      assertEquals(130, drink.getCurrentPrice());
      assertEquals(130, drink.recalculate());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetKeepPrice() throws Throwable  {
      // Given a Drink object with a set keepPrice flag to true and a price of 8
      Model arg1 = new Model();
      Drink drink = new Drink(";", arg1, 8);
      drink.setKeepPrice(true);
      
      // When the recalculate method is called on the Drink object
      int recalculate = drink.recalculate();
      
      // Then the keepPrice flag should be true and the recalculated price should be 70
      assertTrue(drink.isKeepPrice());
      assertEquals(70, recalculate);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNameReturningEmptyString() throws Throwable  {
      // Given a Drink object with default values
      Model arg1 = new Model();
      Drink drink = new Drink("", arg1);
      
      // When we retrieve various properties of the drink
      String name = drink.getName();
      int maxStep = drink.getMaxStep();
      int currentPrice = drink.getCurrentPrice();
      int maxPrice = drink.getMaxPrice();
      boolean keepPrice = drink.isKeepPrice();
      int deltaAmount = drink.getDeltaAmount();
      float averagePrice = drink.getAveragePrice();
      int directPrice = drink.getDirectPrice();
      int totalSold = drink.getTotalSold();
      int lastSold = drink.getLastSold();
      float averageSoldPrice = drink.getAverageSoldPrice();
      int minPrice = drink.getMinPrice();
      boolean used = drink.isUsed();
      float averageAmount = drink.getAverageAmount();
      
      // Then we expect the properties to have certain values
      assertEquals("", name);
      assertEquals(20, maxStep);
      assertEquals(100, currentPrice);
      assertEquals(130, maxPrice);
      assertFalse(keepPrice);
      assertEquals(15, deltaAmount);
      assertEquals(0.0F, averagePrice, 0.01F);
      assertEquals(0, directPrice);
      assertEquals(0, totalSold);
      assertEquals(0, lastSold);
      assertEquals(0.0F, averageSoldPrice, 0.01F);
      assertEquals(70, minPrice);
      assertTrue(used);
      assertEquals(0.0F, averageAmount, 0.01F);
      assertEquals(20, drink.getTargetAmount());
      assertEquals(112, drink.getKey());
      assertEquals(0, drink.getTrend());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxStepReturningPositive() throws Throwable  {
      // Given a new Drink object with name and key
      Model arg1 = new Model();
      Drink drink = new Drink("F3Q~0i", arg1, (-611));
      
      // When the drink is initialized
      
      // Then the drink's attributes are properly set
      assertEquals(0.0F, drink.getAverageAmount(), 0.01F);
      assertEquals(20, drink.getTargetAmount());
      assertEquals(100, drink.getStartPrice());
      assertEquals((-611), drink.getCurrentPrice());
      assertEquals(0, drink.getTotalSold());
      assertEquals(0, drink.getLastSold());
      assertEquals("F3Q~0i", drink.getName());
      assertTrue(drink.isUsed());
      assertEquals(130, drink.getMaxPrice());
      assertEquals(0, drink.getTrend());
      assertEquals(15, drink.getDeltaAmount());
      assertEquals(0, drink.getDirectPrice());
      assertEquals(0.0F, drink.getAverageSoldPrice(), 0.01F);
      assertEquals(20, drink.getMaxStep());
      assertEquals(0.0F, drink.getAveragePrice(), 0.01F);
      assertFalse(drink.isKeepPrice());
      assertEquals(70, drink.getMinPrice());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMinPriceReturningPositive() throws Throwable  {
      // Given
      Model arg1 = new Model();
      Drink drink = new Drink("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", arg1);
      
      // When
      int minPrice = drink.getMinPrice();
      assertEquals(70, minPrice);
      
      // Then
      assertEquals(0.0F, drink.getAverageAmount(), 0.01F);
      assertEquals(20, drink.getTargetAmount());
      assertEquals(0, drink.getTotalSold());
      assertEquals(0.0F, drink.getAveragePrice(), 0.01F);
      assertFalse(drink.isKeepPrice());
      assertEquals(100, drink.getCurrentPrice());
      assertEquals(112, drink.getKey());
      assertEquals(20, drink.getMaxStep());
      assertEquals("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", drink.toString());
      assertEquals(0.0F, drink.getAverageSoldPrice(), 0.01F);
      assertEquals(130, drink.getMaxPrice());
      assertTrue(drink.isUsed());
      assertEquals(0, drink.getDirectPrice());
      assertEquals(0, drink.getTrend());
      assertEquals(0, drink.getLastSold());
      assertEquals(15, drink.getDeltaAmount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsKeepPriceReturningFalse() throws Throwable  {
      // Set up the test data
      Model arg1 = new Model();
      Drink drink = new Drink("xOa&E5", arg1);
      
      // Test the getters and setters of the Drink class
      assertEquals(15, drink.getDeltaAmount());
      assertEquals(0, drink.getTrend());
      assertEquals(100, drink.getCurrentPrice());
      assertTrue(drink.isUsed());
      assertEquals(130, drink.getMaxPrice());
      assertEquals("xOa&E5", drink.toString());
      assertEquals(0, drink.getTotalSold());
      assertEquals(0, drink.getDirectPrice());
      assertEquals(20, drink.getTargetAmount());
      assertEquals(112, drink.getKey());
      assertFalse(drink.isKeepPrice());
      assertEquals(70, drink.getMinPrice());
      assertEquals(20, drink.getMaxStep());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalSoldReturningZero() throws Throwable  {
      // No Comments were added
      Model arg1 = new Model();
      Drink drink = new Drink("=<F5 *h", arg1);
      int totalSold = drink.getTotalSold();
      assertEquals(0.0F, drink.getAverageSoldPrice(), 0.01F);
      assertEquals(0, drink.getTrend());
      assertEquals(0, drink.getDirectPrice());
      assertEquals(112, drink.getKey());
      assertEquals(0, totalSold);
      assertEquals(20, drink.getTargetAmount());
      assertEquals(100, drink.getCurrentPrice());
      assertEquals(70, drink.getMinPrice());
      assertFalse(drink.isKeepPrice());
      assertEquals(20, drink.getMaxStep());
      assertEquals(0.0F, drink.getAveragePrice(), 0.01F);
      assertEquals(0.0F, drink.getAverageAmount(), 0.01F);
      assertEquals(15, drink.getDeltaAmount());
      assertEquals(130, drink.getMaxPrice());
      assertEquals("=<F5 *h", drink.getName());
      assertEquals(0, drink.getLastSold());
      assertTrue(drink.isUsed());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetStartPrice() throws Throwable  {
      // Given a drink with a negative start price
      Model arg1 = new Model();
      Drink drink = new Drink("-KM!Acwuj><DDUH", arg1, 535);
      drink.setStartPrice(-1749);
      
      // When the start price is set to a negative value
      drink.setStartPrice(-200);
      
      // Then the start price should be updated to the new value
      assertEquals(-200, drink.getStartPrice());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDirectPrice() throws Throwable  {
      Model argument = new Model();
      Drink drink = new Drink(";", argument, 1);
      // Sets the direct price of the drink to $32.
      drink.setDirectPrice(32);
      // Recalculates the total price of the drink based on its ingredients and quantity.
      int recalculate = drink.recalculate();
      // Verifies that the direct price of the drink is $0, as it has not been changed since it was set to $32 earlier.
      assertEquals(0, drink.getDirectPrice());
      // Verifies that the total price of the drink after recalculation is $70, as it includes a premium ingredient and has a quantity of 1.
      assertEquals(70, recalculate);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAverageAmountReturningZero() throws Throwable  {
      // Given a new Drink instance
      Model model = new Model();
      Drink drink = new Drink("+NG'+02f]8", model);
      
      // When the drink is initialized
      float averageAmount = drink.getAverageAmount();
      
      // Then the drink's properties are set correctly
      assertEquals(0, drink.getTotalSold());
      assertFalse(drink.isKeepPrice());
      assertEquals(20, drink.getMaxStep());
      assertEquals(112, drink.getKey());
      assertEquals(20, drink.getTargetAmount());
      assertEquals("+NG'+02f]8", drink.getName());
      assertEquals(0, drink.getTrend());
      assertEquals(0, drink.getDirectPrice());
      assertEquals(130, drink.getMaxPrice());
      assertTrue(drink.isUsed());
      
      // And the average amount is 0
      assertEquals(0.0F, averageAmount, 0.01F);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetTargetAmount() throws Throwable  {
      // Given: We have a Model and a Drink object with a specific set of attributes
      Model arg1 = new Model();
      Drink drink = new Drink("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", arg1);
      
      // When: We set the target amount of the drink to a negative value
      drink.setTargetAmount((-1));
      
      // Then: The target amount is correctly set to the negative value
      int targetAmount = drink.getTargetAmount();
      assertEquals((-1), targetAmount);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStartPriceReturningPositive() throws Throwable  {
      // Given a Drink object with some initial values set
      Model arg1 = new Model();
      Drink drink = new Drink("./conf/", arg1, 313);
      
      // When the drink's properties are accessed and asserted
      int startPrice = drink.getStartPrice();
      assertEquals(100, startPrice);
      assertEquals(20, drink.getTargetAmount());
      assertEquals(313, drink.getCurrentPrice());
      assertEquals(20, drink.getMaxStep());
      assertFalse(drink.isKeepPrice());
      assertEquals(70, drink.getMinPrice());
      assertEquals(0, drink.getLastSold());
      
      // Then the correct values are returned and no exceptions are thrown
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDeltaAmountReturningNegative() throws Throwable  {
      // Test that setDeltaAmount() sets the correct value
      Model arg1 = new Model();
      Drink drink = new Drink("#qt18}9+L]/(", arg1);
      drink.setDeltaAmount((-1982523751));
      int deltaAmount = drink.getDeltaAmount();
      assertEquals((-1982523751), deltaAmount);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalSoldReturningNegative() throws Throwable  {
      // rollbacked to evosuite
      Model arg1 = new Model();
      Drink drink = new Drink("=<F5 *h", arg1);
      drink.setTotalSold((-16));
      int totalSold = drink.getTotalSold();
      assertEquals((-16), totalSold);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDirectPriceReturningZero() throws Throwable  {
      // Given
      Model arg1 = new Model();
      Drink drink = new Drink("./conf/", arg1);
      
      // When
      int directPrice = drink.getDirectPrice();
      
      // Then
      assertEquals(0.0F, drink.getAverageSoldPrice(), 0.01F);
      assertEquals(0, drink.getLastSold());
      assertEquals(0, directPrice);
      assertEquals(130, drink.getMaxPrice());
      assertEquals(15, drink.getDeltaAmount());
      assertEquals(0.0F, drink.getAverageAmount(), 0.01F);
      assertTrue(drink.isUsed());
      assertEquals(0.0F, drink.getAveragePrice(), 0.01F);
      assertEquals(0, drink.getTrend());
      assertEquals(0, drink.getTotalSold());
      assertEquals(20, drink.getTargetAmount());
      assertEquals("./conf/", drink.getName());
      assertEquals(112, drink.getKey());
      assertEquals(20, drink.getMaxStep());
      assertEquals(100, drink.getCurrentPrice());
      assertEquals(70, drink.getMinPrice());
      assertFalse(drink.isKeepPrice());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetMaxPrice() throws Throwable  {
      // Given a Drink object with a null name and a price of 1621
      Model arg1 = new Model();
      Drink drink = new Drink((String) null, arg1, 1621);
      
      // When the maxPrice field is set to -2048
      drink.setMaxPrice(-2048);
      
      // Then the getMaxPrice method returns -2048
      int actualMaxPrice = drink.getMaxPrice();
      assertEquals(-2048, actualMaxPrice);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDataHeaderString() throws Throwable  {
      // No Comments were added
      String dataHeaderString = Drink.getDataHeaderString();
      assertEquals("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", dataHeaderString);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsUsedReturningFalse() throws Throwable  {
      // Create a new model and a drink with the name ":6"
      Model model = new Model();
      Drink drink = new Drink(":6", model);
      
      // Assert that the drink is used
      assertTrue(drink.isUsed());
      
      // Disable the drink
      model.disableDrink(drink);
      
      // Assert that the drink is no longer used
      boolean isUsed = drink.isUsed();
      assertFalse(isUsed);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDataString() throws Throwable  {
      // Given a new instance of Drink with the ID "F3Q~0i" and Model arg1
      Model arg1 = new Model();
      Drink drink = new Drink("F3Q~0i", arg1, (-611));
      
      // When the drink's data is retrieved as a String
      String dataString = drink.getDataString();
      
      // Then the following properties of the drink should be correct:
      
      // The drink should not be kept at its price
      assertFalse(drink.isKeepPrice());
      
      // The drink's maximum step should be 20
      assertEquals(20, drink.getMaxStep());
      
      // The drink should be used
      assertTrue(drink.isUsed());
      
      // The direct price of the drink should be 0
      assertEquals(0, drink.getDirectPrice());
      
      // The data string of the drink should contain the expected values
      assertEquals("F3Q~0i;70;100;130;0.0;0.0;0.0;0", dataString);
      
      // The trend of the drink should be 0
      assertEquals(0, drink.getTrend());
      
      // The target amount of the drink should be 20
      assertEquals(20, drink.getTargetAmount());
      
      // The last sold amount of the drink should be 0
      assertEquals(0, drink.getLastSold());
      
      // The current price of the drink should be (-611)
      assertEquals((-611), drink.getCurrentPrice());
      
      // The delta amount of the drink should be 15
      assertEquals(15, drink.getDeltaAmount());
      
      // The key of the drink should be 112
      assertEquals(112, drink.getKey());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetKeyReturningPositive() throws Throwable  {
      // Given a Drink object with various setters and getters
      Model arg1 = new Model();
      Drink drink = new Drink("F3Q~0i", arg1, (-611));
      
      // When we call the setters for each field
      int key = drink.getKey();
      assertEquals(112, key);
      assertEquals(0, drink.getDirectPrice());
      assertEquals(130, drink.getMaxPrice());
      assertTrue(drink.isUsed());
      assertEquals(0, drink.getLastSold());
      assertEquals(15, drink.getDeltaAmount());
      assertEquals(0, drink.getTotalSold());
      assertEquals((-611), drink.getCurrentPrice());
      assertEquals(20, drink.getMaxStep());
      assertEquals(0.0F, drink.getAverageAmount(), 0.01F);
      assertEquals(0.0F, drink.getAveragePrice(), 0.01F);
      assertEquals(20, drink.getTargetAmount());
      assertEquals(70, drink.getMinPrice());
      assertFalse(drink.isKeepPrice());
      assertEquals(100, drink.getStartPrice());
      assertEquals("F3Q~0i", drink.getName());
      assertEquals(0.0F, drink.getAverageSoldPrice(), 0.01F);
      assertEquals(0, drink.getTrend());
      
      // Then we can call the getters and verify that the values are correct
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsUsedReturningTrue() throws Throwable  {
      // Create a new Model object
      Model model = new Model();
      // Initialize a Drink object with the given parameters
      Drink drink = new Drink(":6", model);
      
      // Assert that the Drink object has the correct fields set
      assertEquals(70, drink.getMinPrice());
      assertEquals(20, drink.getTargetAmount());
      assertEquals(0.0F, drink.getAverageSoldPrice(), 0.01F);
      assertEquals(0, drink.getLastSold());
      assertEquals(112, drink.getKey());
      assertEquals(0, drink.getDirectPrice());
      assertEquals(20, drink.getMaxStep());
      assertEquals(0, drink.getTotalSold());
      assertFalse(drink.isKeepPrice());
      assertEquals(0.0F, drink.getAveragePrice(), 0.01F);
      assertEquals(100, drink.getCurrentPrice());
      assertEquals(15, drink.getDeltaAmount());
      
      // Assert that the Drink object has the correct methods set
      boolean used = drink.isUsed();
      assertTrue(used);
      assertEquals(130, drink.getMaxPrice());
      assertEquals(":6", drink.toString());
      assertEquals(0, drink.getTrend());
      assertEquals(0.0F, drink.getAverageAmount(), 0.01F);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTargetAmountReturningPositive() throws Throwable  {
      // Create a new model instance with default values
      Model arg1 = new Model();
      
      // Create a new drink instance with the given parameters
      Drink drink = new Drink("F3Q~0i", arg1, (-611));
      
      // Verify that the target amount is 20
      assertEquals(20, drink.getTargetAmount());
      
      // Verify that the average price is close to 0.0F
      assertEquals(0.0F, drink.getAveragePrice(), 0.01F);
      
      // Verify that the trend is 0
      assertEquals(0, drink.getTrend());
      
      // Verify that the maximum price is 130
      assertEquals(130, drink.getMaxPrice());
      
      // Verify that the average amount is close to 0.0F
      assertEquals(0.0F, drink.getAverageAmount(), 0.01F);
      
      // Verify that the delta amount is 15
      assertEquals(15, drink.getDeltaAmount());
      
      // Verify that the total sold is 0
      assertEquals(0, drink.getTotalSold());
      
      // Verify that the drink is used
      assertTrue(drink.isUsed());
      
      // Verify that the last sold price is 0
      assertEquals(0, drink.getLastSold());
      
      // Verify that the average sold price is close to 0.0F
      assertEquals(0.0F, drink.getAverageSoldPrice(), 0.01F);
      
      // Verify that the direct price is 0
      assertEquals(0, drink.getDirectPrice());
      
      // Verify that the toString method returns the expected value
      assertEquals("F3Q~0i", drink.toString());
      
      // Verify that the current price is close to -611
      assertEquals((-611), drink.getCurrentPrice());
      
      // Verify that the minimum price is 70
      assertEquals(70, drink.getMinPrice());
      
      // Verify that the key is 112
      assertEquals(112, drink.getKey());
      
      // Verify that the start price is 100
      assertEquals(100, drink.getStartPrice());
      
      // Verify that the keep price flag is false
      assertFalse(drink.isKeepPrice());
      
      // Verify that the maximum step is 20
      assertEquals(20, drink.getMaxStep());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAveragePriceReturningZero() throws Throwable  {
      // Given the model and the input arguments for creating a new Drink instance
      Model arg1 = new Model();
      Drink drink = new Drink("./data/", arg1, (-2776));
      
      // When the Drink instance is created
      float averagePrice = drink.getAveragePrice();
      
      // Then the Drink instance has the correct properties set
      assertEquals(20, drink.getMaxStep());
      assertFalse(drink.isKeepPrice());
      assertEquals(0, drink.getTotalSold());
      assertEquals(15, drink.getDeltaAmount());
      assertEquals(0, drink.getTrend());
      assertEquals(130, drink.getMaxPrice());
      assertTrue(drink.isUsed());
      assertEquals(0.0F, drink.getAverageAmount(), 0.01F);
      assertEquals(0, drink.getLastSold());
      assertEquals(0, drink.getDirectPrice());
      assertEquals(100, drink.getStartPrice());
      assertEquals(112, drink.getKey());
      assertEquals(0.0F, drink.getAverageSoldPrice(), 0.01F);
      assertEquals(20, drink.getTargetAmount());
      assertEquals(70, drink.getMinPrice());
      assertEquals((-2776), drink.getCurrentPrice());
      assertEquals("./data/", drink.getName());
      assertEquals(0.0F, averagePrice, 0.01F);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetName() throws Throwable  {
      // Create a new Model object
      Model arg1 = new Model();
      
      // Create a new Drink object with the name "xOa&E5" and the model object "arg1"
      Drink drink = new Drink("xOa&E5", arg1);
      
      // Set the name of the drink to "./data/"
      drink.setName("./data/");
      
      // Save the drink to the database
      drink.save();
      
      // Assert that the name of the drink is equal to "./data/"
      assertEquals("./data/", drink.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCurrentPriceReturningPositive() throws Throwable  {
      // Set up the model and the drink
      Model arg1 = new Model();
      Drink drink = new Drink("=<F5 *h", arg1);
      
      // Test the current price
      int currentPrice = drink.getCurrentPrice();
      assertEquals(0, currentPrice);
      
      // Test the direct price
      assertEquals(0, drink.getDirectPrice());
      
      // Test the used flag
      assertTrue(drink.isUsed());
      
      // Test the last sold time
      assertEquals(0, drink.getLastSold());
      
      // Test the delta amount
      assertEquals(15, drink.getDeltaAmount());
      
      // Test the average sold price
      assertEquals(0.0F, drink.getAverageSoldPrice(), 0.01F);
      
      // Test the trend
      assertEquals(0, drink.getTrend());
      
      // Test the average amount
      assertEquals(0.0F, drink.getAverageAmount(), 0.01F);
      
      // Test the max price
      assertEquals(130, drink.getMaxPrice());
      
      // Test the name
      assertEquals("=<F5 *h", drink.getName());
      
      // Test the max step
      assertEquals(20, drink.getMaxStep());
      
      // Test the keep price flag
      assertFalse(drink.isKeepPrice());
      
      // Test the average price
      assertEquals(0.0F, drink.getAveragePrice(), 0.01F);
      
      // Test the current price
      assertEquals(100, currentPrice);
      
      // Test the target amount
      assertEquals(20, drink.getTargetAmount());
      
      // Test the total sold
      assertEquals(0, drink.getTotalSold());
      
      // Test the key
      assertEquals(112, drink.getKey());
      
      // Test the min price
      assertEquals(70, drink.getMinPrice());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCurrentPriceReturningNegative() throws Throwable  {
      // Given a Drink object created with the constructor and initialized with some values
      Model arg1 = new Model();
      Drink drink = new Drink("2#9+Z", arg1, (-921));
      
      // When the currentPrice is accessed
      int currentPrice = drink.getCurrentPrice();
      
      // Then the expected value (-921) should be returned
      assertEquals((-921), currentPrice);
      
      // And the deltaAmount should also be accessible and have the expected value (15)
      assertEquals(15, drink.getDeltaAmount());
      
      // And the maxStep should also be accessible and have the expected value (20)
      assertEquals(20, drink.getMaxStep());
      
      // And the keepPrice flag should also be accessible and have the expected value (false)
      assertFalse(drink.isKeepPrice());
      
      // And the averageAmount should also be accessible and have the expected value (0.0F)
      assertEquals(0.0F, drink.getAverageAmount(), 0.01F);
      
      // And the maxPrice should also be accessible and have the expected value (130)
      assertEquals(130, drink.getMaxPrice());
      
      // And the targetAmount should also be accessible and have the expected value (20)
      assertEquals(20, drink.getTargetAmount());
      
      // And the used flag should also be accessible and have the expected value (true)
      assertTrue(drink.isUsed());
      
      // And the trend should also be accessible and have the expected value (0)
      assertEquals(0, drink.getTrend());
      
      // And the lastSold should also be accessible and have the expected value (0)
      assertEquals(0, drink.getLastSold());
      
      // And the averageSoldPrice should also be accessible and have the expected value (0.0F)
      assertEquals(0.0F, drink.getAverageSoldPrice(), 0.01F);
      
      // And the key should also be accessible and have the expected value (112)
      assertEquals(112, drink.getKey());
      
      // And the startPrice should also be accessible and have the expected value (100)
      assertEquals(100, drink.getStartPrice());
      
      // And the minPrice should also be accessible and have the expected value (70)
      assertEquals(70, drink.getMinPrice());
      
      // And the totalSold should also be accessible and have the expected value (0)
      assertEquals(0, drink.getTotalSold());
      
      // And the name should also be accessible and have the expected value ("2#9+Z")
      assertEquals("2#9+Z", drink.getName());
      
      // And the averagePrice should also be accessible and have the expected value (0.0F)
      assertEquals(0.0F, drink.getAveragePrice(), 0.01F);
      
      // And the directPrice should also be accessible and have the expected value (0)
      assertEquals(0, drink.getDirectPrice());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTrendReturningZero() throws Throwable  {
      // Create a new instance of the Drink class with the specified parameters
      Model arg1 = new Model();
      Drink drink = new Drink("./conf/", arg1);
      
      // Verify that the trend is 0
      assertEquals(0, drink.getTrend());
      
      // Verify that the average sold price is 0.0F within a tolerance of 0.01F
      assertEquals(0.0F, drink.getAverageSoldPrice(), 0.01F);
      
      // Verify that the direct price is 0
      assertEquals(0, drink.getDirectPrice());
      
      // Verify that the min price is 70
      assertEquals(70, drink.getMinPrice());
      
      // Verify that the key is 112
      assertEquals(112, drink.getKey());
      
      // Verify that the target amount is 20
      assertEquals(20, drink.getTargetAmount());
      
      // Verify that the name is "./conf/"
      assertEquals("./conf/", drink.getName());
      
      // Verify that the current price is 100
      assertEquals(100, drink.getCurrentPrice());
      
      // Verify that the max step is 20
      assertEquals(20, drink.getMaxStep());
      
      // Verify that the average price is 0.0F within a tolerance of 0.01F
      assertEquals(0.0F, drink.getAveragePrice(), 0.01F);
      
      // Verify that the keep price flag is false
      assertFalse(drink.isKeepPrice());
      
      // Verify that the total sold is 0
      assertEquals(0, drink.getTotalSold());
      
      // Verify that the delta amount is 15
      assertEquals(15, drink.getDeltaAmount());
      
      // Verify that the average amount is 0.0F within a tolerance of 0.01F
      assertEquals(0.0F, drink.getAverageAmount(), 0.01F);
      
      // Verify that the last sold is 0
      assertEquals(0, drink.getLastSold());
      
      // Verify that the max price is 130
      assertEquals(130, drink.getMaxPrice());
      
      // Verify that the used flag is true
      assertTrue(drink.isUsed());
  }
}
