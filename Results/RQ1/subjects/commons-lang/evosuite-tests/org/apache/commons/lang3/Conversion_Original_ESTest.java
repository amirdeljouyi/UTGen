/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 19 09:45:20 GMT 2024
 */

package org.apache.commons.lang3;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Arrays;
import java.util.UUID;
import org.apache.commons.lang3.Conversion;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Conversion_Original_ESTest extends Conversion_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testUuidToByteArrayReturningEmptyArray() throws Throwable  {
      UUID arg0 = MockUUID.fromString("RocLmWP[^hLb*{Lx<t");
      byte[] arg1 = new byte[0];
      byte[] uuidToByteArray = Conversion.uuidToByteArray(arg0, arg1, (-2412), (-2412));
      assertSame(uuidToByteArray, arg1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testShortToByteArrayReturningNonEmptyArray() throws Throwable  {
      byte[] arg2 = new byte[1];
      byte[] shortToByteArray = Conversion.shortToByteArray((short) (-3652), (-605), arg2, 101, (short) (-3652));
      assertSame(arg2, shortToByteArray);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testShortArrayToLongReturningZero() throws Throwable  {
      short[] arg0 = new short[8];
      long shortArrayToLong = Conversion.shortArrayToLong(arg0, 0, 0L, (short) (-1995), 0);
      assertEquals(0L, shortArrayToLong);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLongToShortArrayReturningNonEmptyArray() throws Throwable  {
      short[] arg2 = new short[5];
      short[] longToShortArray = Conversion.longToShortArray((byte)0, (-2517), arg2, 59, (-378));
      assertSame(longToShortArray, arg2);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLongToIntArrayReturningEmptyArray() throws Throwable  {
      int[] arg2 = new int[0];
      int[] longToIntArray = Conversion.longToIntArray(3150L, 58, arg2, 58, (-2274));
      assertEquals(0, longToIntArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLongToHexReturningEmptyString() throws Throwable  {
      String longToHex = Conversion.longToHex((short)0, (-582), "", (-582), (-738));
      assertEquals("", longToHex);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLongToByteArrayReturningNonEmptyArray() throws Throwable  {
      byte[] arg2 = new byte[5];
      byte[] longToByteArray = Conversion.longToByteArray(0L, (byte)0, arg2, (byte)0, (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, longToByteArray);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLongToBinaryReturningNonEmptyArray() throws Throwable  {
      boolean[] arg2 = new boolean[5];
      boolean[] longToBinary = Conversion.longToBinary(176L, 370, arg2, (-1509), 0);
      assertSame(arg2, longToBinary);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntToShortArrayReturningEmptyArray() throws Throwable  {
      short[] arg2 = new short[0];
      short[] intToShortArray = Conversion.intToShortArray((-1583), (-1583), arg2, (-1583), (-1583));
      assertEquals(0, intToShortArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntToHexDigitReturningDigit() throws Throwable  {
      char intToHexDigit = Conversion.intToHexDigit(4);
      assertEquals('4', intToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntToByteArrayReturningNonEmptyArray() throws Throwable  {
      byte[] arg2 = new byte[7];
      byte[] intToByteArray = Conversion.intToByteArray(673, (byte)73, arg2, 62, 0);
      assertSame(arg2, intToByteArray);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntToBinaryReturningEmptyArray() throws Throwable  {
      boolean[] arg2 = new boolean[0];
      boolean[] intToBinary = Conversion.intToBinary(10, 69, arg2, 10, (-1775));
      assertSame(intToBinary, arg2);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexToShortReturningZero() throws Throwable  {
      short hexToShort = Conversion.hexToShort("", 1297, (short)0, 4786, (-2517));
      assertEquals((short)0, hexToShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexToLongReturningNegative() throws Throwable  {
      long hexToLong = Conversion.hexToLong("s07c/)x@1Q>", (-48), (-48), 1, (-48));
      assertEquals((-48L), hexToLong);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexToIntReturningNegative() throws Throwable  {
      int hexToInt = Conversion.hexToInt((String) null, (-1624), (-1624), 0, 0);
      assertEquals((-1624), hexToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToIntReturningPositive() throws Throwable  {
      int hexDigitToInt = Conversion.hexDigitToInt('B');
      assertEquals(11, hexDigitToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testByteToHexReturningEmptyString() throws Throwable  {
      String byteToHex = Conversion.byteToHex((byte) (-98), (byte) (-98), "", (byte) (-98), (byte) (-98));
      assertEquals("", byteToHex);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testByteArrayToShortReturningPositive() throws Throwable  {
      byte[] arg0 = new byte[5];
      short byteArrayToShort = Conversion.byteArrayToShort(arg0, (short) (-2819), (byte)22, 95, (byte) (-56));
      assertEquals((short)22, byteArrayToShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testByteArrayToLongReturningNegative() throws Throwable  {
      byte[] arg0 = new byte[7];
      long byteArrayToLong = Conversion.byteArrayToLong(arg0, 0, (-76L), (byte)51, (byte) (-124));
      assertEquals((-76L), byteArrayToLong);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToShortReturningZero() throws Throwable  {
      boolean[] arg0 = new boolean[3];
      short binaryToShort = Conversion.binaryToShort(arg0, 1, (short)0, 93, 0);
      assertEquals((short)0, binaryToShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToIntReturningZero() throws Throwable  {
      boolean[] arg0 = new boolean[6];
      int binaryToInt = Conversion.binaryToInt(arg0, (-793), 0, (-793), (-793));
      assertEquals(0, binaryToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testByteArrayToLongThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      byte[] arg0 = new byte[5];
      // Undeclared exception!
      try { 
        Conversion.byteArrayToLong(arg0, (byte)4, (-748), (-1071), (byte)4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntToHexDigitReturningAlphabeticChar() throws Throwable  {
      char intToHexDigit = Conversion.intToHexDigit(14);
      assertEquals('e', intToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryBeMsb0ToHexDigitTaking2ArgumentsAndBinaryBeMsb0ToHexDigitTaking2ArgumentsReturningDigit0() throws Throwable  {
      boolean[] arg0 = new boolean[3];
      arg0[1] = true;
      char binaryBeMsb0ToHexDigit = Conversion.binaryBeMsb0ToHexDigit(arg0, 1);
      assertEquals('1', binaryBeMsb0ToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryBeMsb0ToHexDigitTaking2ArgumentsAndBinaryBeMsb0ToHexDigitTaking2ArgumentsReturningDigit1() throws Throwable  {
      boolean[] arg0 = new boolean[3];
      arg0[0] = true;
      arg0[1] = true;
      char binaryBeMsb0ToHexDigit = Conversion.binaryBeMsb0ToHexDigit(arg0, 1);
      assertEquals('3', binaryBeMsb0ToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryBeMsb0ToHexDigitTaking2ArgumentsAndBinaryBeMsb0ToHexDigitTaking2ArgumentsReturningDigit2() throws Throwable  {
      boolean[] arg0 = new boolean[6];
      arg0[2] = true;
      char binaryBeMsb0ToHexDigit = Conversion.binaryBeMsb0ToHexDigit(arg0, 1);
      assertEquals('4', binaryBeMsb0ToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryBeMsb0ToHexDigitTaking2ArgumentsAndBinaryBeMsb0ToHexDigitTaking2ArgumentsReturningDigit3() throws Throwable  {
      boolean[] arg0 = new boolean[7];
      arg0[0] = true;
      arg0[1] = true;
      arg0[2] = true;
      char binaryBeMsb0ToHexDigit = Conversion.binaryBeMsb0ToHexDigit(arg0, (int) (short)4);
      assertEquals('7', binaryBeMsb0ToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryBeMsb0ToHexDigitTaking2ArgumentsAndBinaryBeMsb0ToHexDigitTaking2ArgumentsReturningDigit4() throws Throwable  {
      boolean[] arg0 = new boolean[8];
      arg0[5] = true;
      arg0[6] = true;
      char binaryBeMsb0ToHexDigit = Conversion.binaryBeMsb0ToHexDigit(arg0, (int) (byte)0);
      assertEquals('6', binaryBeMsb0ToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryBeMsb0ToHexDigitTaking2ArgumentsAndBinaryBeMsb0ToHexDigitTaking2ArgumentsReturningDigit5() throws Throwable  {
      boolean[] arg0 = new boolean[4];
      arg0[0] = true;
      arg0[3] = true;
      char binaryBeMsb0ToHexDigit = Conversion.binaryBeMsb0ToHexDigit(arg0, 0);
      assertEquals('9', binaryBeMsb0ToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryBeMsb0ToHexDigitTaking2ArgumentsAndBinaryBeMsb0ToHexDigitTaking2ArgumentsReturningAlphabeticChar0() throws Throwable  {
      boolean[] arg0 = new boolean[6];
      arg0[1] = true;
      arg0[3] = true;
      arg0[4] = true;
      char binaryBeMsb0ToHexDigit = Conversion.binaryBeMsb0ToHexDigit(arg0, 1);
      assertEquals('b', binaryBeMsb0ToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryBeMsb0ToHexDigitTaking2ArgumentsAndBinaryBeMsb0ToHexDigitTaking2ArgumentsReturningDigit6() throws Throwable  {
      boolean[] arg0 = new boolean[4];
      arg0[0] = true;
      char binaryBeMsb0ToHexDigit = Conversion.binaryBeMsb0ToHexDigit(arg0, 0);
      assertEquals('8', binaryBeMsb0ToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryBeMsb0ToHexDigitTaking2ArgumentsAndBinaryBeMsb0ToHexDigitTaking2ArgumentsReturningAlphabeticChar1() throws Throwable  {
      boolean[] arg0 = new boolean[5];
      arg0[1] = true;
      arg0[2] = true;
      arg0[3] = true;
      arg0[4] = true;
      char binaryBeMsb0ToHexDigit = Conversion.binaryBeMsb0ToHexDigit(arg0, (int) (short)0);
      assertEquals('f', binaryBeMsb0ToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryBeMsb0ToHexDigitTaking2ArgumentsAndBinaryBeMsb0ToHexDigitTaking2ArgumentsReturningAlphabeticChar2() throws Throwable  {
      boolean[] arg0 = new boolean[9];
      arg0[5] = true;
      arg0[6] = true;
      arg0[7] = true;
      char binaryBeMsb0ToHexDigit = Conversion.binaryBeMsb0ToHexDigit(arg0, 0);
      assertEquals('e', binaryBeMsb0ToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitMsb0_4bitsTaking2ArgumentsAndBinaryToHexDigitMsb0_4bitsTaking2ArgumentsReturningDigit0() throws Throwable  {
      boolean[] arg0 = new boolean[6];
      arg0[1] = true;
      char binaryToHexDigitMsb0_4bits = Conversion.binaryToHexDigitMsb0_4bits(arg0, 1);
      assertEquals('8', binaryToHexDigitMsb0_4bits);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitMsb0_4bitsTaking2ArgumentsAndBinaryToHexDigitMsb0_4bitsTaking2ArgumentsReturningAlphabeticChar0() throws Throwable  {
      boolean[] arg0 = new boolean[5];
      arg0[0] = true;
      arg0[1] = true;
      char binaryToHexDigitMsb0_4bits = Conversion.binaryToHexDigitMsb0_4bits(arg0, (int) (byte)0);
      assertEquals('c', binaryToHexDigitMsb0_4bits);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitMsb0_4bitsTaking2ArgumentsAndBinaryToHexDigitMsb0_4bitsTaking2ArgumentsReturningDigit1() throws Throwable  {
      boolean[] arg0 = new boolean[5];
      char binaryToHexDigitMsb0_4bits = Conversion.binaryToHexDigitMsb0_4bits(arg0, 0);
      assertEquals('0', binaryToHexDigitMsb0_4bits);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitMsb0_4bitsTaking2ArgumentsAndBinaryToHexDigitMsb0_4bitsTaking2ArgumentsReturningAlphabeticChar1() throws Throwable  {
      boolean[] arg0 = new boolean[5];
      arg0[0] = true;
      arg0[2] = true;
      char binaryToHexDigitMsb0_4bits = Conversion.binaryToHexDigitMsb0_4bits(arg0, (int) (byte)0);
      assertEquals('a', binaryToHexDigitMsb0_4bits);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitMsb0_4bitsTaking2ArgumentsAndBinaryToHexDigitMsb0_4bitsTaking2ArgumentsReturningDigit2() throws Throwable  {
      boolean[] arg0 = new boolean[4];
      arg0[2] = true;
      char binaryToHexDigitMsb0_4bits = Conversion.binaryToHexDigitMsb0_4bits(arg0, 0);
      assertEquals('2', binaryToHexDigitMsb0_4bits);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitMsb0_4bitsTaking2ArgumentsAndBinaryToHexDigitMsb0_4bitsTaking2ArgumentsReturningDigit3() throws Throwable  {
      boolean[] arg0 = new boolean[8];
      arg0[3] = true;
      char binaryToHexDigitMsb0_4bits = Conversion.binaryToHexDigitMsb0_4bits(arg0, 0);
      assertEquals('1', binaryToHexDigitMsb0_4bits);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitMsb0_4bitsTaking2ArgumentsAndBinaryToHexDigitMsb0_4bitsTaking2ArgumentsReturningAlphabeticChar2() throws Throwable  {
      boolean[] arg0 = new boolean[5];
      arg0[0] = true;
      arg0[1] = true;
      arg0[3] = true;
      char binaryToHexDigitMsb0_4bits = Conversion.binaryToHexDigitMsb0_4bits(arg0, (int) (byte)0);
      assertEquals('d', binaryToHexDigitMsb0_4bits);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitMsb0_4bitsTaking2ArgumentsAndBinaryToHexDigitMsb0_4bitsTaking2ArgumentsReturningDigit4() throws Throwable  {
      boolean[] arg0 = new boolean[5];
      arg0[1] = true;
      arg0[3] = true;
      char binaryToHexDigitMsb0_4bits = Conversion.binaryToHexDigitMsb0_4bits(arg0, (int) (byte)0);
      assertEquals('5', binaryToHexDigitMsb0_4bits);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitMsb0_4bitsTaking2ArgumentsAndBinaryToHexDigitMsb0_4bitsTaking2ArgumentsReturningAlphabeticChar3() throws Throwable  {
      boolean[] arg0 = new boolean[6];
      arg0[1] = true;
      arg0[2] = true;
      arg0[3] = true;
      arg0[4] = true;
      char binaryToHexDigitMsb0_4bits = Conversion.binaryToHexDigitMsb0_4bits(arg0, 1);
      assertEquals('f', binaryToHexDigitMsb0_4bits);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitTaking2ArgumentsAndBinaryToHexDigitTaking2ArgumentsReturningDigit0() throws Throwable  {
      boolean[] arg0 = new boolean[5];
      arg0[0] = true;
      arg0[1] = true;
      char binaryToHexDigit = Conversion.binaryToHexDigit(arg0, 0);
      assertEquals('3', binaryToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitTaking2ArgumentsAndBinaryToHexDigitTaking2ArgumentsReturningDigit1() throws Throwable  {
      boolean[] arg0 = new boolean[5];
      arg0[1] = true;
      arg0[2] = true;
      char binaryToHexDigit = Conversion.binaryToHexDigit(arg0, 0);
      assertEquals('6', binaryToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitTaking2ArgumentsAndBinaryToHexDigitTaking2ArgumentsReturningDigit2() throws Throwable  {
      boolean[] arg0 = new boolean[1];
      char binaryToHexDigit = Conversion.binaryToHexDigit(arg0, 0);
      assertEquals('0', binaryToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitTaking2ArgumentsAndBinaryToHexDigitTaking2ArgumentsReturningAlphabeticChar0() throws Throwable  {
      boolean[] arg0 = new boolean[8];
      arg0[0] = true;
      arg0[1] = true;
      arg0[3] = true;
      char binaryToHexDigit = Conversion.binaryToHexDigit(arg0, 0);
      assertEquals('b', binaryToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testByteArrayToUuidThrowsIllegalArgumentException() throws Throwable  {
      byte[] arg0 = new byte[5];
      // Undeclared exception!
      try { 
        Conversion.byteArrayToUuid(arg0, 1079);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Need at least 16 bytes for UUID
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testUuidToByteArray() throws Throwable  {
      UUID arg0 = MockUUID.randomUUID();
      byte[] arg1 = new byte[55];
      byte[] uuidToByteArray = Conversion.uuidToByteArray(arg0, arg1, 14, 14);
      assertEquals(55, uuidToByteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testUuidToByteArrayThrowsIllegalArgumentException() throws Throwable  {
      UUID arg0 = MockUUID.randomUUID();
      byte[] arg1 = new byte[26];
      // Undeclared exception!
      try { 
        Conversion.uuidToByteArray(arg0, arg1, (byte)0, 666);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nBytes is greather than 16
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testUuidToByteArrayWithZero() throws Throwable  {
      UUID arg0 = MockUUID.randomUUID();
      byte[] arg1 = new byte[2];
      byte[] uuidToByteArray = Conversion.uuidToByteArray(arg0, arg1, (byte)0, (byte)0);
      assertSame(uuidToByteArray, arg1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testUuidToByteArrayReturningNull() throws Throwable  {
      UUID arg0 = MockUUID.randomUUID();
      byte[] uuidToByteArray = Conversion.uuidToByteArray(arg0, (byte[]) null, 1, (-2412));
      assertNull(uuidToByteArray);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testByteToBinaryThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      boolean[] arg2 = new boolean[9];
      // Undeclared exception!
      try { 
        Conversion.byteToBinary((byte) (-58), (byte) (-58), arg2, 1, 57);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testByteToBinaryReturningNonEmptyArray() throws Throwable  {
      boolean[] arg2 = new boolean[4];
      boolean[] byteToBinary = Conversion.byteToBinary((byte)2, (byte)2, arg2, (byte)2, (byte)2);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, byteToBinary));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testByteToBinaryThrowsIllegalArgumentException() throws Throwable  {
      boolean[] arg2 = new boolean[6];
      // Undeclared exception!
      try { 
        Conversion.byteToBinary((byte)13, (byte)13, arg2, (byte)13, (byte)13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nBools-1+srcPos is greather or equal to than 8
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testByteToBinaryReturningEmptyArray() throws Throwable  {
      boolean[] arg2 = new boolean[0];
      boolean[] byteToBinary = Conversion.byteToBinary((byte) (-20), (-3765), arg2, (byte) (-20), 0);
      assertSame(arg2, byteToBinary);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testByteToBinaryReturningNull() throws Throwable  {
      boolean[] byteToBinary = Conversion.byteToBinary((byte) (-110), 116, (boolean[]) null, 97, (byte) (-110));
      assertNull(byteToBinary);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testShortToBinaryWithNegative() throws Throwable  {
      boolean[] arg2 = new boolean[6];
      boolean[] shortToBinary = Conversion.shortToBinary((short) (-1), 1, arg2, 1, 1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false}, shortToBinary));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testShortToBinaryWithPositive() throws Throwable  {
      boolean[] arg2 = new boolean[4];
      boolean[] shortToBinary = Conversion.shortToBinary((short)1, (short)1, arg2, (short)1, (short)1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, shortToBinary));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testShortToBinaryThrowsIllegalArgumentException() throws Throwable  {
      boolean[] arg2 = new boolean[0];
      // Undeclared exception!
      try { 
        Conversion.shortToBinary((short)49, (short)49, arg2, (short)49, (short)49);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nBools-1+srcPos is greather or equal to than 16
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testShortToBinaryReturningEmptyArray() throws Throwable  {
      boolean[] arg2 = new boolean[0];
      boolean[] shortToBinary = Conversion.shortToBinary((short)0, (short)0, arg2, (short)0, (short)0);
      assertEquals(0, shortToBinary.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testShortToBinaryReturningNull() throws Throwable  {
      boolean[] shortToBinary = Conversion.shortToBinary((short) (-169), (-1), (boolean[]) null, 77, (-2148));
      assertNull(shortToBinary);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntToBinaryThrowsNullPointerException0() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.intToBinary(15, (short)1, (boolean[]) null, 15, 15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntToBinaryReturningNull() throws Throwable  {
      boolean[] intToBinary = Conversion.intToBinary((short)96, (-57), (boolean[]) null, (short)96, (-57));
      assertNull(intToBinary);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntToBinaryThrowsIllegalArgumentException() throws Throwable  {
      boolean[] arg2 = new boolean[2];
      // Undeclared exception!
      try { 
        Conversion.intToBinary(9, 9, arg2, 59, 59);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nBools-1+srcPos is greather or equal to than 32
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntToBinaryReturningNonEmptyArray() throws Throwable  {
      boolean[] arg2 = new boolean[5];
      boolean[] intToBinary = Conversion.intToBinary(0, 0, arg2, 0, 0);
      assertSame(intToBinary, arg2);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntToBinaryThrowsNullPointerException1() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.intToBinary((short)5, (short)5, (boolean[]) null, 14, 14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLongToBinaryThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      boolean[] arg2 = new boolean[9];
      // Undeclared exception!
      try { 
        Conversion.longToBinary(255L, (-1543), arg2, (-1543), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1543
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLongToBinaryWithNegative() throws Throwable  {
      boolean[] arg2 = new boolean[5];
      // Undeclared exception!
      try { 
        Conversion.longToBinary((-1372), (-1372), arg2, '4', '4');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLongToBinaryReturningEmptyArray() throws Throwable  {
      boolean[] arg2 = new boolean[0];
      boolean[] longToBinary = Conversion.longToBinary(0L, (-2732), arg2, (-1131), (-1131));
      assertSame(longToBinary, arg2);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLongToBinaryReturningNull() throws Throwable  {
      boolean[] longToBinary = Conversion.longToBinary(607L, (-1), (boolean[]) null, (-1), 0);
      assertNull(longToBinary);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLongToBinaryThrowsIllegalArgumentException() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.longToBinary(0L, 84, (boolean[]) null, 954, 954);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nBools-1+srcPos is greather or equal to than 64
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testByteToHexThrowsIllegalArgumentException() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.byteToHex((byte)10, (byte)10, "xMeGy[U^", 49, (byte)10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nHexs-1)*4+srcPos is greather or equal to than 8
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testByteToHexReturningNull() throws Throwable  {
      String byteToHex = Conversion.byteToHex((byte)0, 66, (String) null, 66, (byte)0);
      assertNull(byteToHex);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testShortToHexReturningNonEmptyString() throws Throwable  {
      String shortToHex = Conversion.shortToHex((short)73, (byte) (-67), "", (byte)0, 1);
      assertEquals("0", shortToHex);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testShortToHexThrowsStringIndexOutOfBoundsException() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.shortToHex((short) (-2760), (short) (-2760), "1re/q2o`X", (short) (-2760), 475);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2760
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testShortToHexThrowsIllegalArgumentException() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.shortToHex((short) (-953), 4255, "nBools-1+srcPos is greather or equal to than 8", (-1000), (short) (-953));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nHexs-1)*4+srcPos is greather or equal to than 16
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testShortToHexReturningNull() throws Throwable  {
      String shortToHex = Conversion.shortToHex((short)76, (short)76, (String) null, (short)76, 0);
      assertNull(shortToHex);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testShortToHexReturningEmptyString() throws Throwable  {
      String shortToHex = Conversion.shortToHex((byte) (-59), (-4475), "", 99, (-2698));
      assertEquals("", shortToHex);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntToHexReturningNonEmptyString() throws Throwable  {
      String intToHex = Conversion.intToHex(1, 1, "'", 1, 1);
      assertEquals("'0", intToHex);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntToHexThrowsStringIndexOutOfBoundsException() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.intToHex(1, (-278), "", 4, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 4
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntToHexThrowsIllegalArgumentException() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.intToHex(1615, 1615, "", 1615, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nHexs-1)*4+srcPos is greather or equal to than 32
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntToHexReturningNull() throws Throwable  {
      String intToHex = Conversion.intToHex(4, 62, (String) null, 0, 0);
      assertNull(intToHex);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntToHexReturningEmptyString() throws Throwable  {
      String intToHex = Conversion.intToHex((-278), 49, "", 49, (-278));
      assertEquals("", intToHex);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLongToHexThrowsIllegalArgumentException() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.longToHex(1, 1, "", 1, 1224);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nHexs-1)*4+srcPos is greather or equal to than 64
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLongToHexReturningNull() throws Throwable  {
      String longToHex = Conversion.longToHex(2517L, 0, (String) null, 0, 0);
      assertNull(longToHex);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLongToHexReturningNonEmptyString() throws Throwable  {
      String longToHex = Conversion.longToHex((-1L), 8, "$z}oE.+\"Ztv`zt;", 8, 8);
      assertEquals("$z}oE.+\"ffffffff", longToHex);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testShortToByteArrayThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      byte[] arg2 = new byte[1];
      // Undeclared exception!
      try { 
        Conversion.shortToByteArray((byte) (-67), (byte) (-1), arg2, 3254, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3254
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testShortToByteArrayThrowsIllegalArgumentException() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.shortToByteArray((short)1611, 7, (byte[]) null, (short)1611, 15);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nBytes-1)*8+srcPos is greather or equal to than 16
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testShortToByteArrayReturningEmptyArray() throws Throwable  {
      byte[] arg2 = new byte[0];
      byte[] shortToByteArray = Conversion.shortToByteArray((byte) (-67), (byte) (-1), arg2, 3254, 0);
      assertSame(arg2, shortToByteArray);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testShortToByteArrayReturningNull() throws Throwable  {
      byte[] shortToByteArray = Conversion.shortToByteArray((short) (-2798), (short) (-2798), (byte[]) null, (short) (-2798), (short) (-2798));
      assertNull(shortToByteArray);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntToByteArrayThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      byte[] arg2 = new byte[1];
      // Undeclared exception!
      try { 
        Conversion.intToByteArray(1, 1, arg2, 1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntToByteArrayReturningEmptyArray() throws Throwable  {
      byte[] arg2 = new byte[0];
      byte[] intToByteArray = Conversion.intToByteArray((byte) (-1), (-35), arg2, (-16), (byte) (-1));
      assertSame(arg2, intToByteArray);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntToByteArrayReturningNull() throws Throwable  {
      byte[] intToByteArray = Conversion.intToByteArray(1764, 1, (byte[]) null, 0, 0);
      assertNull(intToByteArray);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntToByteArrayThrowsIllegalArgumentException() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.intToByteArray((-3084), (-3084), (byte[]) null, 3168, 3168);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nBytes-1)*8+srcPos is greather or equal to than 32
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLongToByteArrayThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      byte[] arg2 = new byte[5];
      // Undeclared exception!
      try { 
        Conversion.longToByteArray((-1877), (-1877), arg2, 0, 50);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLongToByteArrayThrowsIllegalArgumentException() throws Throwable  {
      byte[] arg2 = new byte[0];
      // Undeclared exception!
      try { 
        Conversion.longToByteArray(1L, 91, arg2, (-1), 91);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nBytes-1)*8+srcPos is greather or equal to than 64
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLongToByteArrayReturningEmptyArray() throws Throwable  {
      byte[] arg2 = new byte[0];
      byte[] longToByteArray = Conversion.longToByteArray(0L, (-813), arg2, 0, 0);
      assertArrayEquals(new byte[] {}, longToByteArray);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLongToByteArrayReturningNull() throws Throwable  {
      byte[] longToByteArray = Conversion.longToByteArray((-330), 56, (byte[]) null, (-330), (-330));
      assertNull(longToByteArray);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntToShortArrayThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      short[] arg2 = new short[0];
      // Undeclared exception!
      try { 
        Conversion.intToShortArray((short)2, (short)2, arg2, (short)2, (short)2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntToShortArrayThrowsIllegalArgumentException() throws Throwable  {
      short[] arg2 = new short[0];
      // Undeclared exception!
      try { 
        Conversion.intToShortArray((short)23, (short)23, arg2, (short)23, (short)23);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nShorts-1)*16+srcPos is greather or equal to than 32
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntToShortArrayReturningNonEmptyArray() throws Throwable  {
      short[] arg2 = new short[4];
      short[] intToShortArray = Conversion.intToShortArray(2807, 54, arg2, 54, (short)0);
      assertSame(intToShortArray, arg2);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntToShortArrayReturningNull() throws Throwable  {
      short[] intToShortArray = Conversion.intToShortArray(92, 1, (short[]) null, 1, (-475));
      assertNull(intToShortArray);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLongToShortArrayThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      short[] arg2 = new short[1];
      // Undeclared exception!
      try { 
        Conversion.longToShortArray(872L, (-720), arg2, 580, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 580
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLongToShortArrayReturningEmptyArray() throws Throwable  {
      short[] arg2 = new short[0];
      short[] longToShortArray = Conversion.longToShortArray((-1372), (-273), arg2, 50, (-1372));
      assertArrayEquals(new short[] {}, longToShortArray);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLongToShortArrayReturningNull() throws Throwable  {
      short[] longToShortArray = Conversion.longToShortArray(1L, 0, (short[]) null, 0, 0);
      assertNull(longToShortArray);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLongToShortArrayThrowsIllegalArgumentException() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.longToShortArray(1L, 16, (short[]) null, 16, 73);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nShorts-1)*16+srcPos is greather or equal to than 64
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLongToIntArrayThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      int[] arg2 = new int[6];
      // Undeclared exception!
      try { 
        Conversion.longToIntArray((-3130L), (-278), arg2, (-305), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -305
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLongToIntArrayReturningNull() throws Throwable  {
      int[] longToIntArray = Conversion.longToIntArray(2764L, (-1453), (int[]) null, (-648), (short) (-286));
      assertNull(longToIntArray);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLongToIntArrayReturningNonEmptyArray() throws Throwable  {
      int[] arg2 = new int[5];
      int[] longToIntArray = Conversion.longToIntArray((-1L), (-1658), arg2, (-1658), 0);
      assertSame(arg2, longToIntArray);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLongToIntArrayThrowsIllegalArgumentException() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.longToIntArray(266L, 78, (int[]) null, 78, 78);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nInts-1)*32+srcPos is greather or equal to than 64
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToByteThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      boolean[] arg0 = Conversion.hexDigitMsb0ToBinary('5');
      // Undeclared exception!
      try { 
        Conversion.binaryToByte(arg0, 1, (byte) (-98), (byte) (-98), 80);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToByteWithNonEmptyArrayAndPositive() throws Throwable  {
      boolean[] arg0 = new boolean[4];
      byte binaryToByte = Conversion.binaryToByte(arg0, (short)1, (byte)40, (short)1, (short)1);
      assertEquals((byte)40, binaryToByte);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToByteWithZero() throws Throwable  {
      boolean[] arg0 = new boolean[5];
      byte binaryToByte = Conversion.binaryToByte(arg0, 0, (byte)5, 99, 0);
      assertEquals((byte)5, binaryToByte);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToByteWithEmptyArrayAndNegative() throws Throwable  {
      boolean[] arg0 = new boolean[0];
      byte binaryToByte = Conversion.binaryToByte(arg0, 3420, (byte)15, 1, (-50));
      assertEquals((byte)15, binaryToByte);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToByteReturningZero() throws Throwable  {
      boolean[] arg0 = new boolean[0];
      byte binaryToByte = Conversion.binaryToByte(arg0, (byte)0, (byte)0, (-3), (byte) (-3));
      assertEquals((byte)0, binaryToByte);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToByteReturningNegative() throws Throwable  {
      boolean[] arg0 = new boolean[4];
      byte binaryToByte = Conversion.binaryToByte(arg0, (-1877), (byte) (-81), (byte) (-81), (byte) (-81));
      assertEquals((byte) (-81), binaryToByte);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToShortThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      boolean[] arg0 = Conversion.hexDigitMsb0ToBinary('5');
      // Undeclared exception!
      try { 
        Conversion.binaryToShort(arg0, 1, (short)0, (-1485), 83);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToShort() throws Throwable  {
      boolean[] arg0 = new boolean[0];
      short binaryToShort = Conversion.binaryToShort(arg0, 0, (short)82, (-2913), (-2913));
      assertEquals((short)82, binaryToShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToShortWithNegative() throws Throwable  {
      boolean[] arg0 = new boolean[0];
      short binaryToShort = Conversion.binaryToShort(arg0, (-1), (short)82, (short)82, (-859));
      assertEquals((short)82, binaryToShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToShortReturningNegative() throws Throwable  {
      boolean[] arg0 = new boolean[2];
      short binaryToShort = Conversion.binaryToShort(arg0, (byte)0, (short) (-1), (byte)0, (byte)0);
      assertEquals((short) (-1), binaryToShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToIntThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      boolean[] arg0 = new boolean[8];
      arg0[3] = true;
      // Undeclared exception!
      try { 
        Conversion.binaryToInt(arg0, 0, (-700), (-700), 78);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToIntReturningPositive() throws Throwable  {
      boolean[] arg0 = new boolean[1];
      int binaryToInt = Conversion.binaryToInt(arg0, 1594, 1594, 1594, (-3637));
      assertEquals(1594, binaryToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToIntThrowsIllegalArgumentException() throws Throwable  {
      boolean[] arg0 = new boolean[0];
      // Undeclared exception!
      try { 
        Conversion.binaryToInt(arg0, 1594, 1139, 1594, 1594);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nBools-1+dstPos is greather or equal to than 32
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToIntWithEmptyArray() throws Throwable  {
      boolean[] arg0 = new boolean[0];
      int binaryToInt = Conversion.binaryToInt(arg0, 0, (-777), (-1211), 0);
      assertEquals((-777), binaryToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToIntWithPositiveAndPositive() throws Throwable  {
      boolean[] arg0 = new boolean[1];
      int binaryToInt = Conversion.binaryToInt(arg0, 100, (-1), 100, 0);
      assertEquals((-1), binaryToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToLongWithZeroAndPositive0() throws Throwable  {
      boolean[] arg0 = new boolean[7];
      arg0[6] = true;
      // Undeclared exception!
      try { 
        Conversion.binaryToLong(arg0, 6, 0L, 0, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToLongReturningNegative() throws Throwable  {
      boolean[] arg0 = new boolean[9];
      long binaryToLong = Conversion.binaryToLong(arg0, (-1356), (short) (-952), (-263), (-1553));
      assertEquals((-952L), binaryToLong);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToLongThrowsIllegalArgumentException() throws Throwable  {
      boolean[] arg0 = new boolean[4];
      // Undeclared exception!
      try { 
        Conversion.binaryToLong(arg0, 64, 989L, (byte)2, 64);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nBools-1+dstPos is greather or equal to than 64
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToLongReturningPositive() throws Throwable  {
      boolean[] arg0 = new boolean[8];
      long binaryToLong = Conversion.binaryToLong(arg0, (-1), (byte)51, 2884, 0);
      assertEquals(51L, binaryToLong);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToLongReturningZero() throws Throwable  {
      boolean[] arg0 = new boolean[0];
      long binaryToLong = Conversion.binaryToLong(arg0, 0, 0, 0, (-1211));
      assertEquals(0L, binaryToLong);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToLongWithEmptyArrayAndPositive() throws Throwable  {
      boolean[] arg0 = new boolean[0];
      // Undeclared exception!
      try { 
        Conversion.binaryToLong(arg0, (byte)4, (byte)4, (byte)4, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToLongWithZeroAndPositive1() throws Throwable  {
      boolean[] arg0 = new boolean[1];
      // Undeclared exception!
      try { 
        Conversion.binaryToLong(arg0, (byte)0, (byte)0, (byte)4, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexToByteReturningPositive() throws Throwable  {
      byte hexToByte = Conversion.hexToByte("VCEYEP E", 1, (byte)75, (-687), 1);
      assertEquals((byte)75, hexToByte);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexToByteReturningNegative() throws Throwable  {
      byte hexToByte = Conversion.hexToByte("UAp&", 55, (byte) (-52), 55, (byte) (-52));
      assertEquals((byte) (-52), hexToByte);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexToByteReturningZero() throws Throwable  {
      byte hexToByte = Conversion.hexToByte("QQHq", (-78), (byte)0, (-78), (byte)0);
      assertEquals((byte)0, hexToByte);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexToByteThrowsIllegalArgumentException() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexToByte("", (byte)11, (byte)1, (byte)11, (byte)1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nHexs-1)*4+dstPos is greather or equal to than 8
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexToShortWithNegativeAndNegative() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexToShort("pa4J4", 1, (short) (-5086), (-1141), 74);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'J' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexToShortWithPositiveAndPositive() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexToShort("src.length-srcPos<4: src.length=", 'D', (short)88, (short)88, (short)88);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nHexs-1)*4+dstPos is greather or equal to than 16
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexToShortReturningNegative() throws Throwable  {
      short hexToShort = Conversion.hexToShort("k=W", (-5356), (short) (-1), (-5356), 0);
      assertEquals((short) (-1), hexToShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexToShortReturningPositive() throws Throwable  {
      short hexToShort = Conversion.hexToShort("", (-1933), (byte)117, (-641), (-1933));
      assertEquals((short)117, hexToShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexToIntThrowsIllegalArgumentException0() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexToInt("' as a hexadecimal digit", 2, 2, 4, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 's' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexToIntThrowsIllegalArgumentException1() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexToInt(", src8cPs", 44, 44, 44, 44);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nHexs-1)*4+dstPos is greather or equal to than 32
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexToIntReturningZero() throws Throwable  {
      int hexToInt = Conversion.hexToInt("", 0, 0, 0, 0);
      assertEquals(0, hexToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexToIntReturningPositive() throws Throwable  {
      int hexToInt = Conversion.hexToInt("", 495, 495, 495, (-1852));
      assertEquals(495, hexToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexToLongReturningPositive() throws Throwable  {
      long hexToLong = Conversion.hexToLong("GFw/(t@E", 1, 0L, 1, 1);
      assertEquals(30L, hexToLong);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexToLongReturningZero() throws Throwable  {
      long hexToLong = Conversion.hexToLong("!TwYXx7[}3ZhDw", (byte) (-124), (byte)0, 3756, (byte)0);
      assertEquals(0L, hexToLong);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexToLongThrowsIllegalArgumentException() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexToLong("07c/)x@1MQ", 32, 32, 32, 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nHexs-1)*4+dstPos is greather or equal to than 64
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testByteArrayToShortThrowsIllegalArgumentException() throws Throwable  {
      byte[] arg0 = new byte[0];
      // Undeclared exception!
      try { 
        Conversion.byteArrayToShort(arg0, (byte)59, (byte)59, (byte)59, (byte)59);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nBytes-1)*8+dstPos is greather or equal to than 16
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testByteArrayToShortWithZero() throws Throwable  {
      byte[] arg0 = new byte[0];
      short byteArrayToShort = Conversion.byteArrayToShort(arg0, 1664, (short) (-2819), 1664, 0);
      assertEquals((short) (-2819), byteArrayToShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testByteArrayToShort() throws Throwable  {
      byte[] arg0 = new byte[0];
      short byteArrayToShort = Conversion.byteArrayToShort(arg0, 0, (short) (-546), 56, 56);
      assertEquals((short) (-546), byteArrayToShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testByteArrayToShortThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      byte[] arg0 = new byte[0];
      // Undeclared exception!
      try { 
        Conversion.byteArrayToShort(arg0, (byte)59, (byte)1, (byte)1, (byte)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 59
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testByteArrayToShortReturningZero() throws Throwable  {
      byte[] arg0 = new byte[4];
      short byteArrayToShort = Conversion.byteArrayToShort(arg0, (byte)0, (short)98, 0, (byte)1);
      assertEquals((short)0, byteArrayToShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testByteArrayToIntThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      byte[] arg0 = new byte[8];
      // Undeclared exception!
      try { 
        Conversion.byteArrayToInt(arg0, (byte)0, 1547, (-1058), 85);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testByteArrayToIntThrowsIllegalArgumentException() throws Throwable  {
      byte[] arg0 = new byte[2];
      // Undeclared exception!
      try { 
        Conversion.byteArrayToInt(arg0, (byte)0, 1185, 2253, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nBytes-1)*8+dstPos is greather or equal to than 32
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testByteArrayToIntReturningPositive() throws Throwable  {
      byte[] arg0 = new byte[0];
      int byteArrayToInt = Conversion.byteArrayToInt(arg0, 0, 2438, 0, 2438);
      assertEquals(2438, byteArrayToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testByteArrayToIntReturningNegative() throws Throwable  {
      byte[] arg0 = new byte[0];
      int byteArrayToInt = Conversion.byteArrayToInt(arg0, (-115), (-115), 13, (-26));
      assertEquals((-115), byteArrayToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testByteArrayToIntReturningZero() throws Throwable  {
      byte[] arg0 = new byte[1];
      int byteArrayToInt = Conversion.byteArrayToInt(arg0, (byte)0, (byte)0, (-125), (byte)0);
      assertEquals(0, byteArrayToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testByteArrayToUuidThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      byte[] arg0 = new byte[0];
      // Undeclared exception!
      try { 
        Conversion.byteArrayToUuid(arg0, (-449));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -449
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testByteArrayToLongReturningPositive() throws Throwable  {
      byte[] arg0 = new byte[4];
      long byteArrayToLong = Conversion.byteArrayToLong(arg0, (byte)0, 1L, (byte)0, 0);
      assertEquals(1L, byteArrayToLong);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testByteArrayToLongReturningZero() throws Throwable  {
      byte[] arg0 = new byte[0];
      long byteArrayToLong = Conversion.byteArrayToLong(arg0, (short)0, (short)0, (short)0, (short)0);
      assertEquals(0L, byteArrayToLong);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testByteArrayToLongThrowsIllegalArgumentException() throws Throwable  {
      byte[] arg0 = new byte[0];
      // Undeclared exception!
      try { 
        Conversion.byteArrayToLong(arg0, (-176), (-528L), 3073, (-347));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nBytes-1)*8+dstPos is greather or equal to than 64
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testShortArrayToIntThrowsIllegalArgumentException() throws Throwable  {
      short[] arg0 = new short[0];
      // Undeclared exception!
      try { 
        Conversion.shortArrayToInt(arg0, 6, 6, 6, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nShorts-1)*16+dstPos is greather or equal to than 32
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testShortArrayToIntReturningZero() throws Throwable  {
      short[] arg0 = new short[0];
      int shortArrayToInt = Conversion.shortArrayToInt(arg0, (-3173), (short)0, (-3173), (short)0);
      assertEquals(0, shortArrayToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testShortArrayToIntReturningPositive() throws Throwable  {
      short[] arg0 = new short[0];
      int shortArrayToInt = Conversion.shortArrayToInt(arg0, 0, 15, 335, 335);
      assertEquals(15, shortArrayToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testShortArrayToIntReturningNegative() throws Throwable  {
      short[] arg0 = new short[0];
      int shortArrayToInt = Conversion.shortArrayToInt(arg0, (-2749), (-2749), (-2749), (-2749));
      assertEquals((-2749), shortArrayToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testShortArrayToIntThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      short[] arg0 = new short[3];
      // Undeclared exception!
      try { 
        Conversion.shortArrayToInt(arg0, 0, 7, (short) (-335), 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testShortArrayToLongThrowsIllegalArgumentException() throws Throwable  {
      short[] arg0 = new short[1];
      // Undeclared exception!
      try { 
        Conversion.shortArrayToLong(arg0, 157, (byte) (-66), (byte) (-66), (byte)22);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nShorts-1)*16+dstPos is greather or equal to than 64
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testShortArrayToLongReturningPositive() throws Throwable  {
      short[] arg0 = new short[2];
      long shortArrayToLong = Conversion.shortArrayToLong(arg0, (short)0, 1L, (short)0, (short)0);
      assertEquals(1L, shortArrayToLong);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testShortArrayToLong() throws Throwable  {
      short[] arg0 = new short[0];
      long shortArrayToLong = Conversion.shortArrayToLong(arg0, 0, (-1812L), (-2183), (-661));
      assertEquals((-1812L), shortArrayToLong);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testShortArrayToLongWithNegative() throws Throwable  {
      short[] arg0 = new short[0];
      long shortArrayToLong = Conversion.shortArrayToLong(arg0, (-4884), (-1812L), (-2183), (-2183));
      assertEquals((-1812L), shortArrayToLong);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testShortArrayToLongThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      short[] arg0 = new short[1];
      // Undeclared exception!
      try { 
        Conversion.shortArrayToLong(arg0, 0, 4294967295L, (-1753), (short)2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntArrayToLongReturningZero() throws Throwable  {
      int[] arg0 = new int[3];
      long intArrayToLong = Conversion.intArrayToLong(arg0, 0, 0L, (-1), 1);
      assertEquals(0L, intArrayToLong);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntArrayToLongReturningNegative() throws Throwable  {
      int[] arg0 = new int[9];
      long intArrayToLong = Conversion.intArrayToLong(arg0, 0, (byte) (-124), 397, 0);
      assertEquals((-124L), intArrayToLong);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntArrayToLongWithPositiveAndNegative() throws Throwable  {
      int[] arg0 = new int[0];
      long intArrayToLong = Conversion.intArrayToLong(arg0, 16, 16, 16, (-1));
      assertEquals(16L, intArrayToLong);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntArrayToLong() throws Throwable  {
      int[] arg0 = new int[0];
      long intArrayToLong = Conversion.intArrayToLong(arg0, (byte)0, (byte)46, (byte)46, (byte)46);
      assertEquals(46L, intArrayToLong);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntArrayToLongThrowsIllegalArgumentException() throws Throwable  {
      int[] arg0 = new int[2];
      // Undeclared exception!
      try { 
        Conversion.intArrayToLong(arg0, (-3033), (-854L), 68, 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (nInts-1)*32+dstPos is greather or equal to than 64
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntToHexDigitMsb0ThrowsIllegalArgumentException() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.intToHexDigitMsb0(2297);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nibble value not between 0 and 15: 2297
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntToHexDigitMsb0AndIntToHexDigitMsb0ReturningAlphabeticChar0() throws Throwable  {
      char intToHexDigitMsb0 = Conversion.intToHexDigitMsb0(15);
      assertEquals('f', intToHexDigitMsb0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntToHexDigitMsb0AndIntToHexDigitMsb0ReturningDigit0() throws Throwable  {
      char intToHexDigitMsb0 = Conversion.intToHexDigitMsb0(14);
      assertEquals('7', intToHexDigitMsb0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntToHexDigitMsb0AndIntToHexDigitMsb0ReturningAlphabeticChar1() throws Throwable  {
      char intToHexDigitMsb0 = Conversion.intToHexDigitMsb0(13);
      assertEquals('b', intToHexDigitMsb0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntToHexDigitMsb0AndIntToHexDigitMsb0ReturningDigit1() throws Throwable  {
      char intToHexDigitMsb0 = Conversion.intToHexDigitMsb0(12);
      assertEquals('3', intToHexDigitMsb0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntToHexDigitMsb0AndIntToHexDigitMsb0ReturningAlphabeticChar2() throws Throwable  {
      char intToHexDigitMsb0 = Conversion.intToHexDigitMsb0(11);
      assertEquals('d', intToHexDigitMsb0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntToHexDigitMsb0AndIntToHexDigitMsb0ReturningDigit2() throws Throwable  {
      char intToHexDigitMsb0 = Conversion.intToHexDigitMsb0(10);
      assertEquals('5', intToHexDigitMsb0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntToHexDigitMsb0AndIntToHexDigitMsb0ReturningDigit3() throws Throwable  {
      char intToHexDigitMsb0 = Conversion.intToHexDigitMsb0(9);
      assertEquals('9', intToHexDigitMsb0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntToHexDigitMsb0AndIntToHexDigitMsb0ReturningAlphabeticChar3() throws Throwable  {
      char intToHexDigitMsb0 = Conversion.intToHexDigitMsb0(7);
      assertEquals('e', intToHexDigitMsb0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntToHexDigitMsb0AndIntToHexDigitMsb0ReturningDigit4() throws Throwable  {
      char intToHexDigitMsb0 = Conversion.intToHexDigitMsb0(6);
      assertEquals('6', intToHexDigitMsb0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntToHexDigitMsb0AndIntToHexDigitMsb0ReturningAlphabeticChar4() throws Throwable  {
      char intToHexDigitMsb0 = Conversion.intToHexDigitMsb0(5);
      assertEquals('a', intToHexDigitMsb0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntToHexDigitMsb0AndIntToHexDigitMsb0ReturningDigit5() throws Throwable  {
      char intToHexDigitMsb0 = Conversion.intToHexDigitMsb0(4);
      assertEquals('2', intToHexDigitMsb0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntToHexDigitMsb0AndIntToHexDigitMsb0ReturningAlphabeticChar5() throws Throwable  {
      char intToHexDigitMsb0 = Conversion.intToHexDigitMsb0(3);
      assertEquals('c', intToHexDigitMsb0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntToHexDigitMsb0AndIntToHexDigitMsb0ReturningDigit6() throws Throwable  {
      char intToHexDigitMsb0 = Conversion.intToHexDigitMsb0(2);
      assertEquals('4', intToHexDigitMsb0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntToHexDigitMsb0AndIntToHexDigitMsb0ReturningDigit7() throws Throwable  {
      char intToHexDigitMsb0 = Conversion.intToHexDigitMsb0(1);
      assertEquals('8', intToHexDigitMsb0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntToHexDigitMsb0AndIntToHexDigitMsb0ReturningDigit8() throws Throwable  {
      char intToHexDigitMsb0 = Conversion.intToHexDigitMsb0((short)8);
      assertEquals('1', intToHexDigitMsb0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntToHexDigitMsb0WithZero() throws Throwable  {
      char intToHexDigitMsb0 = Conversion.intToHexDigitMsb0((short)0);
      assertEquals('0', intToHexDigitMsb0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIntToHexDigitThrowsIllegalArgumentException() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.intToHexDigit((-2856));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nibble value not between 0 and 15: -2856
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testByteToHexReturningNonEmptyString() throws Throwable  {
      String byteToHex = Conversion.byteToHex((byte)91, (-5064), "Vnt<x)@lu<zSQ", 10, 10);
      assertEquals("Vnt<x)@lu<00b5000000", byteToHex);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryBeMsb0ToHexDigitTaking2ArgumentsAndHexDigitMsb0ToBinary() throws Throwable  {
      boolean[] arg0 = Conversion.hexDigitMsb0ToBinary('5');
      char binaryBeMsb0ToHexDigit = Conversion.binaryBeMsb0ToHexDigit(arg0, 1);
      assertEquals('2', binaryBeMsb0ToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryBeMsb0ToHexDigitTaking2ArgumentsAndHexDigitToBinary() throws Throwable  {
      boolean[] arg0 = Conversion.hexDigitToBinary('5');
      char binaryBeMsb0ToHexDigit = Conversion.binaryBeMsb0ToHexDigit(arg0, 1);
      assertEquals('5', binaryBeMsb0ToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryBeMsb0ToHexDigitTaking2ArgumentsAndBinaryBeMsb0ToHexDigitTaking2ArgumentsReturningDigit7() throws Throwable  {
      boolean[] arg0 = new boolean[5];
      char binaryBeMsb0ToHexDigit = Conversion.binaryBeMsb0ToHexDigit(arg0, 0);
      assertEquals('0', binaryBeMsb0ToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryBeMsb0ToHexDigitTaking2ArgumentsAndBinaryBeMsb0ToHexDigitTaking2ArgumentsReturningAlphabeticChar3() throws Throwable  {
      boolean[] arg0 = new boolean[6];
      arg0[1] = true;
      arg0[3] = true;
      char binaryBeMsb0ToHexDigit = Conversion.binaryBeMsb0ToHexDigit(arg0, 1);
      assertEquals('a', binaryBeMsb0ToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryBeMsb0ToHexDigitTaking2ArgumentsAndBinaryBeMsb0ToHexDigitTaking2ArgumentsReturningAlphabeticChar4() throws Throwable  {
      boolean[] arg0 = new boolean[8];
      arg0[3] = true;
      arg0[4] = true;
      arg0[6] = true;
      char binaryBeMsb0ToHexDigit = Conversion.binaryBeMsb0ToHexDigit(arg0, (int) (short)1);
      assertEquals('d', binaryBeMsb0ToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryBeMsb0ToHexDigitTaking2ArgumentsAndBinaryBeMsb0ToHexDigitTaking2ArgumentsReturningAlphabeticChar5() throws Throwable  {
      boolean[] arg0 = new boolean[8];
      arg0[3] = true;
      arg0[4] = true;
      char binaryBeMsb0ToHexDigit = Conversion.binaryBeMsb0ToHexDigit(arg0, (int) (short)1);
      assertEquals('c', binaryBeMsb0ToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryBeMsb0ToHexDigitTaking2ArgumentsThrowsIllegalArgumentException() throws Throwable  {
      boolean[] arg0 = new boolean[0];
      // Undeclared exception!
      try { 
        Conversion.binaryBeMsb0ToHexDigit(arg0, (-186));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert an empty array.
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitMsb0_4bitsTaking2ArgumentsAndBinaryToHexDigitMsb0_4bitsTaking2ArgumentsReturningDigit5() throws Throwable  {
      boolean[] arg0 = new boolean[5];
      arg0[1] = true;
      char binaryToHexDigitMsb0_4bits = Conversion.binaryToHexDigitMsb0_4bits(arg0, (int) (byte)0);
      assertEquals('4', binaryToHexDigitMsb0_4bits);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitMsb0_4bitsTakingBooleanArrayAndHexDigitToBinaryAndHexDigitToBinaryWithDigit() throws Throwable  {
      boolean[] arg0 = Conversion.hexDigitToBinary('5');
      char binaryToHexDigitMsb0_4bits = Conversion.binaryToHexDigitMsb0_4bits(arg0);
      assertEquals(4, arg0.length);
      assertEquals('a', binaryToHexDigitMsb0_4bits);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitMsb0_4bitsTaking2ArgumentsAndBinaryToHexDigitMsb0_4bitsTaking2ArgumentsReturningDigit6() throws Throwable  {
      boolean[] arg0 = new boolean[4];
      arg0[1] = true;
      arg0[2] = true;
      char binaryToHexDigitMsb0_4bits = Conversion.binaryToHexDigitMsb0_4bits(arg0, 0);
      assertEquals('6', binaryToHexDigitMsb0_4bits);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitMsb0_4bitsTaking2ArgumentsAndBinaryToHexDigitMsb0_4bitsTaking2ArgumentsReturningDigit7() throws Throwable  {
      boolean[] arg0 = new boolean[8];
      arg0[0] = true;
      arg0[3] = true;
      char binaryToHexDigitMsb0_4bits = Conversion.binaryToHexDigitMsb0_4bits(arg0, 0);
      assertEquals('9', binaryToHexDigitMsb0_4bits);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitMsb0_4bitsTaking2ArgumentsAndBinaryToHexDigitMsb0_4bitsTaking2ArgumentsReturningDigit8() throws Throwable  {
      boolean[] arg0 = new boolean[6];
      arg0[3] = true;
      arg0[4] = true;
      char binaryToHexDigitMsb0_4bits = Conversion.binaryToHexDigitMsb0_4bits(arg0, 1);
      assertEquals('3', binaryToHexDigitMsb0_4bits);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitMsb0_4bitsTaking2ArgumentsAndBinaryToHexDigitMsb0_4bitsTaking2ArgumentsReturningDigit9() throws Throwable  {
      boolean[] arg0 = new boolean[6];
      arg0[2] = true;
      arg0[3] = true;
      arg0[4] = true;
      char binaryToHexDigitMsb0_4bits = Conversion.binaryToHexDigitMsb0_4bits(arg0, 1);
      assertEquals('7', binaryToHexDigitMsb0_4bits);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitMsb0_4bitsTaking2ArgumentsThrowsIllegalArgumentException0() throws Throwable  {
      boolean[] arg0 = new boolean[5];
      // Undeclared exception!
      try { 
        Conversion.binaryToHexDigitMsb0_4bits(arg0, (int) (byte)75);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // src.length-srcPos<4: src.length=5, srcPos=75
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitMsb0_4bitsTaking2ArgumentsThrowsIllegalArgumentException1() throws Throwable  {
      boolean[] arg0 = new boolean[9];
      // Undeclared exception!
      try { 
        Conversion.binaryToHexDigitMsb0_4bits(arg0, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // src.length>8: src.length=9
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitTaking2ArgumentsAndBinaryToHexDigitTaking2ArgumentsReturningDigit3() throws Throwable  {
      boolean[] arg0 = new boolean[5];
      arg0[0] = true;
      char binaryToHexDigit = Conversion.binaryToHexDigit(arg0, 0);
      assertEquals('1', binaryToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitTaking2ArgumentsAndBinaryToHexDigitTaking2ArgumentsReturningDigit4() throws Throwable  {
      boolean[] arg0 = new boolean[4];
      arg0[2] = true;
      char binaryToHexDigit = Conversion.binaryToHexDigit(arg0, 0);
      assertEquals('4', binaryToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitTaking2ArgumentsAndBinaryToHexDigitTaking2ArgumentsReturningDigit5() throws Throwable  {
      boolean[] arg0 = new boolean[5];
      arg0[0] = true;
      arg0[1] = true;
      arg0[2] = true;
      char binaryToHexDigit = Conversion.binaryToHexDigit(arg0, 0);
      assertEquals('7', binaryToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitTaking2ArgumentsAndHexDigitMsb0ToBinaryAndBinaryToHexDigitTaking2ArgumentsReturningDigit() throws Throwable  {
      boolean[] arg0 = Conversion.hexDigitMsb0ToBinary('5');
      char binaryToHexDigit = Conversion.binaryToHexDigit(arg0, 1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, arg0));
      assertEquals('5', binaryToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitTaking2ArgumentsAndBinaryToHexDigitTaking2ArgumentsReturningDigit6() throws Throwable  {
      boolean[] arg0 = new boolean[5];
      arg0[0] = true;
      arg0[3] = true;
      char binaryToHexDigit = Conversion.binaryToHexDigit(arg0, 0);
      assertEquals('9', binaryToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitTaking2ArgumentsAndBinaryToHexDigitTaking2ArgumentsReturningDigit7() throws Throwable  {
      boolean[] arg0 = new boolean[5];
      arg0[3] = true;
      char binaryToHexDigit = Conversion.binaryToHexDigit(arg0, 0);
      assertEquals('8', binaryToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitTaking2ArgumentsAndBinaryToHexDigitTaking2ArgumentsReturningAlphabeticChar1() throws Throwable  {
      boolean[] arg0 = new boolean[6];
      arg0[0] = true;
      arg0[2] = true;
      arg0[3] = true;
      char binaryToHexDigit = Conversion.binaryToHexDigit(arg0, 0);
      assertEquals('d', binaryToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitTaking2ArgumentsAndBinaryToHexDigitTaking2ArgumentsReturningAlphabeticChar2() throws Throwable  {
      boolean[] arg0 = new boolean[4];
      arg0[0] = true;
      arg0[1] = true;
      arg0[2] = true;
      arg0[3] = true;
      char binaryToHexDigit = Conversion.binaryToHexDigit(arg0, 0);
      assertEquals('f', binaryToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitTaking2ArgumentsAndBinaryToHexDigitTaking2ArgumentsReturningAlphabeticChar3() throws Throwable  {
      boolean[] arg0 = new boolean[4];
      arg0[1] = true;
      arg0[2] = true;
      arg0[3] = true;
      char binaryToHexDigit = Conversion.binaryToHexDigit(arg0, 0);
      assertEquals('e', binaryToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitTaking2ArgumentsAndBinaryToHexDigitTaking2ArgumentsReturningAlphabeticChar4() throws Throwable  {
      boolean[] arg0 = new boolean[6];
      arg0[2] = true;
      arg0[3] = true;
      char binaryToHexDigit = Conversion.binaryToHexDigit(arg0, 0);
      assertEquals('c', binaryToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitTaking2ArgumentsThrowsIllegalArgumentException() throws Throwable  {
      boolean[] arg0 = new boolean[0];
      // Undeclared exception!
      try { 
        Conversion.binaryToHexDigit(arg0, 1905);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert an empty array.
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinaryThrowsIllegalArgumentException0() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary('h');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'h' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinary0() throws Throwable  {
      boolean[] hexDigitMsb0ToBinary = Conversion.hexDigitMsb0ToBinary('f');
      assertEquals(4, hexDigitMsb0ToBinary.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinary1() throws Throwable  {
      boolean[] hexDigitMsb0ToBinary = Conversion.hexDigitMsb0ToBinary('e');
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, hexDigitMsb0ToBinary));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinary2() throws Throwable  {
      boolean[] hexDigitMsb0ToBinary = Conversion.hexDigitMsb0ToBinary('d');
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, hexDigitMsb0ToBinary));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitMsb0_4bitsTakingBooleanArrayAndHexDigitMsb0ToBinary0() throws Throwable  {
      boolean[] arg0 = Conversion.hexDigitMsb0ToBinary('c');
      char binaryToHexDigitMsb0_4bits = Conversion.binaryToHexDigitMsb0_4bits(arg0);
      assertEquals('c', binaryToHexDigitMsb0_4bits);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitMsb0_4bitsTaking2ArgumentsAndHexDigitMsb0ToBinary() throws Throwable  {
      boolean[] arg0 = Conversion.hexDigitMsb0ToBinary('b');
      char binaryToHexDigitMsb0_4bits = Conversion.binaryToHexDigitMsb0_4bits(arg0, (int) (byte)0);
      assertEquals('b', binaryToHexDigitMsb0_4bits);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinaryAndHexDigitMsb0ToBinaryWithAlphabeticChar0() throws Throwable  {
      boolean[] hexDigitMsb0ToBinary = Conversion.hexDigitMsb0ToBinary('a');
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, hexDigitMsb0ToBinary));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinaryThrowsIllegalArgumentExceptionAndHexDigitMsb0ToBinaryWithOtherChar0() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary('`');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '`' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinaryThrowsIllegalArgumentExceptionAndHexDigitMsb0ToBinaryWithOtherChar1() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary('_');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '_' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinaryThrowsIllegalArgumentExceptionAndHexDigitMsb0ToBinaryWithOtherChar2() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary('^');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '^' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinaryThrowsIllegalArgumentExceptionAndHexDigitMsb0ToBinaryWithOtherChar3() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary(']');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret ']' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinaryThrowsIllegalArgumentExceptionAndHexDigitMsb0ToBinaryWithOtherChar4() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary('\\');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '\\' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinaryThrowsIllegalArgumentExceptionAndHexDigitMsb0ToBinaryWithOtherChar5() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary('[');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '[' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinaryThrowsIllegalArgumentExceptionAndHexDigitMsb0ToBinaryWithAlphabeticChar() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary('Z');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'Z' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinaryThrowsIllegalArgumentException1() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary('Y');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'Y' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinaryThrowsIllegalArgumentException2() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary('X');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'X' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinaryThrowsIllegalArgumentException3() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary('W');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'W' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinaryThrowsIllegalArgumentException4() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary('V');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'V' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinaryThrowsIllegalArgumentException5() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary('U');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'U' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinaryThrowsIllegalArgumentException6() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary('T');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'T' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinaryThrowsIllegalArgumentException7() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary('S');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'S' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinaryThrowsIllegalArgumentException8() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary('R');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'R' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinaryThrowsIllegalArgumentException9() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary('Q');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'Q' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinaryThrowsIllegalArgumentException10() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary('P');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'P' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinaryThrowsIllegalArgumentException11() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary('O');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'O' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinaryThrowsIllegalArgumentException12() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary('N');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'N' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinaryThrowsIllegalArgumentException13() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary('M');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'M' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinaryThrowsIllegalArgumentException14() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary('L');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'L' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinaryThrowsIllegalArgumentException15() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary('K');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'K' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinaryThrowsIllegalArgumentException16() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary('J');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'J' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinaryThrowsIllegalArgumentException17() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary('I');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'I' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinaryThrowsIllegalArgumentException18() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary('H');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'H' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinaryThrowsIllegalArgumentException19() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary('G');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'G' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinary3() throws Throwable  {
      boolean[] hexDigitMsb0ToBinary = Conversion.hexDigitMsb0ToBinary('F');
      assertEquals(4, hexDigitMsb0ToBinary.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryBeMsb0ToHexDigitTakingBooleanArrayAndHexDigitMsb0ToBinaryAndBinaryBeMsb0ToHexDigitTakingBooleanArrayReturningAlphabeticChar() throws Throwable  {
      boolean[] arg0 = Conversion.hexDigitMsb0ToBinary('E');
      char binaryBeMsb0ToHexDigit = Conversion.binaryBeMsb0ToHexDigit(arg0);
      assertEquals('e', binaryBeMsb0ToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitTakingBooleanArrayReturningAlphabeticChar() throws Throwable  {
      boolean[] arg0 = Conversion.hexDigitMsb0ToBinary('D');
      char binaryToHexDigit = Conversion.binaryToHexDigit(arg0);
      assertEquals('b', binaryToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitTakingBooleanArrayAndHexDigitMsb0ToBinary() throws Throwable  {
      boolean[] arg0 = Conversion.hexDigitMsb0ToBinary('C');
      char binaryToHexDigit = Conversion.binaryToHexDigit(arg0);
      assertEquals('3', binaryToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinary4() throws Throwable  {
      boolean[] hexDigitMsb0ToBinary = Conversion.hexDigitMsb0ToBinary('B');
      assertEquals(4, hexDigitMsb0ToBinary.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinaryAndHexDigitMsb0ToBinaryWithAlphabeticChar1() throws Throwable  {
      boolean[] hexDigitMsb0ToBinary = Conversion.hexDigitMsb0ToBinary('A');
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, hexDigitMsb0ToBinary));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinaryThrowsIllegalArgumentExceptionAndHexDigitMsb0ToBinaryWithOtherChar6() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary('@');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '@' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinaryThrowsIllegalArgumentExceptionAndHexDigitMsb0ToBinaryWithOtherChar7() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary('?');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '?' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinaryThrowsIllegalArgumentExceptionAndHexDigitMsb0ToBinaryWithOtherChar8() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary('>');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '>' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinaryThrowsIllegalArgumentExceptionAndHexDigitMsb0ToBinaryWithOtherChar9() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary('=');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '=' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinaryThrowsIllegalArgumentExceptionAndHexDigitMsb0ToBinaryWithOtherChar10() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary('<');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '<' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinaryThrowsIllegalArgumentExceptionAndHexDigitMsb0ToBinaryWithOtherChar11() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary(';');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret ';' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinaryThrowsIllegalArgumentExceptionAndHexDigitMsb0ToBinaryWithOtherChar12() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToBinary(':');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret ':' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinaryAndHexDigitMsb0ToBinaryWithDigit0() throws Throwable  {
      boolean[] hexDigitMsb0ToBinary = Conversion.hexDigitMsb0ToBinary('9');
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, hexDigitMsb0ToBinary));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitMsb0_4bitsTakingBooleanArrayAndHexDigitMsb0ToBinary1() throws Throwable  {
      boolean[] arg0 = Conversion.hexDigitMsb0ToBinary('8');
      char binaryToHexDigitMsb0_4bits = Conversion.binaryToHexDigitMsb0_4bits(arg0);
      assertEquals('8', binaryToHexDigitMsb0_4bits);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinaryAndHexDigitMsb0ToBinaryWithDigit1() throws Throwable  {
      boolean[] hexDigitMsb0ToBinary = Conversion.hexDigitMsb0ToBinary('7');
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, hexDigitMsb0ToBinary));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitTaking2ArgumentsAndHexDigitMsb0ToBinaryAndBinaryToHexDigitTaking2ArgumentsReturningAlphabeticChar() throws Throwable  {
      boolean[] arg0 = Conversion.hexDigitMsb0ToBinary('5');
      char binaryToHexDigit = Conversion.binaryToHexDigit(arg0, 0);
      assertEquals(4, arg0.length);
      assertEquals('a', binaryToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinaryAndHexDigitMsb0ToBinaryWithDigit2() throws Throwable  {
      boolean[] hexDigitMsb0ToBinary = Conversion.hexDigitMsb0ToBinary('4');
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, hexDigitMsb0ToBinary));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinaryAndHexDigitMsb0ToBinaryWithDigit3() throws Throwable  {
      boolean[] hexDigitMsb0ToBinary = Conversion.hexDigitMsb0ToBinary('3');
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, hexDigitMsb0ToBinary));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitMsb0_4bitsTakingBooleanArrayAndHexDigitMsb0ToBinary2() throws Throwable  {
      boolean[] arg0 = Conversion.hexDigitMsb0ToBinary('2');
      char binaryToHexDigitMsb0_4bits = Conversion.binaryToHexDigitMsb0_4bits(arg0);
      assertEquals(4, arg0.length);
      assertEquals('2', binaryToHexDigitMsb0_4bits);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitMsb0_4bitsTakingBooleanArrayAndHexDigitMsb0ToBinary3() throws Throwable  {
      boolean[] arg0 = Conversion.hexDigitMsb0ToBinary('1');
      char binaryToHexDigitMsb0_4bits = Conversion.binaryToHexDigitMsb0_4bits(arg0);
      assertEquals(4, arg0.length);
      assertEquals('1', binaryToHexDigitMsb0_4bits);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToBinaryAndHexDigitMsb0ToBinaryWithDigit4() throws Throwable  {
      boolean[] hexDigitMsb0ToBinary = Conversion.hexDigitMsb0ToBinary('0');
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, hexDigitMsb0ToBinary));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToBinaryThrowsIllegalArgumentException0() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary('k');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'k' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitMsb0_4bitsTakingBooleanArrayAndHexDigitToBinary0() throws Throwable  {
      boolean[] arg0 = Conversion.hexDigitToBinary('f');
      char binaryToHexDigitMsb0_4bits = Conversion.binaryToHexDigitMsb0_4bits(arg0);
      assertEquals('f', binaryToHexDigitMsb0_4bits);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToShortThrowsIllegalArgumentException() throws Throwable  {
      boolean[] arg0 = Conversion.hexDigitToBinary('e');
      // Undeclared exception!
      try { 
        Conversion.binaryToShort(arg0, 1858, (short)7, 3058, (short)7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nBools-1+dstPos is greather or equal to than 16
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToBinary0() throws Throwable  {
      boolean[] hexDigitToBinary = Conversion.hexDigitToBinary('d');
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, hexDigitToBinary));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryBeMsb0ToHexDigitTakingBooleanArrayAndHexDigitToBinaryAndBinaryBeMsb0ToHexDigitTakingBooleanArrayReturningDigit0() throws Throwable  {
      boolean[] arg0 = Conversion.hexDigitToBinary('c');
      char binaryBeMsb0ToHexDigit = Conversion.binaryBeMsb0ToHexDigit(arg0);
      assertEquals('3', binaryBeMsb0ToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToBinary1() throws Throwable  {
      boolean[] hexDigitToBinary = Conversion.hexDigitToBinary('b');
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, hexDigitToBinary));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToByteThrowsIllegalArgumentException() throws Throwable  {
      boolean[] arg0 = Conversion.hexDigitToBinary('a');
      // Undeclared exception!
      try { 
        Conversion.binaryToByte(arg0, (-841), (byte) (-124), 53, 53);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nBools-1+dstPos is greather or equal to than 8
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToBinaryThrowsIllegalArgumentExceptionAndHexDigitToBinaryWithOtherChar0() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary('`');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '`' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToBinaryThrowsIllegalArgumentExceptionAndHexDigitToBinaryWithOtherChar1() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary('_');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '_' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToBinaryThrowsIllegalArgumentExceptionAndHexDigitToBinaryWithOtherChar2() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary('^');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '^' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToBinaryThrowsIllegalArgumentExceptionAndHexDigitToBinaryWithOtherChar3() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary(']');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret ']' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToBinaryThrowsIllegalArgumentExceptionAndHexDigitToBinaryWithOtherChar4() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary('\\');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '\\' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToBinaryThrowsIllegalArgumentExceptionAndHexDigitToBinaryWithOtherChar5() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary('[');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '[' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToBinaryThrowsIllegalArgumentExceptionAndHexDigitToBinaryWithAlphabeticChar() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary('Z');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'Z' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToBinaryThrowsIllegalArgumentException1() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary('Y');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'Y' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToBinaryThrowsIllegalArgumentException2() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary('X');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'X' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToBinaryThrowsIllegalArgumentException3() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary('W');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'W' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToBinaryThrowsIllegalArgumentException4() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary('V');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'V' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToBinaryThrowsIllegalArgumentException5() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary('U');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'U' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToBinaryThrowsIllegalArgumentException6() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary('T');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'T' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToBinaryThrowsIllegalArgumentException7() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary('S');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'S' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToBinaryThrowsIllegalArgumentException8() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary('R');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'R' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToBinaryThrowsIllegalArgumentException9() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary('Q');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'Q' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToBinaryThrowsIllegalArgumentException10() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary('P');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'P' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToBinaryThrowsIllegalArgumentException11() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary('O');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'O' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToBinaryThrowsIllegalArgumentException12() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary('N');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'N' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToBinaryThrowsIllegalArgumentException13() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary('M');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'M' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToBinaryThrowsIllegalArgumentException14() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary('L');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'L' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToBinaryThrowsIllegalArgumentException15() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary('K');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'K' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToBinaryThrowsIllegalArgumentException16() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary('J');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'J' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToBinaryThrowsIllegalArgumentException17() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary('I');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'I' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToBinaryThrowsIllegalArgumentException18() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary('H');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'H' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToBinaryThrowsIllegalArgumentException19() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary('G');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'G' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryBeMsb0ToHexDigitTakingBooleanArrayAndHexDigitToBinaryAndBinaryBeMsb0ToHexDigitTakingBooleanArrayReturningAlphabeticChar0() throws Throwable  {
      boolean[] arg0 = Conversion.hexDigitToBinary('F');
      char binaryBeMsb0ToHexDigit = Conversion.binaryBeMsb0ToHexDigit(arg0);
      assertEquals('f', binaryBeMsb0ToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryBeMsb0ToHexDigitTakingBooleanArrayAndHexDigitToBinaryAndBinaryBeMsb0ToHexDigitTakingBooleanArrayReturningDigit1() throws Throwable  {
      boolean[] arg0 = Conversion.hexDigitToBinary('E');
      char binaryBeMsb0ToHexDigit = Conversion.binaryBeMsb0ToHexDigit(arg0);
      assertEquals('7', binaryBeMsb0ToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryBeMsb0ToHexDigitTakingBooleanArrayAndHexDigitToBinaryAndBinaryBeMsb0ToHexDigitTakingBooleanArrayReturningAlphabeticChar1() throws Throwable  {
      boolean[] arg0 = Conversion.hexDigitToBinary('D');
      char binaryBeMsb0ToHexDigit = Conversion.binaryBeMsb0ToHexDigit(arg0);
      assertEquals('b', binaryBeMsb0ToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToBinary2() throws Throwable  {
      boolean[] hexDigitToBinary = Conversion.hexDigitToBinary('C');
      assertEquals(4, hexDigitToBinary.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitMsb0_4bitsTakingBooleanArrayAndHexDigitToBinary1() throws Throwable  {
      boolean[] arg0 = Conversion.hexDigitToBinary('B');
      char binaryToHexDigitMsb0_4bits = Conversion.binaryToHexDigitMsb0_4bits(arg0);
      assertEquals('d', binaryToHexDigitMsb0_4bits);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitMsb0_4bitsTakingBooleanArrayAndHexDigitToBinaryAndBinaryToHexDigitMsb0_4bitsTakingBooleanArrayReturningDigit() throws Throwable  {
      boolean[] arg0 = Conversion.hexDigitToBinary('A');
      char binaryToHexDigitMsb0_4bits = Conversion.binaryToHexDigitMsb0_4bits(arg0);
      assertEquals('5', binaryToHexDigitMsb0_4bits);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToBinaryThrowsIllegalArgumentExceptionAndHexDigitToBinaryWithOtherChar6() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary('@');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '@' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToBinaryThrowsIllegalArgumentExceptionAndHexDigitToBinaryWithOtherChar7() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary('?');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '?' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToBinaryThrowsIllegalArgumentExceptionAndHexDigitToBinaryWithOtherChar8() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary('>');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '>' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToBinaryThrowsIllegalArgumentExceptionAndHexDigitToBinaryWithOtherChar9() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary('=');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '=' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToBinaryThrowsIllegalArgumentExceptionAndHexDigitToBinaryWithOtherChar10() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary('<');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '<' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToBinaryThrowsIllegalArgumentExceptionAndHexDigitToBinaryWithOtherChar11() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary(';');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret ';' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryBeMsb0ToHexDigitTakingBooleanArrayAndHexDigitToBinaryAndBinaryBeMsb0ToHexDigitTakingBooleanArrayReturningDigit2() throws Throwable  {
      boolean[] arg0 = Conversion.hexDigitToBinary('9');
      char binaryBeMsb0ToHexDigit = Conversion.binaryBeMsb0ToHexDigit(arg0);
      assertEquals('9', binaryBeMsb0ToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryBeMsb0ToHexDigitTakingBooleanArrayAndHexDigitToBinaryAndBinaryBeMsb0ToHexDigitTakingBooleanArrayReturningDigit3() throws Throwable  {
      boolean[] arg0 = Conversion.hexDigitToBinary('8');
      char binaryBeMsb0ToHexDigit = Conversion.binaryBeMsb0ToHexDigit(arg0);
      assertEquals('1', binaryBeMsb0ToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitMsb0_4bitsTaking2ArgumentsAndHexDigitToBinary() throws Throwable  {
      boolean[] arg0 = Conversion.hexDigitToBinary('7');
      char binaryToHexDigitMsb0_4bits = Conversion.binaryToHexDigitMsb0_4bits(arg0, 0);
      assertEquals('e', binaryToHexDigitMsb0_4bits);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitTakingBooleanArrayAndHexDigitToBinary() throws Throwable  {
      boolean[] arg0 = Conversion.hexDigitToBinary('6');
      char binaryToHexDigit = Conversion.binaryToHexDigit(arg0);
      assertEquals('6', binaryToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToHexDigitTaking2ArgumentsAndHexDigitToBinary() throws Throwable  {
      boolean[] arg0 = Conversion.hexDigitToBinary('5');
      char binaryToHexDigit = Conversion.binaryToHexDigit(arg0, 1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, arg0));
      assertEquals('2', binaryToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToBinaryAndHexDigitToBinaryWithDigit0() throws Throwable  {
      boolean[] hexDigitToBinary = Conversion.hexDigitToBinary('4');
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, hexDigitToBinary));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryToIntWithNegative() throws Throwable  {
      boolean[] arg0 = Conversion.hexDigitToBinary('3');
      // Undeclared exception!
      try { 
        Conversion.binaryToInt(arg0, (-1917), (-3385), (-1917), 55);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1917
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryBeMsb0ToHexDigitTakingBooleanArrayAndHexDigitToBinaryAndBinaryBeMsb0ToHexDigitTakingBooleanArrayReturningDigit4() throws Throwable  {
      boolean[] arg0 = Conversion.hexDigitToBinary('2');
      char binaryBeMsb0ToHexDigit = Conversion.binaryBeMsb0ToHexDigit(arg0);
      assertEquals('4', binaryBeMsb0ToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryBeMsb0ToHexDigitTakingBooleanArrayAndHexDigitToBinaryAndBinaryBeMsb0ToHexDigitTakingBooleanArrayReturningDigit5() throws Throwable  {
      boolean[] arg0 = Conversion.hexDigitToBinary('1');
      char binaryBeMsb0ToHexDigit = Conversion.binaryBeMsb0ToHexDigit(arg0);
      assertEquals('8', binaryBeMsb0ToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToBinaryThrowsIllegalArgumentExceptionAndHexDigitToBinaryWithOtherChar12() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitToBinary(':');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret ':' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToBinaryAndHexDigitToBinaryWithDigit1() throws Throwable  {
      boolean[] hexDigitToBinary = Conversion.hexDigitToBinary('0');
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, hexDigitToBinary));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntThrowsIllegalArgumentException0() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('p');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'p' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToInt0() throws Throwable  {
      int hexDigitMsb0ToInt = Conversion.hexDigitMsb0ToInt('f');
      assertEquals(15, hexDigitMsb0ToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToInt1() throws Throwable  {
      int hexDigitMsb0ToInt = Conversion.hexDigitMsb0ToInt('e');
      assertEquals(7, hexDigitMsb0ToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToInt2() throws Throwable  {
      int hexDigitMsb0ToInt = Conversion.hexDigitMsb0ToInt('d');
      assertEquals(11, hexDigitMsb0ToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToInt3() throws Throwable  {
      int hexDigitMsb0ToInt = Conversion.hexDigitMsb0ToInt('c');
      assertEquals(3, hexDigitMsb0ToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToInt4() throws Throwable  {
      int hexDigitMsb0ToInt = Conversion.hexDigitMsb0ToInt('b');
      assertEquals(13, hexDigitMsb0ToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntAndHexDigitMsb0ToIntWithAlphabeticChar0() throws Throwable  {
      int hexDigitMsb0ToInt = Conversion.hexDigitMsb0ToInt('a');
      assertEquals(5, hexDigitMsb0ToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntThrowsIllegalArgumentExceptionAndHexDigitMsb0ToIntWithOtherChar0() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('`');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '`' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntThrowsIllegalArgumentExceptionAndHexDigitMsb0ToIntWithOtherChar1() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('_');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '_' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntThrowsIllegalArgumentExceptionAndHexDigitMsb0ToIntWithOtherChar2() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('^');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '^' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntThrowsIllegalArgumentExceptionAndHexDigitMsb0ToIntWithOtherChar3() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt(']');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret ']' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntThrowsIllegalArgumentExceptionAndHexDigitMsb0ToIntWithOtherChar4() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('\\');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '\\' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntThrowsIllegalArgumentExceptionAndHexDigitMsb0ToIntWithOtherChar5() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('[');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '[' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntThrowsIllegalArgumentExceptionAndHexDigitMsb0ToIntWithAlphabeticChar() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('Z');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'Z' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntThrowsIllegalArgumentException1() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('Y');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'Y' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntThrowsIllegalArgumentException2() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('X');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'X' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntThrowsIllegalArgumentException3() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('W');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'W' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntThrowsIllegalArgumentException4() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('V');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'V' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntThrowsIllegalArgumentException5() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('U');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'U' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntThrowsIllegalArgumentException6() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('T');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'T' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntThrowsIllegalArgumentException7() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('S');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'S' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntThrowsIllegalArgumentException8() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('R');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'R' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntThrowsIllegalArgumentException9() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('Q');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'Q' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntThrowsIllegalArgumentException10() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('P');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'P' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntThrowsIllegalArgumentException11() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('O');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'O' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntThrowsIllegalArgumentException12() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('N');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'N' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntThrowsIllegalArgumentException13() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('M');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'M' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntThrowsIllegalArgumentException14() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('L');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'L' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntThrowsIllegalArgumentException15() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('K');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'K' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntThrowsIllegalArgumentException16() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('J');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'J' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntThrowsIllegalArgumentException17() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('I');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'I' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntThrowsIllegalArgumentException18() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('H');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'H' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntThrowsIllegalArgumentException19() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('G');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret 'G' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToInt5() throws Throwable  {
      int hexDigitMsb0ToInt = Conversion.hexDigitMsb0ToInt('F');
      assertEquals(15, hexDigitMsb0ToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToInt6() throws Throwable  {
      int hexDigitMsb0ToInt = Conversion.hexDigitMsb0ToInt('E');
      assertEquals(7, hexDigitMsb0ToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToInt7() throws Throwable  {
      int hexDigitMsb0ToInt = Conversion.hexDigitMsb0ToInt('D');
      assertEquals(11, hexDigitMsb0ToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToInt8() throws Throwable  {
      int hexDigitMsb0ToInt = Conversion.hexDigitMsb0ToInt('C');
      assertEquals(3, hexDigitMsb0ToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToInt9() throws Throwable  {
      int hexDigitMsb0ToInt = Conversion.hexDigitMsb0ToInt('B');
      assertEquals(13, hexDigitMsb0ToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntAndHexDigitMsb0ToIntWithAlphabeticChar1() throws Throwable  {
      int hexDigitMsb0ToInt = Conversion.hexDigitMsb0ToInt('A');
      assertEquals(5, hexDigitMsb0ToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntThrowsIllegalArgumentExceptionAndHexDigitMsb0ToIntWithOtherChar6() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('@');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '@' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntThrowsIllegalArgumentExceptionAndHexDigitMsb0ToIntWithOtherChar7() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('?');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '?' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntThrowsIllegalArgumentExceptionAndHexDigitMsb0ToIntWithOtherChar8() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('>');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '>' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntThrowsIllegalArgumentExceptionAndHexDigitMsb0ToIntWithOtherChar9() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('=');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '=' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntThrowsIllegalArgumentExceptionAndHexDigitMsb0ToIntWithOtherChar10() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt('<');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '<' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntThrowsIllegalArgumentExceptionAndHexDigitMsb0ToIntWithOtherChar11() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt(';');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret ';' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntThrowsIllegalArgumentExceptionAndHexDigitMsb0ToIntWithOtherChar12() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitMsb0ToInt(':');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret ':' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntAndHexDigitMsb0ToIntWithDigit0() throws Throwable  {
      int hexDigitMsb0ToInt = Conversion.hexDigitMsb0ToInt('9');
      assertEquals(9, hexDigitMsb0ToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntAndHexDigitMsb0ToIntWithDigit1() throws Throwable  {
      int hexDigitMsb0ToInt = Conversion.hexDigitMsb0ToInt('8');
      assertEquals(1, hexDigitMsb0ToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntAndHexDigitMsb0ToIntWithDigit2() throws Throwable  {
      int hexDigitMsb0ToInt = Conversion.hexDigitMsb0ToInt('7');
      assertEquals(14, hexDigitMsb0ToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntAndHexDigitMsb0ToIntWithDigit3() throws Throwable  {
      int hexDigitMsb0ToInt = Conversion.hexDigitMsb0ToInt('6');
      assertEquals(6, hexDigitMsb0ToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntAndHexDigitMsb0ToIntWithDigit4() throws Throwable  {
      int hexDigitMsb0ToInt = Conversion.hexDigitMsb0ToInt('5');
      assertEquals(10, hexDigitMsb0ToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntAndHexDigitMsb0ToIntWithDigit5() throws Throwable  {
      int hexDigitMsb0ToInt = Conversion.hexDigitMsb0ToInt('4');
      assertEquals(2, hexDigitMsb0ToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntAndHexDigitMsb0ToIntWithDigit6() throws Throwable  {
      int hexDigitMsb0ToInt = Conversion.hexDigitMsb0ToInt('3');
      assertEquals(12, hexDigitMsb0ToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntAndHexDigitMsb0ToIntWithDigit7() throws Throwable  {
      int hexDigitMsb0ToInt = Conversion.hexDigitMsb0ToInt('2');
      assertEquals(4, hexDigitMsb0ToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntAndHexDigitMsb0ToIntWithDigit8() throws Throwable  {
      int hexDigitMsb0ToInt = Conversion.hexDigitMsb0ToInt('1');
      assertEquals(8, hexDigitMsb0ToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitMsb0ToIntReturningZero() throws Throwable  {
      int hexDigitMsb0ToInt = Conversion.hexDigitMsb0ToInt('0');
      assertEquals(0, hexDigitMsb0ToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToIntThrowsIllegalArgumentException() throws Throwable  {
      // Undeclared exception!
      try { 
        Conversion.hexDigitToInt('(');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot interpret '(' as a hexadecimal digit
         //
         verifyException("org.apache.commons.lang3.Conversion", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHexDigitToIntReturningZero() throws Throwable  {
      int hexDigitToInt = Conversion.hexDigitToInt('0');
      assertEquals(0, hexDigitToInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBinaryBeMsb0ToHexDigitTakingBooleanArrayAndHexDigitMsb0ToBinaryAndBinaryBeMsb0ToHexDigitTakingBooleanArrayReturningDigit() throws Throwable  {
      boolean[] arg0 = Conversion.hexDigitMsb0ToBinary('6');
      char binaryBeMsb0ToHexDigit = Conversion.binaryBeMsb0ToHexDigit(arg0);
      assertEquals('6', binaryBeMsb0ToHexDigit);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesConversion() throws Throwable  {
      Conversion conversion = new Conversion();
  }
}
