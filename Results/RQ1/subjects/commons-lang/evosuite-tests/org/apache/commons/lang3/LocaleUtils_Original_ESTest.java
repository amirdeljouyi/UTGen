/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Mon Mar 18 16:22:20 GMT 2024
 */

package org.apache.commons.lang3;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang3.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LocaleUtils_Original_ESTest extends LocaleUtils_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCountriesByLanguageWithNull() throws Throwable  {
      List<Locale> countriesByLanguage = LocaleUtils.countriesByLanguage((String) null);
      assertTrue(countriesByLanguage.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCountriesByLanguageWithNonEmptyString() throws Throwable  {
      List<Locale> countriesByLanguage = LocaleUtils.countriesByLanguage("is");
      assertFalse(countriesByLanguage.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLanguagesByCountryWithNull() throws Throwable  {
      List<Locale> languagesByCountry = LocaleUtils.languagesByCountry((String) null);
      assertEquals(0, languagesByCountry.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLanguagesByCountryWithNonEmptyString() throws Throwable  {
      List<Locale> languagesByCountry = LocaleUtils.languagesByCountry("{[-%~VT#HzfH$G");
      assertEquals(0, languagesByCountry.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsAvailableLocaleReturningFalse() throws Throwable  {
      boolean availableLocale = LocaleUtils.isAvailableLocale((Locale) null);
      assertFalse(availableLocale);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLocaleLookupListTaking2ArgumentsWithNull() throws Throwable  {
      Locale arg0 = new Locale("org.apache.commons.lang3.LocaleUtils");
      List<Locale> localeLookupList = LocaleUtils.localeLookupList(arg0, (Locale) null);
      assertEquals(2, localeLookupList.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLocaleLookupListTaking2Arguments() throws Throwable  {
      Locale arg1 = new Locale("sB%)]N5KH$2o", "sB%)]N5KH$2o", "sB%)]N5KH$2o");
      List<Locale> localeLookupList = LocaleUtils.localeLookupList(arg1, arg1);
      assertEquals(3, localeLookupList.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLocaleLookupListTaking2ArgumentsWithNullAndNull() throws Throwable  {
      List<Locale> localeLookupList = LocaleUtils.localeLookupList((Locale) null, (Locale) null);
      assertTrue(localeLookupList.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToLocaleThrowsIllegalArgumentException0() throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("sp_SU_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: sp_SU_
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToLocale0() throws Throwable  {
      Locale locale = LocaleUtils.toLocale("sp__}");
      assertEquals("sp__}", locale.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToLocaleThrowsIllegalArgumentException1() throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("pcu_S_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: pcu_S_
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToLocaleThrowsIllegalArgumentException2() throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("sp_S*_}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: sp_S*_}
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToLocaleThrowsIllegalArgumentException3() throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("zM c'G7wmsWBd_]8_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: zM c'G7wmsWBd_]8_
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToLocale1() throws Throwable  {
      Locale locale = LocaleUtils.toLocale("sp_SU");
      assertEquals("sp", locale.getLanguage());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToLocaleThrowsIllegalArgumentException4() throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("kqn_X[TcY*/WD*IMm");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: kqn_X[TcY*_/WD*IMm
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToLocaleThrowsIllegalArgumentException5() throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("kn_Wu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: kn_Wu
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToLocaleThrowsIllegalArgumentException6() throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("k_Xj[TcY*/4U*i\"Iqm");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: k_Xj[TcY*_/4U*i\"Iqm
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToLocaleThrowsIllegalArgumentException7() throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("gnytu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: gnytu
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLocaleLookupListTaking2ArgumentsAndToLocale() throws Throwable  {
      Locale arg1 = LocaleUtils.toLocale("th");
      List<Locale> localeLookupList = LocaleUtils.localeLookupList(arg1, arg1);
      assertEquals(1, localeLookupList.size());
      assertEquals("th", arg1.getLanguage());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToLocale2() throws Throwable  {
      Locale locale = LocaleUtils.toLocale("eot");
      assertEquals("eot", locale.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToLocaleThrowsIllegalArgumentException8() throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("p_[4*_}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: p_[4*_}
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToLocaleThrowsIllegalArgumentException9() throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("VC_Px)Nnl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: VC_Px)Nnl
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToLocaleThrowsIllegalArgumentException10() throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("Minimum abbreviation width with offset is 7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToLocale3() throws Throwable  {
      Locale locale = LocaleUtils.toLocale("_IR_+g}KJ");
      assertEquals("IR", locale.getCountry());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToLocaleThrowsIllegalArgumentException11() throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("_IKvKF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: _IKvKF
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToLocaleThrowsIllegalArgumentException12() throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("_FKF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: _FKF
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToLocaleThrowsIllegalArgumentException13() throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("_FfesHF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: _FfesHF
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToLocale4() throws Throwable  {
      Locale locale = LocaleUtils.toLocale("_FF");
      assertEquals("FF", locale.getCountry());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToLocaleThrowsIllegalArgumentException14() throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("_3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: _3
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToLocaleThrowsIllegalArgumentException15() throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("_)`[Mb%01}+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: _)`[Mb%01}+
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToLocaleThrowsIllegalArgumentException16() throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: 
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToLocaleThrowsIllegalArgumentException17() throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale(".__/K03e6Oe`T!Ap_5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: .__/K03e6Oe`T!Ap_5
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsAvailableLocaleReturningTrue() throws Throwable  {
      Locale arg0 = LocaleUtils.toLocale("");
      boolean availableLocale = LocaleUtils.isAvailableLocale(arg0);
      assertTrue(availableLocale);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToLocaleReturningNull() throws Throwable  {
      Locale locale = LocaleUtils.toLocale((String) null);
      assertNull(locale);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToLocaleThrowsIllegalArgumentException18() throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("+#)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: +#)
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesSyncAvoid() throws Throwable  {
      LocaleUtils.SyncAvoid localeUtils_SyncAvoid = new LocaleUtils.SyncAvoid();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAvailableLocaleList() throws Throwable  {
      List<Locale> availableLocaleList = LocaleUtils.availableLocaleList();
      assertFalse(availableLocaleList.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAvailableLocaleSet() throws Throwable  {
      Set<Locale> availableLocaleSet = LocaleUtils.availableLocaleSet();
      assertFalse(availableLocaleSet.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLocaleLookupListTakingLocale() throws Throwable  {
      Locale arg0 = Locale.US;
      List<Locale> localeLookupList = LocaleUtils.localeLookupList(arg0);
      assertEquals(2, localeLookupList.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesLocaleUtils() throws Throwable  {
      LocaleUtils localeUtils = new LocaleUtils();
  }
}
