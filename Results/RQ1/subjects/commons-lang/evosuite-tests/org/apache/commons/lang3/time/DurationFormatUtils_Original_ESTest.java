/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Mon Mar 18 16:32:16 GMT 2024
 */

package org.apache.commons.lang3.time;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.DurationFormatUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DurationFormatUtils_Original_ESTest extends DurationFormatUtils_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCount() throws Throwable  {
      DurationFormatUtils arg0 = new DurationFormatUtils();
      DurationFormatUtils.Token durationFormatUtils_Token = new DurationFormatUtils.Token(arg0);
      int count = durationFormatUtils_Token.getCount();
      assertEquals(1, count);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLexxReturningNonEmptyArray() throws Throwable  {
      DurationFormatUtils.Token[] lexx = DurationFormatUtils.lexx("HyG~|jE/{OU");
      assertEquals(3, lexx.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testContainsTokenWithValue() throws Throwable  {
      DurationFormatUtils.Token[] arg0 = DurationFormatUtils.lexx("");
      boolean containsTokenWithValue = DurationFormatUtils.Token.containsTokenWithValue(arg0, "");
      assertFalse(containsTokenWithValue);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFormatPeriodTaking5ArgumentsReturningEmptyString() throws Throwable  {
      TimeZone arg4 = TimeZone.getDefault();
      String formatPeriod = DurationFormatUtils.formatPeriod(260L, 65L, "", true, arg4);
      assertEquals("", formatPeriod);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFormatPeriodTaking3ArgumentsReturningNonEmptyString() throws Throwable  {
      String formatPeriod = DurationFormatUtils.formatPeriod(484L, 4L, "\r");
      assertNotNull(formatPeriod);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFormatDurationTaking2ArgumentsReturningEmptyString() throws Throwable  {
      String formatDuration = DurationFormatUtils.formatDuration((-1532L), "");
      assertEquals("", formatDuration);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFormatPeriodTaking5Arguments0() throws Throwable  {
      ZoneId arg0 = ZoneId.systemDefault();
      TimeZone arg4 = TimeZone.getTimeZone(arg0);
      String formatPeriod = DurationFormatUtils.formatPeriod(1L, 0L, "'P'yyyy'Y'M'M'd'DT'H'H'm'M's.S'S'", false, arg4);
      assertNotNull(formatPeriod);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFormatDurationTaking3ArgumentsReturningEmptyString() throws Throwable  {
      String formatDuration = DurationFormatUtils.formatDuration(86400000L, "", true);
      assertEquals("", formatDuration);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTokenTakingObjectAndCallsEquals0() throws Throwable  {
      DurationFormatUtils.Token arg0 = new DurationFormatUtils.Token("'P'yyyy'Y'M'M'd'DT'H'H'm'M's.S'S'");
      DurationFormatUtils.Token durationFormatUtils_Token = new DurationFormatUtils.Token("H");
      boolean equals = durationFormatUtils_Token.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIncrement() throws Throwable  {
      DurationFormatUtils.Token arg0 = new DurationFormatUtils.Token("H");
      arg0.increment();
      DurationFormatUtils.Token durationFormatUtils_Token = new DurationFormatUtils.Token("0java.lang.StringBuilder@00000000100java.lang.StringBuilder@00000000110java.lang.StringBuilder@00000000120java.lang.StringBuilder@0000000013", 1);
      boolean equals = durationFormatUtils_Token.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTokenTakingObjectAndCallsEquals1() throws Throwable  {
      DurationFormatUtils.Token arg0 = new DurationFormatUtils.Token("'P'yyyy'Y'M'M'd'DT'H'H'm'M's.S'S'");
      boolean equals = arg0.equals(arg0);
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFormatPeriodTaking3ArgumentsThrowsIllegalArgumentException() throws Throwable  {
      // Undeclared exception!
      try { 
        DurationFormatUtils.formatPeriod(475L, 475L, "Search and Replace array lengths don't match: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unmatched quote in format: Search and Replace array lengths don't match: 
         //
         verifyException("org.apache.commons.lang3.time.DurationFormatUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFormat() throws Throwable  {
      DurationFormatUtils.Token[] arg0 = new DurationFormatUtils.Token[1];
      DurationFormatUtils.Token durationFormatUtils_Token = new DurationFormatUtils.Token("0java.lang.StringBuilder@00000000090java.lang.StringBuilder@00000000100java.lang.StringBuilder@00000000110java.lang.StringBuilder@0000000012", 77);
      arg0[0] = durationFormatUtils_Token;
      String format = DurationFormatUtils.format(arg0, 458L, 77, 0L, 0L, 0L, 0L, 0L, true);
      assertEquals("", format);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFormatPeriodTaking5ArgumentsThrowsTooManyResourcesException() throws Throwable  {
      SimpleTimeZone arg4 = new SimpleTimeZone(0, "");
      // Undeclared exception!
      DurationFormatUtils.formatPeriod(1L, (-3232L), "", true, (TimeZone) arg4);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFormatPeriodTaking5ArgumentsWithNegative() throws Throwable  {
      SimpleTimeZone arg4 = new SimpleTimeZone(121, "");
      String formatPeriod = DurationFormatUtils.formatPeriod((long) (-348), 1L, "t4jeI0r*@PKe@z", false, (TimeZone) arg4);
      assertNotNull(formatPeriod);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFormatPeriodTaking5Arguments1() throws Throwable  {
      SimpleTimeZone arg4 = new SimpleTimeZone(0, "s(wX[V9yBoJ\u0002", 0, 13, 0, 0, 0, 0, 13, 0, 1252);
      String formatPeriod = DurationFormatUtils.formatPeriod(3600000L, 0L, "s(wX[V9yBoJ\u0002", false, (TimeZone) arg4);
      assertNotNull(formatPeriod);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFormatPeriodTaking5ArgumentsWithPositive() throws Throwable  {
      TimeZone arg4 = TimeZone.getTimeZone("");
      String formatPeriod = DurationFormatUtils.formatPeriod(297L, 297L, "Minimum abbreviation width with offset is 7", false, arg4);
      assertNotNull(formatPeriod);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFormatPeriodTaking5ArgumentsWithZero() throws Throwable  {
      TimeZone arg4 = TimeZone.getTimeZone("");
      String formatPeriod = DurationFormatUtils.formatPeriod(0L, (-3083L), "Minimum abbreviation width with offset is 7", false, arg4);
      assertNotNull(formatPeriod);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFormatDurationWordsWithTrue() throws Throwable  {
      String formatDurationWords = DurationFormatUtils.formatDurationWords(458L, true, true);
      assertNotNull(formatDurationWords);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFormatDurationWordsWithFalse() throws Throwable  {
      String formatDurationWords = DurationFormatUtils.formatDurationWords((-127L), false, false);
      assertNotNull(formatDurationWords);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesDurationFormatUtilsTakingNoArguments() throws Throwable  {
      DurationFormatUtils arg0 = new DurationFormatUtils();
      DurationFormatUtils.Token durationFormatUtils_Token = new DurationFormatUtils.Token(arg0);
      boolean equals = durationFormatUtils_Token.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFormatDurationHMS() throws Throwable  {
      String formatDurationHMS = DurationFormatUtils.formatDurationHMS((-1369L));
      assertNotNull(formatDurationHMS);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFormatPeriodISO() throws Throwable  {
      String formatPeriodISO = DurationFormatUtils.formatPeriodISO((-1L), 4311L);
      assertNotNull(formatPeriodISO);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFormatPeriodTaking3ArgumentsReturningEmptyString() throws Throwable  {
      String formatPeriod = DurationFormatUtils.formatPeriod(1779L, 1779L, "");
      assertEquals("", formatPeriod);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFormatDurationISO() throws Throwable  {
      String formatDurationISO = DurationFormatUtils.formatDurationISO(0L);
      assertNotNull(formatDurationISO);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValue() throws Throwable  {
      DurationFormatUtils.Token durationFormatUtils_Token = new DurationFormatUtils.Token("H", 1);
      Object value = durationFormatUtils_Token.getValue();
      assertEquals("H", value);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToString() throws Throwable  {
      DurationFormatUtils.Token durationFormatUtils_Token = new DurationFormatUtils.Token("d");
      String string = durationFormatUtils_Token.toString();
      assertNotNull(string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFormatDurationTaking3ArgumentsReturningNonEmptyString() throws Throwable  {
      String formatDuration = DurationFormatUtils.formatDuration((-2048L), "'P'yyyy'Y'M'M'd'DT'H'H'm'M's.S'S'", false);
      assertNotNull(formatDuration);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFormatDurationTaking2ArgumentsReturningNonEmptyString() throws Throwable  {
      String formatDuration = DurationFormatUtils.formatDuration((-1636L), "java.lang.StringBuilder@00000000160java.lang.StringBuilder@00000000170java.lang.StringBuilder@00000000180java.lang.StringBuilder@00000000190java.lang.StringBuilder@00000000200java.lang.StringBuilder@0000000021-1java.lang.StringBuilder@0000000022-636java.lang.StringBuilder@0000000023");
      assertNotNull(formatDuration);
  }
}
