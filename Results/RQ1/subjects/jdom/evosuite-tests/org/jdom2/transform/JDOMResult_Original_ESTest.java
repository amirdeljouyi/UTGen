/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 19 18:27:06 GMT 2024
 */

package org.jdom2.transform;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jdom2.Content;
import org.jdom2.Document;
import org.jdom2.JDOMFactory;
import org.jdom2.SlimJDOMFactory;
import org.jdom2.transform.JDOMResult;
import org.junit.runner.RunWith;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.helpers.XMLFilterImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JDOMResult_Original_ESTest extends JDOMResult_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDocumentReturningDocumentWhereHasRootElementIsFalse() throws Throwable  {
      JDOMResult jDOMResult = new JDOMResult();
      LinkedList<Content> arg0 = new LinkedList<Content>();
      jDOMResult.setResult(arg0);
      jDOMResult.getDocument();
      List<Content> result = jDOMResult.getResult();
      assertEquals(0, result.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetResultReturningListWhereSizeIsZero() throws Throwable  {
      JDOMResult jDOMResult = new JDOMResult();
      LinkedList<Content> arg0 = new LinkedList<Content>();
      jDOMResult.setResult(arg0);
      jDOMResult.getResult();
      Document document = jDOMResult.getDocument();
      assertNull(document);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetLexicalHandler() throws Throwable  {
      JDOMResult jDOMResult = new JDOMResult();
      DefaultHandler2 arg0 = new DefaultHandler2();
      jDOMResult.setLexicalHandler(arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDocumentReturningNull() throws Throwable  {
      JDOMResult jDOMResult = new JDOMResult();
      Document document = jDOMResult.getDocument();
      assertNull(document);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetFactory() throws Throwable  {
      JDOMResult jDOMResult = new JDOMResult();
      SlimJDOMFactory arg0 = new SlimJDOMFactory();
      jDOMResult.setFactory(arg0);
      JDOMFactory factory = jDOMResult.getFactory();
      assertSame(factory, arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetHandler() throws Throwable  {
      JDOMResult jDOMResult = new JDOMResult();
      XMLFilterImpl arg0 = new XMLFilterImpl();
      jDOMResult.setHandler(arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFactoryReturningNull() throws Throwable  {
      JDOMResult jDOMResult = new JDOMResult();
      JDOMFactory factory = jDOMResult.getFactory();
      assertNull(factory);
  }
}
