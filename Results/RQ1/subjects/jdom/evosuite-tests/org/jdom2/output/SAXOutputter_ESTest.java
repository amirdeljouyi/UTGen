/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 19 18:42:21 GMT 2024
 */

package org.jdom2.output;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jdom2.Content;
import org.jdom2.DocType;
import org.jdom2.Document;
import org.jdom2.Element;
import org.jdom2.ProcessingInstruction;
import org.jdom2.output.Format;
import org.jdom2.output.SAXOutputter;
import org.jdom2.output.support.AbstractSAXOutputProcessor;
import org.jdom2.output.support.SAXOutputProcessor;
import org.junit.runner.RunWith;
import org.xml.sax.ContentHandler;
import org.xml.sax.HandlerBase;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXNotSupportedException;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.ext.LexicalHandler;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SAXOutputter_ESTest extends SAXOutputter_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetProperty() throws Throwable  {
      // Given a SAXOutputter instance with default properties
      SAXOutputter saxOutputter = new SAXOutputter();
      
      // When the reportDTDEvents property is set to true
      saxOutputter.setProperty("http://xml.org/sax/properties/declaration-handler", (Object) null);
      assertTrue(saxOutputter.getReportDTDEvents());
      
      // And the reportNamespaceDeclarations property is set to false
      saxOutputter.setProperty("http://xml.org/sax/properties/declaration-handler", (Object) null);
      assertFalse(saxOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOutputTakingDocument() throws Throwable  {
      // Given
      Document document = new Document();
      DefaultHandler defaultHandler = new DefaultHandler();
      DefaultHandler2 defaultHandler2 = new DefaultHandler2();
      SAXOutputter saxOutputter = new SAXOutputter(defaultHandler, defaultHandler, defaultHandler, defaultHandler2);
      
      // When
      saxOutputter.output(document);
      
      // Then
      assertFalse(saxOutputter.getReportNamespaceDeclarations());
      assertTrue(saxOutputter.getReportDTDEvents());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLexicalHandlerReturningNonNull() throws Throwable  {
      // Create an instance of the XMLFilterImpl class
      XMLFilterImpl xmlFilter = new XMLFilterImpl();
      
      // Create an instance of the DefaultHandler2 class
      DefaultHandler2 defaultHandler = new DefaultHandler2();
      
      // Create an instance of the SAXOutputter class, passing in the xmlFilter and defaultHandler instances
      SAXOutputter saxOutputter = new SAXOutputter(xmlFilter, xmlFilter, xmlFilter, xmlFilter, defaultHandler);
      
      // Test that the getLexicalHandler method returns a non-null value
      assertNotNull(saxOutputter.getLexicalHandler());
      
      // Test that the reportDTDEvents property is true
      assertTrue(saxOutputter.getReportDTDEvents());
      
      // Test that the reportNamespaceDeclarations property is false
      assertFalse(saxOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFormatReturningFormatWhereIsSpecifiedAttributesOnlyIsTrue() throws Throwable  {
      // Given
      AbstractSAXOutputProcessor outputProcessor = new AbstractSAXOutputProcessor();
      Format prettyFormat = Format.getPrettyFormat();
      prettyFormat.setSpecifiedAttributesOnly(true);
      XMLFilterImpl xmlFilter = new XMLFilterImpl();
      DefaultHandler2 defaultHandler = new DefaultHandler2();
      
      // When
      SAXOutputter saxOutputter = new SAXOutputter(outputProcessor, prettyFormat, xmlFilter, xmlFilter, xmlFilter, xmlFilter, defaultHandler);
      
      // Then
      assertFalse(saxOutputter.getReportNamespaceDeclarations());
      assertTrue(saxOutputter.getReportDTDEvents());
      assertEquals(Format.TextMode.TRIM, saxOutputter.getFormat().getTextMode());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFormatReturningFormatWhereGetOmitEncodingIsTrue() throws Throwable  {
      // rollbacked to evosuite
      DefaultHandler arg3 = new DefaultHandler();
      DefaultHandler2 arg4 = new DefaultHandler2();
      SAXOutputter sAXOutputter = new SAXOutputter(arg3, arg3, arg3, arg3, arg4);
      Format prettyFormat = Format.getPrettyFormat();
      Format arg0 = prettyFormat.setOmitEncoding(true);
      sAXOutputter.setFormat(arg0);
      Format format = sAXOutputter.getFormat();
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
      assertTrue(sAXOutputter.getReportDTDEvents());
      assertTrue(format.getOmitEncoding());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFormatReturningFormatWhereGetOmitDeclarationIsTrue() throws Throwable  {
      AbstractSAXOutputProcessor arg0 = new AbstractSAXOutputProcessor();
      // Create a new instance of the AbstractSAXOutputProcessor class.
      Format prettyFormat = Format.getPrettyFormat();
      // Get the pretty format object.
      Format arg1 = prettyFormat.setOmitDeclaration(true);
      // Set the omit declaration flag to true on the pretty format object.
      XMLFilterImpl arg5 = new XMLFilterImpl();
      // Create a new instance of the XMLFilterImpl class.
      DefaultHandler2 arg6 = new DefaultHandler2();
      // Create a new instance of the DefaultHandler2 class.
      SAXOutputter sAXOutputter = new SAXOutputter(arg0, arg1, (ContentHandler) null, arg5, arg5, arg5, arg6);
      // Create a new instance of the SAXOutputter class with the provided arguments.
      Format format = sAXOutputter.getFormat();
      // Get the format object from the SAXOutputter instance.
      assertTrue(sAXOutputter.getReportDTDEvents());
      // Check that the report DTDEvents flag is set to true.
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
      // Check that the report NamespaceDeclarations flag is set to false.
      assertEquals(Format.TextMode.TRIM, format.getTextMode());
      // Check that the text mode of the format object is set to TRIM.
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFormatReturningFormatWhereGetIgnoreTrAXEscapingPIsIsTrue() throws Throwable  {
      HandlerBase arg3 = new HandlerBase();
      SAXOutputter sAXOutputter = new SAXOutputter((ContentHandler) null, arg3, arg3, arg3, (LexicalHandler) null);
      
      // Set the format for the SAXOutputter to be a pretty format that ignores TrAX escaping PIs.
      Format arg0 = Format.getPrettyFormat();
      arg0.setIgnoreTrAXEscapingPIs(true);
      sAXOutputter.setFormat(arg0);
      
      // Get the format from the SAXOutputter and check if it is set to ignore TrAX escaping PIs.
      Format format = sAXOutputter.getFormat();
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
      assertTrue(sAXOutputter.getReportDTDEvents());
      assertTrue(format.getIgnoreTrAXEscapingPIs());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFormatReturningFormatWhereGetExpandEmptyElementsIsTrue() throws Throwable  {
      // Given an AbstractSAXOutputProcessor instance
      AbstractSAXOutputProcessor outputProcessor = new AbstractSAXOutputProcessor();
      
      // When a Format is created with the PrettyFormat and set to expand empty elements
      Format format = Format.getPrettyFormat();
      format.setExpandEmptyElements(true);
      
      // And an XMLFilterImpl instance is created
      XMLFilterImpl xmlFilter = new XMLFilterImpl();
      
      // And a DefaultHandler2 instance is created
      DefaultHandler2 handler = new DefaultHandler2();
      
      // And a SAXOutputter instance is created with the outputProcessor, format, and handlers
      SAXOutputter saxOutputter = new SAXOutputter(outputProcessor, format, xmlFilter, xmlFilter, xmlFilter, xmlFilter, handler);
      
      // Then the report namespace declarations should be false
      assertFalse(saxOutputter.getReportNamespaceDeclarations());
      
      // And the text mode should be TRIM
      assertEquals(Format.TextMode.TRIM, saxOutputter.getFormat().getTextMode());
      
      // And the report DTD events should be true
      assertTrue(saxOutputter.getReportDTDEvents());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetErrorHandlerReturningNonNull() throws Throwable  {
      // Set up a SAXOutputter with a DefaultHandler and DefaultHandler2 for parsing and error handling
      DefaultHandler handler = new DefaultHandler();
      DefaultHandler2 errorHandler = new DefaultHandler2();
      SAXOutputter saxOutputter = new SAXOutputter(handler, handler, handler, handler, errorHandler);
      
      // Test the getErrorHandler method
      assertEquals(errorHandler, saxOutputter.getErrorHandler());
      
      // Test the getReportDTDEvents and getReportNamespaceDeclarations methods
      assertTrue(saxOutputter.getReportDTDEvents());
      assertFalse(saxOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetEntityResolverReturningNonNull() throws Throwable  {
      // Given: We have a DefaultHandler2 and a SAXOutputter object
      DefaultHandler2 handler = new DefaultHandler2();
      SAXOutputter outputter = new SAXOutputter(handler, handler, handler, handler, handler);
      
      // When: We call the getEntityResolver() method on the SAXOutputter object
      outputter.getEntityResolver();
      
      // Then: The reportNamespaceDeclarations flag should be false and the reportDTDEvents flag should be true
      assertFalse(outputter.getReportNamespaceDeclarations());
      assertTrue(outputter.getReportDTDEvents());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDTDHandlerReturningNull() throws Throwable  {
      XMLReaderAdapter xmlReader = new XMLReaderAdapter();
      SAXOutputter saxOutputter = new SAXOutputter(xmlReader);
      // Verify that the DTD handler is set correctly
      assertEquals(saxOutputter.getDTDHandler(), xmlReader);
      // Verify that the report DTD events flag is set to true
      assertTrue(saxOutputter.getReportDTDEvents());
      // Verify that the report namespace declarations flag is set to false
      assertFalse(saxOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetContentHandlerReturningNull() throws Throwable  {
      // Given the input parameters and objects
      AbstractSAXOutputProcessor outputProcessor = new AbstractSAXOutputProcessor();
      Format format = Format.getCompactFormat();
      XMLFilterImpl xmlFilter = new XMLFilterImpl();
      DefaultHandler2 defaultHandler1 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2 = new DefaultHandler2();
      DefaultHandler2 defaultHandler3 = new DefaultHandler2();
      
      // When we create a SAXOutputter object with these parameters
      SAXOutputter saxOutputter = new SAXOutputter(outputProcessor, format, (ContentHandler) null, xmlFilter, defaultHandler1, defaultHandler2, defaultHandler3);
      
      // Then the SAXOutputter object should have the correct configuration
      assertTrue(saxOutputter.getReportDTDEvents());
      assertFalse(saxOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetReportDTDEvents() throws Throwable  {
      AbstractSAXOutputProcessor processor = new AbstractSAXOutputProcessor();
      Format format = Format.getPrettyFormat();
      XMLFilterImpl filter = new XMLFilterImpl();
      DefaultHandler2 handler = new DefaultHandler2();
      SAXOutputter saxOutputter = new SAXOutputter(processor, format, filter, filter, filter, filter, handler);
      
      // Given a SAXOutputter instance with default settings
      
      // When the reportDTDEvents property is set to false
      saxOutputter.setReportDTDEvents(false);
      boolean currentReportDTDEvents = saxOutputter.getReportDTDEvents();
      
      // Then the reported DTD events should be disabled
      assertFalse(currentReportDTDEvents);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetReportNamespaceDeclarations() throws Throwable  {
      // Create a new instance of SAXOutputter and set its reportNamespaceDeclarations property to true
      SAXOutputter sAXOutputter = new SAXOutputter();
      sAXOutputter.setReportNamespaceDeclarations(true);
      
      // Assert that the reportNamespaceDeclarations property is set to true
      boolean reportNamespaceDeclarations = sAXOutputter.getReportNamespaceDeclarations();
      assertTrue(reportNamespaceDeclarations);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDeclHandlerReturningNull() throws Throwable  {
      // Given a SAXOutputter instance with default settings
      SAXOutputter sAXOutputter = new SAXOutputter();
      
      // When the report namespace declarations is not requested
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
      
      // And the report DTDEvents is requested
      assertTrue(sAXOutputter.getReportDTDEvents());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOutputFragmentTakingContentThrowsException() throws Throwable  {
      // Given
      DocType arg0 = new DocType("XFciY1Hy");
      SAXOutputter sAXOutputter = new SAXOutputter();
      
      // When
      try {
      sAXOutputter.outputFragment((Content) arg0);
      fail("Expecting exception: Exception");
      } catch(Exception e) {
      // Then
      verifyException("org.jdom2.output.SAXOutputter", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesSAXOutputterTaking5ArgumentsAndCallsOutputFragmentTakingContent0() throws Throwable  {
      // Set up SAXOutputter with custom handlers and options
      DefaultHandler arg3 = new DefaultHandler();
      DefaultHandler2 arg4 = new DefaultHandler2();
      SAXOutputter sAXOutputter = new SAXOutputter(arg3, arg3, arg3, arg3, arg4);
      DocType arg0 = new DocType("org.jdom2.output.SAXOutputter", "org.jdom2.output.SAXOutputter");
      sAXOutputter.outputFragment((Content) arg0);
      
      // Assert that the SAXOutputter is configured to report DTDEvents and not to report namespace declarations
      assertTrue(sAXOutputter.getReportDTDEvents());
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesSAXOutputterTaking5ArgumentsAndCallsOutputFragmentTakingContent1() throws Throwable  {
      // Given a SAXOutputter instance with custom handlers and options
      DefaultHandler arg3 = new DefaultHandler();
      DefaultHandler2 arg4 = new DefaultHandler2();
      SAXOutputter sAXOutputter = new SAXOutputter(arg3, arg3, arg3, arg3, arg4);
      
      // When the outputFragment method is called with a ProcessingInstruction as an argument
      HashMap<String, String> arg1 = new HashMap<String, String>();
      ProcessingInstruction arg0 = new ProcessingInstruction("org.jdom2.output.SAXOutputter", arg1);
      sAXOutputter.outputFragment((Content) arg0);
      
      // Then the reportNamespaceDeclarations and reportDTDEvents options are set to false and true respectively
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
      assertTrue(sAXOutputter.getReportDTDEvents());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOutputFragmentTakingContentWithNull() throws Throwable  {
      // Create a new instance of XMLReaderAdapter
      XMLReaderAdapter xmlReaderAdapter = new XMLReaderAdapter();
      
      // Create a new instance of DefaultHandler
      DefaultHandler defaultHandler = new DefaultHandler();
      
      // Create a new instance of SAXOutputter with the XMLReaderAdapter, DefaultHandler, and DTD events enabled
      SAXOutputter saxOutputter = new SAXOutputter(xmlReaderAdapter, defaultHandler, defaultHandler, defaultHandler);
      
      // Call outputFragment() method on the SAXOutputter object with a null argument
      saxOutputter.outputFragment((Content) null);
      
      // Assert that getReportNamespaceDeclarations() returns false
      assertFalse(saxOutputter.getReportNamespaceDeclarations());
      
      // Assert that getReportDTDEvents() returns true
      assertTrue(saxOutputter.getReportDTDEvents());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOutputFragmentTakingList() throws Throwable  {
      // rollbacked to evosuite
      XMLFilterImpl arg0 = new XMLFilterImpl();
      SAXOutputter sAXOutputter = new SAXOutputter(arg0);
      sAXOutputter.outputFragment((List<? extends Content>) null);
      assertTrue(sAXOutputter.getReportDTDEvents());
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetFormatWithNull() throws Throwable  {
      // Create a new instance of SAXOutputter
      SAXOutputter saxOutputter = new SAXOutputter();
      
      // Set the format to null
      saxOutputter.setFormat(null);
      
      // Assert that the report namespace declarations is false
      assertFalse(saxOutputter.getReportNamespaceDeclarations());
      
      // Assert that the report DTDEvents is true
      assertTrue(saxOutputter.getReportDTDEvents());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPropertyThrowsSAXNotRecognizedException() throws Throwable  {
      // Given
      AbstractSAXOutputProcessor abstractSAXOutputProcessor = new AbstractSAXOutputProcessor();
      Format format = Format.getRawFormat();
      DefaultHandler defaultHandler = new DefaultHandler();
      DefaultHandler2 defaultHandler2 = new DefaultHandler2();
      SAXOutputter saxOutputter = new SAXOutputter(abstractSAXOutputProcessor, format, defaultHandler, defaultHandler, defaultHandler, defaultHandler, defaultHandler2);
      
      // When
      try {
      saxOutputter.getProperty("Could not decode surrogate pair 0x1F602");
      } catch (SAXNotRecognizedException e) {
      // Then
      verifyException("org.jdom2.output.SAXOutputter", e);
      throw e;}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesSAXOutputterTakingNoArgumentsAndCallsGetProperty0() throws Throwable  {
      // Given a SAXOutputter instance
      SAXOutputter saxOutputter = new SAXOutputter();
      
      // When the declaration handler is retrieved
      Object declarationHandler = saxOutputter.getProperty("http://xml.org/sax/properties/declaration-handler");
      
      // Then it should not report namespace declarations
      assertFalse(saxOutputter.getReportNamespaceDeclarations());
      
      // And it should report DTD events
      assertTrue(saxOutputter.getReportDTDEvents());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesSAXOutputterTakingContentHandler() throws Throwable  {
      // rollbacked to evosuite
      XMLFilterImpl arg0 = new XMLFilterImpl();
      SAXOutputter sAXOutputter = new SAXOutputter(arg0);
      sAXOutputter.getProperty("http://xml.org/sax/handlers/LexicalHandler");
      assertTrue(sAXOutputter.getReportDTDEvents());
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPropertyReturningNonNull() throws Throwable  {
      // Test the SAXOutputter class when using the default configuration
      AbstractSAXOutputProcessor outputProcessor = new AbstractSAXOutputProcessor();
      Format rawFormat = Format.getRawFormat();
      DefaultHandler handler1 = new DefaultHandler();
      DefaultHandler2 handler2 = new DefaultHandler2();
      SAXOutputter saxOutputter = new SAXOutputter(outputProcessor, rawFormat, handler1, handler1, handler1, handler1, handler2);
      
      // Test the getProperty method
      assertEquals("http://xml.org/sax/properties/lexical-handler", saxOutputter.getProperty("http://xml.org/sax/properties/lexical-handler"));
      
      // Test the reportNamespaceDeclarations property
      assertFalse(saxOutputter.getReportNamespaceDeclarations());
      
      // Test the reportDTDEvents property
      assertTrue(saxOutputter.getReportDTDEvents());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetPropertyThrowsSAXNotRecognizedException() throws Throwable  {
      // Given: A SAXOutputter instance is created and a property is set to an invalid value
      SAXOutputter sAXOutputter = new SAXOutputter();
      String propertyName = "Hm$B^H6LSIYAs@m%5";
      sAXOutputter.setProperty(propertyName, "Hm$B^H6LSIYAs@m%5");
      
      // When: The setProperty method is called with an invalid value for the given property name
      try {
      sAXOutputter.setProperty(propertyName, "Hm$B^H6LSIYAs@m%5");
      fail("Expecting exception: SAXNotRecognizedException");
      } catch (SAXNotRecognizedException e) {
      //
      // Verify that the correct exception is thrown and that it has the expected message
      verifyException("org.jdom2.output.SAXOutputter", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetPropertyThrowsClassCastException0() throws Throwable  {
      // rollbacked to evosuite
      SAXOutputter sAXOutputter = new SAXOutputter();
      // Undeclared exception!
      try { 
        sAXOutputter.setProperty("http://xml.org/sax/handlers/DeclHandler", "http://xml.org/sax/handlers/DeclHandler");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.xml.sax.ext.DeclHandler
         //
         verifyException("org.jdom2.output.SAXOutputter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetPropertyThrowsClassCastException1() throws Throwable  {
      SAXOutputter saxOutputter = new SAXOutputter();
      try {
      saxOutputter.setProperty("http://xml.org/sax/handlers/LexicalHandler", "http://xml.org/sax/handlers/LexicalHandler");
      fail("Expecting exception: ClassCastException");
      } catch (ClassCastException e) {
      // Verify that the expected exception is thrown
      verifyException("org.jdom2.output.SAXOutputter", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetPropertyThrowsClassCastException2() throws Throwable  {
      SAXOutputter sAXOutputter = new SAXOutputter();
      // Setting the lexical handler property to a String value
      try {
      sAXOutputter.setProperty("http://xml.org/sax/properties/lexical-handler", "http://xml.org/sax/properties/lexical-handler");
      fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
      // Verifying that the expected exception was thrown
      verifyException("org.jdom2.output.SAXOutputter", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesSAXOutputterTakingNoArgumentsAndCallsGetFeature0() throws Throwable  {
      // Given
      SAXOutputter saxOutputter = new SAXOutputter();
      
      // When
      boolean featureEnabled = saxOutputter.getFeature("http://xml.org/sax/features/validation");
      
      // Then
      assertFalse(saxOutputter.getReportNamespaceDeclarations());
      assertTrue(featureEnabled);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesSAXOutputterTakingNoArgumentsAndCallsGetFeature1() throws Throwable  {
      // Given a SAXOutputter instance with the "http://xml.org/sax/features/namespaces" feature enabled
      SAXOutputter saxOutputter = new SAXOutputter();
      boolean feature = saxOutputter.getFeature("http://xml.org/sax/features/namespaces");
      
      // When the reportDTDEvents property is set to true
      saxOutputter.setReportDTDEvents(true);
      
      // Then the getReportDTDEvents method should return true
      assertTrue(saxOutputter.getReportDTDEvents());
      
      // And the feature should still be enabled
      assertTrue(feature);
      
      // When the reportNamespaceDeclarations property is set to false
      saxOutputter.setReportNamespaceDeclarations(false);
      
      // Then the getReportNamespaceDeclarations method should return false
      assertFalse(saxOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFeatureReturningFalse() throws Throwable  {
      // Create a new SAXOutputter instance
      SAXOutputter saxOutputter = new SAXOutputter();
      
      // Set the "http://xml.org/sax/features/namespace-prefixes" feature to false
      boolean namespacePrefixesFeature = saxOutputter.getFeature("http://xml.org/sax/features/namespace-prefixes");
      assertFalse(namespacePrefixesFeature);
      
      // Verify that the "http://xml.org/sax/features/report-dtd-events" feature is set to true
      boolean reportDTDEventsFeature = saxOutputter.getReportDTDEvents();
      assertTrue(reportDTDEventsFeature);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFeatureThrowsSAXNotRecognizedException() throws Throwable  {
      SAXOutputter sAXOutputter = new SAXOutputter();
      try {
      // Attempt to retrieve a non-existent feature from the SAX outputter.
      sAXOutputter.getFeature("edPf#tqf");
      fail("Expecting exception: SAXNotRecognizedException");
      } catch(SAXNotRecognizedException e) {
      // Verify that the expected exception was thrown.
      verifyException("org.jdom2.output.SAXOutputter", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetFeatureThrowsSAXNotRecognizedException() throws Throwable  {
      // Given a SAXOutputter instance
      SAXOutputter saxOutputter = new SAXOutputter();
      
      // When trying to set the "http://xml.org/sax/features/namespace-prefixes" feature to false
      try {
      saxOutputter.setFeature("http://xml.org/sax/feaHures/namespace-prefixes", false);
      } catch (SAXNotRecognizedException e) {
      // Then an exception should be thrown
      verifyException("org.jdom2.output.SAXOutputter", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesSAXOutputterTakingNoArgumentsAndCallsSetFeature0() throws Throwable  {
      // Given: We have a SAXOutputter instance with namespace support enabled.
      SAXOutputter sAXOutputter = new SAXOutputter();
      sAXOutputter.setFeature("http://xml.org/sax/features/namespaces", true);
      
      // When: We call the getReportDTDEvents method on the SAXOutputter instance.
      boolean reportDTDEvents = sAXOutputter.getReportDTDEvents();
      
      // Then: The returned value is true, indicating that DTD events are reported.
      assertTrue(reportDTDEvents);
      
      // When: We call the getReportNamespaceDeclarations method on the SAXOutputter instance.
      boolean reportNamespaceDeclarations = sAXOutputter.getReportNamespaceDeclarations();
      
      // Then: The returned value is false, indicating that namespace declarations are not reported.
      assertFalse(reportNamespaceDeclarations);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetFeatureThrowsSAXNotSupportedException() throws Throwable  {
      // Create a new instance of SAXOutputter
      SAXOutputter sAXOutputter = new SAXOutputter();
      
      // Try to disable the support for namespaces using the "http://xml.org/sax/features/namespaces" feature
      try {
      sAXOutputter.setFeature("http://xml.org/sax/features/namespaces", false);
      fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
      // Verify that the expected exception was thrown
      verifyException("org.jdom2.output.SAXOutputter", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesSAXOutputterTaking7Arguments0() throws Throwable  {
      // Given a SAXOutputter object with various options set
      AbstractSAXOutputProcessor abstractSAXOutputProcessor = new AbstractSAXOutputProcessor();
      XMLFilterImpl xmlFilterImpl = new XMLFilterImpl();
      DefaultHandler2 defaultHandler2 = new DefaultHandler2();
      SAXOutputter saxOutputter = new SAXOutputter(abstractSAXOutputProcessor, null, xmlFilterImpl, xmlFilterImpl, xmlFilterImpl, xmlFilterImpl, defaultHandler2);
      
      // When the reportDTDEvents and reportNamespaceDeclarations options are set to true and false respectively
      saxOutputter.setReportDTDEvents(true);
      saxOutputter.setReportNamespaceDeclarations(false);
      
      // Then the SAXOutputter should have the expected values for these options
      assertTrue(saxOutputter.getReportDTDEvents());
      assertFalse(saxOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesSAXOutputterTaking7Arguments1() throws Throwable  {
      // Given a SAXOutputter object with default values
      Format prettyFormat = Format.getPrettyFormat();
      XMLFilterImpl xmlFilter = new XMLFilterImpl();
      DefaultHandler2 defaultHandler = new DefaultHandler2();
      SAXOutputter saxOutputter = new SAXOutputter(null, prettyFormat, xmlFilter, xmlFilter, xmlFilter, xmlFilter, defaultHandler);
      
      // When the reportDTDEvents and reportNamespaceDeclarations are set to their defaults
      saxOutputter.setReportDTDEvents(true);
      saxOutputter.setReportNamespaceDeclarations(false);
      
      // Then the values of these properties should be as expected
      assertTrue(saxOutputter.getReportDTDEvents());
      assertFalse(saxOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetLexicalHandler() throws Throwable  {
      // Given a SAXOutputter object and a DefaultHandler2 object
      SAXOutputter sAXOutputter = new SAXOutputter();
      DefaultHandler2 arg0 = new DefaultHandler2();
      
      // When the setLexicalHandler method is called on the SAXOutputter object with the DefaultHandler2 object as an argument
      sAXOutputter.setLexicalHandler(arg0);
      
      // Then the reportNamespaceDeclarations property of the SAXOutputter should be false and the reportDTDEvents property should be true
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
      assertTrue(sAXOutputter.getReportDTDEvents());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetContentHandler() throws Throwable  {
      // Given a SAXOutputter object and an XMLReaderAdapter object
      SAXOutputter saxOutputter = new SAXOutputter();
      XMLReaderAdapter xmlReaderAdapter = new XMLReaderAdapter();
      
      // When the content handler is set to the XMLReaderAdapter object
      saxOutputter.setContentHandler(xmlReaderAdapter);
      
      // Then, the reportDTDEvents method should return true and the reportNamespaceDeclarations method should return false
      assertTrue(saxOutputter.getReportDTDEvents());
      assertFalse(saxOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetReportNamespaceDeclarationsReturningFalse() throws Throwable  {
      // Given: A SAXOutputter instance with reportNamespaceDeclarations set to true and reportDTDEvents set to false
      SAXOutputter sAXOutputter = new SAXOutputter();
      boolean reportNamespaceDeclarations = sAXOutputter.getReportNamespaceDeclarations();
      assertTrue(sAXOutputter.getReportDTDEvents());
      assertFalse(reportNamespaceDeclarations);
      
      // When: The reportNamespaceDeclarations property is set to false
      sAXOutputter.setReportNamespaceDeclarations(false);
      
      // Then: The reportDTDEvents property should still be true and the reportNamespaceDeclarations property should be false
      assertTrue(sAXOutputter.getReportDTDEvents());
      assertFalse(reportNamespaceDeclarations);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetErrorHandler() throws Throwable  {
      SAXOutputter saxOutputter = new SAXOutputter();
      HandlerBase handlerBase = new HandlerBase();
      
      // Given a SAXOutputter instance with error handling enabled
      assertTrue(saxOutputter.getReportDTDEvents());
      assertFalse(saxOutputter.getReportNamespaceDeclarations());
      
      // When we set the error handler on the SAXOutputter
      saxOutputter.setErrorHandler(handlerBase);
      
      // Then we expect the SAXOutputter to report DTD events
      assertTrue(saxOutputter.getReportDTDEvents());
      
      // And not report namespace declarations
      assertFalse(saxOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesSAXOutputterTakingNoArgumentsAndCallsSetFeature1() throws Throwable  {
      SAXOutputter sAXOutputter = new SAXOutputter();
      // Check that namespace prefixes are not reported by default
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
      
      // Enable reporting of namespace prefixes
      sAXOutputter.setFeature("http://xml.org/sax/features/namespace-prefixes", true);
      // Check that namespace prefixes are now reported
      assertTrue(sAXOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDeclHandler() throws Throwable  {
      // Create a new SAXOutputter object and set the DeclHandler
      SAXOutputter saxOutputter = new SAXOutputter();
      DefaultHandler2 declHandler = new DefaultHandler2();
      saxOutputter.setDeclHandler(declHandler);
      
      // Check if the DeclHandler has been set correctly
      assertSame(declHandler, saxOutputter.getDeclHandler());
      
      // Check if the reportNamespaceDeclarations flag is false and the reportDTDEvents flag is true
      assertFalse(saxOutputter.getReportNamespaceDeclarations());
      assertTrue(saxOutputter.getReportDTDEvents());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSAXOutputProcessor() throws Throwable  {
      // Arrange
      XMLReaderAdapter xmlReaderAdapter = new XMLReaderAdapter();
      DefaultHandler defaultHandler = new DefaultHandler();
      SAXOutputter saxOutputter = new SAXOutputter(xmlReaderAdapter, defaultHandler, defaultHandler, defaultHandler);
      
      // Act
      saxOutputter.setSAXOutputProcessor((SAXOutputProcessor) null);
      
      // Assert
      assertFalse(saxOutputter.getReportNamespaceDeclarations());
      assertTrue(saxOutputter.getReportDTDEvents());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLocator() throws Throwable  {
      // rollbacked to evosuite
      SAXOutputter sAXOutputter = new SAXOutputter();
      sAXOutputter.getLocator();
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
      assertTrue(sAXOutputter.getReportDTDEvents());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDTDHandler() throws Throwable  {
      // Given a SAXOutputter instance with custom ContentHandler and LexicalHandler
      HandlerBase contentHandler = new HandlerBase();
      SAXOutputter saxOutputter = new SAXOutputter((ContentHandler) null, contentHandler, contentHandler, contentHandler, (LexicalHandler) null);
      
      // When the reportDTDEvents property is set to true
      saxOutputter.setReportDTDEvents(true);
      
      // Then the DTDHandler is set to the custom ContentHandler
      assertEquals(contentHandler, saxOutputter.getDTDHandler());
      
      // And the reportNamespaceDeclarations property is set to false
      assertFalse(saxOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetReportDTDEventsReturningTrue() throws Throwable  {
      // Create a new instance of the SAXOutputter class with default values for its parameters
      DefaultHandler arg3 = new DefaultHandler();
      DefaultHandler2 arg4 = new DefaultHandler2();
      SAXOutputter sAXOutputter = new SAXOutputter(arg3, arg3, arg3, arg3, arg4);
      
      // Verify that the reportDTDEvents property is set to false
      assertFalse(sAXOutputter.getReportDTDEvents());
      
      // Verify that the reportNamespaceDeclarations property is set to true
      assertTrue(sAXOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDTDHandlerReturningNonNull() throws Throwable  {
      // rollbacked to evosuite
      DefaultHandler2 arg4 = new DefaultHandler2();
      SAXOutputter sAXOutputter = new SAXOutputter(arg4, arg4, arg4, arg4, arg4);
      sAXOutputter.getDTDHandler();
      assertTrue(sAXOutputter.getReportDTDEvents());
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetErrorHandlerReturningNull() throws Throwable  {
      // rollbacked to evosuite
      SAXOutputter sAXOutputter = new SAXOutputter();
      sAXOutputter.getErrorHandler();
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
      assertTrue(sAXOutputter.getReportDTDEvents());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOutputTakingList() throws Throwable  {
      // Given: a SAXOutputter instance with default configuration
      SAXOutputter sAXOutputter = new SAXOutputter();
      
      // When: the output method is called with a list of elements as input
      List<Element> arg0 = new LinkedList<>();
      sAXOutputter.output((List<? extends Content>) arg0);
      
      // Then: the reportDTDEvents flag should be set to true
      assertTrue(sAXOutputter.getReportDTDEvents());
      
      // And: the reportNamespaceDeclarations flag should be set to false
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLexicalHandlerReturningNull() throws Throwable  {
      // No Comments were added
      SAXOutputter sAXOutputter = new SAXOutputter((ContentHandler) null);
      sAXOutputter.getLexicalHandler();
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
      assertTrue(sAXOutputter.getReportDTDEvents());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesSAXOutputterTakingNoArgumentsAndCallsGetProperty1() throws Throwable  {
      // rollbacked to evosuite
      SAXOutputter sAXOutputter = new SAXOutputter();
      sAXOutputter.getProperty("http://xml.org/sax/handlers/DeclHandler");
      assertTrue(sAXOutputter.getReportDTDEvents());
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSAXOutputProcessor() throws Throwable  {
      // Given a XMLFilterImpl instance
      XMLFilterImpl filter = new XMLFilterImpl();
      
      // When the SAXOutputter is created with the filter
      SAXOutputter saxOutputter = new SAXOutputter(filter);
      
      // Then the output processor should be an instance of a custom class
      assertNotNull(saxOutputter.getSAXOutputProcessor());
      
      // And the namespace declarations and DTD events should be reported
      assertFalse(saxOutputter.getReportNamespaceDeclarations());
      assertTrue(saxOutputter.getReportDTDEvents());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetContentHandlerReturningNonNull() throws Throwable  {
      // Given a new XMLFilterImpl instance
      XMLFilterImpl filter = new XMLFilterImpl();
      
      // When a SAXOutputter is created with the filter as the argument
      SAXOutputter saxOutputter = new SAXOutputter(filter);
      
      // Then the outputter should have the correct settings for reporting DTDEvents and namespace declarations
      assertTrue(saxOutputter.getReportDTDEvents());
      assertFalse(saxOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOutputTakingElement() throws Throwable  {
      // Given a SAXOutputter instance
      SAXOutputter saxOutputter = new SAXOutputter();
      
      // When output is called with null as the parameter
      saxOutputter.output((Element) null);
      
      // Then getReportNamespaceDeclarations should return false
      assertFalse(saxOutputter.getReportNamespaceDeclarations());
      
      // And getReportDTDEvents should return true
      assertTrue(saxOutputter.getReportDTDEvents());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetEntityResolverReturningNull() throws Throwable  {
      // Create a new instance of the XMLFilterImpl class
      XMLFilterImpl xmlFilter = new XMLFilterImpl();
      
      // Create a new instance of the SAXOutputter class and pass in the XMLFilterImpl object as an argument
      SAXOutputter saxOutputter = new SAXOutputter(xmlFilter);
      
      // Check if the reportNamespaceDeclarations property is set to false
      assertFalse(saxOutputter.getReportNamespaceDeclarations());
      
      // Check if the reportDTDEvents property is set to true
      assertTrue(saxOutputter.getReportDTDEvents());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesSAXOutputterTakingNoArgumentsAndCallsSetFeature2() throws Throwable  {
      // Given a SAXOutputter instance
      SAXOutputter saxOutputter = new SAXOutputter();
      
      // When we set the validation feature to true
      saxOutputter.setFeature("http://xml.org/sax/features/validation", true);
      
      // Then the reportDTDEvents property should be true
      assertTrue(saxOutputter.getReportDTDEvents());
      
      // And the reportNamespaceDeclarations property should be false
      assertFalse(saxOutputter.getReportNamespaceDeclarations());
  }
}
