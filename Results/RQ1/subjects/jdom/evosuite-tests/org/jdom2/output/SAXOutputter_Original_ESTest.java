/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 19 18:42:23 GMT 2024
 */

package org.jdom2.output;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jdom2.Content;
import org.jdom2.DocType;
import org.jdom2.Document;
import org.jdom2.Element;
import org.jdom2.ProcessingInstruction;
import org.jdom2.output.Format;
import org.jdom2.output.SAXOutputter;
import org.jdom2.output.support.AbstractSAXOutputProcessor;
import org.jdom2.output.support.SAXOutputProcessor;
import org.junit.runner.RunWith;
import org.xml.sax.ContentHandler;
import org.xml.sax.HandlerBase;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXNotSupportedException;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.ext.LexicalHandler;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SAXOutputter_Original_ESTest extends SAXOutputter_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLexicalHandlerReturningNonNull() throws Throwable  {
      XMLFilterImpl arg3 = new XMLFilterImpl();
      DefaultHandler2 arg4 = new DefaultHandler2();
      SAXOutputter sAXOutputter = new SAXOutputter(arg3, arg3, arg3, arg3, arg4);
      sAXOutputter.getLexicalHandler();
      assertTrue(sAXOutputter.getReportDTDEvents());
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFormatReturningFormatWhereIsSpecifiedAttributesOnlyIsTrue() throws Throwable  {
      AbstractSAXOutputProcessor arg0 = new AbstractSAXOutputProcessor();
      Format arg1 = Format.getPrettyFormat();
      arg1.setSpecifiedAttributesOnly(true);
      XMLFilterImpl arg5 = new XMLFilterImpl();
      DefaultHandler2 arg6 = new DefaultHandler2();
      SAXOutputter sAXOutputter = new SAXOutputter(arg0, arg1, arg5, arg5, arg5, arg5, arg6);
      Format format = sAXOutputter.getFormat();
      assertTrue(sAXOutputter.getReportDTDEvents());
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
      assertEquals(Format.TextMode.TRIM, format.getTextMode());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFormatReturningFormatWhereGetOmitEncodingIsTrue() throws Throwable  {
      DefaultHandler arg3 = new DefaultHandler();
      DefaultHandler2 arg4 = new DefaultHandler2();
      SAXOutputter sAXOutputter = new SAXOutputter(arg3, arg3, arg3, arg3, arg4);
      Format prettyFormat = Format.getPrettyFormat();
      Format arg0 = prettyFormat.setOmitEncoding(true);
      sAXOutputter.setFormat(arg0);
      Format format = sAXOutputter.getFormat();
      assertEquals(Format.TextMode.TRIM, format.getTextMode());
      assertTrue(sAXOutputter.getReportDTDEvents());
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFormatReturningFormatWhereGetOmitDeclarationIsTrue() throws Throwable  {
      AbstractSAXOutputProcessor arg0 = new AbstractSAXOutputProcessor();
      Format prettyFormat = Format.getPrettyFormat();
      Format arg1 = prettyFormat.setOmitDeclaration(true);
      XMLFilterImpl arg5 = new XMLFilterImpl();
      DefaultHandler2 arg6 = new DefaultHandler2();
      SAXOutputter sAXOutputter = new SAXOutputter(arg0, arg1, (ContentHandler) null, arg5, arg5, arg5, arg6);
      Format format = sAXOutputter.getFormat();
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
      assertTrue(sAXOutputter.getReportDTDEvents());
      assertTrue(format.getOmitDeclaration());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFormatReturningFormatWhereGetIgnoreTrAXEscapingPIsIsTrue() throws Throwable  {
      HandlerBase arg3 = new HandlerBase();
      SAXOutputter sAXOutputter = new SAXOutputter((ContentHandler) null, arg3, arg3, arg3, (LexicalHandler) null);
      Format arg0 = Format.getPrettyFormat();
      arg0.setIgnoreTrAXEscapingPIs(true);
      sAXOutputter.setFormat(arg0);
      Format format = sAXOutputter.getFormat();
      assertTrue(sAXOutputter.getReportDTDEvents());
      assertEquals(Format.TextMode.TRIM, format.getTextMode());
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFormatReturningFormatWhereGetExpandEmptyElementsIsTrue() throws Throwable  {
      AbstractSAXOutputProcessor arg0 = new AbstractSAXOutputProcessor();
      Format arg1 = Format.getPrettyFormat();
      arg1.setExpandEmptyElements(true);
      XMLFilterImpl arg5 = new XMLFilterImpl();
      DefaultHandler2 arg6 = new DefaultHandler2();
      SAXOutputter sAXOutputter = new SAXOutputter(arg0, arg1, arg5, arg5, arg5, arg5, arg6);
      Format format = sAXOutputter.getFormat();
      assertTrue(sAXOutputter.getReportDTDEvents());
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
      assertTrue(format.getExpandEmptyElements());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetErrorHandlerReturningNonNull() throws Throwable  {
      DefaultHandler arg3 = new DefaultHandler();
      DefaultHandler2 arg4 = new DefaultHandler2();
      SAXOutputter sAXOutputter = new SAXOutputter(arg3, arg3, arg3, arg3, arg4);
      sAXOutputter.getErrorHandler();
      assertTrue(sAXOutputter.getReportDTDEvents());
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetEntityResolverReturningNull() throws Throwable  {
      XMLFilterImpl arg0 = new XMLFilterImpl();
      SAXOutputter sAXOutputter = new SAXOutputter(arg0);
      sAXOutputter.getEntityResolver();
      assertTrue(sAXOutputter.getReportDTDEvents());
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDTDHandlerReturningNull() throws Throwable  {
      XMLReaderAdapter arg0 = new XMLReaderAdapter();
      SAXOutputter sAXOutputter = new SAXOutputter(arg0);
      sAXOutputter.getDTDHandler();
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
      assertTrue(sAXOutputter.getReportDTDEvents());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetContentHandlerReturningNull() throws Throwable  {
      AbstractSAXOutputProcessor arg0 = new AbstractSAXOutputProcessor();
      Format arg1 = Format.getCompactFormat();
      XMLFilterImpl arg3 = new XMLFilterImpl();
      DefaultHandler2 arg6 = new DefaultHandler2();
      SAXOutputter sAXOutputter = new SAXOutputter(arg0, arg1, (ContentHandler) null, arg3, arg6, arg6, arg6);
      sAXOutputter.getContentHandler();
      assertTrue(sAXOutputter.getReportDTDEvents());
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetReportDTDEvents() throws Throwable  {
      AbstractSAXOutputProcessor arg0 = new AbstractSAXOutputProcessor();
      Format arg1 = Format.getPrettyFormat();
      XMLFilterImpl arg5 = new XMLFilterImpl();
      DefaultHandler2 arg6 = new DefaultHandler2();
      SAXOutputter sAXOutputter = new SAXOutputter(arg0, arg1, arg5, arg5, arg5, arg5, arg6);
      assertTrue(sAXOutputter.getReportDTDEvents());
      
      sAXOutputter.setReportDTDEvents(false);
      boolean reportDTDEvents = sAXOutputter.getReportDTDEvents();
      assertFalse(reportDTDEvents);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDeclHandler() throws Throwable  {
      SAXOutputter sAXOutputter = new SAXOutputter();
      DefaultHandler2 arg0 = new DefaultHandler2();
      sAXOutputter.setDeclHandler(arg0);
      sAXOutputter.getDeclHandler();
      assertTrue(sAXOutputter.getReportDTDEvents());
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetReportNamespaceDeclarations() throws Throwable  {
      SAXOutputter sAXOutputter = new SAXOutputter();
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
      
      sAXOutputter.setReportNamespaceDeclarations(true);
      boolean reportNamespaceDeclarations = sAXOutputter.getReportNamespaceDeclarations();
      assertTrue(reportNamespaceDeclarations);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesSAXOutputterTaking5ArgumentsAndCallsOutputFragmentTakingContent0() throws Throwable  {
      DefaultHandler arg3 = new DefaultHandler();
      DefaultHandler2 arg4 = new DefaultHandler2();
      SAXOutputter sAXOutputter = new SAXOutputter(arg3, arg3, arg3, arg3, arg4);
      DocType arg0 = new DocType("org.jdom2.output.SAXOutputter", "org.jdom2.output.SAXOutputter");
      sAXOutputter.outputFragment((Content) arg0);
      assertTrue(sAXOutputter.getReportDTDEvents());
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesSAXOutputterTaking5ArgumentsAndCallsOutputFragmentTakingContent1() throws Throwable  {
      DefaultHandler arg3 = new DefaultHandler();
      DefaultHandler2 arg4 = new DefaultHandler2();
      SAXOutputter sAXOutputter = new SAXOutputter(arg3, arg3, arg3, arg3, arg4);
      HashMap<String, String> arg1 = new HashMap<String, String>();
      ProcessingInstruction arg0 = new ProcessingInstruction("org.jdom2.output.SAXOutputter", arg1);
      sAXOutputter.outputFragment((Content) arg0);
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
      assertTrue(sAXOutputter.getReportDTDEvents());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOutputFragmentTakingContentWithNull() throws Throwable  {
      XMLReaderAdapter arg0 = new XMLReaderAdapter();
      DefaultHandler arg3 = new DefaultHandler();
      SAXOutputter sAXOutputter = new SAXOutputter(arg0, arg3, arg3, arg3);
      sAXOutputter.outputFragment((Content) null);
      assertTrue(sAXOutputter.getReportDTDEvents());
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOutputFragmentTakingContentThrowsException() throws Throwable  {
      DocType arg0 = new DocType("XFciY1Hy");
      SAXOutputter sAXOutputter = new SAXOutputter();
      try { 
        sAXOutputter.outputFragment((Content) arg0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid element content: [DocType: <!DOCTYPE XFciY1Hy>]
         //
         verifyException("org.jdom2.output.SAXOutputter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOutputFragmentTakingList() throws Throwable  {
      XMLFilterImpl arg0 = new XMLFilterImpl();
      SAXOutputter sAXOutputter = new SAXOutputter(arg0);
      sAXOutputter.outputFragment((List<? extends Content>) null);
      assertTrue(sAXOutputter.getReportDTDEvents());
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetFormatWithNull() throws Throwable  {
      SAXOutputter sAXOutputter = new SAXOutputter();
      sAXOutputter.setFormat((Format) null);
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
      assertTrue(sAXOutputter.getReportDTDEvents());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPropertyThrowsSAXNotRecognizedException() throws Throwable  {
      AbstractSAXOutputProcessor arg0 = new AbstractSAXOutputProcessor();
      Format arg1 = Format.getRawFormat();
      DefaultHandler arg5 = new DefaultHandler();
      DefaultHandler2 arg6 = new DefaultHandler2();
      SAXOutputter sAXOutputter = new SAXOutputter(arg0, arg1, arg5, arg5, arg5, arg5, arg6);
      try { 
        sAXOutputter.getProperty("Could not decode surrogate pair 0x");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Could not decode surrogate pair 0x
         //
         verifyException("org.jdom2.output.SAXOutputter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesSAXOutputterTakingNoArgumentsAndCallsGetProperty0() throws Throwable  {
      SAXOutputter sAXOutputter = new SAXOutputter();
      sAXOutputter.getProperty("http://xml.org/sax/properties/declaration-handler");
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
      assertTrue(sAXOutputter.getReportDTDEvents());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesSAXOutputterTakingContentHandler() throws Throwable  {
      XMLFilterImpl arg0 = new XMLFilterImpl();
      SAXOutputter sAXOutputter = new SAXOutputter(arg0);
      sAXOutputter.getProperty("http://xml.org/sax/handlers/LexicalHandler");
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
      assertTrue(sAXOutputter.getReportDTDEvents());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesSAXOutputterTakingNoArgumentsAndCallsGetProperty1() throws Throwable  {
      SAXOutputter sAXOutputter = new SAXOutputter();
      sAXOutputter.getProperty("http://xml.org/sax/handlers/DeclHandler");
      assertTrue(sAXOutputter.getReportDTDEvents());
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPropertyReturningNonNull() throws Throwable  {
      AbstractSAXOutputProcessor arg0 = new AbstractSAXOutputProcessor();
      Format arg1 = Format.getRawFormat();
      DefaultHandler arg5 = new DefaultHandler();
      DefaultHandler2 arg6 = new DefaultHandler2();
      SAXOutputter sAXOutputter = new SAXOutputter(arg0, arg1, arg5, arg5, arg5, arg5, arg6);
      sAXOutputter.getProperty("http://xml.org/sax/properties/lexical-handler");
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
      assertTrue(sAXOutputter.getReportDTDEvents());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetPropertyThrowsClassCastException0() throws Throwable  {
      SAXOutputter sAXOutputter = new SAXOutputter();
      // Undeclared exception!
      try { 
        sAXOutputter.setProperty("http://xml.org/sax/handlers/DeclHandler", "http://xml.org/sax/handlers/DeclHandler");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.xml.sax.ext.DeclHandler
         //
         verifyException("org.jdom2.output.SAXOutputter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetPropertyThrowsSAXNotRecognizedException() throws Throwable  {
      SAXOutputter sAXOutputter = new SAXOutputter();
      try { 
        sAXOutputter.setProperty("Hm$B^H6LSIYAs@m%5", "Hm$B^H6LSIYAs@m%5");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Hm$B^H6LSIYAs@m%5
         //
         verifyException("org.jdom2.output.SAXOutputter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetPropertyThrowsClassCastException1() throws Throwable  {
      SAXOutputter sAXOutputter = new SAXOutputter();
      // Undeclared exception!
      try { 
        sAXOutputter.setProperty("http://xml.org/sax/handlers/LexicalHandler", "http://xml.org/sax/handlers/LexicalHandler");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.xml.sax.ext.LexicalHandler
         //
         verifyException("org.jdom2.output.SAXOutputter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetPropertyThrowsClassCastException2() throws Throwable  {
      SAXOutputter sAXOutputter = new SAXOutputter();
      // Undeclared exception!
      try { 
        sAXOutputter.setProperty("http://xml.org/sax/properties/lexical-handler", "http://xml.org/sax/properties/lexical-handler");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.xml.sax.ext.LexicalHandler
         //
         verifyException("org.jdom2.output.SAXOutputter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesSAXOutputterTakingNoArgumentsAndCallsGetFeature0() throws Throwable  {
      SAXOutputter sAXOutputter = new SAXOutputter();
      boolean feature = sAXOutputter.getFeature("http://xml.org/sax/features/validation");
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
      assertTrue(feature);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesSAXOutputterTakingNoArgumentsAndCallsGetFeature1() throws Throwable  {
      SAXOutputter sAXOutputter = new SAXOutputter();
      boolean feature = sAXOutputter.getFeature("http://xml.org/sax/features/namespaces");
      assertTrue(feature);
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
      assertTrue(sAXOutputter.getReportDTDEvents());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFeatureReturningFalse() throws Throwable  {
      SAXOutputter sAXOutputter = new SAXOutputter();
      boolean feature = sAXOutputter.getFeature("http://xml.org/sax/features/namespace-prefixes");
      assertFalse(feature);
      assertTrue(sAXOutputter.getReportDTDEvents());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFeatureThrowsSAXNotRecognizedException() throws Throwable  {
      SAXOutputter sAXOutputter = new SAXOutputter();
      try { 
        sAXOutputter.getFeature("edPf#tqf");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // edPf#tqf
         //
         verifyException("org.jdom2.output.SAXOutputter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetFeatureThrowsSAXNotRecognizedException() throws Throwable  {
      SAXOutputter sAXOutputter = new SAXOutputter();
      try { 
        sAXOutputter.setFeature("http://xml.org/sax/feaHures/namespace-prefixes", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // http://xml.org/sax/feaHures/namespace-prefixes
         //
         verifyException("org.jdom2.output.SAXOutputter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesSAXOutputterTakingNoArgumentsAndCallsSetFeature0() throws Throwable  {
      SAXOutputter sAXOutputter = new SAXOutputter();
      sAXOutputter.setFeature("http://xml.org/sax/features/namespaces", true);
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
      assertTrue(sAXOutputter.getReportDTDEvents());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetFeatureThrowsSAXNotSupportedException() throws Throwable  {
      SAXOutputter sAXOutputter = new SAXOutputter();
      try { 
        sAXOutputter.setFeature("http://xml.org/sax/features/namespaces", false);
        fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
         //
         // http://xml.org/sax/features/namespaces
         //
         verifyException("org.jdom2.output.SAXOutputter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesSAXOutputterTaking7Arguments0() throws Throwable  {
      Format arg1 = Format.getPrettyFormat();
      XMLFilterImpl arg5 = new XMLFilterImpl();
      DefaultHandler2 arg6 = new DefaultHandler2();
      SAXOutputter sAXOutputter = new SAXOutputter((SAXOutputProcessor) null, arg1, arg5, arg5, arg5, arg5, arg6);
      assertTrue(sAXOutputter.getReportDTDEvents());
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesSAXOutputterTaking7Arguments1() throws Throwable  {
      AbstractSAXOutputProcessor arg0 = new AbstractSAXOutputProcessor();
      XMLFilterImpl arg5 = new XMLFilterImpl();
      DefaultHandler2 arg6 = new DefaultHandler2();
      SAXOutputter sAXOutputter = new SAXOutputter(arg0, (Format) null, arg5, arg5, arg5, arg5, arg6);
      assertTrue(sAXOutputter.getReportDTDEvents());
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetLexicalHandler() throws Throwable  {
      SAXOutputter sAXOutputter = new SAXOutputter();
      DefaultHandler2 arg0 = new DefaultHandler2();
      sAXOutputter.setLexicalHandler(arg0);
      assertTrue(sAXOutputter.getReportDTDEvents());
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetContentHandler() throws Throwable  {
      SAXOutputter sAXOutputter = new SAXOutputter();
      XMLReaderAdapter arg0 = new XMLReaderAdapter();
      sAXOutputter.setContentHandler(arg0);
      assertTrue(sAXOutputter.getReportDTDEvents());
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetReportNamespaceDeclarationsReturningFalse() throws Throwable  {
      SAXOutputter sAXOutputter = new SAXOutputter();
      boolean reportNamespaceDeclarations = sAXOutputter.getReportNamespaceDeclarations();
      assertTrue(sAXOutputter.getReportDTDEvents());
      assertFalse(reportNamespaceDeclarations);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetErrorHandler() throws Throwable  {
      SAXOutputter sAXOutputter = new SAXOutputter();
      HandlerBase arg0 = new HandlerBase();
      sAXOutputter.setErrorHandler(arg0);
      assertTrue(sAXOutputter.getReportDTDEvents());
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesSAXOutputterTakingNoArgumentsAndCallsSetFeature1() throws Throwable  {
      SAXOutputter sAXOutputter = new SAXOutputter();
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
      
      sAXOutputter.setFeature("http://xml.org/sax/features/namespace-prefixes", true);
      assertTrue(sAXOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetProperty() throws Throwable  {
      SAXOutputter sAXOutputter = new SAXOutputter();
      sAXOutputter.setProperty("http://xml.org/sax/properties/declaration-handler", (Object) null);
      assertTrue(sAXOutputter.getReportDTDEvents());
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSAXOutputProcessor() throws Throwable  {
      XMLReaderAdapter arg0 = new XMLReaderAdapter();
      DefaultHandler arg3 = new DefaultHandler();
      SAXOutputter sAXOutputter = new SAXOutputter(arg0, arg3, arg3, arg3);
      sAXOutputter.setSAXOutputProcessor((SAXOutputProcessor) null);
      assertTrue(sAXOutputter.getReportDTDEvents());
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLocator() throws Throwable  {
      SAXOutputter sAXOutputter = new SAXOutputter();
      sAXOutputter.getLocator();
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
      assertTrue(sAXOutputter.getReportDTDEvents());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDTDHandler() throws Throwable  {
      HandlerBase arg0 = new HandlerBase();
      SAXOutputter sAXOutputter = new SAXOutputter((ContentHandler) null, arg0, arg0, arg0, (LexicalHandler) null);
      sAXOutputter.setDTDHandler(arg0);
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
      assertTrue(sAXOutputter.getReportDTDEvents());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetReportDTDEventsReturningTrue() throws Throwable  {
      DefaultHandler arg3 = new DefaultHandler();
      DefaultHandler2 arg4 = new DefaultHandler2();
      SAXOutputter sAXOutputter = new SAXOutputter(arg3, arg3, arg3, arg3, arg4);
      boolean reportDTDEvents = sAXOutputter.getReportDTDEvents();
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
      assertTrue(reportDTDEvents);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDTDHandlerReturningNonNull() throws Throwable  {
      DefaultHandler2 arg4 = new DefaultHandler2();
      SAXOutputter sAXOutputter = new SAXOutputter(arg4, arg4, arg4, arg4, arg4);
      sAXOutputter.getDTDHandler();
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
      assertTrue(sAXOutputter.getReportDTDEvents());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetErrorHandlerReturningNull() throws Throwable  {
      SAXOutputter sAXOutputter = new SAXOutputter();
      sAXOutputter.getErrorHandler();
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
      assertTrue(sAXOutputter.getReportDTDEvents());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOutputTakingList() throws Throwable  {
      SAXOutputter sAXOutputter = new SAXOutputter();
      LinkedList<Element> arg0 = new LinkedList<Element>();
      sAXOutputter.output((List<? extends Content>) arg0);
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
      assertTrue(sAXOutputter.getReportDTDEvents());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLexicalHandlerReturningNull() throws Throwable  {
      SAXOutputter sAXOutputter = new SAXOutputter((ContentHandler) null);
      sAXOutputter.getLexicalHandler();
      assertTrue(sAXOutputter.getReportDTDEvents());
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDeclHandlerReturningNull() throws Throwable  {
      SAXOutputter sAXOutputter = new SAXOutputter();
      sAXOutputter.getDeclHandler();
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
      assertTrue(sAXOutputter.getReportDTDEvents());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSAXOutputProcessor() throws Throwable  {
      XMLFilterImpl arg0 = new XMLFilterImpl();
      SAXOutputter sAXOutputter = new SAXOutputter(arg0);
      sAXOutputter.getSAXOutputProcessor();
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
      assertTrue(sAXOutputter.getReportDTDEvents());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetContentHandlerReturningNonNull() throws Throwable  {
      XMLFilterImpl arg0 = new XMLFilterImpl();
      SAXOutputter sAXOutputter = new SAXOutputter(arg0);
      sAXOutputter.getContentHandler();
      assertTrue(sAXOutputter.getReportDTDEvents());
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOutputTakingElement() throws Throwable  {
      SAXOutputter sAXOutputter = new SAXOutputter();
      sAXOutputter.output((Element) null);
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
      assertTrue(sAXOutputter.getReportDTDEvents());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetEntityResolverReturningNonNull() throws Throwable  {
      DefaultHandler2 arg4 = new DefaultHandler2();
      SAXOutputter sAXOutputter = new SAXOutputter(arg4, arg4, arg4, arg4, arg4);
      sAXOutputter.getEntityResolver();
      assertTrue(sAXOutputter.getReportDTDEvents());
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOutputTakingDocument() throws Throwable  {
      Document arg0 = new Document();
      DefaultHandler arg3 = new DefaultHandler();
      DefaultHandler2 arg4 = new DefaultHandler2();
      SAXOutputter sAXOutputter = new SAXOutputter(arg3, arg3, arg3, arg3, arg4);
      sAXOutputter.output(arg0);
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
      assertTrue(sAXOutputter.getReportDTDEvents());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesSAXOutputterTakingNoArgumentsAndCallsSetFeature2() throws Throwable  {
      SAXOutputter sAXOutputter = new SAXOutputter();
      sAXOutputter.setFeature("http://xml.org/sax/features/validation", true);
      assertFalse(sAXOutputter.getReportNamespaceDeclarations());
      assertTrue(sAXOutputter.getReportDTDEvents());
  }
}
