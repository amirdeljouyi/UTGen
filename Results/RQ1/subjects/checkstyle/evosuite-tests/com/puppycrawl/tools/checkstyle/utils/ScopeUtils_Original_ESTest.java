/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Mon Mar 18 10:38:24 GMT 2024
 */

package com.puppycrawl.tools.checkstyle.utils;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.Scope;
import com.puppycrawl.tools.checkstyle.utils.ScopeUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ScopeUtils_Original_ESTest extends ScopeUtils_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsInScopeReturningTrue() throws Throwable  {
      DetailAST arg0 = new DetailAST();
      boolean inScope = ScopeUtils.isInScope(arg0, (Scope) null);
      assertTrue(inScope);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsInScopeReturningFalse() throws Throwable  {
      DetailAST arg0 = new DetailAST();
      Scope arg1 = Scope.PROTECTED;
      boolean inScope = ScopeUtils.isInScope(arg0, arg1);
      assertFalse(inScope);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsClassFieldDef() throws Throwable  {
      DetailAST arg0 = new DetailAST();
      boolean classFieldDef = ScopeUtils.isClassFieldDef(arg0);
      assertFalse(classFieldDef);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsLocalVariableDefThrowsNullPointerException() throws Throwable  {
      DetailAST arg0 = new DetailAST();
      arg0.initialize(21, "fTp'*0P4[*kJ0G");
      // Undeclared exception!
      try { 
        ScopeUtils.isLocalVariableDef(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.ScopeUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsLocalVariableDef() throws Throwable  {
      DetailAST arg0 = new DetailAST();
      arg0.initialize(10, (String) null);
      arg0.addChild(arg0);
      boolean localVariableDef = ScopeUtils.isLocalVariableDef(arg0);
      assertFalse(localVariableDef);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsOuterMostType0() throws Throwable  {
      DetailAST arg0 = new DetailAST();
      arg0.addChild(arg0);
      arg0.initialize(157, "%s (%s) must not be negative");
      boolean outerMostType = ScopeUtils.isOuterMostType(arg0);
      assertFalse(outerMostType);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsOuterMostType1() throws Throwable  {
      DetailAST arg0 = new DetailAST();
      arg0.addChild(arg0);
      arg0.initialize(15, "K~cV86le]");
      boolean outerMostType = ScopeUtils.isOuterMostType(arg0);
      assertFalse(outerMostType);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsOuterMostType2() throws Throwable  {
      DetailAST arg0 = new DetailAST();
      arg0.initialize(14, (String) null);
      arg0.addChild(arg0);
      boolean outerMostType = ScopeUtils.isOuterMostType(arg0);
      assertFalse(outerMostType);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsOuterMostTypeThrowsTooManyResourcesException() throws Throwable  {
      DetailAST arg0 = new DetailAST();
      arg0.addChild(arg0);
      // Undeclared exception!
      ScopeUtils.isOuterMostType(arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsOuterMostTypeReturningTrue() throws Throwable  {
      DetailAST arg0 = new DetailAST();
      boolean outerMostType = ScopeUtils.isOuterMostType(arg0);
      assertTrue(outerMostType);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsInCodeBlock0() throws Throwable  {
      DetailAST arg0 = new DetailAST();
      arg0.initialize(11, "");
      arg0.addChild(arg0);
      boolean inCodeBlock = ScopeUtils.isInCodeBlock(arg0);
      assertTrue(inCodeBlock);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsInCodeBlock1() throws Throwable  {
      DetailAST arg0 = new DetailAST();
      arg0.addChild(arg0);
      arg0.initialize(8, "o{7");
      boolean inCodeBlock = ScopeUtils.isInCodeBlock(arg0);
      assertTrue(inCodeBlock);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsInCodeBlockThrowsTooManyResourcesException() throws Throwable  {
      DetailAST arg0 = new DetailAST();
      arg0.setFirstChild(arg0);
      // Undeclared exception!
      ScopeUtils.isInCodeBlock(arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsInCodeBlockReturningFalse() throws Throwable  {
      DetailAST arg0 = new DetailAST();
      boolean inCodeBlock = ScopeUtils.isInCodeBlock(arg0);
      assertFalse(inCodeBlock);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsInEnumBlock0() throws Throwable  {
      DetailAST arg0 = new DetailAST();
      arg0.initialize(136, "!h2>");
      arg0.addChild(arg0);
      boolean inEnumBlock = ScopeUtils.isInEnumBlock(arg0);
      assertFalse(inEnumBlock);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsInEnumBlock1() throws Throwable  {
      DetailAST arg0 = new DetailAST();
      arg0.initialize(14, (String) null);
      arg0.addChild(arg0);
      boolean inEnumBlock = ScopeUtils.isInEnumBlock(arg0);
      assertFalse(inEnumBlock);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsInEnumBlock2() throws Throwable  {
      DetailAST arg0 = new DetailAST();
      arg0.initialize(157, "t_3FwH");
      arg0.addChild(arg0);
      boolean inEnumBlock = ScopeUtils.isInEnumBlock(arg0);
      assertFalse(inEnumBlock);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsInEnumBlock3() throws Throwable  {
      DetailAST arg0 = new DetailAST();
      arg0.addChild(arg0);
      arg0.initialize(15, "<mg_[l3r9dcvKQg");
      boolean inEnumBlock = ScopeUtils.isInEnumBlock(arg0);
      assertFalse(inEnumBlock);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsInEnumBlockThrowsTooManyResourcesException() throws Throwable  {
      DetailAST arg0 = new DetailAST();
      arg0.setFirstChild(arg0);
      // Undeclared exception!
      ScopeUtils.isInEnumBlock(arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsInEnumBlockWithDetailASTWhereGetNumberOfChildrenIsZero() throws Throwable  {
      DetailAST arg0 = new DetailAST();
      boolean inEnumBlock = ScopeUtils.isInEnumBlock(arg0);
      assertFalse(inEnumBlock);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsInInterfaceOrAnnotationBlockAndIsInInterfaceOrAnnotationBlockReturningTrue0() throws Throwable  {
      DetailAST arg0 = new DetailAST();
      arg0.initialize(157, "zT%g4");
      arg0.addChild(arg0);
      boolean inInterfaceOrAnnotationBlock = ScopeUtils.isInInterfaceOrAnnotationBlock(arg0);
      assertTrue(inInterfaceOrAnnotationBlock);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsInInterfaceOrAnnotationBlockAndIsInInterfaceOrAnnotationBlockReturningTrue1() throws Throwable  {
      DetailAST arg0 = new DetailAST();
      arg0.initialize(15, "S}QQug");
      arg0.addChild(arg0);
      boolean inInterfaceOrAnnotationBlock = ScopeUtils.isInInterfaceOrAnnotationBlock(arg0);
      assertTrue(inInterfaceOrAnnotationBlock);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsInAnnotationBlock0() throws Throwable  {
      DetailAST arg0 = new DetailAST();
      arg0.initialize(136, "!h2>");
      arg0.addChild(arg0);
      boolean inAnnotationBlock = ScopeUtils.isInAnnotationBlock(arg0);
      assertFalse(inAnnotationBlock);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsInAnnotationBlock1() throws Throwable  {
      DetailAST arg0 = new DetailAST();
      arg0.addChild(arg0);
      arg0.initialize(15, "com.puppycrawl.tools.checkstyle.utils.ScopeUtils");
      boolean inAnnotationBlock = ScopeUtils.isInAnnotationBlock(arg0);
      assertFalse(inAnnotationBlock);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsInAnnotationBlockThrowsTooManyResourcesException() throws Throwable  {
      DetailAST arg0 = new DetailAST();
      arg0.addChild(arg0);
      // Undeclared exception!
      ScopeUtils.isInAnnotationBlock(arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsInInterfaceOrAnnotationBlockAndIsInInterfaceOrAnnotationBlockReturningFalse0() throws Throwable  {
      DetailAST arg0 = new DetailAST();
      arg0.initialize(14, (String) null);
      arg0.addChild(arg0);
      boolean inInterfaceOrAnnotationBlock = ScopeUtils.isInInterfaceOrAnnotationBlock(arg0);
      assertFalse(inInterfaceOrAnnotationBlock);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsInAnnotationBlockReturningTrue() throws Throwable  {
      DetailAST arg0 = new DetailAST();
      arg0.initialize(157, "t_3FwH");
      arg0.addChild(arg0);
      boolean inAnnotationBlock = ScopeUtils.isInAnnotationBlock(arg0);
      assertTrue(inAnnotationBlock);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsInAnnotationBlockWithDetailASTWhereGetNumberOfChildrenIsZero() throws Throwable  {
      DetailAST arg0 = new DetailAST();
      boolean inAnnotationBlock = ScopeUtils.isInAnnotationBlock(arg0);
      assertFalse(inAnnotationBlock);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsInInterfaceBlock0() throws Throwable  {
      DetailAST arg0 = new DetailAST();
      arg0.initialize(157, "t_3FwH");
      arg0.addChild(arg0);
      boolean inInterfaceBlock = ScopeUtils.isInInterfaceBlock(arg0);
      assertFalse(inInterfaceBlock);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsInInterfaceOrAnnotationBlockAndIsInInterfaceOrAnnotationBlockReturningFalse1() throws Throwable  {
      DetailAST arg0 = new DetailAST();
      arg0.initialize(154, "");
      arg0.addChild(arg0);
      boolean inInterfaceOrAnnotationBlock = ScopeUtils.isInInterfaceOrAnnotationBlock(arg0);
      assertFalse(inInterfaceOrAnnotationBlock);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsInInterfaceBlock1() throws Throwable  {
      DetailAST arg0 = new DetailAST();
      arg0.initialize(14, (String) null);
      arg0.addChild(arg0);
      boolean inInterfaceBlock = ScopeUtils.isInInterfaceBlock(arg0);
      assertFalse(inInterfaceBlock);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsInInterfaceBlockReturningTrue() throws Throwable  {
      DetailAST arg0 = new DetailAST();
      arg0.addChild(arg0);
      arg0.initialize(15, "<mg_[l3r9dcvKQg");
      boolean inInterfaceBlock = ScopeUtils.isInInterfaceBlock(arg0);
      assertTrue(inInterfaceBlock);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsInInterfaceBlockThrowsTooManyResourcesException() throws Throwable  {
      DetailAST arg0 = new DetailAST();
      arg0.setFirstChild(arg0);
      // Undeclared exception!
      ScopeUtils.isInInterfaceBlock(arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsInInterfaceBlockWithDetailASTWhereGetNumberOfChildrenIsZero() throws Throwable  {
      DetailAST arg0 = new DetailAST();
      boolean inInterfaceBlock = ScopeUtils.isInInterfaceBlock(arg0);
      assertFalse(inInterfaceBlock);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSurroundingScopeThrowsNullPointerException0() throws Throwable  {
      DetailAST arg0 = new DetailAST();
      arg0.initialize(157, "t_3FwH");
      arg0.addChild(arg0);
      // Undeclared exception!
      try { 
        ScopeUtils.getSurroundingScope(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.ScopeUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSurroundingScopeThrowsNullPointerException1() throws Throwable  {
      DetailAST arg0 = new DetailAST();
      arg0.initialize(15, "juw=iP-p");
      arg0.addChild(arg0);
      // Undeclared exception!
      try { 
        ScopeUtils.getSurroundingScope(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.ScopeUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSurroundingScopeThrowsNullPointerException2() throws Throwable  {
      DetailAST arg0 = new DetailAST();
      arg0.initialize(14, (String) null);
      arg0.addChild(arg0);
      // Undeclared exception!
      try { 
        ScopeUtils.getSurroundingScope(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.puppycrawl.tools.checkstyle.utils.ScopeUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSurroundingScopeThrowsTooManyResourcesException() throws Throwable  {
      DetailAST arg0 = new DetailAST();
      arg0.addChild(arg0);
      // Undeclared exception!
      ScopeUtils.getSurroundingScope(arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSurroundingScope() throws Throwable  {
      DetailAST arg0 = new DetailAST();
      ScopeUtils.getSurroundingScope(arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetScopeFromMods0() throws Throwable  {
      DetailAST arg0 = new DetailAST();
      arg0.initialize(10, "protected");
      arg0.setFirstChild(arg0);
      Scope scopeFromMods = ScopeUtils.getScopeFromMods(arg0);
      assertEquals(Scope.PROTECTED, scopeFromMods);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetScopeFromMods1() throws Throwable  {
      DetailAST arg0 = new DetailAST();
      arg0.initialize(26, "public");
      arg0.addChild(arg0);
      Scope scopeFromMods = ScopeUtils.getScopeFromMods(arg0);
      assertEquals(Scope.PUBLIC, scopeFromMods);
  }
}
