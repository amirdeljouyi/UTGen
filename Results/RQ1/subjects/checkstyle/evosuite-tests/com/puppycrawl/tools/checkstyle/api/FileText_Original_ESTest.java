/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Mon Mar 18 10:15:26 GMT 2024
 */

package com.puppycrawl.tools.checkstyle.api;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import com.puppycrawl.tools.checkstyle.api.FileText;
import com.puppycrawl.tools.checkstyle.api.LineColumn;
import java.io.File;
import java.nio.charset.Charset;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FileText_Original_ESTest extends FileText_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateFileTextTaking2ArgumentsThrowsIllegalStateException() throws Throwable  {
      MockFile arg0 = new MockFile((String) null, "\"3n |C\" =p5hpWqyV/");
      FileText fileText = null;
      try {
        fileText = new FileText(arg0, "8");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unsupported charset: 8
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.FileText", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToLinesArrayReturningNonEmptyArray() throws Throwable  {
      File arg0 = MockFile.createTempFile("com.puppycrawl.tools.checkstyle.api.FileText", "com.puppycrawl.tools.checkstyle.api.FileText");
      LinkedList<String> arg1 = new LinkedList<String>();
      arg1.add("*zY~-Kb}y?9Gn5bb[");
      FileText fromLines = FileText.fromLines(arg0, arg1);
      String[] linesArray = fromLines.toLinesArray();
      assertEquals(1, linesArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSizeReturningPositive() throws Throwable  {
      File arg0 = MockFile.createTempFile("com.puppycrawl.tools.checkstyle.api.FileText", "com.puppycrawl.tools.checkstyle.api.FileText");
      LinkedList<String> arg1 = new LinkedList<String>();
      arg1.add("*zY~-Kb}y?9Gn5bb[");
      FileText fromLines = FileText.fromLines(arg0, arg1);
      int size = fromLines.size();
      assertEquals(1, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFullTextReturningCharSequenceWhereLengthIsPositive() throws Throwable  {
      LinkedList<String> arg1 = new LinkedList<String>();
      arg1.add("");
      FileText fromLines = FileText.fromLines((File) null, arg1);
      CharSequence fullText = fromLines.getFullText();
      assertEquals("\n", fullText);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFileReturningFileWhereIsHiddenIsTrue() throws Throwable  {
      LinkedList<String> arg1 = new LinkedList<String>();
      File arg0 = MockFile.createTempFile(".p3='3,NM>0^&", "com.puppycrawl.tools.checkstyle.api.LineColumn");
      FileText fromLines = FileText.fromLines(arg0, arg1);
      File file = fromLines.getFile();
      assertEquals(".p3='3,NM>0^&0com.puppycrawl.tools.checkstyle.api.LineColumn", file.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFileReturningFileWhereIsFileIsFalse() throws Throwable  {
      MockFile arg0 = new MockFile("");
      LinkedList<String> arg1 = new LinkedList<String>();
      FileText fromLines = FileText.fromLines(arg0, arg1);
      File file = fromLines.getFile();
      assertEquals("", file.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFileReturningFileWhereLastModifiedIsZero() throws Throwable  {
      MockFile arg0 = new MockFile("4xDo|6{D", "4xDo|6{D");
      LinkedList<String> arg1 = new LinkedList<String>();
      FileText fromLines = FileText.fromLines(arg0, arg1);
      File file = fromLines.getFile();
      assertTrue(file.isFile());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetReturningNonEmptyString() throws Throwable  {
      File arg0 = MockFile.createTempFile("com.puppycrawl.tools.checkstyle.api.FileText", "com.puppycrawl.tools.checkstyle.api.FileText");
      LinkedList<String> arg1 = new LinkedList<String>();
      arg1.add("*zY~-Kb}y?9Gn5bb[");
      FileText fromLines = FileText.fromLines(arg0, arg1);
      String get = fromLines.get(0);
      assertEquals("*zY~-Kb}y?9Gn5bb[", get);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetReturningEmptyString() throws Throwable  {
      LinkedList<String> arg1 = new LinkedList<String>();
      arg1.add("");
      arg1.add("");
      FileText fromLines = FileText.fromLines((File) null, arg1);
      String get = fromLines.get(1);
      assertEquals("", get);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSizeReturningZero() throws Throwable  {
      MockFile arg0 = new MockFile("w$}&u?e<ZB_K", "w$}&u?e<ZB_K");
      LinkedList<String> arg1 = new LinkedList<String>();
      FileText fromLines = FileText.fromLines(arg0, arg1);
      int size = fromLines.size();
      assertEquals(0, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLineColumn() throws Throwable  {
      LinkedList<String> arg1 = new LinkedList<String>();
      FileText fromLines = FileText.fromLines((File) null, arg1);
      fromLines.lineColumn(2);
      LineColumn lineColumn = fromLines.lineColumn(2);
      assertEquals(2, lineColumn.getColumn());
      assertEquals(1, lineColumn.getLine());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLineColumnThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      LinkedList<String> arg1 = new LinkedList<String>();
      arg1.add("");
      FileText fromLines = FileText.fromLines((File) null, arg1);
      // Undeclared exception!
      try { 
        fromLines.lineColumn((-1226));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.puppycrawl.tools.checkstyle.api.FileText", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesFileTextTakingFileText() throws Throwable  {
      LinkedList<String> arg1 = new LinkedList<String>();
      FileText arg0 = FileText.fromLines((File) null, arg1);
      FileText fileText = new FileText(arg0);
      assertEquals(0, fileText.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesFileTextTakingFileTextAndCallsLineColumn() throws Throwable  {
      LinkedList<String> arg1 = new LinkedList<String>();
      FileText arg0 = FileText.fromLines((File) null, arg1);
      arg0.lineColumn(4);
      FileText fileText = new FileText(arg0);
      assertTrue(fileText.equals((Object)arg0));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFullTextReturningCharSequenceWhereLengthIsZero() throws Throwable  {
      LinkedList<String> arg1 = new LinkedList<String>();
      FileText fromLines = FileText.fromLines((File) null, arg1);
      CharSequence fullText = fromLines.getFullText();
      assertEquals("", fullText);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLineColumnReturningLineColumnWhereGetColumnIsZero() throws Throwable  {
      LinkedList<String> arg1 = new LinkedList<String>();
      FileText fromLines = FileText.fromLines((File) null, arg1);
      LineColumn lineColumn = fromLines.lineColumn(0);
      assertEquals(1, lineColumn.getLine());
      assertEquals(0, lineColumn.getColumn());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCharset() throws Throwable  {
      LinkedList<String> arg1 = new LinkedList<String>();
      FileText fromLines = FileText.fromLines((File) null, arg1);
      Charset charset = fromLines.getCharset();
      assertNull(charset);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFileReturningNull() throws Throwable  {
      LinkedList<String> arg1 = new LinkedList<String>();
      FileText fromLines = FileText.fromLines((File) null, arg1);
      File file = fromLines.getFile();
      assertNull(file);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToLinesArrayReturningEmptyArray() throws Throwable  {
      LinkedList<String> arg1 = new LinkedList<String>();
      FileText fromLines = FileText.fromLines((File) null, arg1);
      String[] linesArray = fromLines.toLinesArray();
      assertEquals(0, linesArray.length);
  }
}
