/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 21 04:17:44 GMT 2024
 */

package mygrid.web;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import javax.xml.namespace.QName;
import mygrid.web.Job;
import mygrid.web._Fail;
import org.apache.axis.description.TypeDesc;
import org.apache.axis.encoding.Deserializer;
import org.apache.axis.encoding.Serializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class _Fail_Original_ESTest extends _Fail_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetJobReturningJobWhereIsBroadcastedIsTrue() throws Throwable  {
      _Fail __Fail = new _Fail();
      Job arg0 = new Job();
      arg0.setBroadcasted(true);
      __Fail.setJob(arg0);
      Job job = __Fail.getJob();
      assertSame(job, arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetJob() throws Throwable  {
      _Fail __Fail = new _Fail();
      Job arg0 = new Job();
      __Fail.setJob(arg0);
      Job job = __Fail.getJob();
      assertFalse(job.isBroadcasted());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetJobReturningJobWhereGetProgressIsPositive() throws Throwable  {
      _Fail __Fail = new _Fail();
      Job arg0 = new Job();
      __Fail.setJob(arg0);
      arg0.setProgress(1);
      Job job = __Fail.getJob();
      assertNull(job.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetJobReturningJobWhereGetProgressIsNegative() throws Throwable  {
      _Fail __Fail = new _Fail();
      Job arg0 = new Job();
      __Fail.setJob(arg0);
      arg0.setProgress((-1));
      Job job = __Fail.getJob();
      assertNull(job.getCurrentEngineId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetJob() throws Throwable  {
      _Fail __Fail = new _Fail();
      Job arg0 = new Job();
      __Fail.setJob(arg0);
      __Fail.hashCode();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashCode() throws Throwable  {
      _Fail __Fail = new _Fail();
      __Fail.hashCode();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningTrue() throws Throwable  {
      _Fail __Fail = new _Fail();
      _Fail arg0 = new _Fail();
      boolean equals = __Fail.equals(arg0);
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsWithNonNull() throws Throwable  {
      _Fail arg0 = new _Fail();
      boolean equals = arg0.equals(arg0);
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetJobReturningNull() throws Throwable  {
      _Fail __Fail = new _Fail();
      Job job = __Fail.getJob();
      assertNull(job);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDeserializer() throws Throwable  {
      Class<_Fail> arg1 = _Fail.class;
      QName arg2 = new QName("Pod}", "job");
      Deserializer deserializer = _Fail.getDeserializer("job", arg1, arg2);
      assertEquals("Axis SAX Mechanism", deserializer.getMechanismType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSerializer() throws Throwable  {
      Class<_Fail> arg1 = _Fail.class;
      QName arg2 = new QName("job", "job");
      Serializer arg0 = _Fail.getSerializer("job", arg1, arg2);
      _Fail __Fail = new _Fail();
      boolean equals = __Fail.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTypeDesc() throws Throwable  {
      TypeDesc typeDesc = _Fail.getTypeDesc();
      assertFalse(typeDesc.hasAttributes());
  }
}
