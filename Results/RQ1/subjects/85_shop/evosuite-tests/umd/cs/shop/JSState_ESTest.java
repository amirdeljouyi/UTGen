/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Mon Mar 18 07:34:12 GMT 2024
 */

package umd.cs.shop;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import umd.cs.shop.JSListSubstitution;
import umd.cs.shop.JSOperator;
import umd.cs.shop.JSPlan;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSState;
import umd.cs.shop.JSSubstitution;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JSState_ESTest extends JSState_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testApplyOpThrowsNullPointerException() throws Throwable  {
      // Given
      JSState arg3 = new JSState();
      JSOperator arg0 = new JSOperator();
      JSSubstitution arg1 = new JSSubstitution();
      
      // When
      try {
      arg3.applyOp(arg0, arg1, arg3, arg3);
      fail("Expecting exception: NullPointerException");
      } catch (NullPointerException e) {
      // Then
      verifyException("umd.cs.shop.JSState", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSatisfiesTAm() throws Throwable  {
      // Arrange
      JSState jSState = new JSState();
      JSSubstitution arg1 = new JSSubstitution();
      
      // Act
      JSListSubstitution satisfiesTAm = jSState.satisfiesTAm((JSPredicateForm) null, arg1);
      
      // Assert
      assertEquals(0, satisfiesTAm.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testApply() throws Throwable  {
      // rollbacked to evosuite
      JSState jSState = new JSState();
      JSState apply = jSState.apply((JSPlan) null);
      assertNotSame(apply, jSState);
  }
}
