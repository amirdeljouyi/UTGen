/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 21 00:57:53 GMT 2024
 */

package com.densebrain.rif.server.transport;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import com.densebrain.rif.server.transport.WebServiceDescriptor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WebServiceDescriptor_ESTest extends WebServiceDescriptor_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTypesNamespaceReturningEmptyString() throws Throwable  {
      // Arrange
      Class<Object> arg0 = Object.class;
      String expected = "";
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor(arg0, "Rgct+>9i]W);Z", "Rgct+>9i]W);Z");
      webServiceDescriptor.typesNamespace = expected;
      
      // Act
      String actual = webServiceDescriptor.getTypesNamespace();
      
      // Assert
      assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTargetNamespaceReturningNull() throws Throwable  {
      // Create a WebServiceDescriptor object for testing purposes
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor(Object.class, "", "");
      
      // Set the targetNamespace property of the WebServiceDescriptor to an empty string
      webServiceDescriptor.targetNamespace = "";
      
      // Set the targetNamespace property of the WebServiceDescriptor to null
      webServiceDescriptor.targetNamespace = null;
      
      // Retrieve the value of the targetNamespace property using getTargetNamespace() method
      String targetNamespace = webServiceDescriptor.getTargetNamespace();
      
      // Assert that the returned value is null
      assertNull(targetNamespace);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTargetNamespaceReturningEmptyString() throws Throwable  {
      // Arrange
      Class<Object> arg0 = Object.class;
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor(arg0, "", "");
      
      // Act
      String targetNamespace = webServiceDescriptor.getTargetNamespace();
      
      // Assert
      assertEquals("", targetNamespace);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetServiceClazzReturningClassWhereIsSyntheticIsFalse() throws Throwable  {
      // Given a WebServiceDescriptor instance with a service class and types namespace
      Class<Object> arg0 = Object.class;
      String typesNamespace = "exQTd2_Z^Zx=4";
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor(arg0, "", typesNamespace);
      
      // When the service class is retrieved
      Class serviceClazz = webServiceDescriptor.getServiceClazz();
      
      // Then the service class should be not null and have the same types namespace as the original
      assertNotNull(serviceClazz);
      assertEquals(typesNamespace, webServiceDescriptor.getTypesNamespace());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEquals() throws Throwable  {
      // Test that the WebServiceDescriptor class correctly recognizes when it is equal to a different instance of itself
      Class<Object> arg0 = Object.class;
      WebServiceDescriptor webServiceDescriptor1 = new WebServiceDescriptor(arg0, "", "exQTd2_Z^Zx=4");
      boolean equals = webServiceDescriptor1.equals(arg0);
      assertEquals("exQTd2_Z^Zx=4", webServiceDescriptor1.getTypesNamespace());
      assertFalse(equals);
      
      // Test that the WebServiceDescriptor class correctly recognizes when it is not equal to a different instance of itself
      WebServiceDescriptor webServiceDescriptor2 = new WebServiceDescriptor(arg0, "", "exQTd2_Z^Zx=4");
      assertNotEquals(webServiceDescriptor1.getTypesNamespace(), webServiceDescriptor2.getTypesNamespace());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsWithNull() throws Throwable  {
      // No Comments were added
      Class<Object> arg0 = Object.class;
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor(arg0, "", "");
      boolean equals = webServiceDescriptor.equals((Object) null);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesWebServiceDescriptor0() throws Throwable  {
      // Given a WebServiceDescriptor instance with a null class and two strings
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor((Class) null, "F", "F");
      
      // When the hashCode method is called on the instance
      int actualHashCode = webServiceDescriptor.hashCode();
      
      // Then the returned value should be a valid hash code for the instance
      assertNotNull(actualHashCode);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesWebServiceDescriptor1() throws Throwable  {
      // Given a WebServiceDescriptor with a non-empty types namespace
      Class<Object> arg0 = Object.class;
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor(arg0, "", "exQTd2_Z^Zx=4");
      
      // When the getTypesNamespace method is called
      String actual = webServiceDescriptor.getTypesNamespace();
      
      // Then the expected types namespace should be returned
      assertEquals("exQTd2_Z^Zx=4", actual);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetServiceClazzReturningNull() throws Throwable  {
      // GIVEN: a WebServiceDescriptor with null input
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor((Class) null, "F", "F");
      
      // WHEN: the getServiceClazz method is called on this descriptor
      Class serviceClazz = webServiceDescriptor.getServiceClazz();
      
      // THEN: it should return null
      assertNull(serviceClazz);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetTargetNamespace() throws Throwable  {
      // Given a WebServiceDescriptor instance with a target namespace and types namespace
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor(Object.class, "", "exQTd2_Z^Zx=4");
      
      // When we set the target namespace to an empty string
      webServiceDescriptor.setTargetNamespace("");
      
      // Then the target namespace is set to an empty string
      assertEquals("", webServiceDescriptor.getTargetNamespace());
      
      // And the types namespace remains the same as the original value
      assertEquals("exQTd2_Z^Zx=4", webServiceDescriptor.getTypesNamespace());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTargetNamespaceReturningNonEmptyString() throws Throwable  {
      // rollbacked to evosuite
      Class<Object> arg0 = Object.class;
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor(arg0, ";)aay&us", ";)aay&us");
      String targetNamespace = webServiceDescriptor.getTargetNamespace();
      assertEquals(";)aay&us", targetNamespace);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetTypesNamespace() throws Throwable  {
      // Given a WebServiceDescriptor object with an empty string as the namespace
      Class<Object> arg0 = Object.class;
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor(arg0, "", "");
      
      // When the typesNamespace is set to null
      webServiceDescriptor.setTypesNamespace((String) null);
      
      // Then the getTypesNamespace method should return null
      String typesNamespace = webServiceDescriptor.getTypesNamespace();
      assertNull(typesNamespace);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTypesNamespaceReturningNonEmptyString() throws Throwable  {
      // Arrange
      Class<Object> arg0 = Object.class;
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor(arg0, "", "exQTd2_Z^Zx=4");
      
      // Act
      String typesNamespace = webServiceDescriptor.getTypesNamespace();
      
      // Assert
      assertEquals("exQTd2_Z^Zx=4", typesNamespace);
      assertNotNull(typesNamespace);
  }
}
