/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 21 00:57:54 GMT 2024
 */

package com.densebrain.rif.server.transport;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import com.densebrain.rif.server.transport.WebServiceDescriptor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WebServiceDescriptor_Original_ESTest extends WebServiceDescriptor_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTypesNamespaceReturningEmptyString() throws Throwable  {
      Class<Object> arg0 = Object.class;
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor(arg0, "Rgct+>9i]W);Z", "Rgct+>9i]W);Z");
      webServiceDescriptor.typesNamespace = "";
      webServiceDescriptor.getTypesNamespace();
      assertEquals("", webServiceDescriptor.getTypesNamespace());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTargetNamespaceReturningNull() throws Throwable  {
      Class<Object> arg0 = Object.class;
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor(arg0, "", "");
      webServiceDescriptor.targetNamespace = "";
      webServiceDescriptor.targetNamespace = "";
      webServiceDescriptor.targetNamespace = null;
      String targetNamespace = webServiceDescriptor.getTargetNamespace();
      assertNull(targetNamespace);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTargetNamespaceReturningEmptyString() throws Throwable  {
      Class<Object> arg0 = Object.class;
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor(arg0, "", "");
      String targetNamespace = webServiceDescriptor.getTargetNamespace();
      assertEquals("", targetNamespace);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetServiceClazzReturningClassWhereIsSyntheticIsFalse() throws Throwable  {
      Class<Object> arg0 = Object.class;
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor(arg0, "", "exQTd2_Z^Zx=4");
      Class serviceClazz = webServiceDescriptor.getServiceClazz();
      assertNotNull(serviceClazz);
      assertEquals("exQTd2_Z^Zx=4", webServiceDescriptor.getTypesNamespace());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEquals() throws Throwable  {
      Class<Object> arg0 = Object.class;
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor(arg0, "", "exQTd2_Z^Zx=4");
      boolean equals = webServiceDescriptor.equals(arg0);
      assertFalse(equals);
      assertEquals("exQTd2_Z^Zx=4", webServiceDescriptor.getTypesNamespace());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsWithNull() throws Throwable  {
      Class<Object> arg0 = Object.class;
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor(arg0, "", "");
      boolean equals = webServiceDescriptor.equals((Object) null);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesWebServiceDescriptor0() throws Throwable  {
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor((Class) null, "F", "F");
      webServiceDescriptor.hashCode();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesWebServiceDescriptor1() throws Throwable  {
      Class<Object> arg0 = Object.class;
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor(arg0, "", "exQTd2_Z^Zx=4");
      webServiceDescriptor.hashCode();
      assertEquals("exQTd2_Z^Zx=4", webServiceDescriptor.getTypesNamespace());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetServiceClazzReturningNull() throws Throwable  {
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor((Class) null, "F", "F");
      Class serviceClazz = webServiceDescriptor.getServiceClazz();
      assertNull(serviceClazz);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetTargetNamespace() throws Throwable  {
      Class<Object> arg0 = Object.class;
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor(arg0, "", "exQTd2_Z^Zx=4");
      webServiceDescriptor.setTargetNamespace("");
      assertEquals("exQTd2_Z^Zx=4", webServiceDescriptor.getTypesNamespace());
      assertEquals("", webServiceDescriptor.getTargetNamespace());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTargetNamespaceReturningNonEmptyString() throws Throwable  {
      Class<Object> arg0 = Object.class;
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor(arg0, ";)aay&us", ";)aay&us");
      String targetNamespace = webServiceDescriptor.getTargetNamespace();
      assertEquals(";)aay&us", targetNamespace);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetTypesNamespace() throws Throwable  {
      Class<Object> arg0 = Object.class;
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor(arg0, "", "");
      webServiceDescriptor.setTypesNamespace((String) null);
      String typesNamespace = webServiceDescriptor.getTypesNamespace();
      assertNull(typesNamespace);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTypesNamespaceReturningNonEmptyString() throws Throwable  {
      Class<Object> arg0 = Object.class;
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor(arg0, "", "exQTd2_Z^Zx=4");
      String typesNamespace = webServiceDescriptor.getTypesNamespace();
      assertNotNull(typesNamespace);
      assertEquals("exQTd2_Z^Zx=4", typesNamespace);
  }
}
