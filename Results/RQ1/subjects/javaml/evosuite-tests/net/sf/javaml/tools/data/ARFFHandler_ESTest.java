/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 19 18:07:11 GMT 2024
 */

package net.sf.javaml.tools.data;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import java.io.File;
import net.sf.javaml.core.Dataset;
import net.sf.javaml.tools.data.ARFFHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ARFFHandler_ESTest extends ARFFHandler_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLoadARFF() throws Throwable  {
      // Given: A temporary file with example data in ARFF format is created
      File tempArffFile = MockFile.createTempFile("example_data", "arff");
      
      // When: The data is loaded from the ARFF file using the ARFFHandler class
      Dataset loadedData = ARFFHandler.loadARFF(tempArffFile, 1);
      
      // Then: Assert that the loaded data is empty
      assertTrue(loadedData.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesARFFHandler() throws Throwable  {
      // rollbacked to evosuite
      ARFFHandler aRFFHandler = new ARFFHandler();
  }
}
