/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 19 17:53:05 GMT 2024
 */

package net.sf.javaml.core;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.ListIterator;
import java.util.SortedSet;
import net.sf.javaml.core.Dataset;
import net.sf.javaml.core.DefaultDataset;
import net.sf.javaml.core.Fold;
import net.sf.javaml.core.Instance;
import net.sf.javaml.distance.NormalizedEuclideanSimilarity;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fold_Original_ESTest extends Fold_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSizeReturningPositive() throws Throwable  {
      DefaultDataset arg0 = new DefaultDataset();
      int[] arg1 = new int[7];
      Fold fold = new Fold(arg0, arg1);
      int size = fold.size();
      assertEquals(7, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testListIteratorTakingIntReturningListIteratorWhereHasNextIsTrue() throws Throwable  {
      DefaultDataset arg0 = new DefaultDataset();
      int[] arg1 = new int[1];
      Fold fold = new Fold(arg0, arg1);
      ListIterator<Instance> listIterator = fold.listIterator(0);
      assertTrue(listIterator.hasNext());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIterator() throws Throwable  {
      DefaultDataset arg0 = new DefaultDataset();
      int[] arg1 = new int[8];
      Fold fold = new Fold(arg0, arg1);
      Iterator<Instance> iterator = fold.iterator();
      assertNotNull(iterator);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCopy() throws Throwable  {
      DefaultDataset arg0 = new DefaultDataset();
      int[] arg1 = new int[0];
      Fold fold = new Fold(arg0, arg1);
      Dataset copy = fold.copy();
      assertTrue(copy.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToArray() throws Throwable  {
      DefaultDataset arg0 = new DefaultDataset();
      int[] arg1 = new int[0];
      Fold fold = new Fold(arg0, arg1);
      Object[] array = fold.toArray();
      assertEquals(0, array.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testListIteratorTakingNoArguments() throws Throwable  {
      DefaultDataset arg0 = new DefaultDataset();
      int[] arg1 = new int[0];
      Fold fold = new Fold(arg0, arg1);
      ListIterator<Instance> listIterator = fold.listIterator();
      assertFalse(listIterator.hasPrevious());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveTakingIntThrowsUnsupportedOperationException() throws Throwable  {
      DefaultDataset arg0 = new DefaultDataset();
      Fold fold = new Fold(arg0, (int[]) null);
      // Undeclared exception!
      try { 
        fold.remove(7);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // You cannot do this on a fold.
         //
         verifyException("net.sf.javaml.core.Fold", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveTakingObjectThrowsUnsupportedOperationException() throws Throwable  {
      DefaultDataset arg0 = new DefaultDataset();
      Fold fold = new Fold(arg0, (int[]) null);
      // Undeclared exception!
      try { 
        fold.remove((Object) arg0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // You cannot do this on a fold.
         //
         verifyException("net.sf.javaml.core.Fold", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testContainsThrowsUnsupportedOperationException() throws Throwable  {
      DefaultDataset arg0 = new DefaultDataset();
      Fold fold = new Fold(arg0, (int[]) null);
      // Undeclared exception!
      try { 
        fold.contains(arg0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Method is not yet implemented
         //
         verifyException("net.sf.javaml.core.Fold", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetThrowsUnsupportedOperationException() throws Throwable  {
      DefaultDataset arg0 = new DefaultDataset();
      Fold fold = new Fold(arg0, (int[]) null);
      // Undeclared exception!
      try { 
        fold.set((-1392), (Instance) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // You cannot do this on a fold.
         //
         verifyException("net.sf.javaml.core.Fold", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testContainsAllThrowsUnsupportedOperationException() throws Throwable  {
      DefaultDataset arg0 = new DefaultDataset();
      Fold fold = new Fold(arg0, (int[]) null);
      // Undeclared exception!
      try { 
        fold.containsAll(arg0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Method is not yet implemented
         //
         verifyException("net.sf.javaml.core.Fold", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveAllThrowsUnsupportedOperationException() throws Throwable  {
      DefaultDataset arg0 = new DefaultDataset();
      Fold fold = new Fold(arg0, (int[]) null);
      // Undeclared exception!
      try { 
        fold.removeAll(arg0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // You cannot do this on a fold.
         //
         verifyException("net.sf.javaml.core.Fold", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddTakingInstanceThrowsUnsupportedOperationException() throws Throwable  {
      DefaultDataset arg0 = new DefaultDataset();
      Fold fold = new Fold(arg0, (int[]) null);
      // Undeclared exception!
      try { 
        fold.add((Instance) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot do this on a fold of a dataset
         //
         verifyException("net.sf.javaml.core.Fold", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testClearThrowsUnsupportedOperationException() throws Throwable  {
      DefaultDataset arg0 = new DefaultDataset();
      Fold fold = new Fold(arg0, (int[]) null);
      // Undeclared exception!
      try { 
        fold.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot do this on a fold of a dataset
         //
         verifyException("net.sf.javaml.core.Fold", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNoAttributes() throws Throwable  {
      DefaultDataset arg0 = new DefaultDataset();
      int[] arg1 = new int[6];
      Fold fold = new Fold(arg0, arg1);
      int noAttributes = fold.noAttributes();
      assertEquals(0, noAttributes);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testKNearestThrowsUnsupportedOperationException() throws Throwable  {
      DefaultDataset arg0 = new DefaultDataset();
      Fold fold = new Fold(arg0, (int[]) null);
      NormalizedEuclideanSimilarity arg2 = new NormalizedEuclideanSimilarity(arg0);
      // Undeclared exception!
      try { 
        fold.kNearest((-1271), (Instance) null, arg2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Method is not yet implemented
         //
         verifyException("net.sf.javaml.core.Fold", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLastIndexOfThrowsUnsupportedOperationException() throws Throwable  {
      DefaultDataset arg0 = new DefaultDataset();
      Fold fold = new Fold(arg0, (int[]) null);
      // Undeclared exception!
      try { 
        fold.lastIndexOf(arg0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Method is not yet implemented
         //
         verifyException("net.sf.javaml.core.Fold", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSizeReturningZero() throws Throwable  {
      DefaultDataset arg0 = new DefaultDataset();
      int[] arg1 = new int[0];
      Fold fold = new Fold(arg0, arg1);
      int size = fold.size();
      assertEquals(0, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testClassValue() throws Throwable  {
      DefaultDataset arg0 = new DefaultDataset();
      int[] arg1 = new int[6];
      Fold fold = new Fold(arg0, arg1);
      Object classValue = fold.classValue(205);
      assertNull(classValue);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testListIteratorTakingIntReturningListIteratorWhereHasNextIsFalse() throws Throwable  {
      DefaultDataset arg0 = new DefaultDataset();
      int[] arg1 = new int[0];
      Fold fold = new Fold(arg0, arg1);
      ListIterator<Instance> listIterator = fold.listIterator(32);
      assertFalse(listIterator.hasNext());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIndexOfThrowsUnsupportedOperationException() throws Throwable  {
      DefaultDataset arg0 = new DefaultDataset();
      Fold fold = new Fold(arg0, (int[]) null);
      // Undeclared exception!
      try { 
        fold.indexOf(arg0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Method is not yet implemented
         //
         verifyException("net.sf.javaml.core.Fold", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddAllTaking2ArgumentsThrowsUnsupportedOperationException() throws Throwable  {
      DefaultDataset arg1 = new DefaultDataset();
      Fold fold = new Fold(arg1, (int[]) null);
      // Undeclared exception!
      try { 
        fold.addAll(0, (Collection<? extends Instance>) arg1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot do this on a fold of a dataset
         //
         verifyException("net.sf.javaml.core.Fold", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddAllTakingCollectionThrowsUnsupportedOperationException() throws Throwable  {
      DefaultDataset arg0 = new DefaultDataset();
      int[] arg1 = new int[6];
      Fold fold = new Fold(arg0, arg1);
      // Undeclared exception!
      try { 
        fold.addAll((Collection<? extends Instance>) arg0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot do this on a fold of a dataset
         //
         verifyException("net.sf.javaml.core.Fold", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSubListThrowsUnsupportedOperationException() throws Throwable  {
      DefaultDataset arg0 = new DefaultDataset();
      Fold fold = new Fold(arg0, (int[]) null);
      // Undeclared exception!
      try { 
        fold.subList((-2975), (-2975));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // You cannot do this on a fold.
         //
         verifyException("net.sf.javaml.core.Fold", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testClasses() throws Throwable  {
      DefaultDataset arg0 = new DefaultDataset();
      Fold fold = new Fold(arg0, (int[]) null);
      SortedSet<Object> classes = fold.classes();
      assertTrue(classes.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRetainAllThrowsUnsupportedOperationException() throws Throwable  {
      Fold fold = new Fold((Dataset) null, (int[]) null);
      // Undeclared exception!
      try { 
        fold.retainAll((Collection<?>) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // You cannot do this on a fold.
         //
         verifyException("net.sf.javaml.core.Fold", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddTaking2ArgumentsThrowsUnsupportedOperationException() throws Throwable  {
      DefaultDataset arg0 = new DefaultDataset();
      Fold fold = new Fold(arg0, (int[]) null);
      // Undeclared exception!
      try { 
        fold.add(1052, (Instance) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot do this on a fold of a dataset
         //
         verifyException("net.sf.javaml.core.Fold", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsEmpty() throws Throwable  {
      DefaultDataset arg0 = new DefaultDataset();
      Fold fold = new Fold(arg0, (int[]) null);
      boolean empty = fold.isEmpty();
      assertFalse(empty);
  }
}
