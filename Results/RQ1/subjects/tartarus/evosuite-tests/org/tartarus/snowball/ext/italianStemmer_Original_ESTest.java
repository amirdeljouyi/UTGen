/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 20 12:00:34 GMT 2024
 */

package org.tartarus.snowball.ext;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.tartarus.snowball.ext.italianStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class italianStemmer_Original_ESTest extends italianStemmer_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testStemReturningTrue() throws Throwable  {
      italianStemmer _italianStemmer = new italianStemmer("nU1^jch");
      _italianStemmer.stem();
      boolean stem = _italianStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesItalianStemmer0() throws Throwable  {
      italianStemmer _italianStemmer = new italianStemmer("DIU0w!jmOIh\"9h");
      boolean stem = _italianStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesItalianStemmer1() throws Throwable  {
      italianStemmer _italianStemmer = new italianStemmer("ut#Yrii");
      boolean stem = _italianStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesItalianStemmer2() throws Throwable  {
      italianStemmer _italianStemmer = new italianStemmer("uzionevi");
      boolean stem = _italianStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesItalianStemmer3() throws Throwable  {
      italianStemmer _italianStemmer = new italianStemmer("ive");
      boolean stem = _italianStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesItalianStemmer4() throws Throwable  {
      italianStemmer _italianStemmer = new italianStemmer("it\u00E0");
      boolean stem = _italianStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesItalianStemmer5() throws Throwable  {
      italianStemmer _italianStemmer = new italianStemmer("imento");
      boolean stem = _italianStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesItalianStemmer6() throws Throwable  {
      italianStemmer _italianStemmer = new italianStemmer("usioni");
      boolean stem = _italianStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesItalianStemmer7() throws Throwable  {
      italianStemmer _italianStemmer = new italianStemmer("logie");
      boolean stem = _italianStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesItalianStemmer8() throws Throwable  {
      italianStemmer _italianStemmer = new italianStemmer("atori");
      boolean stem = _italianStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesItalianStemmer9() throws Throwable  {
      italianStemmer _italianStemmer = new italianStemmer("ici");
      boolean stem = _italianStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesItalianStemmer10() throws Throwable  {
      italianStemmer _italianStemmer = new italianStemmer("Jova/enza");
      boolean stem = _italianStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesItalianStemmer11() throws Throwable  {
      italianStemmer _italianStemmer = new italianStemmer("amente");
      boolean stem = _italianStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesItalianStemmer12() throws Throwable  {
      italianStemmer _italianStemmer = new italianStemmer("vi");
      boolean stem = _italianStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesItalianStemmer13() throws Throwable  {
      italianStemmer _italianStemmer = new italianStemmer("]nevi\"S!f");
      boolean stem = _italianStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesItalianStemmer14() throws Throwable  {
      italianStemmer _italianStemmer = new italianStemmer("eo6X");
      boolean stem = _italianStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesItalianStemmer15() throws Throwable  {
      italianStemmer _italianStemmer = new italianStemmer("u?)z&TXW)(");
      boolean stem = _italianStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesItalianStemmer16() throws Throwable  {
      italianStemmer _italianStemmer = new italianStemmer("enza");
      boolean stem = _italianStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesItalianStemmer17() throws Throwable  {
      italianStemmer _italianStemmer = new italianStemmer("uioi");
      boolean stem = _italianStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesItalianStemmer18() throws Throwable  {
      italianStemmer _italianStemmer = new italianStemmer("aoi");
      boolean stem = _italianStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesItalianStemmer19() throws Throwable  {
      italianStemmer _italianStemmer = new italianStemmer("teuo");
      boolean stem = _italianStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesItalianStemmer20() throws Throwable  {
      italianStemmer _italianStemmer = new italianStemmer("faulty slice operation");
      boolean stem = _italianStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesItalianStemmer21() throws Throwable  {
      italianStemmer _italianStemmer = new italianStemmer("\u00FA");
      boolean stem = _italianStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesItalianStemmer22() throws Throwable  {
      italianStemmer _italianStemmer = new italianStemmer("\u00F3");
      boolean stem = _italianStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesItalianStemmer23() throws Throwable  {
      italianStemmer _italianStemmer = new italianStemmer("\u00ED");
      boolean stem = _italianStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesItalianStemmer24() throws Throwable  {
      italianStemmer _italianStemmer = new italianStemmer("\u00E9");
      boolean stem = _italianStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesItalianStemmer25() throws Throwable  {
      italianStemmer _italianStemmer = new italianStemmer("\u00E1");
      boolean stem = _italianStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesItalianStemmer26() throws Throwable  {
      italianStemmer _italianStemmer = new italianStemmer("<[t:A`c{qu:]_MmvST");
      boolean stem = _italianStemmer.stem();
      assertTrue(stem);
  }
}
