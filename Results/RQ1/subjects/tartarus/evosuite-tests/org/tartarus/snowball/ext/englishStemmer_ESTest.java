/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 20 12:13:27 GMT 2024
 */

package org.tartarus.snowball.ext;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.tartarus.snowball.ext.englishStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class englishStemmer_ESTest extends englishStemmer_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningFalse() throws Throwable  {
      // rollbacked to evosuite
      englishStemmer _englishStemmer = new englishStemmer("true");
      Object arg0 = new Object();
      boolean equals = _englishStemmer.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testStemReturningTrue() throws Throwable  {
      // rollbacked to evosuite
      englishStemmer _englishStemmer = new englishStemmer("singly");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer0() throws Throwable  {
      // rollbacked to evosuite
      englishStemmer _englishStemmer = new englishStemmer("only");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer1() throws Throwable  {
      // Given a word "early" and an EnglishStemmer object
      englishStemmer englishStemmer = new englishStemmer("early");
      
      // When the stem method is called on the EnglishStemmer object
      boolean stem = englishStemmer.stem();
      
      // Then assert that the stem method returns true
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer2() throws Throwable  {
      // rollbacked to evosuite
      englishStemmer _englishStemmer = new englishStemmer("ugly");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer3() throws Throwable  {
      // rollbacked to evosuite
      englishStemmer _englishStemmer = new englishStemmer("gently");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer4() throws Throwable  {
      // rollbacked to evosuite
      englishStemmer _englishStemmer = new englishStemmer("");
      _englishStemmer.setCurrent("idly");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer5() throws Throwable  {
      // Given a word "tying"
      englishStemmer stemmer = new englishStemmer("tying");
      
      // When the method is called to stem the word
      boolean stemmed = stemmer.stem();
      
      // Then the method should return true as the word is stemmed
      assertTrue(stemmed);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer6() throws Throwable  {
      // Initialize the English stemmer with the word "aliti"
      englishStemmer _englishStemmer = new englishStemmer("aliti");
      
      // Set the current word to "lying"
      _englishStemmer.setCurrent("lying");
      
      // Stem the word
      _englishStemmer.stem();
      
      // Check if the stemmed word is equal to "lie"
      assertTrue(_englishStemmer.getCurrent().equals("lie"));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer7() throws Throwable  {
      // rollbacked to evosuite
      englishStemmer _englishStemmer = new englishStemmer("dying");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer8() throws Throwable  {
      // Given a sentence "skies"
      String inputSentence = "skies";
      
      // When we stem the sentence using the English stemmer
      englishStemmer _englishStemmer = new englishStemmer(inputSentence);
      boolean stem = _englishStemmer.stem();
      
      // Then the stemmed sentence should be "sky"
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer9() throws Throwable  {
      // rollbacked to evosuite
      englishStemmer _englishStemmer = new englishStemmer("");
      _englishStemmer.setCurrent("skis");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer10() throws Throwable  {
      // Given a word that is not yet stemmed
      String word = "bias";
      
      // When the word is passed to the englishStemmer
      englishStemmer _englishStemmer = new englishStemmer(word);
      
      // Then the stemmed form of the word should be returned as true
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer11() throws Throwable  {
      // Given a string "succeed"
      String input = "succeed";
      
      // When the string is passed to the English stemmer
      englishStemmer _englishStemmer = new englishStemmer(input);
      boolean stem = _englishStemmer.stem();
      
      // Then the method returns true
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer12() throws Throwable  {
      // Create a new EnglishStemmer object with an empty string as the input
      englishStemmer _englishStemmer = new englishStemmer("");
      
      // Set the current value of the stemmer to "idl"
      _englishStemmer.setCurrent("idl");
      
      // Stem the word using the englishStemmer object
      boolean stem = _englishStemmer.stem();
      
      // Assert that the stem method returned true, indicating that the word was successfully stemmed
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer13() throws Throwable  {
      // Given a word "ization"
      String inputWord = "ization";
      
      // When the word is passed to the englishStemmer
      englishStemmer _englishStemmer = new englishStemmer(inputWord);
      boolean stem = _englishStemmer.stem();
      
      // Then the output should be true, indicating that the word has been successfully stemmed
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer14() throws Throwable  {
      // No Comments were added
      englishStemmer _englishStemmer = new englishStemmer("faulty slice ope@aUion");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer15() throws Throwable  {
      // rollbacked to evosuite
      englishStemmer _englishStemmer = new englishStemmer("faulty sl9ce operasion");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer16() throws Throwable  {
      // Test that the English stemmer is able to correctly stem words
      englishStemmer englishStemmer = new englishStemmer("alize");
      boolean stem = englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer17() throws Throwable  {
      // Given a word "ugli"
      String word = "ugli";
      
      // When the word is stemmed using the English Stemmer
      englishStemmer _englishStemmer = new englishStemmer(word);
      boolean stem = _englishStemmer.stem();
      
      // Then the stem should be true
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer18() throws Throwable  {
      // rollbacked to evosuite
      englishStemmer _englishStemmer = new englishStemmer("N6*(uo15{2Bjg`9");
      _englishStemmer.setCurrent("faulty slice operation");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer19() throws Throwable  {
      // Given a word "hying"
      String word = "hying";
      
      // When we stem the word
      englishStemmer _englishStemmer = new englishStemmer(word);
      boolean stem = _englishStemmer.stem();
      
      // Then the stemmed word should be "hi"
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer20() throws Throwable  {
      // Test that the English stemmer correctly stems the word "erring" to its root form "error".
      englishStemmer englishStemmer = new englishStemmer("erring");
      boolean stem = englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer21() throws Throwable  {
      // Create an English stemmer with the word "pineapple"
      englishStemmer _englishStemmer = new englishStemmer("pineapple");
      
      // Check if the word is a stem or not
      boolean stem = _englishStemmer.stem();
      
      // Assert that the word is indeed a stem
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer22() throws Throwable  {
      // rollbacked to evosuite
      englishStemmer _englishStemmer = new englishStemmer("faulty slice ope@aUion");
      _englishStemmer.setCurrent("b>Fias");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer23() throws Throwable  {
      // Given
      englishStemmer englishStemmer = new englishStemmer("ski&ies");
      
      // When
      boolean stem = englishStemmer.stem();
      
      // Then
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer24() throws Throwable  {
      // Given a word "ousness"
      String word = "ousness";
      
      // When the englishStemmer is applied to the word
      englishStemmer _englishStemmer = new englishStemmer(word);
      boolean stem = _englishStemmer.stem();
      
      // Then the word should be stemmed and return true
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer25() throws Throwable  {
      // No Comments were added
      englishStemmer _englishStemmer = new englishStemmer("sies");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer26() throws Throwable  {
      // Create an instance of the EnglishStemmer class with the "sses" parameter
      englishStemmer _englishStemmer = new englishStemmer("sses");
      
      // Call the stem() method and store its return value in a variable
      boolean stem = _englishStemmer.stem();
      
      // Assert that the stem() method returned true
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer27() throws Throwable  {
      // Create an English stemmer object and set it to ignore words that end in "o" or "ee".
      englishStemmer _englishStemmer = new englishStemmer("oEe");
      
      // Check whether the stemmer can successfully stem a word.
      boolean stem = _englishStemmer.stem();
      
      // Verify that the stem method returns true to indicate successful stemming.
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer28() throws Throwable  {
      // Create a new instance of the EnglishStemmer class with the word "ty_ing"
      englishStemmer _englishStemmer = new englishStemmer("ty_ing");
      
      // Call the stem method on the EnglishStemmer object to see if it can stem the word
      boolean stem = _englishStemmer.stem();
      
      // Check that the stem method returns true, indicating that the word was successfully stemmed
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer29() throws Throwable  {
      // No Comments were added
      englishStemmer _englishStemmer = new englishStemmer("1succeed");
      _englishStemmer.stem();
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer30() throws Throwable  {
      // Given a word "hungry"
      String inputWord = "hungry";
      
      // When the word is passed to the English stemmer
      englishStemmer _englishStemmer = new englishStemmer(inputWord);
      boolean stem = _englishStemmer.stem();
      
      // Then the stemmer should return true, indicating that the word was successfully stemmed
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer31() throws Throwable  {
      // Test the English stemmer with a specific input
      String word = "running";
      englishStemmer _englishStemmer = new englishStemmer(word);
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer32() throws Throwable  {
      // Given a word "ar#ly"
      String inputWord = "ar#ly";
      
      // When we stem the word
      englishStemmer _englishStemmer = new englishStemmer(inputWord);
      boolean stem = _englishStemmer.stem();
      
      // Then the stemmed word should be "ar"
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer33() throws Throwable  {
      // Arrange
      englishStemmer englishStemmer = new englishStemmer("a(tional");
      
      // Act
      boolean stem = englishStemmer.stem();
      
      // Assert
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer34() throws Throwable  {
      // rollbacked to evosuite
      englishStemmer _englishStemmer = new englishStemmer(";i: e4qf]8f+S8|L3+l");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer35() throws Throwable  {
      // Set up the English stemmer with a specific word
      englishStemmer _englishStemmer = new englishStemmer("");
      
      // Set the current flag to true
      _englishStemmer.setCurrent("true");
      
      // Call the stem() method and assert that it returns true
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer36() throws Throwable  {
      // Given an English stemmer object initialized with the word "gener"
      englishStemmer _englishStemmer = new englishStemmer("gener");
      
      // When the "stem()" method is called on the stemmer object
      boolean stem = _englishStemmer.stem();
      
      // Then the stemmer should return true, indicating that the word has been successfully stemmed
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer37() throws Throwable  {
      // rollbacked to evosuite
      englishStemmer _englishStemmer = new englishStemmer("eay");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer38() throws Throwable  {
      // Given a word to be stemmed
      String inputWord = "ying";
      
      // When the word is passed through an English stemmer
      englishStemmer _englishStemmer = new englishStemmer(inputWord);
      boolean stem = _englishStemmer.stem();
      
      // Then the output of the stemmer should be true
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer39() throws Throwable  {
      // Given a string "1kis"
      String input = "1kis";
      
      // When the englishStemmer is applied to the string
      englishStemmer _englishStemmer = new englishStemmer(input);
      boolean stem = _englishStemmer.stem();
      
      // Then the stem method returns true
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer40() throws Throwable  {
      // Create an instance of the English Stemmer class with a specific parameter
      englishStemmer stemmer = new englishStemmer("'s'");
      // Call the stem method on the created object to perform the actual stemming operation
      boolean stemmed = stemmer.stem();
      // Assert that the stem method returned true, indicating that the stemming operation was successful
      assertTrue(stemmed);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningTrue() throws Throwable  {
      // Given
      englishStemmer stemmer1 = new englishStemmer("true");
      
      // When
      boolean equals = stemmer1.equals(stemmer1);
      
      // Then
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashCode() throws Throwable  {
      // No Comments were added
      englishStemmer _englishStemmer = new englishStemmer("erring");
      _englishStemmer.hashCode();
  }
}
