/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 20 12:13:29 GMT 2024
 */

package org.tartarus.snowball.ext;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.tartarus.snowball.ext.englishStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class englishStemmer_Original_ESTest extends englishStemmer_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningFalse() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("true");
      Object arg0 = new Object();
      boolean equals = _englishStemmer.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testStemReturningTrue() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("singly");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer0() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("only");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer1() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("early");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer2() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("ugly");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer3() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("gently");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer4() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("");
      _englishStemmer.setCurrent("idly");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer5() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("tying");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer6() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("aliti");
      _englishStemmer.setCurrent("lying");
      _englishStemmer.stem();
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer7() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("dying");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer8() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("skies");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer9() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("");
      _englishStemmer.setCurrent("skis");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer10() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("bias");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer11() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("succeed");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer12() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("");
      _englishStemmer.setCurrent("idl");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer13() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("ization");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer14() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("faulty slice ope@aUion");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer15() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("faulty sl9ce operasion");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer16() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("alize");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer17() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("ugli");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer18() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("N6*(uo15{2Bjg`9");
      _englishStemmer.setCurrent("faulty slice operation");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer19() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("hying");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer20() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("erring");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer21() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("l9Mweed");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer22() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("faulty slice ope@aUion");
      _englishStemmer.setCurrent("b>Fias");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer23() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("ski&ies");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer24() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("ousness");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer25() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("sies");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer26() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("sses");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer27() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("oEe");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer28() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("ty_ing");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer29() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("h;trowe");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer30() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("euring");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer31() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("ar#ly");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer32() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("a(tional");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer33() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer(";i: e4qf]8f+S8|L3+l");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer34() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("");
      _englishStemmer.setCurrent("true");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer35() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("gener");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer36() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("eay");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer37() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("ying");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer38() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("1kis");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesEnglishStemmer39() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("'s'");
      boolean stem = _englishStemmer.stem();
      assertTrue(stem);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningTrue() throws Throwable  {
      englishStemmer arg0 = new englishStemmer("true");
      boolean equals = arg0.equals(arg0);
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashCode() throws Throwable  {
      englishStemmer _englishStemmer = new englishStemmer("erring");
      _englishStemmer.hashCode();
  }
}
