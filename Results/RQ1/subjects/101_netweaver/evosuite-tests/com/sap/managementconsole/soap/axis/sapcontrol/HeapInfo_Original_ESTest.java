/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 20 20:09:50 GMT 2024
 */

package com.sap.managementconsole.soap.axis.sapcontrol;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import com.sap.managementconsole.soap.axis.sapcontrol.HeapInfo;
import com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR;
import javax.xml.namespace.QName;
import org.apache.axis.description.TypeDesc;
import org.apache.axis.encoding.Deserializer;
import org.apache.axis.encoding.Serializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HeapInfo_Original_ESTest extends HeapInfo_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTypeReturningEmptyString() throws Throwable  {
      STATECOLOR arg7 = STATECOLOR.value2;
      HeapInfo heapInfo = new HeapInfo("", "", 1851L, 60000L, 1L, 0L, 0L, arg7);
      heapInfo.getType();
      assertEquals(1L, heapInfo.getMaxUsedSize());
      assertEquals(0L, heapInfo.getInitialSize());
      assertEquals(60000L, heapInfo.getCommitSize());
      assertEquals(0L, heapInfo.getMaxSize());
      assertEquals(1851L, heapInfo.getSize());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSizeReturningPositive() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      heapInfo.setSize(869L);
      long size = heapInfo.getSize();
      assertEquals(869L, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetProcessnameReturningNonEmptyString() throws Throwable  {
      STATECOLOR arg7 = new STATECOLOR("t]%");
      HeapInfo heapInfo = new HeapInfo("t]%", "HeapInfo", 1020L, 0L, 0L, 847L, 0L, arg7);
      String processname = heapInfo.getProcessname();
      assertEquals(0L, heapInfo.getMaxSize());
      assertEquals(1020L, heapInfo.getSize());
      assertEquals(0L, heapInfo.getMaxUsedSize());
      assertEquals(0L, heapInfo.getCommitSize());
      assertEquals("HeapInfo", heapInfo.getType());
      assertEquals(847L, heapInfo.getInitialSize());
      assertEquals("t]%", processname);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxUsedSizeReturningNegative() throws Throwable  {
      STATECOLOR arg7 = new STATECOLOR("HeapInfo");
      HeapInfo heapInfo = new HeapInfo("", "", 0L, 0L, (-1188L), (-1188L), 0L, arg7);
      long maxUsedSize = heapInfo.getMaxUsedSize();
      assertEquals(0L, heapInfo.getMaxSize());
      assertEquals((-1188L), heapInfo.getInitialSize());
      assertEquals(0L, heapInfo.getCommitSize());
      assertEquals((-1188L), maxUsedSize);
      assertEquals(0L, heapInfo.getSize());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxSizeReturningNegative() throws Throwable  {
      STATECOLOR arg7 = STATECOLOR.value1;
      HeapInfo heapInfo = new HeapInfo("Xzhmt301g", "Xzhmt301g", 0L, (-541L), 0L, 2006L, 0L, arg7);
      heapInfo.setMaxSize((-437L));
      long maxSize = heapInfo.getMaxSize();
      assertEquals((-437L), maxSize);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCommitSizeReturningPositive() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      heapInfo.setCommitSize(1486L);
      long commitSize = heapInfo.getCommitSize();
      assertEquals(1486L, commitSize);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesHeapInfoTaking8ArgumentsAndCallsHashCode() throws Throwable  {
      STATECOLOR arg7 = STATECOLOR.value4;
      HeapInfo heapInfo = new HeapInfo("SAPControl-RED", "SAPControl-YELLOW", (-4732L), (-4732L), 943L, (-89L), 943L, arg7);
      heapInfo.hashCode();
      assertEquals((-4732L), heapInfo.getCommitSize());
      assertEquals("SAPControl-YELLOW", heapInfo.getType());
      assertEquals(943L, heapInfo.getMaxUsedSize());
      assertEquals(943L, heapInfo.getMaxSize());
      assertEquals("SAPControl-RED", heapInfo.getProcessname());
      assertEquals((-89L), heapInfo.getInitialSize());
      assertEquals((-4732L), heapInfo.getSize());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesHeapInfoTakingNoArgumentsAndCallsHashCode() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      heapInfo.hashCode();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetMaxSize() throws Throwable  {
      HeapInfo arg0 = new HeapInfo();
      HeapInfo heapInfo = new HeapInfo();
      heapInfo.setMaxSize(584L);
      boolean equals = heapInfo.equals(arg0);
      assertEquals(584L, heapInfo.getMaxSize());
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetInitialSize() throws Throwable  {
      HeapInfo arg0 = new HeapInfo();
      HeapInfo heapInfo = new HeapInfo();
      heapInfo.setInitialSize((-1L));
      boolean equals = heapInfo.equals(arg0);
      assertEquals((-1L), heapInfo.getInitialSize());
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetMaxUsedSize() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      heapInfo.setMaxUsedSize(883L);
      HeapInfo arg0 = new HeapInfo();
      boolean equals = heapInfo.equals(arg0);
      assertEquals(883L, heapInfo.getMaxUsedSize());
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetCommitSize() throws Throwable  {
      HeapInfo arg0 = new HeapInfo();
      arg0.setCommitSize(1033L);
      HeapInfo heapInfo = new HeapInfo();
      boolean equals = heapInfo.equals(arg0);
      assertEquals(1033L, arg0.getCommitSize());
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesHeapInfoTaking8ArgumentsAndCallsEquals0() throws Throwable  {
      STATECOLOR arg7 = STATECOLOR.value4;
      HeapInfo heapInfo = new HeapInfo("SAPControl-RED", "SAPControl-YELLOW", (-4732L), (-4732L), 943L, (-89L), 943L, arg7);
      HeapInfo arg0 = new HeapInfo("SAPControl-RED", "SAPControl-YELLOW", 60000L, (-1L), (-1L), (-766L), (-835L), arg7);
      boolean equals = heapInfo.equals(arg0);
      assertEquals("SAPControl-RED", arg0.getProcessname());
      assertEquals((-766L), arg0.getInitialSize());
      assertEquals((-835L), arg0.getMaxSize());
      assertEquals((-1L), arg0.getCommitSize());
      assertEquals((-4732L), heapInfo.getCommitSize());
      assertEquals((-1L), arg0.getMaxUsedSize());
      assertFalse(equals);
      assertEquals(60000L, arg0.getSize());
      assertEquals("SAPControl-YELLOW", arg0.getType());
      assertEquals(943L, heapInfo.getMaxUsedSize());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesHeapInfoTaking8ArgumentsAndCallsEquals1() throws Throwable  {
      STATECOLOR arg7 = STATECOLOR.value3;
      HeapInfo heapInfo = new HeapInfo("o@PControl.YELLOW", ".xml", 2269L, (-607L), 2269L, (-4732L), (-89L), arg7);
      HeapInfo arg0 = new HeapInfo("o@PControl.YELLOW", "SnA^", 2269L, (-607L), 2269L, (-1L), (-4732L), arg7);
      boolean equals = heapInfo.equals(arg0);
      assertEquals((-1L), arg0.getInitialSize());
      assertFalse(equals);
      assertEquals("o@PControl.YELLOW", arg0.getProcessname());
      assertEquals((-4732L), arg0.getMaxSize());
      assertEquals(2269L, arg0.getMaxUsedSize());
      assertEquals(2269L, arg0.getSize());
      assertEquals((-607L), arg0.getCommitSize());
      assertEquals("SnA^", arg0.getType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndCreatesHeapInfoTaking8ArgumentsAndSetProcessname() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      heapInfo.setProcessname("z.fE?i>6g? ");
      HeapInfo arg0 = new HeapInfo("z.fE?i>6g? ", "z.fE?i>6g? ", 0L, 0L, 0L, 0L, 0L, (STATECOLOR) null);
      boolean equals = heapInfo.equals(arg0);
      assertFalse(equals);
      assertFalse(arg0.equals((Object)heapInfo));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetProcessname() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      HeapInfo arg0 = new HeapInfo();
      assertTrue(arg0.equals((Object)heapInfo));
      
      arg0.setProcessname("N}!lG-R[@");
      boolean equals = heapInfo.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndCreatesHeapInfoTaking8ArgumentsAndCreatesHeapInfoTakingNoArguments() throws Throwable  {
      HeapInfo arg0 = new HeapInfo();
      STATECOLOR arg7 = STATECOLOR.value3;
      HeapInfo heapInfo = new HeapInfo("o@PControl.YELLOW", ".xml", 2269L, (-607L), 2269L, (-4732L), (-89L), arg7);
      boolean equals = heapInfo.equals(arg0);
      assertEquals((-89L), heapInfo.getMaxSize());
      assertEquals(2269L, heapInfo.getMaxUsedSize());
      assertFalse(equals);
      assertEquals("o@PControl.YELLOW", heapInfo.getProcessname());
      assertEquals(".xml", heapInfo.getType());
      assertEquals((-607L), heapInfo.getCommitSize());
      assertEquals((-4732L), heapInfo.getInitialSize());
      assertEquals(2269L, heapInfo.getSize());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesHeapInfoTakingNoArgumentsAndCallsEquals0() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      HeapInfo arg0 = new HeapInfo();
      boolean equals = heapInfo.equals(arg0);
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsWithNonNull() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      Object arg0 = new Object();
      boolean equals = heapInfo.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesHeapInfoTakingNoArgumentsAndCallsEquals1() throws Throwable  {
      HeapInfo arg0 = new HeapInfo();
      boolean equals = arg0.equals(arg0);
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxSizeReturningPositive() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      heapInfo.setMaxSize(945L);
      long maxSize = heapInfo.getMaxSize();
      assertEquals(945L, maxSize);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetInitialSizeReturningPositive() throws Throwable  {
      STATECOLOR arg7 = STATECOLOR.value2;
      HeapInfo heapInfo = new HeapInfo("", "", 1851L, 60000L, 1L, 0L, 0L, arg7);
      assertEquals(0L, heapInfo.getInitialSize());
      
      heapInfo.setInitialSize(1851L);
      long initialSize = heapInfo.getInitialSize();
      assertEquals(1851L, initialSize);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCommitSizeReturningZero() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      long commitSize = heapInfo.getCommitSize();
      assertEquals(0L, commitSize);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxUsedSizeReturningZero() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      long maxUsedSize = heapInfo.getMaxUsedSize();
      assertEquals(0L, maxUsedSize);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDispstatusReturningNull() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      STATECOLOR dispstatus = heapInfo.getDispstatus();
      assertNull(dispstatus);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTypeReturningNull() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      String type = heapInfo.getType();
      assertNull(type);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSizeReturningNegative() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      heapInfo.setSize((-4406L));
      long size = heapInfo.getSize();
      assertEquals((-4406L), size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetProcessnameReturningEmptyString() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      heapInfo.setProcessname("");
      String processname = heapInfo.getProcessname();
      assertEquals("", processname);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetProcessnameReturningNull() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      String processname = heapInfo.getProcessname();
      assertNull(processname);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetInitialSizeReturningNegative() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      heapInfo.setInitialSize((-1L));
      long initialSize = heapInfo.getInitialSize();
      assertEquals((-1L), initialSize);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCommitSizeReturningNegative() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      heapInfo.setCommitSize((-802L));
      long commitSize = heapInfo.getCommitSize();
      assertEquals((-802L), commitSize);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDeserializer() throws Throwable  {
      Class<Object> arg1 = Object.class;
      QName arg2 = new QName("z.fE?i>6g? ", "z.fE?i>6g? ");
      Deserializer deserializer = HeapInfo.getDeserializer("%x?GLm,d", arg1, arg2);
      assertFalse(deserializer.componentsReady());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxUsedSizeReturningPositive() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      heapInfo.setMaxUsedSize(1048576L);
      long maxUsedSize = heapInfo.getMaxUsedSize();
      assertEquals(1048576L, maxUsedSize);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxSizeReturningZero() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      long maxSize = heapInfo.getMaxSize();
      assertEquals(0L, maxSize);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetType() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      heapInfo.setType("S");
      String type = heapInfo.getType();
      assertEquals("S", type);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSerializer() throws Throwable  {
      Class<Object> arg1 = Object.class;
      QName arg2 = QName.valueOf("_Kdg&");
      Serializer serializer = HeapInfo.getSerializer("_Kdg&", arg1, arg2);
      assertEquals("Axis SAX Mechanism", serializer.getMechanismType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDispstatus() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      STATECOLOR arg0 = STATECOLOR.value2;
      heapInfo.setDispstatus(arg0);
      STATECOLOR dispstatus = heapInfo.getDispstatus();
      assertEquals("SAPControl-GREEN", dispstatus.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetInitialSizeReturningZero() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      long initialSize = heapInfo.getInitialSize();
      assertEquals(0L, initialSize);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSizeReturningZero() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      long size = heapInfo.getSize();
      assertEquals(0L, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTypeDesc() throws Throwable  {
      TypeDesc typeDesc = HeapInfo.getTypeDesc();
      assertFalse(typeDesc.hasAttributes());
  }
}
