/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 20 20:09:49 GMT 2024
 */

package com.sap.managementconsole.soap.axis.sapcontrol;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import com.sap.managementconsole.soap.axis.sapcontrol.HeapInfo;
import com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR;
import javax.xml.namespace.QName;
import org.apache.axis.description.TypeDesc;
import org.apache.axis.encoding.Deserializer;
import org.apache.axis.encoding.Serializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HeapInfo_ESTest extends HeapInfo_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSizeReturningPositive() throws Throwable  {
      // Given a new HeapInfo object
      HeapInfo heapInfo = new HeapInfo();
      
      // When setting the size to 869
      heapInfo.setSize(869L);
      
      // Then the size field should be set to 869
      long expectedSize = 869L;
      long actualSize = heapInfo.getSize();
      assertEquals(expectedSize, actualSize);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSizeReturningNegative() throws Throwable  {
      // Given a HeapInfo object with a negative size value
      long negativeSize = -4406L;
      HeapInfo heapInfo = new HeapInfo();
      heapInfo.setSize(negativeSize);
      
      // When the getSize method is called
      long actualSize = heapInfo.getSize();
      
      // Then the returned size value should be the same as the set value
      assertEquals(negativeSize, actualSize);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetProcessnameReturningNonEmptyString() throws Throwable  {
      // No Comments were added
      STATECOLOR arg7 = new STATECOLOR("t]%");
      HeapInfo heapInfo = new HeapInfo("t]%", "HeapInfo", 1020L, 0L, 0L, 847L, 0L, arg7);
      String processname = heapInfo.getProcessname();
      assertEquals(1020L, heapInfo.getSize());
      assertEquals(847L, heapInfo.getInitialSize());
      assertEquals("t]%", processname);
      assertEquals("HeapInfo", heapInfo.getType());
      assertEquals(0L, heapInfo.getCommitSize());
      assertEquals(0L, heapInfo.getMaxSize());
      assertEquals(0L, heapInfo.getMaxUsedSize());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxUsedSizeReturningPositive() throws Throwable  {
      // Given: A HeapInfo object with a maximum used size of 1024 bytes
      HeapInfo heapInfo = new HeapInfo();
      heapInfo.setMaxUsedSize(1024L);
      
      // When: The max used size is retrieved from the HeapInfo object
      long maxUsedSize = heapInfo.getMaxUsedSize();
      
      // Then: The maximum used size should be 1024 bytes
      assertEquals(1024L, maxUsedSize);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxUsedSizeReturningNegative() throws Throwable  {
      // No Comments were added
      STATECOLOR arg7 = new STATECOLOR("HeapInfo");
      HeapInfo heapInfo = new HeapInfo("", "", 0L, 0L, (-1188L), (-1188L), 0L, arg7);
      long maxUsedSize = heapInfo.getMaxUsedSize();
      assertEquals(0L, heapInfo.getCommitSize());
      assertEquals(0L, heapInfo.getMaxSize());
      assertEquals(0L, heapInfo.getSize());
      assertEquals((-1188L), heapInfo.getInitialSize());
      assertEquals((-1188L), maxUsedSize);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxSizeReturningNegative() throws Throwable  {
      // Given a HeapInfo object with a specific set of attributes
      // When the max size is set to a new value
      // Then the getMaxSize method should return the new value
      
      HeapInfo heapInfo = new HeapInfo("Xzhmt301g", "Xzhmt301g", 0L, (-541L), 0L, 2006L, 0L, STATECOLOR.value1);
      heapInfo.setMaxSize((-437L));
      long maxSize = heapInfo.getMaxSize();
      assertEquals((-437L), maxSize);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetInitialSizeReturningNegative() throws Throwable  {
      // Given: A HeapInfo object is created with an initial size of -1L
      HeapInfo heapInfo = new HeapInfo();
      heapInfo.setInitialSize(-1L);
      
      // When: The getInitialSize method is called on the HeapInfo object
      long initialSize = heapInfo.getInitialSize();
      
      // Then: The returned value should be -1L, which indicates that the initial size of the heap was set to a negative value
      assertEquals(-1L, initialSize);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDispstatus() throws Throwable  {
      // Test that the dispstatus property is set correctly when using the setDispstatus method
      HeapInfo heapInfo = new HeapInfo();
      STATECOLOR arg0 = STATECOLOR.value2;
      heapInfo.setDispstatus(arg0);
      STATECOLOR dispstatus = heapInfo.getDispstatus();
      assertEquals("SAPControl-GREEN", dispstatus.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCommitSizeReturningNegative() throws Throwable  {
      // Given a HeapInfo instance with a negative commit size of -802 bytes
      HeapInfo heapInfo = new HeapInfo();
      heapInfo.setCommitSize((-802L));
      
      // When the getCommitSize method is called on the HeapInfo instance
      long commitSize = heapInfo.getCommitSize();
      
      // Then the return value should be -802 bytes, which is the negative commit size set earlier
      assertEquals((-802L), commitSize);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCommitSizeReturningZero() throws Throwable  {
      // Tests that the commit size of a newly created heap is 0
      HeapInfo heapInfo = new HeapInfo();
      long expectedCommitSize = 0;
      long actualCommitSize = heapInfo.getCommitSize();
      assertEquals(expectedCommitSize, actualCommitSize);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxSizeReturningZero() throws Throwable  {
      // Given: A new instance of the HeapInfo class has been created
      HeapInfo heapInfo = new HeapInfo();
      
      // When: The getMaxSize method is called on the heapInfo object
      long maxSize = heapInfo.getMaxSize();
      
      // Then: The maximum size of the heap should be 0 (i.e., no objects have been allocated)
      assertEquals(0L, maxSize);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDispstatusReturningNull() throws Throwable  {
      // Given: A HeapInfo object is created and its dispstatus field is not null
      HeapInfo heapInfo = new HeapInfo();
      STATECOLOR dispstatus = heapInfo.getDispstatus();
      
      // When: The dispstatus field of the HeapInfo object is checked for nullness
      assertNull(dispstatus);
      
      // Then: The dispstatus field should be null, indicating that no display status has been set
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetInitialSizeReturningZero() throws Throwable  {
      // Given: A new HeapInfo instance has been created
      HeapInfo heapInfo = new HeapInfo();
      
      // When: The initial size of the heap is retrieved
      long initialSize = heapInfo.getInitialSize();
      
      // Then: The initial size should be 0L
      assertEquals(0L, initialSize);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTypeReturningNull() throws Throwable  {
      // Given: A new instance of HeapInfo class is created
      HeapInfo heapInfo = new HeapInfo();
      
      // When: The getType() method is called on the new instance
      String type = heapInfo.getType();
      
      // Then: The returned value should be null
      assertNull(type);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetProcessnameReturningNull() throws Throwable  {
      // rollbacked to evosuite
      HeapInfo heapInfo = new HeapInfo();
      String processname = heapInfo.getProcessname();
      assertNull(processname);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxUsedSizeReturningZero() throws Throwable  {
      // Given: A HeapInfo object is created and its getMaxUsedSize() method is called
      HeapInfo heapInfo = new HeapInfo();
      long maxUsedSize = heapInfo.getMaxUsedSize();
      
      // When: The value returned by the getMaxUsedSize() method is compared to 0L
      assertEquals(0L, maxUsedSize);
      
      // Then: The test asserts that the value of maxUsedSize is equal to 0L, which indicates that the heap has not yet been used.
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesHeapInfoTaking8ArgumentsAndCallsHashCode() throws Throwable  {
      // Create a new HeapInfo object with some sample values
      HeapInfo heapInfo = new HeapInfo("SAPControl-RED", "SAPControl-YELLOW", (-4732L), (-4732L), 943L, (-89L), 943L, STATECOLOR.value4);
      
      // Call the hashCode() method on the HeapInfo object to ensure it is well-implemented
      heapInfo.hashCode();
      
      // Assert that the initial size of the heap is equal to -89
      assertEquals((-89L), heapInfo.getInitialSize());
      
      // Assert that the type of the heap is "SAPControl-YELLOW"
      assertEquals("SAPControl-YELLOW", heapInfo.getType());
      
      // Assert that the maximum size of the heap is 943
      assertEquals(943L, heapInfo.getMaxSize());
      
      // Assert that the committed size of the heap is equal to -4732
      assertEquals((-4732L), heapInfo.getCommitSize());
      
      // Assert that the process name of the heap is "SAPControl-RED"
      assertEquals("SAPControl-RED", heapInfo.getProcessname());
      
      // Assert that the maximum used size of the heap is equal to 943
      assertEquals(943L, heapInfo.getMaxUsedSize());
      
      // Assert that the current size of the heap is equal to -4732
      assertEquals((-4732L), heapInfo.getSize());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesHeapInfoTakingNoArgumentsAndCallsHashCode() throws Throwable  {
      // rollbacked to evosuite
      HeapInfo heapInfo = new HeapInfo();
      heapInfo.hashCode();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetMaxSize() throws Throwable  {
      // Given a HeapInfo object with a maximum size of 584 bytes
      HeapInfo arg0 = new HeapInfo();
      arg0.setMaxSize(584L);
      
      // When we compare the HeapInfo object to another object with a different maximum size
      HeapInfo other = new HeapInfo();
      other.setMaxSize(1024L);
      boolean equals = arg0.equals(other);
      
      // Then we expect that they are not equal, as the maximum sizes are different
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetInitialSize() throws Throwable  {
      // Given: A new HeapInfo object with initial size -1L
      HeapInfo heapInfo = new HeapInfo();
      heapInfo.setInitialSize((-1L));
      
      // When: Comparing the HeapInfo object to another HeapInfo object with the same initial size
      HeapInfo arg0 = new HeapInfo();
      arg0.setInitialSize((-1L));
      boolean equals = heapInfo.equals(arg0);
      
      // Then: The two objects should be equal and have the same initial size of -1L
      assertEquals((-1L), heapInfo.getInitialSize());
      assertEquals((-1L), arg0.getInitialSize());
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetCommitSize() throws Throwable  {
      // Given an instance of HeapInfo with a commit size of 1033 bytes
      HeapInfo arg0 = new HeapInfo();
      arg0.setCommitSize(1033L);
      
      // When we create another instance of HeapInfo with the same commit size as arg0
      HeapInfo heapInfo = new HeapInfo();
      heapInfo.setCommitSize(arg0.getCommitSize());
      
      // Then both instances should be equal and have the same commit size
      assertEquals(heapInfo, arg0);
      assertTrue(heapInfo.equals(arg0));
      assertEquals(1033L, heapInfo.getCommitSize());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesHeapInfoTaking8ArgumentsAndCallsEquals0() throws Throwable  {
      // No Comments were added
      STATECOLOR arg7 = STATECOLOR.value4;
      HeapInfo heapInfo = new HeapInfo("SAPControl-RED", "SAPControl-YELLOW", (-4732L), (-4732L), 943L, (-89L), 943L, arg7);
      HeapInfo arg0 = new HeapInfo("SAPControl-RED", "SAPControl-YELLOW", 60000L, (-1L), (-1L), (-766L), (-835L), arg7);
      boolean equals = heapInfo.equals(arg0);
      assertEquals((-4732L), heapInfo.getCommitSize());
      assertEquals(60000L, arg0.getSize());
      assertEquals((-766L), arg0.getInitialSize());
      assertEquals((-835L), arg0.getMaxSize());
      assertEquals((-1L), arg0.getMaxUsedSize());
      assertEquals(943L, heapInfo.getMaxUsedSize());
      assertFalse(equals);
      assertEquals("SAPControl-RED", arg0.getProcessname());
      assertEquals((-1L), arg0.getCommitSize());
      assertEquals("SAPControl-YELLOW", arg0.getType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesHeapInfoTaking8ArgumentsAndCallsEquals1() throws Throwable  {
      // Given two instances of the same HeapInfo class with different values for some fields
      STATECOLOR arg7 = STATECOLOR.value3;
      HeapInfo heapInfo1 = new HeapInfo("o@PControl.YELLOW", ".xml", 2269L, (-607L), 2269L, (-4732L), (-89L), arg7);
      HeapInfo heapInfo2 = new HeapInfo("o@PControl.YELLOW", "SnA^", 2269L, (-607L), 2269L, (-1L), (-4732L), arg7);
      
      // When we call the equals method on these instances with each other as arguments
      boolean equals = heapInfo1.equals(heapInfo2);
      
      // Then the result should be false, since the two instances have different values for some fields
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndCreatesHeapInfoTaking8ArgumentsAndSetProcessname() throws Throwable  {
      // Test that two objects with different process names are not equal
      HeapInfo heapInfo = new HeapInfo();
      heapInfo.setProcessname("z.fE?i>6g? ");
      HeapInfo arg0 = new HeapInfo("z.fE?i>6g? ", "z.fE?i>6g? ", 0L, 0L, 0L, 0L, 0L, (STATECOLOR) null);
      
      // Assert that the objects are not equal
      assertFalse(heapInfo.equals(arg0));
      
      // Assert that the objects are not equal when cast to Objects
      assertFalse(arg0.equals((Object)heapInfo));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetProcessname() throws Throwable  {
      // No Comments were added
      HeapInfo heapInfo = new HeapInfo();
      HeapInfo arg0 = new HeapInfo();
      assertTrue(arg0.equals((Object)heapInfo));
      
      arg0.setProcessname("N}!lG-R[@");
      boolean equals = heapInfo.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndCreatesHeapInfoTaking8ArgumentsAndCreatesHeapInfoTakingNoArguments() throws Throwable  {
      // Test that equals method returns false for different HeapInfo objects
      HeapInfo arg0 = new HeapInfo();
      STATECOLOR arg7 = STATECOLOR.value3;
      HeapInfo heapInfo = new HeapInfo("o@PControl.YELLOW", ".xml", 2269L, (-607L), 2269L, (-4732L), (-89L), arg7);
      boolean equals = heapInfo.equals(arg0);
      assertFalse(equals); // Assert that the objects are not equal
      
      // Test that getMaxUsedSize method returns expected value
      assertEquals(2269L, heapInfo.getMaxUsedSize()); // Assert that the maximum used size is as expected
      
      // Test that getMaxSize method returns expected value
      assertEquals((-89L), heapInfo.getMaxSize()); // Assert that the maximum size is as expected
      
      // Test that getProcessname method returns expected value
      assertEquals("o@PControl.YELLOW", heapInfo.getProcessname()); // Assert that the process name is as expected
      
      // Test that getType method returns expected value
      assertEquals(".xml", heapInfo.getType()); // Assert that the type is as expected
      
      // Test that getCommitSize method returns expected value
      assertEquals((-607L), heapInfo.getCommitSize()); // Assert that the commit size is as expected
      
      // Test that getInitialSize method returns expected value
      assertEquals((-4732L), heapInfo.getInitialSize()); // Assert that the initial size is as expected
      
      // Test that getSize method returns expected value
      assertEquals(2269L, heapInfo.getSize()); // Assert that the size is as expected
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesHeapInfoTakingNoArgumentsAndCallsEquals0() throws Throwable  {
      // Given a HeapInfo object 'heapInfo1'
      HeapInfo heapInfo1 = new HeapInfo();
      
      // When we compare it to itself using the equals method
      boolean isEqualToSelf = heapInfo1.equals(heapInfo1);
      
      // Then the result should be true, as the object is equal to itself
      assertTrue(isEqualToSelf);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsWithNull() throws Throwable  {
      // This test verifies that the equals method of HeapInfo returns false when compared to null
      HeapInfo heapInfo = new HeapInfo();
      boolean equals = heapInfo.equals((Object) null);
      assertFalse(equals);
      
      // The equals method is expected to return false because the HeapInfo object is not equal to null
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxSizeReturningPositive() throws Throwable  {
      // Given: A HeapInfo object with a maximum size of 9000L
      HeapInfo heapInfo = new HeapInfo();
      heapInfo.setMaxSize(9000L);
      
      // When: The maximum size is retrieved from the HeapInfo object
      long maxSize = heapInfo.getMaxSize();
      
      // Then: The retrieved value should be equal to 9000L
      assertEquals(9000L, maxSize);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetProcessnameReturningEmptyString() throws Throwable  {
      // Given a HeapInfo object with an empty process name
      HeapInfo heapInfo = new HeapInfo();
      heapInfo.setProcessname("");
      
      // When we call the getProcessname method
      String processname = heapInfo.getProcessname();
      
      // Then we expect the returned value to be an empty string
      assertEquals("", processname);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetInitialSizeReturningPositive() throws Throwable  {
      // Creates a new HeapInfo object and sets the initial size to 1024 bytes.
      HeapInfo heapInfo = new HeapInfo();
      heapInfo.setInitialSize(1024L);
      
      // Retrieves the initial size of the HeapInfo object.
      long initialSize = heapInfo.getInitialSize();
      
      // Asserts that the initial size is 1024 bytes.
      assertEquals(1024L, initialSize);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCommitSizeReturningPositive() throws Throwable  {
      // Given a HeapInfo object with a commit size of 1000000 bytes
      HeapInfo heapInfo = new HeapInfo();
      heapInfo.setCommitSize(1000000L);
      
      // When the getCommitSize method is called on the HeapInfo object
      long commitSize = heapInfo.getCommitSize();
      
      // Then the committed size should be 1000000 bytes
      assertEquals(1000000L, commitSize);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDeserializer() throws Throwable  {
      // Arrange
      Class<Object> arg1 = Object.class;
      QName arg2 = new QName("z.fE?i>6g? ", "z.fE?i>6g? ");
      
      // Act
      Deserializer deserializer = HeapInfo.getDeserializer("%x?GLm,d", arg1, arg2);
      
      // Assert
      assertEquals("Axis SAX Mechanism", deserializer.getMechanismType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetMaxUsedSize() throws Throwable  {
      // No Comments were added
      HeapInfo heapInfo = new HeapInfo();
      heapInfo.setMaxUsedSize(900L);
      HeapInfo arg0 = new HeapInfo();
      boolean equals = heapInfo.equals(arg0);
      assertEquals(900L, heapInfo.getMaxUsedSize());
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetType() throws Throwable  {
      // Given: A HeapInfo object is created and its type is set to "Micro-segmented"
      HeapInfo heapInfo = new HeapInfo();
      heapInfo.setType("Micro-segmented");
      
      // When: The getType method is called on the HeapInfo object
      String type = heapInfo.getType();
      
      // Then: The returned value should be "Micro-segmented"
      assertEquals("Micro-segmented", type);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSerializer() throws Throwable  {
      // rollbacked to evosuite
      Class<Object> arg1 = Object.class;
      QName arg2 = QName.valueOf("_Kdg&");
      Serializer serializer = HeapInfo.getSerializer("_Kdg&", arg1, arg2);
      assertEquals("Axis SAX Mechanism", serializer.getMechanismType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesHeapInfoTakingNoArgumentsAndCallsEquals1() throws Throwable  {
      // Given: Two HeapInfo objects, "heapInfo" and "arg0", with the same data
      HeapInfo heapInfo = new HeapInfo();
      HeapInfo arg0 = new HeapInfo();
      
      // When: We compare these two objects using the "equals" method
      boolean equals = heapInfo.equals(arg0);
      
      // Then: The returned value should be true, indicating that these two objects are equal
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSizeReturningZero() throws Throwable  {
      // Given: A HeapInfo object is created and its getSize() method is called to retrieve the size of the heap
      HeapInfo heapInfo = new HeapInfo();
      long size = heapInfo.getSize();
      
      // When: The size of the heap is retrieved
      
      // Then: The size should be 0, as the heap has just been created and does not contain any objects yet
      assertEquals(0L, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTypeDesc() throws Throwable  {
      // No Comments were added
      TypeDesc typeDesc = HeapInfo.getTypeDesc();
      assertFalse(typeDesc.hasAttributes());
  }
}
