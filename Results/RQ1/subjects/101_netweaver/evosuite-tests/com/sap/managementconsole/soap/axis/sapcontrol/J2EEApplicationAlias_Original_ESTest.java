/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 20 20:19:25 GMT 2024
 */

package com.sap.managementconsole.soap.axis.sapcontrol;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import com.sap.managementconsole.soap.axis.sapcontrol.J2EEApplicationAlias;
import javax.xml.namespace.QName;
import org.apache.axis.description.TypeDesc;
import org.apache.axis.encoding.Deserializer;
import org.apache.axis.encoding.Serializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class J2EEApplicationAlias_Original_ESTest extends J2EEApplicationAlias_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalRequestsReturningZero() throws Throwable  {
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias("_3Ihbne", "_3Ihbne", 0, "_3Ihbne", ".,n[fA-kBq0tg");
      int totalRequests = j2EEApplicationAlias.getTotalRequests();
      assertEquals("_3Ihbne", j2EEApplicationAlias.getAppActive());
      assertEquals("_3Ihbne", j2EEApplicationAlias.getAppName());
      assertEquals(0, totalRequests);
      assertEquals("_3Ihbne", j2EEApplicationAlias.getAlias());
      assertEquals(".,n[fA-kBq0tg", j2EEApplicationAlias.getIgnoreCookie());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIgnoreCookieReturningNull() throws Throwable  {
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias();
      String ignoreCookie = j2EEApplicationAlias.getIgnoreCookie();
      assertNull(ignoreCookie);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIgnoreCookieReturningEmptyString() throws Throwable  {
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias("xsd", "xsd", 1550, "xsd", "");
      String ignoreCookie = j2EEApplicationAlias.getIgnoreCookie();
      assertEquals(1550, j2EEApplicationAlias.getTotalRequests());
      assertEquals("xsd", j2EEApplicationAlias.getAppName());
      assertEquals("xsd", j2EEApplicationAlias.getAlias());
      assertEquals("xsd", j2EEApplicationAlias.getAppActive());
      assertEquals("", ignoreCookie);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAppNameReturningNull() throws Throwable  {
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias();
      String appName = j2EEApplicationAlias.getAppName();
      assertNull(appName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAppNameReturningNonEmptyString() throws Throwable  {
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias("_3Ihbne", "_3Ihbne", 0, "_3Ihbne", ".,n[fA-kBq0tg");
      String appName = j2EEApplicationAlias.getAppName();
      assertEquals("_3Ihbne", appName);
      assertEquals("_3Ihbne", j2EEApplicationAlias.getAlias());
      assertEquals(0, j2EEApplicationAlias.getTotalRequests());
      assertEquals(".,n[fA-kBq0tg", j2EEApplicationAlias.getIgnoreCookie());
      assertEquals("_3Ihbne", j2EEApplicationAlias.getAppActive());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAppActiveReturningNull() throws Throwable  {
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias();
      String appActive = j2EEApplicationAlias.getAppActive();
      assertNull(appActive);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAppActiveReturningEmptyString() throws Throwable  {
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias("m+Rc-", "9@-S", (-4451), "", "false");
      String appActive = j2EEApplicationAlias.getAppActive();
      assertEquals("m+Rc-", j2EEApplicationAlias.getAppName());
      assertEquals("", appActive);
      assertEquals("9@-S", j2EEApplicationAlias.getAlias());
      assertEquals("false", j2EEApplicationAlias.getIgnoreCookie());
      assertEquals((-4451), j2EEApplicationAlias.getTotalRequests());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAliasReturningNull() throws Throwable  {
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias();
      String alias = j2EEApplicationAlias.getAlias();
      assertNull(alias);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAliasReturningNonEmptyString() throws Throwable  {
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias("_3Ihbne", "_3Ihbne", 0, "_3Ihbne", ".,n[fA-kBq0tg");
      String alias = j2EEApplicationAlias.getAlias();
      assertEquals("_3Ihbne", j2EEApplicationAlias.getAppActive());
      assertEquals("_3Ihbne", j2EEApplicationAlias.getAppName());
      assertEquals(".,n[fA-kBq0tg", j2EEApplicationAlias.getIgnoreCookie());
      assertEquals(0, j2EEApplicationAlias.getTotalRequests());
      assertEquals("_3Ihbne", alias);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesJ2EEApplicationAliasTakingNoArgumentsAndCallsHashCode() throws Throwable  {
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias();
      j2EEApplicationAlias.hashCode();
      assertEquals(0, j2EEApplicationAlias.getTotalRequests());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesJ2EEApplicationAliasTaking5ArgumentsAndCallsHashCode() throws Throwable  {
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias("_3Ihbne", "_3Ihbne", 0, "_3Ihbne", ".,n[fA-kBq0tg");
      j2EEApplicationAlias.hashCode();
      assertEquals("_3Ihbne", j2EEApplicationAlias.getAlias());
      assertEquals(".,n[fA-kBq0tg", j2EEApplicationAlias.getIgnoreCookie());
      assertEquals(0, j2EEApplicationAlias.getTotalRequests());
      assertEquals("_3Ihbne", j2EEApplicationAlias.getAppName());
      assertEquals("_3Ihbne", j2EEApplicationAlias.getAppActive());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetAppActiveAndSetIgnoreCookie() throws Throwable  {
      J2EEApplicationAlias arg0 = new J2EEApplicationAlias();
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias();
      assertTrue(j2EEApplicationAlias.equals((Object)arg0));
      
      j2EEApplicationAlias.setIgnoreCookie("?{I");
      j2EEApplicationAlias.setAppActive("?{I");
      arg0.setAppActive("?{I");
      boolean equals = j2EEApplicationAlias.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetIgnoreCookie() throws Throwable  {
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias();
      J2EEApplicationAlias arg0 = new J2EEApplicationAlias();
      assertTrue(arg0.equals((Object)j2EEApplicationAlias));
      
      arg0.setIgnoreCookie("org.apache.axis.encoding.DeserializationContext");
      boolean equals = j2EEApplicationAlias.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetAppActive0() throws Throwable  {
      J2EEApplicationAlias arg0 = new J2EEApplicationAlias();
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias();
      assertTrue(j2EEApplicationAlias.equals((Object)arg0));
      
      j2EEApplicationAlias.setAppActive("?{I");
      boolean equals = j2EEApplicationAlias.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetAppActive1() throws Throwable  {
      J2EEApplicationAlias arg0 = new J2EEApplicationAlias();
      arg0.setAppActive("t");
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias();
      boolean equals = j2EEApplicationAlias.equals(arg0);
      assertFalse(equals);
      assertEquals(0, j2EEApplicationAlias.getTotalRequests());
      assertFalse(arg0.equals((Object)j2EEApplicationAlias));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetTotalRequests() throws Throwable  {
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias();
      J2EEApplicationAlias arg0 = new J2EEApplicationAlias();
      arg0.setTotalRequests((-2092528598));
      boolean equals = j2EEApplicationAlias.equals(arg0);
      assertEquals((-2092528598), arg0.getTotalRequests());
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetAlias0() throws Throwable  {
      J2EEApplicationAlias arg0 = new J2EEApplicationAlias();
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias();
      assertTrue(j2EEApplicationAlias.equals((Object)arg0));
      
      j2EEApplicationAlias.setAlias("Q8jHD4 LDw`");
      boolean equals = j2EEApplicationAlias.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetAlias1() throws Throwable  {
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias();
      J2EEApplicationAlias arg0 = new J2EEApplicationAlias();
      assertTrue(arg0.equals((Object)j2EEApplicationAlias));
      
      arg0.setAlias("xsd");
      boolean equals = j2EEApplicationAlias.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesJ2EEApplicationAliasTaking5ArgumentsAndCallsEquals0() throws Throwable  {
      J2EEApplicationAlias arg0 = new J2EEApplicationAlias();
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias("J4dU=yAC$Cb", "J4dU=yAC$Cb", 2433, "J4dU=yAC$Cb", "J4dU=yAC$Cb");
      boolean equals = j2EEApplicationAlias.equals(arg0);
      assertFalse(equals);
      assertEquals(2433, j2EEApplicationAlias.getTotalRequests());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesJ2EEApplicationAliasTakingNoArgumentsAndCallsEquals0() throws Throwable  {
      J2EEApplicationAlias arg0 = new J2EEApplicationAlias();
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias();
      boolean equals = j2EEApplicationAlias.equals(arg0);
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesJ2EEApplicationAliasTaking5ArgumentsAndCallsEquals1() throws Throwable  {
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias();
      J2EEApplicationAlias arg0 = new J2EEApplicationAlias("Alias", "Alias", 6, "Alias", "Alias");
      boolean equals = j2EEApplicationAlias.equals(arg0);
      assertFalse(equals);
      assertEquals(6, arg0.getTotalRequests());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesJ2EEApplicationAliasTaking5ArgumentsAndEqualsAndEqualsReturningTrue() throws Throwable  {
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias("2tH2", "2tH2", (-552), "2tH2", "2tH2");
      J2EEApplicationAlias arg0 = new J2EEApplicationAlias("2tH2", "2tH2", (-552), "2tH2", "2tH2");
      boolean equals = j2EEApplicationAlias.equals(arg0);
      assertEquals((-552), arg0.getTotalRequests());
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsWithNonNull() throws Throwable  {
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias();
      Object arg0 = new Object();
      boolean equals = j2EEApplicationAlias.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesJ2EEApplicationAliasTakingNoArgumentsAndCallsEquals1() throws Throwable  {
      J2EEApplicationAlias arg0 = new J2EEApplicationAlias();
      boolean equals = arg0.equals(arg0);
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIgnoreCookieReturningNonEmptyString() throws Throwable  {
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias("_3Ihbne", "_3Ihbne", 0, "_3Ihbne", ".,n[fA-kBq0tg");
      String ignoreCookie = j2EEApplicationAlias.getIgnoreCookie();
      assertEquals("_3Ihbne", j2EEApplicationAlias.getAppName());
      assertEquals(".,n[fA-kBq0tg", ignoreCookie);
      assertEquals("_3Ihbne", j2EEApplicationAlias.getAppActive());
      assertEquals(0, j2EEApplicationAlias.getTotalRequests());
      assertEquals("_3Ihbne", j2EEApplicationAlias.getAlias());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDeserializer() throws Throwable  {
      Class<Object> arg1 = Object.class;
      Deserializer deserializer = J2EEApplicationAlias.getDeserializer("", arg1, (QName) null);
      assertFalse(deserializer.componentsReady());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalRequestsReturningPositive() throws Throwable  {
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias("", "] not found.", 4546, "] not found.", (String) null);
      int totalRequests = j2EEApplicationAlias.getTotalRequests();
      assertEquals("] not found.", j2EEApplicationAlias.getAppActive());
      assertEquals("] not found.", j2EEApplicationAlias.getAlias());
      assertEquals(4546, totalRequests);
      assertEquals("", j2EEApplicationAlias.getAppName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetAppName() throws Throwable  {
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias();
      j2EEApplicationAlias.setAppName("1I{j}#b@7X_Z~hc");
      assertEquals(0, j2EEApplicationAlias.getTotalRequests());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTypeDesc() throws Throwable  {
      TypeDesc typeDesc = J2EEApplicationAlias.getTypeDesc();
      assertFalse(typeDesc.hasAttributes());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalRequestsReturningNegative() throws Throwable  {
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias();
      j2EEApplicationAlias.setTotalRequests((-1079));
      int totalRequests = j2EEApplicationAlias.getTotalRequests();
      assertEquals((-1079), totalRequests);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAliasReturningEmptyString() throws Throwable  {
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias("EaxVuis CHH}@_:H]@", "", 1, "", "");
      String alias = j2EEApplicationAlias.getAlias();
      assertEquals("EaxVuis CHH}@_:H]@", j2EEApplicationAlias.getAppName());
      assertEquals("", alias);
      assertEquals("", j2EEApplicationAlias.getIgnoreCookie());
      assertEquals("", j2EEApplicationAlias.getAppActive());
      assertEquals(1, j2EEApplicationAlias.getTotalRequests());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAppActiveReturningNonEmptyString() throws Throwable  {
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias("_3Ihbne", "_3Ihbne", 0, "_3Ihbne", ".,n[fA-kBq0tg");
      String appActive = j2EEApplicationAlias.getAppActive();
      assertEquals(".,n[fA-kBq0tg", j2EEApplicationAlias.getIgnoreCookie());
      assertEquals("_3Ihbne", j2EEApplicationAlias.getAlias());
      assertEquals("_3Ihbne", j2EEApplicationAlias.getAppName());
      assertEquals("_3Ihbne", appActive);
      assertEquals(0, j2EEApplicationAlias.getTotalRequests());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAppNameReturningEmptyString() throws Throwable  {
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias("", "]EU0q.+.", (-849), "]EU0q.+.", "]EU0q.+.");
      String appName = j2EEApplicationAlias.getAppName();
      assertEquals("]EU0q.+.", j2EEApplicationAlias.getAppActive());
      assertEquals("", appName);
      assertEquals("]EU0q.+.", j2EEApplicationAlias.getAlias());
      assertEquals("]EU0q.+.", j2EEApplicationAlias.getIgnoreCookie());
      assertEquals((-849), j2EEApplicationAlias.getTotalRequests());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSerializer() throws Throwable  {
      Class<J2EEApplicationAlias> arg1 = J2EEApplicationAlias.class;
      QName arg2 = new QName("1I{j}#b@7X_Z~hc");
      Serializer serializer = J2EEApplicationAlias.getSerializer("1I{j}#b@7X_Z~hc", arg1, arg2);
      assertEquals("Axis SAX Mechanism", serializer.getMechanismType());
  }
}
