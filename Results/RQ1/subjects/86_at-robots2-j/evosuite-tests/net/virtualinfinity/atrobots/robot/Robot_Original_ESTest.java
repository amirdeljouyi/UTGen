/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 21 09:31:59 GMT 2024
 */

package net.virtualinfinity.atrobots.robot;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import net.virtualinfinity.atrobots.arena.Position;
import net.virtualinfinity.atrobots.computer.HardwareBus;
import net.virtualinfinity.atrobots.computer.MemoryCell;
import net.virtualinfinity.atrobots.hardware.mines.MineLayer;
import net.virtualinfinity.atrobots.hardware.radio.Transceiver;
import net.virtualinfinity.atrobots.hardware.scanning.sonar.Sonar;
import net.virtualinfinity.atrobots.hardware.shield.Shield;
import net.virtualinfinity.atrobots.hardware.throttle.Throttle;
import net.virtualinfinity.atrobots.hardware.turret.Turret;
import net.virtualinfinity.atrobots.measures.AbsoluteAngle;
import net.virtualinfinity.atrobots.measures.Duration;
import net.virtualinfinity.atrobots.robot.FinalRobotScore;
import net.virtualinfinity.atrobots.robot.Robot;
import net.virtualinfinity.atrobots.robot.RobotListener;
import net.virtualinfinity.atrobots.robot.RobotScore;
import net.virtualinfinity.atrobots.robot.RobotScoreKeeper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Robot_Original_ESTest extends Robot_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testInflictedDamageThrowsNullPointerException() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("=:4$WFG!gtzlaBO.Ip ", 3249, arg2);
      // Undeclared exception!
      try { 
        robot.inflictedDamage(3249);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.virtualinfinity.atrobots.robot.Robot", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheckCollisionThrowsNullPointerException() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot arg0 = new Robot("", 3198, arg2);
      // Undeclared exception!
      try { 
        arg0.checkCollision(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.virtualinfinity.atrobots.arena.Position", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsOverburnReturningTrue() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("", 3041, arg2);
      robot.setOverburn(true);
      boolean overburn = robot.isOverburn();
      assertTrue(overburn);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalTiesReturningPositive() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot arg0 = new Robot("p5", 1, arg2);
      arg2.tiedRound(arg0);
      arg0.getTotalTies();
      assertEquals(1, arg0.getId());
      assertEquals(0, arg0.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalKillsReturningPositive() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot arg0 = new Robot("net.virtualinfinity.atrobots.robot.Robot$1", 1789, arg2);
      arg2.killedRobot(arg0);
      arg0.getTotalKills();
      assertEquals(0, arg0.getRoundKills());
      assertEquals(1789, arg0.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalDeathsReturningPositive() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot arg0 = new Robot("", 4096, arg2);
      arg2.died(arg0);
      arg0.getTotalDeaths();
      assertEquals(0, arg0.getRoundKills());
      assertEquals(4096, arg0.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetShield() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("net.virtualinfinity.atrobots.computer.JumpWhenZeroInstruction", 2663, arg2);
      Shield arg0 = new Shield(2663);
      robot.setShield(arg0);
      robot.getShield();
      assertEquals(0, robot.getRoundKills());
      assertEquals(2663, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNameReturningNull() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot((String) null, 4514, arg2);
      robot.getName();
      assertEquals(0, robot.getRoundKills());
      assertEquals(4514, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNameReturningNonEmptyString() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("x$e Pd[Pbke\"N[Xz", 41, arg2);
      robot.getName();
      assertEquals(41, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIdReturningZero() throws Throwable  {
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      RobotScore arg2 = FinalRobotScore.copyOf(arg0);
      Robot robot = new Robot("net.virtualinfinity.atrobots.hardware.scanning.scanner.Scanner", 0, arg2);
      int id = robot.getId();
      assertEquals(0, id);
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIdReturningNegative() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("C5uJ#.7Cq~S", (-906), arg2);
      int id = robot.getId();
      assertEquals((-906), id);
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsOverburnReturningFalse() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot((String) null, 641, arg2);
      robot.isOverburn();
      assertEquals(641, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetArmor() throws Throwable  {
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      RobotScore arg2 = FinalRobotScore.copyOf(arg0);
      Robot robot = new Robot("GoaD48n'", (-255), arg2);
      robot.getArmor();
      assertEquals(0, robot.getRoundKills());
      assertEquals((-255), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIdReturningPositive() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot(",vK]_]Z0V;", 2059, arg2);
      int id = robot.getId();
      assertEquals(2059, id);
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testKilledRobot() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("C5uJ#.7Cq~S", (-906), arg2);
      robot.killedRobot();
      assertEquals(0, robot.getRoundKills());
      assertEquals((-906), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testTieRound() throws Throwable  {
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      Robot robot = new Robot("Invalid", 4081, arg0);
      robot.addRobotListener(arg0);
      robot.tieRound();
      assertEquals(1, robot.getTotalTies());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testWinRound() throws Throwable  {
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      Robot robot = new Robot("net.virtualinfinity.atrobots.robot.Robot$2", (-1), arg0);
      robot.addRobotListener(arg0);
      robot.winRound();
      int totalWins = robot.getTotalWins();
      assertEquals(1, totalWins);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddRobotListener() throws Throwable  {
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      Robot robot = new Robot((String) null, 103, arg0);
      robot.addRobotListener(arg0);
      // Undeclared exception!
      try { 
        robot.armorDepleted();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.virtualinfinity.atrobots.robot.Robot", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCollidesThrowsNullPointerException() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("net.virtualinfinity.atrobots.computer.InvalidMicrocodeInstruction", 4096, arg2);
      // Undeclared exception!
      try { 
        robot.collides();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.virtualinfinity.atrobots.robot.Robot", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetTransceiver() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("", (-1431655765), arg2);
      Transceiver arg0 = new Transceiver();
      robot.setTransceiver(arg0);
      robot.getTransceiver();
      assertEquals((-1431655765), robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSonar() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("net.Xi,tual;nfinity.atrob`ts.com6uter.DebugInfo", 1881, arg2);
      Sonar arg0 = new Sonar();
      robot.setSonar(arg0);
      robot.getSonar();
      assertEquals(1881, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalWinsReturningZero() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("/", 1763, arg2);
      robot.getTotalWins();
      assertEquals(0, robot.getRoundKills());
      assertEquals(1763, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTransceiverReturningNull() throws Throwable  {
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      RobotScore arg2 = FinalRobotScore.copyOf(arg0);
      Robot robot = new Robot("", 34, arg2);
      robot.getTransceiver();
      assertEquals(0, robot.getRoundKills());
      assertEquals(34, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReset() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("net.virtualinfinity.atrobots.robot.Robot$GetRobotStatisticsInterrupt", 2875, arg2);
      robot.reset();
      assertFalse(robot.isOverburn());
      assertEquals(0, robot.getRoundKills());
      assertEquals(2875, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTurretShiftThrowsNullPointerException() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("/", 1763, arg2);
      // Undeclared exception!
      try { 
        robot.getTurretShift();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.virtualinfinity.atrobots.robot.Robot", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalKillsReturningZero() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("|7h/GK", 83, arg2);
      robot.getTotalKills();
      assertEquals(0, robot.getRoundKills());
      assertEquals(83, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSonarReturningNull() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("net.Xi,tual;nfinity.atrob`ts.com6uter.DebugInfo", 1881, arg2);
      robot.getSonar();
      assertEquals(1881, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testUpdateThrowsNullPointerException() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("drbIr.5e", (-1061), arg2);
      Duration arg0 = robot.getLastDamageTaken();
      // Undeclared exception!
      try { 
        robot.update(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.virtualinfinity.atrobots.arena.Position", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateGetRobotInfoInterruptHandler() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("1}2/{:&=QmVG:u", (-1281), arg2);
      robot.createGetRobotInfoInterruptHandler((MemoryCell) null, (MemoryCell) null, (MemoryCell) null);
      assertEquals((-1281), robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetHardwareBus() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("JLE", 29, arg2);
      HardwareBus arg0 = new HardwareBus();
      robot.setHardwareBus(arg0);
      robot.getHardwareBus();
      assertEquals(0, robot.getRoundKills());
      assertEquals(29, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetOdometer() throws Throwable  {
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      RobotScore arg2 = FinalRobotScore.copyOf(arg0);
      Robot robot = new Robot("", 34, arg2);
      robot.getOdometer();
      assertEquals(34, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDestructThrowsNullPointerException() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot(")I/=gL{;QG V-Ep", 2146679949, arg2);
      // Undeclared exception!
      try { 
        robot.destruct();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.virtualinfinity.atrobots.robot.Robot", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetShieldReturningNull() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("net.virtualinfinity.atrobots.computer.JumpWhenZeroInstruction", 2663, arg2);
      robot.getShield();
      assertEquals(0, robot.getRoundKills());
      assertEquals(2663, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNameReturningEmptyString() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("", 4514, arg2);
      robot.getName();
      assertEquals(4514, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetMineLayer() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("/", 1763, arg2);
      MineLayer arg0 = new MineLayer(32767);
      robot.setMineLayer(arg0);
      robot.getMineLayer();
      assertEquals(0, robot.getRoundKills());
      assertEquals(1763, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTurretOffsetSensor() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("", (-1975), arg2);
      robot.getTurretOffsetSensor();
      assertEquals(0, robot.getRoundKills());
      assertEquals((-1975), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateMissile() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("l4bT8J?Xd", (-3315), arg2);
      AbsoluteAngle arg0 = AbsoluteAngle.fromRadians((-3315));
      Position arg1 = new Position();
      robot.createMissile(arg0, arg1, (-3315));
      assertEquals(0, robot.getRoundKills());
      assertEquals((-3315), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetTurret() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("JLE", 29, arg2);
      robot.setTurret((Turret) null);
      assertEquals(0, robot.getRoundKills());
      assertEquals(29, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetOverburn() throws Throwable  {
      Robot robot = new Robot("wrl?QkG8", (-1431655765), (RobotScore) null);
      robot.setOverburn(true);
      // Undeclared exception!
      try { 
        robot.armorDepleted();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.virtualinfinity.atrobots.robot.Robot", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRadar() throws Throwable  {
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      RobotScore arg2 = FinalRobotScore.copyOf(arg0);
      Robot robot = new Robot((String) null, (-866), arg2);
      robot.getRadar();
      assertEquals((-866), robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetComputer() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("JLE", 29, arg2);
      robot.getComputer();
      assertEquals(0, robot.getRoundKills());
      assertEquals(29, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalTiesReturningZero() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("p5", 1, arg2);
      robot.getTotalTies();
      assertEquals(1, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetShutdownLevelLatchPort() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("", 3041, arg2);
      robot.getShutdownLevelLatchPort();
      assertEquals(0, robot.getRoundKills());
      assertEquals(3041, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRoundKills() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("net.virtualinfinity.atrobots.robot.Robot$3", (-1431655765), arg2);
      int roundKills = robot.getRoundKills();
      assertEquals((-1431655765), robot.getId());
      assertEquals(0, roundKills);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMineLayerReturningNull() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("/", 1763, arg2);
      robot.getMineLayer();
      assertEquals(1763, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetHardwareBusReturningNull() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("JLE", 29, arg2);
      robot.getHardwareBus();
      assertEquals(29, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetThrottleReturningNull() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot(")I/=gL{;QG V-Ep", 2146679949, arg2);
      robot.getThrottle();
      assertEquals(0, robot.getRoundKills());
      assertEquals(2146679949, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTransponder() throws Throwable  {
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      RobotScore arg2 = FinalRobotScore.copyOf(arg0);
      Robot robot = new Robot("tu2JbM-", (-2146187812), arg2);
      robot.getTransponder();
      assertEquals(0, robot.getRoundKills());
      assertEquals((-2146187812), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetHeatSinks() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("", (-2384), arg2);
      robot.getHeatSinks();
      assertEquals(0, robot.getRoundKills());
      assertEquals((-2384), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalDeathsReturningZero() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("", 0, arg2);
      robot.getTotalDeaths();
      assertEquals(0, robot.getRoundKills());
      assertEquals(0, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDesiredHeading() throws Throwable  {
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      RobotScore arg2 = FinalRobotScore.copyOf(arg0);
      Robot robot = new Robot("XCi6NT~Og,\"{D;*l", 284, arg2);
      robot.getDesiredHeading();
      assertEquals(0, robot.getRoundKills());
      assertEquals(284, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetHeading() throws Throwable  {
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      RobotScore arg2 = FinalRobotScore.copyOf(arg0);
      Robot robot = new Robot((String) null, (-326), arg2);
      robot.getHeading();
      assertEquals(0, robot.getRoundKills());
      assertEquals((-326), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testKilledRobotThrowsNullPointerException() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("", 4091, arg2);
      robot.addRobotListener((RobotListener) null);
      // Undeclared exception!
      try { 
        robot.killedRobot();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.virtualinfinity.atrobots.robot.Robot", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSpeed() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("=Qlis=Cdf ;0LG^G", 1021, arg2);
      robot.getSpeed();
      assertEquals(1021, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAimTurretPort() throws Throwable  {
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      RobotScore arg2 = FinalRobotScore.copyOf(arg0);
      Robot robot = new Robot("tu2JbM-", (-2146187812), arg2);
      robot.getAimTurretPort();
      assertEquals(0, robot.getRoundKills());
      assertEquals((-2146187812), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLastDamageGiven() throws Throwable  {
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      RobotScore arg2 = FinalRobotScore.copyOf(arg0);
      Robot robot = new Robot((String) null, (-866), arg2);
      Duration lastDamageGiven = robot.getLastDamageGiven();
      assertEquals(0, lastDamageGiven.getCycles());
      assertEquals((-866), robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetThrottle() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot(")I/=gL{;QG V-Ep", 2146679949, arg2);
      Throttle arg0 = new Throttle(2681.0);
      robot.setThrottle(arg0);
      robot.getThrottle();
      assertEquals(0, robot.getRoundKills());
      assertEquals(2146679949, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTurret() throws Throwable  {
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("/", 1763, arg2);
      robot.getTurret();
      assertEquals(1763, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetOverburnLatchPort() throws Throwable  {
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      RobotScore arg2 = FinalRobotScore.copyOf(arg0);
      Robot robot = new Robot((String) null, (-326), arg2);
      robot.getOverburnLatchPort();
      assertEquals(0, robot.getRoundKills());
      assertEquals((-326), robot.getId());
  }
}
