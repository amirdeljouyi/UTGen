/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Mon Mar 18 03:27:29 GMT 2024
 */

package framework.util;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import framework.util.StringUtils;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReplaceTokensThrowsNullPointerException() throws Throwable  {
      // No Comments were added
      HashMap<String, String> hashMap = new HashMap<String, String>();
      Collection<String> arg1 = hashMap.values();
      hashMap.put("`}^(\")!Um&UL'i", (String) null);
      // Undeclared exception!
      try { 
        StringUtils.replaceTokens("p?WD,.q", arg1, "p?WD,.q", "^[a-zA-Z_]w*$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("framework.util.StringUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMatchPatternWithTrue() throws Throwable  {
      // Given: we have a StringUtils class with a matchPattern method that checks if a given pattern is present in a string.
      // When: we call the matchPattern method with a pattern and a string, and the ignoreCase parameter set to true.
      boolean matchPattern = StringUtils.matchPattern("'[i+.5E%", "123456789", true);
      
      // Then: the matchPattern method should return false, since the pattern is not present in the string.
      assertFalse(matchPattern);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToUpperFirstCharReturningNull() throws Throwable  {
      // No Comments were added
      String upperFirstChar = StringUtils.toUpperFirstChar((String) null);
      assertNull(upperFirstChar);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testStringToWordListReturningListWhereIsEmptyIsFalse() throws Throwable  {
      // No Comments were added
      List stringToWordList = StringUtils.stringToWordList("ANCOS|");
      assertFalse(stringToWordList.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testStringToStringArrayReturningEmptyArray() throws Throwable  {
      // Given: A String array containing two strings "qk.b`*bejc" and "qk.b`*bejc"
      String[] stringToStringArray = StringUtils.stringToStringArray("qk.b`*bejc", "qk.b`*bejc");
      
      // When: The strings are converted to a string array using the StringUtils method
      //       and the resulting array is compared with an expected length of 0
      assertEquals(0, stringToStringArray.length);
      
      // Then: The test asserts that the length of the resulting string array is 0,
      //       which means that no characters were removed from the original strings
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReplaceTokensReturningEmptyString() throws Throwable  {
      // Test that StringUtils.replaceTokens() replaces all tokens with an empty string when given an empty list of tokens
      LinkedList<String> arg1 = new LinkedList<>();
      String replaceTokens = StringUtils.replaceTokens("", arg1, "wqH>sM]M", " \t\n\r\f");
      assertEquals("", replaceTokens);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReplacePatternTaking2ArgumentsReturningNull() throws Throwable  {
      // Set up
      HashMap<String, String> arg1 = new HashMap<String, String>();
      
      // Act
      String replacePattern = StringUtils.replacePattern((String) null, (Map) arg1);
      
      // Assert
      assertNull(replacePattern);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReplacePatternTaking3ArgumentsReturningEmptyString() throws Throwable  {
      // No Comments were added
      String replacePattern = StringUtils.replacePattern("", "", "");
      assertEquals("", replacePattern);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReplaceReturningEmptyString() throws Throwable  {
      // No Comments were added
      String replace = StringUtils.replace("", "4S;V})F+eQ1!.lm%", "^@H8{");
      assertEquals("", replace);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveWhitespacesReturningEmptyString() throws Throwable  {
      // No Comments were added
      String removeWhitespaces = StringUtils.removeWhitespaces("");
      assertEquals("", removeWhitespaces);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReformatReturningEmptyString() throws Throwable  {
      // No Comments were added
      String reformat = StringUtils.reformat("");
      assertEquals("", reformat);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPrettyPrintReturningEmptyString() throws Throwable  {
      // Given a HashMap of String, String pairs as input
      HashMap<String, String> args = new HashMap<>();
      
      // When we call StringUtils.prettyPrint() with the HashMap as an argument
      String prettyPrint = StringUtils.prettyPrint(args, "", "ER_TYPED_ITERATOR_AXIS_NOT_IMPLEMENTED", "ER_TYPED_ITERATOR_AXIS_NOT_IMPLEMENTED", "^aE45EH3y<lXs{|hql~");
      
      // Then the result should be an empty String
      assertEquals("", prettyPrint);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testListToStringArrayReturningNonEmptyArray() throws Throwable  {
      // Test that a list of strings can be converted to an array of strings
      List<String> arg0 = StringUtils.stringToList("ihNPL", "'}L9%g{hMoN^19E");
      String[] listToStringArray = StringUtils.listToStringArray(arg0);
      // Assert that the length of the resulting array is 2
      assertEquals(2, listToStringArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testListToStringArrayReturningEmptyArray() throws Throwable  {
      // Create a list from an empty string using StringUtils.stringToList
      List<String> arg0 = StringUtils.stringToList("", 'g');
      
      // Convert the list to a string array using StringUtils.listToStringArray
      String[] listToStringArray = StringUtils.listToStringArray(arg0);
      
      // Assert that the length of the string array is 0
      assertEquals(0, listToStringArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsWhitespaceReturningFalse() throws Throwable  {
      // Check that the string "3Z<pbXOcuO2j2IQN)" is not considered whitespace, even with trim flag set to true.
      boolean whitespace = StringUtils.isWhitespace("3Z<pbXOcuO2j2IQN)", true);
      assertFalse(whitespace);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsPositiveFloatReturningTrue() throws Throwable  {
      // This test checks that the isPositiveFloat method returns true when passed an empty string
      boolean positiveFloat = StringUtils.isPositiveFloat("", true);
      assertTrue(positiveFloat);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsJavaPackageNameReturningFalse() throws Throwable  {
      // No Comments were added
      boolean javaPackageName = StringUtils.isJavaPackageName(":V");
      assertFalse(javaPackageName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsJavaNameReturningFalse() throws Throwable  {
      // No Comments were added
      boolean javaName = StringUtils.isJavaName("|c^");
      assertFalse(javaName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsIntegerReturningFalse() throws Throwable  {
      // Test that the StringUtils.isInteger() method returns false for a string that contains non-digit characters
      boolean integer = StringUtils.isInteger(":d)Z5U0,`", true);
      assertFalse(integer);
      
      // Assert that the method correctly identifies strings as not containing integers
      // This test checks that the method returns false when given a string with non-digit characters
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsEmailReturningFalse() throws Throwable  {
      // This test checks that the isEmail method returns false for a string that contains non-ASCII characters.
      boolean email = StringUtils.isEmail("3Z<pbXOcuO2j2IQN)", true);
      assertFalse(email);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsBooleanReturningTrue() throws Throwable  {
      // No Comments were added
      boolean _boolean = StringUtils.isBoolean((String) null, true);
      assertTrue(_boolean);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetJavaNameReturningNull() throws Throwable  {
      // No Comments were added
      String javaName = StringUtils.getJavaName((String) null);
      assertNull(javaName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToUpperFirstCharReturningNonEmptyString() throws Throwable  {
      // No Comments were added
      String upperFirstChar = StringUtils.toUpperFirstChar("E)");
      assertEquals("E)", upperFirstChar);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testExistsWithNull() throws Throwable  {
      // No Comments were added
      boolean exists = StringUtils.exists((String) null);
      assertFalse(exists);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testExistsReturningTrue() throws Throwable  {
      // Test if "Hello World" exists in the input string
      boolean exists = StringUtils.exists("Hello World");
      assertTrue(exists);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testExistsWithEmptyString() throws Throwable  {
      // Test if an empty string exists
      boolean exists = StringUtils.exists("");
      assertFalse(exists);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReplaceReturningNonEmptyString() throws Throwable  {
      // No Comments were added
      String replace = StringUtils.replace("Hello World", "World", "Java");
      assertEquals("Hello Java", replace);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReplacePatternTaking2ArgumentsReturningEmptyString() throws Throwable  {
      // Create a map with the key-value pairs for the replacement
      Map<String, String> arg1 = new HashMap<>();
      arg1.put("exprAddChild method not implemented!", "");
      
      // Replace the pattern in the input string with the values from the map
      String replacePattern = StringUtils.replacePattern("", (Map) arg1);
      
      // Assert that the output is as expected
      assertEquals("", replacePattern);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testStringToListTaking2StringsReturningListWhereIsEmptyIsTrue() throws Throwable  {
      // Convert an empty string to a list
      List<String> stringToList = StringUtils.stringToList("", "");
      assertTrue(stringToList.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMatchPatternWithEmptyString() throws Throwable  {
      // No Comments were added
      boolean matchPattern = StringUtils.matchPattern("'[i+.5E%", "", false);
      assertFalse(matchPattern);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMatchPatternReturningTrue() throws Throwable  {
      // No Comments were added
      boolean matchPattern = StringUtils.matchPattern("", "WG_PROPERTY_NOT_SUPPORTED", false);
      assertTrue(matchPattern);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReplaceTokensReturningNull() throws Throwable  {
      // No Comments were added
      List arg1 = StringUtils.stringToWordList("");
      String replaceTokens = StringUtils.replaceTokens((String) null, arg1, "_^Q7%5z7O^)\"", " class loader.");
      assertNull(replaceTokens);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetKeywordDirectoryThrowsNoClassDefFoundError() throws Throwable  {
      // Undeclared exception!
      try {
      StringUtils.getKeywordDirectory();
      fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      //
      // Could not initialize class framework.ApplicationParameters
      //
      verifyException("framework.util.StringUtils", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReformatReturningNull() throws Throwable  {
      // Test that a null input is handled correctly
      String reformat = StringUtils.reformat((String) null);
      assertNull(reformat);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveWhitespacesReturningNull() throws Throwable  {
      // No Comments were added
      String removeWhitespaces = StringUtils.removeWhitespaces((String) null);
      assertNull(removeWhitespaces);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveWhitespacesReturningNonEmptyString() throws Throwable  {
      // No Comments were added
      String removeWhitespaces = StringUtils.removeWhitespaces("A class loader.");
      assertNotNull(removeWhitespaces);
      assertEquals("Aclassloader.", removeWhitespaces);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReplaceTokens() throws Throwable  {
      // rollbacked to evosuite
      LinkedList<String> arg1 = new LinkedList<String>();
      String replaceTokens = StringUtils.replaceTokens("This is a sentence with words.", arg1, "wqH>sM]M", " \t\n\r\f");
      assertEquals("This is a sentence with words.", replaceTokens);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReplaceTokensWithNull() throws Throwable  {
      // No Comments were added
      String replaceTokens = StringUtils.replaceTokens("^jp%1P#j[41z", (Collection) null, "^jp%1P#j[41z", "^jp%1P#j[41z");
      assertEquals("^jp%1P#j[41z", replaceTokens);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetJavaNameReturningEmptyString() throws Throwable  {
      // No Comments were added
      String javaName = StringUtils.getJavaName("");
      assertEquals("", javaName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToUpperFirstCharReturningEmptyString() throws Throwable  {
      // No Comments were added
      String upperFirstChar = StringUtils.toUpperFirstChar("");
      assertEquals("", upperFirstChar);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetJavaNameReturningNonEmptyString() throws Throwable  {
      // The StringUtils.getJavaName method converts a string containing a version number to the corresponding Java name.
      // For example, "8_0" would be converted to "80".
      String javaName = StringUtils.getJavaName("8_0");
      assertEquals("80", javaName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testValueOfReturningEmptyString() throws Throwable  {
      // Given: We have a StringUtils class that provides utility methods for working with strings
      // When: We call the static method "valueOf" with a null object as an argument
      // Then: The method should return an empty string
      
      String valueOf = StringUtils.valueOf((Object) null);
      assertEquals("", valueOf);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testValueOfReturningNonEmptyString() throws Throwable  {
      // Tests that the 'valueOf' method returns a string representation of an object.
      // The test uses the StringUtils class to create an instance of the object.
      String value = StringUtils.valueOf("Hello, World!");
      assertEquals("Hello, World!", value);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testInitCapReturningNonEmptyString() throws Throwable  {
      // Testing the initialization of a capitalized string
      String initCap = StringUtils.initCap("hello world");
      assertEquals("Hello World", initCap);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testInitCapReturningNull() throws Throwable  {
      // No Comments were added
      String initCap = StringUtils.initCap((String) null);
      assertNull(initCap);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testInitCapReturningEmptyString() throws Throwable  {
      // Test the initCap method with an empty string
      String initCap = StringUtils.initCap("");
      assertEquals("", initCap);
      
      // Check that the input string is not modified
      assertEquals("", initCap);
      
      // Check that the output string is capitalized
      assertTrue(initCap.equalsIgnoreCase(""));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReplaceWithNonEmptyString() throws Throwable  {
      // No Comments were added
      String replace = StringUtils.replace("Hello, World!", "World", "Java");
      assertEquals("Hello, Java!", replace);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReplaceThrowsTooManyResourcesException() throws Throwable  {
      // No Comments were added
      // Undeclared exception!
      StringUtils.replace("", "", "");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReplaceThrowsIllegalArgumentException() throws Throwable  {
      // No Comments were added
      // Undeclared exception!
      try { 
        StringUtils.replace("E2", "if-1x1fQ", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot accept null argument
         //
         verifyException("framework.util.StringUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReplaceWithNull() throws Throwable  {
      // Undeclared exception!
      try {
      StringUtils.replace(">", (String) null, (String) null);
      fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      //
      // Catch the expected exception
      //
      verifyException("framework.util.StringUtils", e);
      
      //
      // Verify that the correct message is included in the exception
      //
      assertTrue(e.getMessage().contains("Cannot accept null argument"));}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReplaceReturningNull() throws Throwable  {
      // Replace method with null inputs should return null
      String replace = StringUtils.replace((String) null, (String) null, (String) null);
      assertNull(replace);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testTrimEmptyToNullWithEmptyString() throws Throwable  {
      // No Comments were added
      String trimEmptyToNull = StringUtils.trimEmptyToNull("");
      assertNull(trimEmptyToNull);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testTrimEmptyToNullReturningNonEmptyString() throws Throwable  {
      // No Comments were added
      String trimEmptyToNull = StringUtils.trimEmptyToNull(" E2 ");
      assertEquals(" E2 ", trimEmptyToNull);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testTrimEmptyToNullWithNull() throws Throwable  {
      // No Comments were added
      String trimEmptyToNull = StringUtils.trimEmptyToNull((String) null);
      assertNull(trimEmptyToNull);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testStringToListTaking1And1ReturningListWhereIsEmptyIsFalse() throws Throwable  {
      // Convert a string to a list using StringUtils.stringToList() method
      List<String> stringToList = StringUtils.stringToList("&wT2", '2');
      
      // Assert that the resulting list has a single element
      assertEquals(1, stringToList.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsPositiveIntegerReturningFalse() throws Throwable  {
      // No Comments were added
      boolean positiveInteger = StringUtils.isPositiveInteger("", false);
      assertFalse(positiveInteger);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPrettyPrintWithNonEmptyStringAndNull0() throws Throwable  {
      // rollbacked to evosuite
      HashMap<String, String> arg0 = new HashMap<String, String>();
      arg0.put("S", "S");
      String prettyPrint = StringUtils.prettyPrint(arg0, "S", (String) null, "RC>5!3W_", "touppercase");
      assertEquals("SRC>5!3W_", prettyPrint);
      assertNotNull(prettyPrint);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPrettyPrintWithNonEmptyStringAndNull1() throws Throwable  {
      // Creating a HashMap with two key-value pairs
      HashMap<String, String> arg0 = new HashMap<String, String>();
      arg0.put("S", "s");
      
      // Calling the prettyPrint method with the HashMap and other arguments
      String prettyPrint = StringUtils.prettyPrint(arg0, "S", "rC>5!3W_", "TOUPPERCASE", null);
      
      // Asserting that the returned value is not null
      assertNotNull(prettyPrint);
      
      // Assertion to check if the prettyPrint method returns the expected result
      assertEquals("rC>5!3W_STOUPPERCASE", prettyPrint);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPrettyPrintWithEmptyMapAndNull() throws Throwable  {
      // No Comments were added
      HashMap<String, String> arg0 = new HashMap<String, String>();
      String prettyPrint = StringUtils.prettyPrint(arg0, "8", (String) null, (String) null, (String) null);
      assertEquals("8", prettyPrint);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPrettyPrintReturningNull() throws Throwable  {
      // No Comments were added
      HashMap<String, String> arg0 = new HashMap<String, String>();
      String prettyPrint = StringUtils.prettyPrint(arg0, (String) null, (String) null, (String) null, (String) null);
      assertNull(prettyPrint);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetKeywordPathThrowsNoClassDefFoundError() throws Throwable  {
      // Given: The StringUtils class has not been initialized
      // When: Calling getKeywordPath method without initializing the class
      try {
      StringUtils.getKeywordPath();
      fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      // Then: An exception is thrown and verified
      verifyException("framework.util.StringUtils", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsPositiveIntegerReturningTrue() throws Throwable  {
      // No Comments were added
      boolean positiveInteger = StringUtils.isPositiveInteger("123", true);
      assertTrue(positiveInteger);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsWhitespaceReturningTrue() throws Throwable  {
      // Check that the whitespace string is correctly identified as a whitespace string
      boolean whitespace = StringUtils.isWhitespace("  ", true);
      assertTrue(whitespace);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetKeywordFileExtensionThrowsNoClassDefFoundError() throws Throwable  {
      // Test that a NoClassDefFoundError is thrown when trying to access a method of the StringUtils class that requires a framework.ApplicationParameters object.
      
      try {
      StringUtils.getKeywordFileExtension();
      fail("Expecting exception: NoClassDefFoundError");
      } catch(NoClassDefFoundError e) {
      // Verify that the correct exception is thrown and that it is due to a problem initializing the framework.ApplicationParameters class.
      verifyException("framework.util.StringUtils", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testStringToStringArrayReturningNonEmptyArray() throws Throwable  {
      // Given a string of characters
      String input = "Must have a NodeVector as the object for NodeSequence!";
      
      // When we convert it to an array of strings
      String[] actual = StringUtils.stringToStringArray(input, "E21");
      
      // Then we expect an array with one element
      assertEquals(1, actual.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsJavaNameReturningTrue() throws Throwable  {
      // No Comments were added
      boolean javaName = StringUtils.isJavaName("variable_name");
      assertTrue(javaName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsBooleanReturningFalse() throws Throwable  {
      // No Comments were added
      boolean _boolean = StringUtils.isBoolean("yes", true);
      assertFalse(_boolean);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesStringUtils() throws Throwable  {
      // No Comments were added
      StringUtils stringUtils = new StringUtils();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsPositiveFloatReturningFalse() throws Throwable  {
      // Test that the method correctly identifies a positive float value
      boolean positiveFloat = StringUtils.isPositiveFloat("+1234567890.123456789", false);
      assertTrue(positiveFloat); // Assert that the method returns true for a valid positive float value
      
      // Test that the method correctly identifies a negative float value
      boolean negativeFloat = StringUtils.isPositiveFloat("-1234567890.123456789", false);
      assertFalse(negativeFloat); // Assert that the method returns false for an invalid negative float value
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsIntegerReturningTrue() throws Throwable  {
      // Given: A string "-12345" is passed to the method StringUtils.isInteger() with a flag set to true, which indicates that leading zeros should be allowed.
      boolean integer = StringUtils.isInteger("-12345", true);
      
      // When: The method is called with the given string and flag.
      
      // Then: The method returns true, indicating that the string "-12345" is an integer. This is because leading zeros are allowed in this case.
      assertTrue(integer);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReformatReturningNonEmptyString() throws Throwable  {
      // No Comments were added
      String reformat = StringUtils.reformat("1234-5678");
      assertNotNull(reformat);
      assertEquals("1234-5678 ", reformat);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsEmailReturningTrue() throws Throwable  {
      // No Comments were added
      boolean email = StringUtils.isEmail("john.doe@example.com", true);
      assertTrue(email);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testStringArrayToListThrowsNullPointerException() throws Throwable  {
      // Undeclared exception!
      try {
      StringUtils.stringArrayToList((String[]) null);
      fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      //
      // The method stringArrayToList() throws a NullPointerException if the input array is null
      //
      verifyException("java.util.Objects", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsJavaPackageNameReturningTrue() throws Throwable  {
      // No Comments were added
      boolean javaPackageName = StringUtils.isJavaPackageName("com.example.myapp");
      assertTrue(javaPackageName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReplacePatternTaking3ArgumentsReturningNonEmptyString() throws Throwable  {
      // No Comments were added
      String replacePattern = StringUtils.replacePattern("inputString", "w+", "replacement");
      assertEquals("inputString", replacePattern);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetKeywordsThrowsNoClassDefFoundError() throws Throwable  {
      // No Comments were added
      // Undeclared exception!
      try { 
        StringUtils.getKeywords("The quick brown fox jumps over the lazy dog.");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class framework.ApplicationParameters
         //
         verifyException("framework.util.StringUtils", e);
      }
  }
}
