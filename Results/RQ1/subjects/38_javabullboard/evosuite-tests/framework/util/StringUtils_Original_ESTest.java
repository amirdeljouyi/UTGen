/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Mon Mar 18 03:27:31 GMT 2024
 */

package framework.util;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import framework.util.StringUtils;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringUtils_Original_ESTest extends StringUtils_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReplaceTokensThrowsNullPointerException() throws Throwable  {
      HashMap<String, String> hashMap = new HashMap<String, String>();
      Collection<String> arg1 = hashMap.values();
      hashMap.put("`}^(\")!Um&UL'i", (String) null);
      // Undeclared exception!
      try { 
        StringUtils.replaceTokens("p?WD,.q", arg1, "p?WD,.q", "^[a-zA-Z_]w*$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("framework.util.StringUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMatchPattern() throws Throwable  {
      boolean matchPattern = StringUtils.matchPattern("?,6cV{YA-e~F", "?,6cV{YA-e~F", false);
      assertFalse(matchPattern);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetKeywordsThrowsNoClassDefFoundError() throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getKeywords("UbM&Znc=EAU8I*");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class framework.ApplicationParameters
         //
         verifyException("framework.util.StringUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToUpperFirstCharReturningNull() throws Throwable  {
      String upperFirstChar = StringUtils.toUpperFirstChar((String) null);
      assertNull(upperFirstChar);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testStringToStringArrayReturningEmptyArray() throws Throwable  {
      String[] stringToStringArray = StringUtils.stringToStringArray("qk.b`*bejc", "qk.b`*bejc");
      assertEquals(0, stringToStringArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReplaceTokensReturningNull() throws Throwable  {
      List arg1 = StringUtils.stringToWordList("");
      String replaceTokens = StringUtils.replaceTokens((String) null, arg1, "_^Q7%5z7O^)\"", " class loader.");
      assertNull(replaceTokens);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReplacePatternTaking2ArgumentsReturningNull() throws Throwable  {
      HashMap<String, String> arg1 = new HashMap<String, String>();
      String replacePattern = StringUtils.replacePattern((String) null, (Map) arg1);
      assertNull(replacePattern);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReplacePatternTaking3ArgumentsReturningNonEmptyString() throws Throwable  {
      String replacePattern = StringUtils.replacePattern("kw", "kw", "kw");
      assertEquals("kw", replacePattern);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveWhitespacesReturningEmptyString() throws Throwable  {
      String removeWhitespaces = StringUtils.removeWhitespaces("");
      assertEquals("", removeWhitespaces);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPrettyPrintReturningNull() throws Throwable  {
      HashMap<String, String> arg0 = new HashMap<String, String>();
      String prettyPrint = StringUtils.prettyPrint(arg0, (String) null, (String) null, (String) null, (String) null);
      assertNull(prettyPrint);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsWhitespaceReturningFalse() throws Throwable  {
      boolean whitespace = StringUtils.isWhitespace("3Z<pbXOcuO2j2IQN)", true);
      assertFalse(whitespace);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsPositiveIntegerReturningFalse() throws Throwable  {
      boolean positiveInteger = StringUtils.isPositiveInteger("\" object is not assignable to a \"", true);
      assertFalse(positiveInteger);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsPositiveFloatReturningFalse() throws Throwable  {
      boolean positiveFloat = StringUtils.isPositiveFloat("G#H#k6XVlKl>hsw.O(", false);
      assertFalse(positiveFloat);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsJavaPackageNameReturningTrue() throws Throwable  {
      boolean javaPackageName = StringUtils.isJavaPackageName("Q");
      assertTrue(javaPackageName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsJavaNameReturningFalse() throws Throwable  {
      boolean javaName = StringUtils.isJavaName("|c^");
      assertFalse(javaName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsIntegerReturningFalse() throws Throwable  {
      boolean integer = StringUtils.isInteger(":d)Z5U0,`", true);
      assertFalse(integer);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsEmailReturningFalse() throws Throwable  {
      boolean email = StringUtils.isEmail("3Z<pbXOcuO2j2IQN)", true);
      assertFalse(email);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsBooleanReturningTrue() throws Throwable  {
      boolean _boolean = StringUtils.isBoolean((String) null, true);
      assertTrue(_boolean);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetJavaNameReturningNull() throws Throwable  {
      String javaName = StringUtils.getJavaName((String) null);
      assertNull(javaName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToUpperFirstCharReturningNonEmptyString() throws Throwable  {
      String upperFirstChar = StringUtils.toUpperFirstChar("E)");
      assertEquals("E)", upperFirstChar);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testExistsReturningTrue() throws Throwable  {
      boolean exists = StringUtils.exists("mXjh 7czB-[}g");
      assertTrue(exists);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testExistsWithEmptyString() throws Throwable  {
      boolean exists = StringUtils.exists("");
      assertFalse(exists);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReplaceReturningNonEmptyString() throws Throwable  {
      String replace = StringUtils.replace("^[a-zA-Z_]w*$", "^[a-zA-Z_]w*$", "^[a-zA-Z_]w*$");
      assertEquals("^[a-zA-Z_]w*$", replace);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReplacePatternTaking2ArgumentsReturningEmptyString() throws Throwable  {
      HashMap<String, String> arg1 = new HashMap<String, String>();
      arg1.put("exprAddChild method not implemented!", "");
      String replacePattern = StringUtils.replacePattern("", (Map) arg1);
      assertEquals("", replacePattern);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testListToStringArrayReturningNonEmptyArray() throws Throwable  {
      List arg0 = StringUtils.stringToList("ihNPL", "'}L9%g{hMoN^19E");
      String[] listToStringArray = StringUtils.listToStringArray(arg0);
      assertEquals(2, listToStringArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testStringToListTaking2StringsReturningListWhereIsEmptyIsTrue() throws Throwable  {
      List stringToList = StringUtils.stringToList("", "");
      assertTrue(stringToList.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMatchPatternWithEmptyString() throws Throwable  {
      boolean matchPattern = StringUtils.matchPattern("'[i+.5E%", "", false);
      assertFalse(matchPattern);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMatchPatternReturningTrue() throws Throwable  {
      boolean matchPattern = StringUtils.matchPattern("", "WG_PROPERTY_NOT_SUPPORTED", false);
      assertTrue(matchPattern);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testListToStringArrayReturningEmptyArray() throws Throwable  {
      List arg0 = StringUtils.stringToList("", 'g');
      String[] listToStringArray = StringUtils.listToStringArray(arg0);
      assertEquals(0, listToStringArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReformatReturningNonEmptyString() throws Throwable  {
      String reformat = StringUtils.reformat("punct");
      assertEquals("punct ", reformat);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReformatReturningNull() throws Throwable  {
      String reformat = StringUtils.reformat((String) null);
      assertNull(reformat);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveWhitespacesReturningNull() throws Throwable  {
      String removeWhitespaces = StringUtils.removeWhitespaces((String) null);
      assertNull(removeWhitespaces);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveWhitespacesReturningNonEmptyString() throws Throwable  {
      String removeWhitespaces = StringUtils.removeWhitespaces(" +lass loVder.");
      assertEquals("+lassloVder.", removeWhitespaces);
      assertNotNull(removeWhitespaces);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReplaceTokensThrowsClassCastException() throws Throwable  {
      List arg1 = StringUtils.stringToWordList("ANCOS|");
      // Undeclared exception!
      try { 
        StringUtils.replaceTokens("ANCOS|", arg1, "ANCOS|", "ANCOS|");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to [Ljava.lang.Object;
         //
         verifyException("framework.util.StringUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReplaceTokensReturningEmptyString() throws Throwable  {
      LinkedList<String> arg1 = new LinkedList<String>();
      String replaceTokens = StringUtils.replaceTokens("", arg1, "wqH>sM]M", " \t\n\r\f");
      assertEquals("", replaceTokens);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReplaceTokensReturningNonEmptyString() throws Throwable  {
      String replaceTokens = StringUtils.replaceTokens("^jp%1P#j[41z", (Collection) null, "^jp%1P#j[41z", "^jp%1P#j[41z");
      assertEquals("^jp%1P#j[41z", replaceTokens);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetJavaNameReturningEmptyString() throws Throwable  {
      String javaName = StringUtils.getJavaName("");
      assertEquals("", javaName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToUpperFirstCharReturningEmptyString() throws Throwable  {
      String upperFirstChar = StringUtils.toUpperFirstChar("");
      assertEquals("", upperFirstChar);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetJavaNameReturningNonEmptyString() throws Throwable  {
      String javaName = StringUtils.getJavaName("8");
      assertEquals("8", javaName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testValueOfReturningEmptyString() throws Throwable  {
      String valueOf = StringUtils.valueOf((Object) null);
      assertEquals("", valueOf);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testValueOfReturningNonEmptyString() throws Throwable  {
      String valueOf = StringUtils.valueOf("uZ#|6ia:k8O");
      assertEquals("uZ#|6ia:k8O", valueOf);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testExistsWithNull() throws Throwable  {
      boolean exists = StringUtils.exists((String) null);
      assertFalse(exists);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testInitCapReturningNonEmptyString() throws Throwable  {
      String initCap = StringUtils.initCap("kw");
      assertEquals("Kw", initCap);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testInitCapReturningNull() throws Throwable  {
      String initCap = StringUtils.initCap((String) null);
      assertNull(initCap);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testInitCapReturningEmptyString() throws Throwable  {
      String initCap = StringUtils.initCap("");
      assertEquals("", initCap);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReplaceWithNonEmptyString() throws Throwable  {
      String replace = StringUtils.replace("^-?d+.?d*$", "-", "-");
      assertEquals("^-?d+.?d*$", replace);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReplaceThrowsTooManyResourcesException() throws Throwable  {
      // Undeclared exception!
      StringUtils.replace("", "", "");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReplaceReturningEmptyString() throws Throwable  {
      String replace = StringUtils.replace("", "4S;V})F+eQ1!.lm%", "^@H8{");
      assertEquals("", replace);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReplaceThrowsIllegalArgumentException() throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replace("E2", "if-1x1fQ", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot accept null argument
         //
         verifyException("framework.util.StringUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReplaceWithNull() throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replace(">", (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot accept null argument
         //
         verifyException("framework.util.StringUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReplaceReturningNull() throws Throwable  {
      String replace = StringUtils.replace((String) null, (String) null, (String) null);
      assertNull(replace);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testTrimEmptyToNullReturningNonEmptyString() throws Throwable  {
      String trimEmptyToNull = StringUtils.trimEmptyToNull("E2");
      assertEquals("E2", trimEmptyToNull);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testTrimEmptyToNullWithEmptyString() throws Throwable  {
      String trimEmptyToNull = StringUtils.trimEmptyToNull("");
      assertNull(trimEmptyToNull);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testTrimEmptyToNullWithNull() throws Throwable  {
      String trimEmptyToNull = StringUtils.trimEmptyToNull((String) null);
      assertNull(trimEmptyToNull);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testStringToListTaking1And1ReturningListWhereIsEmptyIsFalse() throws Throwable  {
      List stringToList = StringUtils.stringToList("&wT2", '2');
      assertEquals(1, stringToList.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPrettyPrintWithNonEmptyStringAndNonEmptyString() throws Throwable  {
      HashMap<String, String> arg0 = new HashMap<String, String>();
      arg0.put("S", "S");
      String prettyPrint = StringUtils.prettyPrint(arg0, "S", (String) null, "RC>5!3W_", "touppercase");
      assertNotNull(prettyPrint);
      assertEquals("SRC>5!3W_", prettyPrint);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPrettyPrint() throws Throwable  {
      HashMap<String, String> arg0 = new HashMap<String, String>();
      arg0.put("8", "8");
      String prettyPrint = StringUtils.prettyPrint(arg0, "8", (String) null, (String) null, (String) null);
      assertNotNull(prettyPrint);
      assertEquals("8", prettyPrint);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPrettyPrintWithEmptyMap() throws Throwable  {
      HashMap<String, String> arg0 = new HashMap<String, String>();
      String prettyPrint = StringUtils.prettyPrint(arg0, "8", (String) null, (String) null, (String) null);
      assertEquals("8", prettyPrint);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPrettyPrintReturningEmptyString() throws Throwable  {
      HashMap<String, String> arg0 = new HashMap<String, String>();
      String prettyPrint = StringUtils.prettyPrint(arg0, "", "ER_TYPED_ITERATOR_AXIS_NOT_IMPLEMENTED", "ER_TYPED_ITERATOR_AXIS_NOT_IMPLEMENTED", "^aE45EH3y<lXs{|hql~");
      assertEquals("", prettyPrint);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPrettyPrintWithNonEmptyString() throws Throwable  {
      HashMap<String, String> arg0 = new HashMap<String, String>();
      String prettyPrint = StringUtils.prettyPrint(arg0, "8", "_F4-P)^", "_F4-P)^", "_F4-P)^");
      assertEquals("8", prettyPrint);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetKeywordPathThrowsNoClassDefFoundError() throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getKeywordPath();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class framework.ApplicationParameters
         //
         verifyException("framework.util.StringUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsPositiveIntegerReturningTrue() throws Throwable  {
      boolean positiveInteger = StringUtils.isPositiveInteger("", true);
      assertTrue(positiveInteger);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsWhitespaceReturningTrue() throws Throwable  {
      boolean whitespace = StringUtils.isWhitespace(" \t\n\r\f", true);
      assertTrue(whitespace);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetKeywordFileExtensionThrowsNoClassDefFoundError() throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getKeywordFileExtension();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class framework.ApplicationParameters
         //
         verifyException("framework.util.StringUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testStringToStringArrayReturningNonEmptyArray() throws Throwable  {
      String[] stringToStringArray = StringUtils.stringToStringArray("Must have a NodeVector as the object for NodeSequence!", "E2");
      assertEquals(1, stringToStringArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsJavaNameReturningTrue() throws Throwable  {
      boolean javaName = StringUtils.isJavaName("one");
      assertTrue(javaName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsBooleanReturningFalse() throws Throwable  {
      boolean _boolean = StringUtils.isBoolean("xbS\"OIz)GW& 6", true);
      assertFalse(_boolean);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesStringUtils() throws Throwable  {
      StringUtils stringUtils = new StringUtils();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsPositiveFloatReturningTrue() throws Throwable  {
      boolean positiveFloat = StringUtils.isPositiveFloat("", true);
      assertTrue(positiveFloat);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsIntegerReturningTrue() throws Throwable  {
      boolean integer = StringUtils.isInteger("", true);
      assertTrue(integer);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReformatReturningEmptyString() throws Throwable  {
      String reformat = StringUtils.reformat("");
      assertEquals("", reformat);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsEmailReturningTrue() throws Throwable  {
      boolean email = StringUtils.isEmail("", true);
      assertTrue(email);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testStringArrayToList() throws Throwable  {
      String[] arg0 = new String[1];
      List stringArrayToList = StringUtils.stringArrayToList(arg0);
      assertEquals(1, stringArrayToList.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsJavaPackageNameReturningFalse() throws Throwable  {
      boolean javaPackageName = StringUtils.isJavaPackageName(":V");
      assertFalse(javaPackageName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReplacePatternTaking3ArgumentsReturningEmptyString() throws Throwable  {
      String replacePattern = StringUtils.replacePattern("", "", "");
      assertEquals("", replacePattern);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetKeywordDirectoryThrowsNoClassDefFoundError() throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getKeywordDirectory();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class framework.ApplicationParameters
         //
         verifyException("framework.util.StringUtils", e);
      }
  }
}
