/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 21 02:21:07 GMT 2024
 */

package org.templateit;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.templateit.Reference;
import org.templateit.Region;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Region_Original_ESTest extends Region_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testStartReturningReferenceWhereRowIsPositive() throws Throwable  {
      Region region = new Region();
      Reference arg0 = new Reference(1, 1);
      region.setStartReference(arg0);
      Reference start = region.start();
      assertSame(start, arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testStartReturningReferenceWhereColumnIsZero() throws Throwable  {
      Reference arg1 = new Reference(0, 0);
      Region region = new Region(arg1, arg1);
      Reference start = region.start();
      assertSame(start, arg1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testStartReturningReferenceWhereColumnIsNegative() throws Throwable  {
      Region region = new Region();
      Reference arg0 = new Reference(0, (-1));
      region.setStartReference(arg0);
      Reference start = region.start();
      assertEquals(0, start.row());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEndReturningReferenceWhereRowIsNegative() throws Throwable  {
      Reference arg1 = new Reference(0, 0);
      Region region = new Region(arg1, arg1);
      Reference arg0 = new Reference((-568), 0);
      region.setEndReference(arg0);
      Reference end = region.end();
      assertNotSame(arg1, end);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEnd() throws Throwable  {
      Reference arg1 = new Reference(0, 0);
      Region region = new Region(arg1, arg1);
      Reference end = region.end();
      assertEquals(0, end.row());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEndReturningReferenceWhereColumnIsPositive() throws Throwable  {
      Region region = new Region();
      Reference arg0 = new Reference(1, 1);
      region.setEndReference(arg0);
      Reference end = region.end();
      assertEquals(1, end.row());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testContainsTakingReferenceWithReferenceWhereColumnIsPositive() throws Throwable  {
      Reference arg1 = new Reference(2727, 2727);
      Region region = new Region(arg1, arg1);
      Reference arg0 = new Reference(3229, 1889);
      region.setEndReference(arg0);
      boolean contains = region.contains(arg0);
      assertFalse(contains);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testContainsTakingReferenceWithReferenceWhereRowIsZero() throws Throwable  {
      Reference arg0 = new Reference(0, 0);
      Region region = new Region(arg0, arg0);
      boolean contains = region.contains(arg0);
      assertTrue(contains);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testContainsTakingReferenceWithReferenceWhereColumnIsNegative() throws Throwable  {
      Reference arg0 = new Reference((-1), (-1));
      Region region = new Region(arg0, arg0);
      boolean contains = region.contains(arg0);
      assertTrue(contains);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testContainsTakingReference() throws Throwable  {
      Reference arg1 = new Reference(0, 0);
      Region region = new Region(arg1, arg1);
      Reference arg0 = new Reference((-568), 0);
      boolean contains = region.contains(arg0);
      assertFalse(contains);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testContainsTakingRegionReturningTrue() throws Throwable  {
      Reference arg1 = new Reference((-1), (-1));
      Region arg0 = new Region(arg1, arg1);
      boolean contains = arg0.contains(arg0);
      assertTrue(contains);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testContainsTakingRegionWithNonNull() throws Throwable  {
      Reference arg1 = new Reference(0, (-739));
      Region arg0 = new Region(arg1, arg1);
      boolean contains = arg0.contains(arg0);
      assertTrue(contains);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEndReturningReferenceWhereColumnIsNegative() throws Throwable  {
      Region region = new Region();
      Reference arg0 = new Reference(0, (-1));
      region.setEndReference(arg0);
      Reference end = region.end();
      assertSame(end, arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testStartReturningNull() throws Throwable  {
      Region region = new Region();
      Reference start = region.start();
      assertNull(start);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToString() throws Throwable  {
      Reference arg1 = new Reference(0, (-739));
      Region region = new Region(arg1, arg1);
      String string = region.toString();
      assertEquals("0,-739,0,-739", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEndReturningNull() throws Throwable  {
      Region region = new Region();
      Reference end = region.end();
      assertNull(end);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testStartReturningReferenceWhereRowIsNegative() throws Throwable  {
      Region region = new Region();
      Reference arg0 = new Reference((-1), 587);
      region.setStartReference(arg0);
      Reference start = region.start();
      assertEquals((-1), start.row());
  }
}
