/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 21 04:31:55 GMT 2024
 */

package net.sf.sugar.fspath;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import java.io.File;
import java.net.URI;
import java.util.Date;
import net.sf.sugar.fspath.FSPathResult;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FSPathResult_Original_ESTest extends FSPathResult_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetURIReturningNull() throws Throwable  {
      Double arg0 = new Double((-1602.784826347408));
      FSPathResult fSPathResult = new FSPathResult(arg0);
      URI uRI = fSPathResult.getURI();
      assertNull(uRI);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetURIReturningURIWhereIsOpaqueIsTrue() throws Throwable  {
      URI arg0 = MockURI.URI("L", "L", "net.sf.sugar.fspath.FSPathResult");
      FSPathResult fSPathResult = new FSPathResult(arg0);
      URI uRI = fSPathResult.getURI();
      assertNull(uRI.getRawUserInfo());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetURIReturningURIWhereGetPortIsPositive() throws Throwable  {
      URI arg0 = MockURI.URI("net.sf.sugar.fspath.FSPathResult", "", "net.sf.sugar.fspath.FSPathResult", 1146, "", "Zwp^dzVO6P", "Jd(orXh]1hV");
      FSPathResult fSPathResult = new FSPathResult(arg0);
      URI uRI = fSPathResult.getURI();
      assertEquals("net.sf.sugar.fspath.FSPathResult://@net.sf.sugar.fspath.FSPathResult:1146?Zwp%5EdzVO6P#Jd(orXh]1hV", uRI.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetURIReturningURIWhereIsAbsoluteIsFalse() throws Throwable  {
      URI arg0 = MockURI.URI("");
      FSPathResult fSPathResult = new FSPathResult(arg0);
      URI uRI = fSPathResult.getURI();
      assertNull(uRI.getRawAuthority());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStringReturningNonEmptyString() throws Throwable  {
      FSPathResult fSPathResult = new FSPathResult("SZi])_");
      String string = fSPathResult.getString();
      assertEquals("SZi])_", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStringReturningEmptyString() throws Throwable  {
      FSPathResult fSPathResult = new FSPathResult("");
      String string = fSPathResult.getString();
      assertEquals("", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFileReturningNull() throws Throwable  {
      URI arg0 = MockURI.URI("net.sf.sugar.fspath.FSPathResult", "net.sf.sugar.fspath.FSPathResult", "net.sf.sugar.fspath.FSPathResult", 0, (String) null, (String) null, "");
      FSPathResult fSPathResult = new FSPathResult(arg0);
      File file = fSPathResult.getFile();
      assertNull(file);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFileReturningFileWhereLastModifiedIsNegative() throws Throwable  {
      System.setCurrentTimeMillis((-2240L));
      File arg0 = MockFile.createTempFile("FSPathResult : empty", "FSPathResult : empty");
      FSPathResult fSPathResult = new FSPathResult(arg0);
      File file = fSPathResult.getFile();
      assertEquals((-2240L), file.lastModified());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFileReturningFileWhereLastModifiedIsZero() throws Throwable  {
      MockFile arg0 = new MockFile("", ".)dg;OZM'a");
      FSPathResult fSPathResult = new FSPathResult(arg0);
      File file = fSPathResult.getFile();
      assertFalse(file.canWrite());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDateReturningNonNull() throws Throwable  {
      MockDate arg0 = new MockDate(0L);
      FSPathResult fSPathResult = new FSPathResult(arg0);
      Date date = fSPathResult.getDate();
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToStringReturningEmptyString() throws Throwable  {
      URI arg0 = MockURI.URI("");
      FSPathResult fSPathResult = new FSPathResult(arg0);
      String string = fSPathResult.toString();
      assertEquals("", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToStringReturningNonEmptyString() throws Throwable  {
      FSPathResult fSPathResult = new FSPathResult((Boolean) null);
      String string = fSPathResult.toString();
      assertEquals("FSPathResult : empty", string);
      assertNotNull(string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesFSPathResultTakingBoolean() throws Throwable  {
      Boolean arg0 = Boolean.TRUE;
      FSPathResult fSPathResult = new FSPathResult(arg0);
      String string = fSPathResult.toString();
      assertEquals("true", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesFSPathResultTakingDouble() throws Throwable  {
      Double arg0 = new Double((-1602.784826347408));
      FSPathResult fSPathResult = new FSPathResult(arg0);
      String string = fSPathResult.toString();
      assertEquals("-1602.784826347408", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesFSPathResultTakingFile() throws Throwable  {
      MockFile arg0 = new MockFile("hOt2+5BmR!88");
      FSPathResult fSPathResult = new FSPathResult(arg0);
      String string = fSPathResult.toString();
      assertEquals("/home/ubuntu/getting-new-results-dynamosa/non-trivial-java-classes-to-study-search-based-software-testing-approaches/subjects/60_sugar/hOt2+5BmR!88", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFileReturningFileWhereLastModifiedIsPositive() throws Throwable  {
      MockFile arg0 = new MockFile("");
      FSPathResult fSPathResult = new FSPathResult(arg0);
      File file = fSPathResult.getFile();
      assertEquals(0L, file.getTotalSpace());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesFSPathResultTakingDate() throws Throwable  {
      MockDate arg0 = new MockDate();
      FSPathResult fSPathResult = new FSPathResult(arg0);
      String string = fSPathResult.toString();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", string);
      assertNotNull(string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStringReturningNull() throws Throwable  {
      Boolean arg0 = Boolean.TRUE;
      FSPathResult fSPathResult = new FSPathResult(arg0);
      String string = fSPathResult.getString();
      assertNull(string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDateReturningNull() throws Throwable  {
      MockFile arg0 = new MockFile("hOt2+5BmR!88");
      FSPathResult fSPathResult = new FSPathResult(arg0);
      Date date = fSPathResult.getDate();
      assertNull(date);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesFSPathResultTakingString() throws Throwable  {
      FSPathResult fSPathResult = new FSPathResult("(en);bge1T");
      String string = fSPathResult.toString();
      assertEquals("(en);bge1T", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetURIReturningURIWhereGetPortIsZero() throws Throwable  {
      URI arg0 = MockURI.URI("net.sf.sugar.fspath.FSPathResult", "net.sf.sugar.fspath.FSPathResult", "net.sf.sugar.fspath.FSPathResult", 0, (String) null, (String) null, "");
      FSPathResult fSPathResult = new FSPathResult(arg0);
      URI uRI = fSPathResult.getURI();
      assertSame(arg0, uRI);
  }
}
