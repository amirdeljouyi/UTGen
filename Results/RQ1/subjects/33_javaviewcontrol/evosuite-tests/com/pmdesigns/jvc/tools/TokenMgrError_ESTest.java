/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Mon Mar 18 02:33:34 GMT 2024
 */

package com.pmdesigns.jvc.tools;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import com.pmdesigns.jvc.tools.TokenMgrError;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TokenMgrError_ESTest extends TokenMgrError_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMessageReturningNonEmptyString() throws Throwable  {
      TokenMgrError tokenMgrError = new TokenMgrError("Unexpected character '?' in number literal", 0);
      String message = tokenMgrError.getMessage();
      assertEquals("Expecting a number literal but found '?' instead", message);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddEscapesReturningEmptyString() throws Throwable  {
      // No Comments were added
      String addEscapes = TokenMgrError.addEscapes("");
      assertEquals("", addEscapes);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLexicalErrorWithTrueAndZero() throws Throwable  {
      // rollbacked to evosuite
      String LexicalError = TokenMgrError.LexicalError(true, 1035, 0, 0, "w&XE%g2Yb* ", 'y');
      assertEquals("Lexical error at line 0, column 0.  Encountered: <EOF> after : \"w&XE%g2Yb\\u007f* \"", LexicalError);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddEscapesReturningNonEmptyString() throws Throwable  {
      // No Comments were added
      String addEscapes = TokenMgrError.addEscapes("\u001BL=\u001B6MAD[O");
      assertEquals("\\u001bL=\\u001b6MAD[O", addEscapes);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLexicalErrorWithAlphabeticChar() throws Throwable  {
      // rollbacked to evosuite
      String LexicalError = TokenMgrError.LexicalError(false, 4, (-629), 0, "1?J[4f\",", 'z');
      assertEquals("Lexical error at line -629, column 0.  Encountered: \"z\" (122), after : \"1?J[4f\\\",\"", LexicalError);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMessageReturningEmptyString() throws Throwable  {
      // Create a new TokenMgrError with a specific error code (-2733)
      TokenMgrError tokenMgrError = new TokenMgrError("", -2733);
      
      // Get the message associated with the error code
      String message = tokenMgrError.getMessage();
      
      // Assert that the message is an empty string
      assertEquals("", message);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTokenMgrErrorTaking7Arguments() throws Throwable  {
      // rollbacked to evosuite
      TokenMgrError tokenMgrError = new TokenMgrError(true, 1, 2, 3, "Unexpected character 'a'", 'b', 4);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesTokenMgrErrorTakingNoArguments() throws Throwable  {
      // Given a TokenMgrError instance with a null message
      TokenMgrError tokenMgrError = new TokenMgrError();
      assertNull(tokenMgrError.getMessage());
      
      // When we retrieve the message of the token manager error
      String message = tokenMgrError.getMessage();
      
      // Then we expect the message to be null
      assertNull(message);
  }
}
