/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 20 23:35:39 GMT 2024
 */

package com.werken.saxpath;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XPathLexer_Original_ESTest extends XPathLexer_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRelationalOperatorReturningTokenWhereGetTokenTypeIsPositive() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer(">G2cN'`QiDkp$:&1]+E");
      Token relationalOperator = xPathLexer.relationalOperator();
      assertEquals(9, relationalOperator.getTokenType());
      assertEquals(">", relationalOperator.getTokenText());
      assertNotNull(relationalOperator);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLiteral() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer(">G2cN'`QiD/p$:&1]+E");
      Token literal = xPathLexer.literal();
      assertNull(literal);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsIdentifierStartCharReturningTrue() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("~}zgR^V@3,");
      boolean identifierStartChar = xPathLexer.isIdentifierStartChar('G');
      assertTrue(identifierStartChar);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsIdentifierStartCharReturningFalse() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("eB|~,\"s|^*eL4>E");
      boolean identifierStartChar = xPathLexer.isIdentifierStartChar('0');
      assertFalse(identifierStartChar);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsIdentifierCharReturningTrue() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("[ (");
      boolean identifierChar = xPathLexer.isIdentifierChar('z');
      assertTrue(identifierChar);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsIdentifierCharReturningFalse() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer();
      boolean identifierChar = xPathLexer.isIdentifierChar('/');
      assertFalse(identifierChar);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHasMoreCharsReturningTrue() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("4l/]");
      boolean moreChars = xPathLexer.hasMoreChars();
      assertTrue(moreChars);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHasMoreCharsReturningFalse() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer();
      boolean moreChars = xPathLexer.hasMoreChars();
      assertFalse(moreChars);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetXPathReturningNull() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer();
      String xPath = xPathLexer.getXPath();
      assertNull(xPath);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetXPathReturningNonEmptyString() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer");
      String xPath = xPathLexer.getXPath();
      assertEquals("com.werken.saxpath.XPathLexer", xPath);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPreviousTokenReturningNull() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("cZM$ib.8p&M[u}Ele/");
      Token previousToken = xPathLexer.getPreviousToken();
      assertNull(previousToken);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPreviousTokenReturningTokenWhereGetTokenTypeIsPositive() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("u?PXg5rvj~dg\u0004,");
      Token arg0 = xPathLexer.rightParen();
      xPathLexer.setPreviousToken(arg0);
      Token previousToken = xPathLexer.getPreviousToken();
      assertEquals("u", previousToken.getTokenText());
      assertEquals(2, previousToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEndPositionReturningZero() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer();
      int endPosition = xPathLexer.endPosition();
      assertEquals(0, endPosition);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEndPositionReturningPositive() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer(".6y");
      int endPosition = xPathLexer.endPosition();
      assertEquals(3, endPosition);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCurrentPositionReturningZero() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer();
      int currentPosition = xPathLexer.currentPosition();
      assertEquals(0, currentPosition);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCurrentPositionReturningPositive() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer();
      Token pipe = xPathLexer.pipe();
      assertEquals(17, pipe.getTokenType());
      
      int currentPosition = xPathLexer.currentPosition();
      assertEquals(1, currentPosition);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCurrentPositionReturningNegative() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer();
      xPathLexer.consume((-119));
      int currentPosition = xPathLexer.currentPosition();
      assertEquals((-119), currentPosition);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLAReturningOtherChar() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("u?PXg5rvj~dg\u0004,");
      char LA = xPathLexer.LA(112);
      assertEquals('\uFFFF', LA);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLAReturningAlphabeticChar() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("^)!ylTe");
      xPathLexer.consume();
      Token nextToken = xPathLexer.nextToken();
      assertEquals(")", nextToken.getTokenText());
      assertEquals(2, nextToken.getTokenType());
      
      Token minus = xPathLexer.minus();
      assertEquals(6, minus.getTokenType());
      assertEquals("!", minus.getTokenText());
      
      char LA = xPathLexer.LA(1);
      assertEquals('y', LA);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetXPathReturningEmptyString() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("");
      String xPath = xPathLexer.getXPath();
      assertEquals("", xPath);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRelationalOperatorReturningNull() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("cZM$ib.8p&M[u}Ele/");
      Token relationalOperator = xPathLexer.relationalOperator();
      assertNull(relationalOperator);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndCallsWhitespace() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("[ (");
      Token whitespace = xPathLexer.whitespace();
      assertEquals("", whitespace.getTokenText());
      assertEquals((-2), whitespace.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndCallsNumber() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("..L*S");
      Token number = xPathLexer.number();
      assertEquals(31, number.getTokenType());
      assertEquals(".", number.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOr() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("[/X:");
      Token or = xPathLexer.or();
      assertNull(or);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAnd() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("cZM$ib.8p&M[u}Ele/");
      Token and = xPathLexer.and();
      assertNull(and);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDiv() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("cZM$ib.8p&M[u}Ele/");
      Token div = xPathLexer.div();
      assertNull(div);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMod() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("u?PXg5rvj~dg\u0004,");
      Token mod = xPathLexer.mod();
      assertNull(mod);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndCallsOperatorName() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("oL\"XZqx`Ho}");
      Token operatorName = xPathLexer.operatorName();
      assertNull(operatorName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testOperatorName() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer.star();
      xPathLexer.equals();
      Token operatorName = xPathLexer.operatorName();
      assertNull(operatorName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenAndNumber() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token arg0 = xPathLexer.number();
      xPathLexer.setPreviousToken(arg0);
      assertEquals(30, arg0.getTokenType());
      
      Token nextToken = xPathLexer.nextToken();
      assertEquals("com.werken.saxpath.XPathLexer", nextToken.getTokenText());
      assertEquals((-1), nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIdentifierOrOperatorName() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("!H>@9_z~|L");
      Token arg0 = new Token(29, "", 29, 29);
      xPathLexer.setPreviousToken(arg0);
      Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName();
      assertEquals(15, identifierOrOperatorName.getTokenType());
      assertEquals("", identifierOrOperatorName.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenAndDollar() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("|RN:o?t");
      Token arg0 = xPathLexer.dollar();
      xPathLexer.setPreviousToken(arg0);
      assertEquals(26, arg0.getTokenType());
      assertEquals("|", arg0.getTokenText());
      
      Token nextToken = xPathLexer.nextToken();
      assertEquals("RN", nextToken.getTokenText());
      assertEquals(15, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenAndSetPreviousToken() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("|RN:&o?t");
      Token arg0 = xPathLexer.notEquals();
      xPathLexer.setPreviousToken(arg0);
      assertEquals(22, arg0.getTokenType());
      assertEquals("|R", arg0.getTokenText());
      
      Token nextToken = xPathLexer.nextToken();
      assertEquals(15, nextToken.getTokenType());
      assertEquals("N", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenAndEquals() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token arg0 = xPathLexer.equals();
      xPathLexer.setPreviousToken(arg0);
      assertEquals(21, arg0.getTokenType());
      assertEquals("c", arg0.getTokenText());
      
      Token nextToken = xPathLexer.nextToken();
      assertEquals("om.werken.saxpath.XPathLexer", nextToken.getTokenText());
      assertEquals(15, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIdentifierOrOperatorNameAndStar() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer();
      Token arg0 = xPathLexer.star();
      xPathLexer.setPreviousToken(arg0);
      assertEquals(20, arg0.getTokenType());
      
      Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName();
      assertEquals(15, identifierOrOperatorName.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDoubleColon() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token arg0 = xPathLexer.doubleColon();
      xPathLexer.setPreviousToken(arg0);
      assertEquals(19, arg0.getTokenType());
      assertEquals("co", arg0.getTokenText());
      
      Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName();
      assertEquals(15, identifierOrOperatorName.getTokenType());
      assertEquals("m.werken.saxpath.XPathLexer", identifierOrOperatorName.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testColon() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer();
      Token arg0 = xPathLexer.colon();
      xPathLexer.setPreviousToken(arg0);
      assertEquals(18, arg0.getTokenType());
      
      Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName();
      assertEquals(15, identifierOrOperatorName.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPipe() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer();
      Token arg0 = xPathLexer.pipe();
      xPathLexer.setPreviousToken(arg0);
      assertEquals(17, arg0.getTokenType());
      
      Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName();
      assertEquals(15, identifierOrOperatorName.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLeftBracketAndRightParen() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("u?PXg5rvj~dg\u0004,");
      Token rightParen = xPathLexer.rightParen();
      assertEquals(2, rightParen.getTokenType());
      assertEquals("u", rightParen.getTokenText());
      
      xPathLexer.slashes();
      Token leftBracket = xPathLexer.leftBracket();
      assertEquals("P", leftBracket.getTokenText());
      assertEquals(3, leftBracket.getTokenType());
      
      Token arg0 = xPathLexer.at();
      Token slashes = xPathLexer.slashes();
      assertEquals("g", slashes.getTokenText());
      assertEquals(11, slashes.getTokenType());
      
      xPathLexer.setPreviousToken(arg0);
      assertEquals("X", arg0.getTokenText());
      assertEquals(16, arg0.getTokenType());
      
      Token colon = xPathLexer.colon();
      assertEquals(18, colon.getTokenType());
      assertEquals("5", colon.getTokenText());
      
      Token nextToken = xPathLexer.nextToken();
      assertEquals(15, nextToken.getTokenType());
      assertEquals("rvj", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIdentifierOrOperatorNameAndSlashes0() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("[/X:");
      Token arg0 = xPathLexer.slashes();
      xPathLexer.setPreviousToken(arg0);
      assertEquals("[/", arg0.getTokenText());
      assertEquals(12, arg0.getTokenType());
      
      Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName();
      assertEquals("X", identifierOrOperatorName.getTokenText());
      assertEquals(15, identifierOrOperatorName.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIdentifierOrOperatorNameAndSlashes1() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token arg0 = xPathLexer.slashes();
      xPathLexer.setPreviousToken(arg0);
      assertEquals("c", arg0.getTokenText());
      assertEquals(11, arg0.getTokenType());
      
      Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName();
      assertEquals("om.werken.saxpath.XPathLexer", identifierOrOperatorName.getTokenText());
      assertEquals(15, identifierOrOperatorName.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMinus() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("u?PXg5rvj~dg\u0004,");
      Token arg0 = xPathLexer.minus();
      xPathLexer.setPreviousToken(arg0);
      assertEquals("u", arg0.getTokenText());
      assertEquals(6, arg0.getTokenType());
      
      Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName();
      assertEquals("", identifierOrOperatorName.getTokenText());
      assertEquals(15, identifierOrOperatorName.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive0() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer(".9");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(31, nextToken.getTokenType());
      assertEquals(".9", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive1() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer(".7/Y");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(".7", nextToken.getTokenText());
      assertEquals(31, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive2() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer(".6y");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(31, nextToken.getTokenType());
      assertEquals(".6", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetXPath() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("\"><~Nl:ml<\"*");
      xPathLexer.setXPath("i.3{1Hu[xZmw");
      Token leftParen = xPathLexer.leftParen();
      assertEquals(1, leftParen.getTokenType());
      assertEquals("i", leftParen.getTokenText());
      
      Token nextToken = xPathLexer.nextToken();
      assertEquals(".3", nextToken.getTokenText());
      assertEquals(31, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextToken() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("~,.2J");
      Token notEquals = xPathLexer.notEquals();
      assertEquals("~,", notEquals.getTokenText());
      assertEquals(22, notEquals.getTokenType());
      
      Token nextToken = xPathLexer.nextToken();
      assertEquals(31, nextToken.getTokenType());
      assertEquals(".2", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIdentifierOrOperatorNameReturningNull() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("^)!y`ae");
      xPathLexer.notEquals();
      xPathLexer.nextToken();
      Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName();
      assertNull(identifierOrOperatorName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsNegative0() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("{Z%Od%6m3");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("{Z%Od%6m3", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAt() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("tezOC{7KXJ>vRdZw");
      Token at = xPathLexer.at();
      assertEquals("t", at.getTokenText());
      assertEquals(16, at.getTokenType());
      
      Token leftParen = xPathLexer.leftParen();
      assertEquals("e", leftParen.getTokenText());
      assertEquals(1, leftParen.getTokenType());
      
      Token nextToken = xPathLexer.nextToken();
      assertEquals("zOC", nextToken.getTokenText());
      assertEquals(15, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPreviousTokenReturningTokenWhereGetTokenTypeIsNegative() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("^)!ylTe");
      xPathLexer.consume();
      Token nextToken = xPathLexer.nextToken();
      assertEquals(2, nextToken.getTokenType());
      assertEquals(")", nextToken.getTokenText());
      
      Token minus = xPathLexer.minus();
      assertEquals("!", minus.getTokenText());
      assertEquals(6, minus.getTokenType());
      
      xPathLexer.nextToken();
      Token previousToken = xPathLexer.getPreviousToken();
      assertEquals((-1), previousToken.getTokenType());
      assertEquals("ylTe", previousToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive3() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("vt02-2yB");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("vt02-2yB", nextToken.getTokenText());
      assertEquals(15, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive4() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("tq0\"<FH4FVy");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(15, nextToken.getTokenType());
      assertEquals("tq0", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive5() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("s|N(Pue_!;7y0|0!b<");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("s", nextToken.getTokenText());
      assertEquals(15, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive6() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("q#OK;(fGZM>O_");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("q", nextToken.getTokenText());
      assertEquals(15, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive7() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("p");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(15, nextToken.getTokenType());
      assertEquals("p", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive8() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("m");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("m", nextToken.getTokenText());
      assertEquals(15, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive9() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("l ");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("l", nextToken.getTokenText());
      assertEquals(15, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testConsumeTakingNoArguments() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token star = xPathLexer.star();
      assertEquals(20, star.getTokenType());
      assertEquals("c", star.getTokenText());
      
      Token dollar = xPathLexer.dollar();
      assertEquals(26, dollar.getTokenType());
      assertEquals("o", dollar.getTokenText());
      
      Token doubleColon = xPathLexer.doubleColon();
      assertEquals("m.", doubleColon.getTokenText());
      assertEquals(19, doubleColon.getTokenType());
      
      Token pipe = xPathLexer.pipe();
      assertEquals("w", pipe.getTokenText());
      assertEquals(17, pipe.getTokenType());
      
      xPathLexer.consume(1);
      xPathLexer.consume();
      Token nextToken = xPathLexer.nextToken();
      assertEquals(15, nextToken.getTokenType());
      assertEquals("ken.saxpath.XPathLexer", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive10() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("jo;-*HgW|Wg(");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("jo", nextToken.getTokenText());
      assertEquals(15, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive11() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("hxNS1x~");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(15, nextToken.getTokenType());
      assertEquals("hxNS1x", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive12() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("gA~~@9z'");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(15, nextToken.getTokenType());
      assertEquals("gA", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive13() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("fR%n=m9iW!;");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(15, nextToken.getTokenType());
      assertEquals("fR", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsNegative1() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("` 8]a3L3G.P");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("` 8]a3L3G.P", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive14() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("_\"q.1:'pRRLIw<%%u");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(15, nextToken.getTokenType());
      assertEquals("_", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsNegative2() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("^)!y`ae");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("^)!y`ae", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive15() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("ZU.2J");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("ZU.2J", nextToken.getTokenText());
      assertEquals(15, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive16() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("Y_Iwe");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(15, nextToken.getTokenType());
      assertEquals("Y_Iwe", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive17() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("X");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(15, nextToken.getTokenType());
      assertEquals("X", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive18() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("W7&(4g8ca");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("W7", nextToken.getTokenText());
      assertEquals(15, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive19() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("Vuo3# 5}/|<15Yto");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("Vuo3", nextToken.getTokenText());
      assertEquals(15, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive20() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("U:*1");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("U", nextToken.getTokenText());
      assertEquals(15, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive21() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("S|q|'=");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(15, nextToken.getTokenType());
      assertEquals("S", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenAndWhitespace() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("u?PXg5rvj~dg\u0004,");
      Token leftParen = xPathLexer.leftParen();
      assertEquals("u", leftParen.getTokenText());
      assertEquals(1, leftParen.getTokenType());
      
      Token whitespace = xPathLexer.whitespace();
      assertEquals((-2), whitespace.getTokenType());
      assertEquals("", whitespace.getTokenText());
      
      Token nextToken = xPathLexer.nextToken();
      assertEquals(15, nextToken.getTokenType());
      assertEquals("PXg5rvj", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive22() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("OB#W)\"<");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(15, nextToken.getTokenType());
      assertEquals("OB", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive23() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("L");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(15, nextToken.getTokenType());
      assertEquals("L", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive24() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("Kb]2|q<mU");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("Kb", nextToken.getTokenText());
      assertEquals(15, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive25() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("J?&amvtd%Sr<,");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(15, nextToken.getTokenType());
      assertEquals("J", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive26() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("IWu$X`");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("IWu", nextToken.getTokenText());
      assertEquals(15, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive27() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("HasnKv(4s");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(15, nextToken.getTokenType());
      assertEquals("HasnKv", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive28() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("F[d&");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("F", nextToken.getTokenText());
      assertEquals(15, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive29() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("D=NDtN/gMH+");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("D", nextToken.getTokenText());
      assertEquals(15, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive30() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("CB88lqzm@w;,");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("CB88lqzm", nextToken.getTokenText());
      assertEquals(15, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive31() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("BNEFy(W;,h\"h");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(15, nextToken.getTokenType());
      assertEquals("BNEFy", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsNegative3() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("?)x3<9S2hq");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("?)x3<9S2hq", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsNegative4() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer(";..7Z");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(";..7Z", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive32() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("9<L*");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("9", nextToken.getTokenText());
      assertEquals(30, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive33() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("8H8dLj$D");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(30, nextToken.getTokenType());
      assertEquals("8", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive34() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("798N)Dx&tYG+@n$V");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(30, nextToken.getTokenType());
      assertEquals("798", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive35() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("6>I9IVke{");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(30, nextToken.getTokenType());
      assertEquals("6", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive36() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("5&<Le");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(30, nextToken.getTokenType());
      assertEquals("5", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive37() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("4DdD3mRY}Oym@*");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(30, nextToken.getTokenType());
      assertEquals("4", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive38() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("3A");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(30, nextToken.getTokenType());
      assertEquals("3", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive39() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("2");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(30, nextToken.getTokenType());
      assertEquals("2", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive40() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("1f`Jo}U~79K&0");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(30, nextToken.getTokenType());
      assertEquals("1", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenAndStar() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("_PHL0");
      Token star = xPathLexer.star();
      assertEquals("_", star.getTokenText());
      assertEquals(20, star.getTokenType());
      
      Token dollar = xPathLexer.dollar();
      assertEquals(26, dollar.getTokenType());
      assertEquals("P", dollar.getTokenText());
      
      Token equals = xPathLexer.equals();
      assertEquals("H", equals.getTokenText());
      assertEquals(21, equals.getTokenType());
      
      Token leftParen = xPathLexer.leftParen();
      assertEquals(1, leftParen.getTokenType());
      assertEquals("L", leftParen.getTokenText());
      
      Token nextToken = xPathLexer.nextToken();
      assertEquals(30, nextToken.getTokenType());
      assertEquals("0", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive41() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("/kogt+@W");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(11, nextToken.getTokenType());
      assertEquals("/", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive42() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer(".1vwA(+n'0");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(31, nextToken.getTokenType());
      assertEquals(".1", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsNegative5() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("'ibr~W7mT),c=lXltr");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("", nextToken.getTokenText());
      assertEquals((-1), nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testNextTokenAndIdentifierOrOperatorName() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("5&<Le");
      Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName();
      assertEquals("5", identifierOrOperatorName.getTokenText());
      assertEquals(15, identifierOrOperatorName.getTokenType());
      assertNotNull(identifierOrOperatorName);
      
      Token nextToken = xPathLexer.nextToken();
      assertEquals("&<Le", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsNegative6() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("%r[V&9~_Q`LlY!");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("%r[V&9~_Q`LlY!", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsNegative7() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("#)'$&{m");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("#)'$&{m", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive43() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("\">~Nlmlb<\"*");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(">~Nlmlb<", nextToken.getTokenText());
      assertEquals(27, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testConsumeTakingInt() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer(" ~f.4H?");
      xPathLexer.consume(3);
      Token nextToken = xPathLexer.nextToken();
      assertEquals(31, nextToken.getTokenType());
      assertEquals(".4", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIdentifierOrOperatorNameAndLeftParen() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer();
      Token arg0 = xPathLexer.leftParen();
      xPathLexer.setPreviousToken(arg0);
      Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName();
      assertNotNull(identifierOrOperatorName);
      assertEquals(15, identifierOrOperatorName.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive44() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("-");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(6, nextToken.getTokenType());
      assertEquals("-", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive45() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("*");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("*", nextToken.getTokenText());
      assertEquals(20, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive46() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("=o!");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(21, nextToken.getTokenType());
      assertEquals("=", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive47() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("A?.)yg");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("A", nextToken.getTokenText());
      assertEquals(15, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive48() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("@4UXtC'3q{C");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("@", nextToken.getTokenText());
      assertEquals(16, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRightBracket() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("[/X:");
      Token rightBracket = xPathLexer.rightBracket();
      assertEquals("[", rightBracket.getTokenText());
      assertEquals(4, rightBracket.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive49() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("::]Mf]VZ#H'3Wqy(:,");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(19, nextToken.getTokenType());
      assertEquals("::", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPlus() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("fz?[]Dkl?L%C=vrA\"<");
      Token leftBracket = xPathLexer.leftBracket();
      assertEquals("f", leftBracket.getTokenText());
      
      Token whitespace = xPathLexer.whitespace();
      assertEquals("", whitespace.getTokenText());
      assertEquals((-2), whitespace.getTokenType());
      
      Token plus = xPathLexer.plus();
      assertEquals(5, plus.getTokenType());
      assertEquals("?", plus.getTokenText());
      
      Token nextToken = xPathLexer.nextToken();
      assertEquals(3, nextToken.getTokenType());
      
      Token identifierOrOperatorName = xPathLexer.identifierOrOperatorName();
      assertEquals(15, identifierOrOperatorName.getTokenType());
      assertEquals("", identifierOrOperatorName.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive50() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer(":bL*e");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(":", nextToken.getTokenText());
      assertEquals(18, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive51() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("|RN:o?t");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("|", nextToken.getTokenText());
      assertEquals(17, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIdentifier() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("OcZp!=.p!hSdklx%");
      Token identifier = xPathLexer.identifier();
      assertEquals("OcZp", identifier.getTokenText());
      assertEquals(15, identifier.getTokenType());
      
      Token nextToken = xPathLexer.nextToken();
      assertEquals("!=", nextToken.getTokenText());
      assertEquals(22, nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsPositive52() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("()[4:;G");
      Token nextToken = xPathLexer.nextToken();
      assertEquals(1, nextToken.getTokenType());
      assertEquals("(", nextToken.getTokenText());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesXPathLexerTakingStringAndNextTokenAndNextTokenReturningTokenWhereGetTokenTypeIsNegative8() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer(" ");
      Token nextToken = xPathLexer.nextToken();
      assertEquals("", nextToken.getTokenText());
      assertEquals((-1), nextToken.getTokenType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testComma() throws Throwable  {
      XPathLexer xPathLexer = new XPathLexer("798N)Dx&tYG+@n$V");
      Token comma = xPathLexer.comma();
      assertEquals(32, comma.getTokenType());
      assertEquals("7", comma.getTokenText());
      
      char LA = xPathLexer.LA(0);
      assertEquals('7', LA);
  }
}
