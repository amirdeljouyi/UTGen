/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 21 10:15:22 GMT 2024
 */

package com.jstevh.viewer;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jstevh.tools.StringList;
import com.jstevh.viewer.SAXDirParser;
import java.io.FileNotFoundException;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.xml.sax.ext.Attributes2Impl;
import org.xml.sax.helpers.AttributesImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SAXDirParser_Original_ESTest extends SAXDirParser_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetWebDataReturningNull() throws Throwable  {
      SAXDirParser sAXDirParser = new SAXDirParser();
      sAXDirParser.webData = null;
      String webData = sAXDirParser.getWebData();
      assertNull(webData);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetWebDataReturningNonEmptyString() throws Throwable  {
      SAXDirParser sAXDirParser = new SAXDirParser();
      sAXDirParser.webData = "4Ojh`-^`'lj";
      String webData = sAXDirParser.getWebData();
      assertEquals("4Ojh`-^`'lj", webData);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLocalPackages() throws Throwable  {
      StringList localPackages = SAXDirParser.getLocalPackages();
      assertNull(localPackages);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEndElementWithNonEmptyString() throws Throwable  {
      SAXDirParser sAXDirParser = new SAXDirParser();
      sAXDirParser.endElement(" uH[gk ff:@y", ",)tX1?t.Au", "Group");
      assertEquals("", sAXDirParser.getWebData());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEndElementWithEmptyString() throws Throwable  {
      SAXDirParser sAXDirParser = new SAXDirParser();
      sAXDirParser.endElement("!", "", "2}");
      assertEquals("", sAXDirParser.lineNumberParameter());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCharactersAndStartElementAndStartElementWithNonEmptyString0() throws Throwable  {
      SAXDirParser sAXDirParser = new SAXDirParser();
      Attributes2Impl arg3 = new Attributes2Impl();
      sAXDirParser.startElement("", "acceptsLineNumber", "acceptsLineNumber", arg3);
      char[] arg0 = new char[9];
      arg0[3] = '.';
      sAXDirParser.startElement("acceptsLineNumber", "acceptsLineNumber", "pkg", arg3);
      sAXDirParser.characters(arg0, 1, 3);
      assertEquals("", sAXDirParser.getLocalBrowser());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCharactersAndStartElementAndStartElementWithNonEmptyString1() throws Throwable  {
      SAXDirParser sAXDirParser = new SAXDirParser();
      Attributes2Impl arg3 = new Attributes2Impl();
      sAXDirParser.startElement("", "acceptsLineNumber", "acceptsLineNumber", arg3);
      char[] arg0 = new char[9];
      arg0[2] = '=';
      sAXDirParser.startElement("acceptsLineNumber", "acceptsLineNumber", "pkg", arg3);
      sAXDirParser.characters(arg0, 1, 3);
      assertEquals("", sAXDirParser.getLocalBrowser());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCharactersAndStartElementAndStartElementWithNonEmptyString2() throws Throwable  {
      SAXDirParser sAXDirParser = new SAXDirParser();
      Attributes2Impl arg3 = new Attributes2Impl();
      sAXDirParser.startElement("", "acceptsLineNumber", "acceptsLineNumber", arg3);
      char[] arg0 = new char[9];
      sAXDirParser.startElement("acceptsLineNumber", "acceptsLineNumber", "pkg", arg3);
      sAXDirParser.characters(arg0, 1, 3);
      assertEquals("", sAXDirParser.getEditor());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCharacters() throws Throwable  {
      SAXDirParser sAXDirParser = new SAXDirParser();
      char[] arg0 = new char[0];
      sAXDirParser.characters(arg0, 2160, (-43));
      assertEquals("", sAXDirParser.getEditor());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCharactersWithZeroAndZero() throws Throwable  {
      SAXDirParser sAXDirParser = new SAXDirParser();
      Attributes2Impl arg3 = new Attributes2Impl();
      sAXDirParser.startElement("Local", "Local", "Local", arg3);
      char[] arg0 = new char[18];
      sAXDirParser.characters(arg0, '\u0000', '\u0000');
      assertEquals("", sAXDirParser.getWebData());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCharactersAndStartElementAndCharactersWithEmptyArrayAndCharactersWithNegative() throws Throwable  {
      SAXDirParser sAXDirParser = new SAXDirParser();
      Attributes2Impl arg3 = new Attributes2Impl();
      sAXDirParser.startElement("A+'9", "Web", "Web", arg3);
      char[] arg0 = new char[0];
      sAXDirParser.characters(arg0, 2160, (-43));
      assertEquals("", sAXDirParser.getLocalBrowser());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCharactersWithNegative() throws Throwable  {
      AttributesImpl arg3 = new AttributesImpl();
      SAXDirParser sAXDirParser = new SAXDirParser();
      sAXDirParser.startElement("]M", "Names", "parameter", arg3);
      char[] arg0 = new char[2];
      sAXDirParser.characters(arg0, (-658), (-1311));
      assertFalse(sAXDirParser.acceptsLineNumber());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCharactersAndStartElement() throws Throwable  {
      SAXDirParser sAXDirParser = new SAXDirParser();
      Attributes2Impl arg3 = new Attributes2Impl();
      sAXDirParser.startElement("", "acceptsLineNumber", "acceptsLineNumber", arg3);
      char[] arg0 = new char[9];
      sAXDirParser.characters(arg0, 1, 3);
      assertEquals("", sAXDirParser.lineNumberParameter());
      assertFalse(sAXDirParser.acceptsLineNumber());
      assertEquals("", sAXDirParser.getEditor());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCharactersWithNull() throws Throwable  {
      SAXDirParser sAXDirParser = new SAXDirParser();
      Attributes2Impl arg3 = new Attributes2Impl();
      sAXDirParser.startElement("Editor", "Editor", "Editor", arg3);
      sAXDirParser.characters((char[]) null, (-1109), (-1109));
      assertEquals("", sAXDirParser.lineNumberParameter());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testStartElementWithEmptyString() throws Throwable  {
      SAXDirParser sAXDirParser = new SAXDirParser();
      Attributes2Impl arg3 = new Attributes2Impl();
      sAXDirParser.startElement("", "", "BrowserLoc", arg3);
      assertEquals("", sAXDirParser.getLocalBrowser());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testStartElement() throws Throwable  {
      SAXDirParser sAXDirParser = new SAXDirParser();
      AttributesImpl arg3 = new AttributesImpl();
      sAXDirParser.startElement("!", "Yes", "Group", arg3);
      assertEquals("", sAXDirParser.getEditor());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLocalBrowser() throws Throwable  {
      String localBrowser = SAXDirParser.getLocalBrowser();
      assertEquals("", localBrowser);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLineNumberParameter() throws Throwable  {
      String lineNumberParameter = SAXDirParser.lineNumberParameter();
      assertEquals("", lineNumberParameter);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetWebDataReturningEmptyString() throws Throwable  {
      SAXDirParser sAXDirParser = new SAXDirParser();
      String webData = sAXDirParser.getWebData();
      assertEquals("", webData);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDirectory() throws Throwable  {
      HashMap directory = SAXDirParser.getDirectory();
      assertTrue(directory.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetEditor() throws Throwable  {
      String editor = SAXDirParser.getEditor();
      assertEquals("", editor);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMainThrowsFileNotFoundException() throws Throwable  {
      String[] arg0 = new String[8];
      try { 
        SAXDirParser.main(arg0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // /home/ubuntu/getting-new-results-dynamosa/non-trivial-java-classes-to-study-search-based-software-testing-approaches/subjects/91_classviewer/packagedirectory.xml (No such file or directory)
         //
         verifyException("java.io.FileInputStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAcceptsLineNumber() throws Throwable  {
      boolean acceptsLineNumber = SAXDirParser.acceptsLineNumber();
      assertFalse(acceptsLineNumber);
  }
}
