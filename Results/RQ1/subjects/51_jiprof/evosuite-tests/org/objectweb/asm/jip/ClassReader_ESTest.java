/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 21 03:45:58 GMT 2024
 */

package org.objectweb.asm.jip;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.asm.jip.Attribute;
import org.objectweb.asm.jip.ClassReader;
import org.objectweb.asm.jip.ClassVisitor;
import org.objectweb.asm.jip.ClassWriter;
import org.objectweb.asm.jip.Label;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCopyPool() throws Throwable  {
      // Given a class reader for the Opcodes class
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Opcodes");
      
      // When we create a new class writer with a negative constant pool size
      ClassWriter arg0 = new ClassWriter((-2102));
      
      // And we copy the pool from the class reader to the class writer
      classReader.copyPool(arg0);
      
      // Then the class writer should have the same access flags as the class reader
      assertEquals(1537, classReader.getAccess());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadUnsignedShortReturningZero() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Edge");
      int readUnsignedShort = classReader.readUnsignedShort(4);
      assertEquals(0, readUnsignedShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadUTF8ReturningNonEmptyString() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Edge");
      char[] arg1 = new char[9];
      String readUTF8 = classReader.readUTF8(399, arg1);
      assertEquals("\u0000\u0017\u0007", readUTF8);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadUTF8ReturningEmptyString() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Opcodes");
      char[] arg1 = new char[1];
      String readUTF8 = classReader.readUTF8(1193, arg1);
      assertEquals(3150, classReader.header);
      assertEquals("", readUTF8);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadShortReturningPositive() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Opcodes");
      short readShort = classReader.readShort(187);
      assertEquals(3150, classReader.header);
      assertEquals((short)24400, readShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadLongReturningPositive() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Opcodes");
      long readLong = classReader.readLong(2945);
      assertEquals(1537, classReader.getAccess());
      assertEquals(6197234580549756005L, readLong);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadLabel() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Edge");
      Label[] arg1 = new Label[4];
      Label readLabel = classReader.readLabel(1, arg1);
      assertNotNull(readLabel);
      assertEquals(307, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadIntReturningPositive() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Opcodes");
      int readInt = classReader.readInt(191);
      assertEquals(3150, classReader.header);
      assertEquals(1447121989, readInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadConstReturningNonNull() throws Throwable  {
      // Given the Edge class reader
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Edge");
      
      // When we read a constant with value "next" from the 6th position in the bytecode stream
      char[] arg1 = new char[8];
      Object readConst = classReader.readConst(6, arg1);
      
      // Then we should get back the expected string "next"
      assertEquals("next", readConst);
      
      // And the header of the class reader should be set to 307
      assertEquals(307, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadByteReturningZero() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Edge");
      int readByte = classReader.readByte(406);
      assertEquals(307, classReader.header);
      assertEquals(0, readByte);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadConst() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Edge");
      assertEquals(307, classReader.header);
      
      char[] arg1 = new char[9];
      Object readConst = classReader.readConst(7, arg1);
      assertEquals(0, readConst);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAcceptTaking3ArgumentsWithEmptyArrayAndZero() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Opcodes");
      ClassWriter arg0 = new ClassWriter((-2102));
      Attribute[] arg1 = new Attribute[0];
      classReader.accept((ClassVisitor) arg0, arg1, 0);
      assertEquals(3150, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAcceptTaking3Arguments0() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
      ClassWriter arg0 = new ClassWriter(4);
      
      // When
      classReader.accept((ClassVisitor) arg0, (Attribute[]) null, 4);
      
      // Then
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadUnsignedShortReturningPositive() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Edge");
      int readUnsignedShort = classReader.readUnsignedShort(0);
      assertEquals(51966, readUnsignedShort);
      assertEquals(307, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadClassThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Opcodes");
      char[] arg1 = new char[1];
      // Undeclared exception!
      try { 
        classReader.readClass(117, arg1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1110
         //
         verifyException("org.objectweb.asm.jip.ClassReader", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadConstThrowsNullPointerException0() throws Throwable  {
      // Arrange
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Edge");
      
      // Act and Assert
      try {
      classReader.readConst(2, (char[]) null);
      fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      // Verify that the exception is of type NullPointerException
      assertEquals(e.getClass(), NullPointerException.class);
      
      // Verify that the message in the exception is null
      assertEquals(e.getMessage(), null);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadUTF8ThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Edge");
      char[] arg1 = new char[7];
      // Undeclared exception!
      try { 
        classReader.readUTF8(4, arg1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.objectweb.asm.jip.ClassReader", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadConstThrowsNullPointerException1() throws Throwable  {
      // The class to be tested is org.objectweb.asm.jip.Edge
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Edge");
      
      // Test that a NullPointerException is thrown when reading a constant with a null value
      try {
      // Attempt to read the constant with a null value
      classReader.readConst(11, (char[]) null);
      
      // Fail the test if no exception was thrown
      fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      // Verify that the exception is an instance of NullPointerException
      verifyException("org.objectweb.asm.jip.ClassReader", e);
      
      // Assert that there is no message in the exception (getMessage() returned null)
      assertEquals(null, e.getMessage());}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAcceptTaking2Arguments0() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Opcodes");
      ClassWriter arg0 = new ClassWriter(4);
      classReader.accept((ClassVisitor) arg0, 8);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAcceptTaking3Arguments1() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
      ClassWriter arg0 = new ClassWriter(4);
      
      // When
      classReader.accept((ClassVisitor) arg0, (Attribute[]) null, 144);
      
      // Then
      assertEquals(48, classReader.getAccess());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAcceptTaking3ArgumentsWithNegative() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
      ClassWriter arg0 = new ClassWriter(4);
      classReader.accept((ClassVisitor) arg0, (Attribute[]) null, (-102));
      assertEquals(2022, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAcceptTaking2Arguments1() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter(307);
      ClassReader classReader = new ClassReader("java/lang/Object");
      classReader.accept((ClassVisitor) arg0, 117);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateClassReaderTakingStringThrowsIOException() throws Throwable  {
      // Given
      String invalidClassName = "PkTB<=?}";
      
      // When
      ClassReader classReader = null;
      try {
      classReader = new ClassReader(invalidClassName);
      } catch (IOException e) {
      // Then
      verifyException("org.objectweb.asm.jip.ClassReader", e);
      return;
      }
      
      fail("Expecting exception: IOException");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesClassReaderTaking3Arguments() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Opcodes");
      ClassReader arg0 = new ClassReader(classReader.b, 3150, 3150);
      ClassWriter classWriter = null;
      try {
        classWriter = new ClassWriter(arg0, 4180);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetInterfacesReturningEmptyArray() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Opcodes");
      String[] interfaces = classReader.getInterfaces();
      assertEquals(3150, classReader.header);
      assertEquals(0, interfaces.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSuperName() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("java/lang/Class");
      String superName = classReader.getSuperName();
      assertEquals("java/lang/Object", superName);
      assertEquals(19569, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetClassName() throws Throwable  {
      // Load the Edge class from its fully qualified name
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Edge");
      
      // Assert that the header contains 307 as expected
      assertEquals(307, classReader.header);
      
      // Get the class name from the ClassReader instance
      String className = classReader.getClassName();
      
      // Assert that the class name matches the expected value
      assertEquals("org/objectweb/asm/jip/Edge", className);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAcceptTaking2Arguments2() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassWriter");
      ClassWriter arg0 = new ClassWriter(1);
      classReader.accept((ClassVisitor) arg0, 156);
      assertEquals(8064, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadByteReturningPositive() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Edge");
      classReader.readByte(0);
      assertEquals(307, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetItem() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Opcodes");
      int item = classReader.getItem(2);
      assertEquals(1537, classReader.getAccess());
      assertEquals(14, item);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadLongReturningNegative() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Edge");
      long readLong = classReader.readLong(0);
      assertEquals((-3819410108757049294L), readLong);
      assertEquals(307, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAccess() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Edge");
      int access = classReader.getAccess();
      assertEquals(32, access);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesClassReaderTakingString() throws Throwable  {
      // Arrange
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassAdapter");
      ClassWriter classWriter = new ClassWriter(classReader, 726);
      
      // Act
      int computeMaxs = classWriter.COMPUTE_MAXS;
      
      // Assert
      assertEquals(1, computeMaxs);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadShortReturningNegative() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Opcodes");
      short readShort = classReader.readShort(0);
      assertEquals(3150, classReader.header);
      assertEquals((short) (-13570), readShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadIntReturningNegative() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Edge");
      int readInt = classReader.readInt(2);
      assertEquals(307, classReader.header);
      assertEquals((-1161953280), readInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetInterfacesReturningNonEmptyArray() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.FieldWriter");
      classReader.getInterfaces();
      assertEquals(2022, classReader.header);
  }
}
