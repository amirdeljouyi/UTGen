/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 21 02:43:05 GMT 2024
 */

package com.mentorgen.tools.profile.runtime;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mentorgen.tools.profile.Controller;
import com.mentorgen.tools.profile.runtime.ClassAllocation;
import com.mentorgen.tools.profile.runtime.Frame;
import com.mentorgen.tools.profile.runtime.Profile;
import java.util.Comparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Profile_ESTest extends Profile_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testStop() throws Throwable  {
      // rollbacked to evosuite
      Profile.initProfiler();
      Profile.stop();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testStartTakingNoArguments() throws Throwable  {
      // Initialize the profiler for this test
      Profile.initProfiler();
      
      // Start the profiler for this test
      Profile.start();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetFileName() throws Throwable  {
      // Initialize a profiler to measure the performance of the code under test
      Profile.initProfiler();
      
      // Set the filename for the profiler to use when generating reports
      Profile.setFileName("=b>|/T&uU8mH");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testInitProfilerAndStartTaking2Arguments() throws Throwable  {
      // Initialize the profiler for this test
      Profile.initProfiler();
      
      // Start the profiling session with a specific name and identifier
      Profile.start("C/IS&l+BQu8+XC", "%<!C}K-Jt6Gu'<Ewb");
      
      // Check if all file system handling methods should throw IOExceptions
      boolean shouldAllThrowIOExceptions = FileSystemHandling.shouldAllThrowIOExceptions();
      
      // Assert that the value returned by the method is true
      assertTrue(shouldAllThrowIOExceptions);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testThreads() throws Throwable  {
      // Initialize the profile
      Profile.init();
      
      // Get the list of thread IDs for the current profile
      Iterable<Long> threads = Profile.threads();
      
      // Check that the list is not null
      assertNotNull(threads);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testInteractionsReturningNull() throws Throwable  {
      // Test that no interactions are returned for a given user ID
      Profile.init();
      Iterable<Frame> interactions = Profile.interactions(-2169L);
      assertNull(interactions);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testInteractionsReturningNonNull() throws Throwable  {
      // Given: A profile has been initialized with the name "Sarah Johnson"
      Profile.init();
      
      // When: The profile is started with the name "Sarah Johnson"
      Profile.start("Sarah Johnson", "Sarah Johnson");
      
      // Then: The interactions for the profile should be null, as there are no interactions yet
      Iterable<Frame> interactions = Profile.interactions(31L);
      assertNull(interactions);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetThreadTotalTimeThrowsNullPointerException() throws Throwable  {
      // No Comments were added
      Profile.init();
      Profile.start("h:8*bvw\"(y@8/|", "h:8*bvw\"(y@8/|");
      // Undeclared exception!
      try { 
        Profile.getThreadTotalTime(31L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mentorgen.tools.profile.runtime.ThreadDictionary", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFrameListReturningNonNull() throws Throwable  {
      // Initialize the profiler before running any tests
      Profile.initProfiler();
      
      // Retrieve the list of frames from the profiler
      Iterable<Frame> frameList = Profile.frameList();
      
      // Assert that the list is not null
      assertNotNull(frameList);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAllocations() throws Throwable  {
      // Given: A profile has been initialized
      Profile.init();
      
      // When: Getting the allocations for the profile
      Iterable<ClassAllocation> allocations = Profile.allocations();
      
      // Then: The returned value is non-null
      assertNotNull(allocations);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testShutdown() throws Throwable  {
      // Given: A profile is initialized
      Profile.init();
      
      // When: The profile is started with the given parameters "g<" and "g<"
      Profile.start("g<", "g<");
      
      // Then: The profile should be shutdown
      Profile.shutdown();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSortFrameListThrowsNullPointerException() throws Throwable  {
      Comparator<Frame> arg0 = (Comparator<Frame>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      try {
      Profile.sortFrameList(arg0);
      fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      // Verify that the exception is thrown due to a null argument
      verifyException("com.mentorgen.tools.profile.runtime.Profile", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFrameListReturningNull() throws Throwable  {
      // No Comments were added
      Iterable<Frame> frameList = Profile.frameList();
      assertNull(frameList);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAllocAndInit() throws Throwable  {
      // rollbacked to evosuite
      Profile.init();
      Profile.alloc("<");
      Profile.alloc("<");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAlloc0() throws Throwable  {
      // Initialize the profile system before running any tests
      Profile.init();
      
      // Start a profiling session for the "<init>" method
      Profile.start("<init>", "<init>");
      
      // Allocate memory for the "<init>" method
      Profile.alloc("<init>");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAlloc1() throws Throwable  {
      // Initialize the profiling system
      Profile.init();
      
      // Start a new profile session with the given name and label
      Profile.start("profileStart", "profileStart");
      
      // Allocate some memory for testing purposes
      Profile.alloc("allocateMemory");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAlloc2() throws Throwable  {
      // rollbacked to evosuite
      Profile.init();
      Profile.start("0cr<t/", "A string representing a user ID");
      Profile.alloc("0cr<t/");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAllocAndClearAndShutdown() throws Throwable  {
      // Clear the profile and shut it down to free up resources
      Profile.clear();
      Profile.shutdown();
      
      // Allocate some memory for a test
      Profile.alloc("  (");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testUnwind0() throws Throwable  {
      // Given a profile for the test
      Profile.init();
      
      // When the controller is initialized with debug mode enabled
      Controller._debug = true;
      
      // Then the profiler should start and mark the point of initialization
      Profile.start("0cr<t/", "0cr<t/");
      
      // And the profiler should unwind the stack to the initialization method
      Profile.unwind("L3fcdr\"", "<init>", "L3fcdr\"");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testUnwind1() throws Throwable  {
      // Initialize the profile
      Profile.init();
      
      // Start two profiles
      Profile.start("profile1", "profile1");
      Profile.start("profile2", "profile2");
      
      // Unwind the user from one profile to another
      Profile.unwind("user1", "group1", "profile1");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testUnwind2() throws Throwable  {
      // Initialize the Profile class
      Profile.init();
      
      // Start a new profile with name "profile1"
      Profile.start("profile1", "profile1");
      
      // Unwind the profile with name "profile1" and workflow "workflow1"
      Profile.unwind("profile1", "workflow1", "profile1");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBeginWaitAndClearAndShutdown() throws Throwable  {
      // Clear the profile and shut it down
      Profile.clear();
      Profile.shutdown();
      
      // Begin waiting for the clearing process to finish
      Profile.beginWait("Clearing all user data", "Preparing to shut down Profile...");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testInitAndUnwind() throws Throwable  {
      // No Comments were added
      Profile.init();
      Profile.unwind("user1", "group1", "profile1");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testUnwind3() throws Throwable  {
      // Initializes the Profile class
      Profile.init();
      
      // Starts a new profile with the name "Marketing Coordinator" and category "Digital Marketing"
      Profile.start("Marketing Coordinator", "Digital Marketing");
      
      // Unwinds the profile with the name "Marketing Coordinator" and category "Digital Marketing" to the previous state, which is defined by the "Entrepreneurial mindset" tag
      Profile.unwind("Marketing Coordinator", "Digital Marketing", "Entrepreneurial mindset");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testClearAndEndWait() throws Throwable  {
      // Clearing the Profile data before loading it
      Profile.clear();
      
      // Ending the wait state with a custom message and description
      Profile.endWait("Loading...", "Please wait while we load your profile.");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEndWait() throws Throwable  {
      // Initialize the profiler for measuring performance metrics
      Profile.initProfiler();
      
      // Start a new profile session with the name "Getting started with GitLab" and a description of "git push"
      Profile.start("Getting started with GitLab", "git push");
      
      // Perform some action that involves pushing changes to a remote repository
      // ...
      
      // End the profile session and wait for any remaining profiling data to be collected
      Profile.endWait("Getting started with GitLab", "git push");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBeginWaitAndInitAndStartTaking2Arguments() throws Throwable  {
      // rollbacked to evosuite
      Profile.init();
      Profile.start("bob", "bob");
      Profile.beginWait("bob", "bob");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEnd() throws Throwable  {
      // Initialize the profile object
      Profile.init();
      
      // Start a new session with the given name
      Profile.start("givenName", "John");
      
      // End the current session with the given name
      Profile.end("givenName", "John");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEndAndInit() throws Throwable  {
      // rollbacked to evosuite
      Profile.init();
      Profile.end("grocery", " shopping");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testStartTaking2Arguments() throws Throwable  {
      // Initialize the profile and start the first stage
      Profile.init();
      Profile.start("aThirstySnake", "aThirstySnake");
      
      // Start the second stage and end the first stage
      Profile.start("aThirstySnake", "aThirstySnake");
      Profile.end("aThirstySnake", "aThirstySnake");
      
      // Start the third stage
      Profile.start("aThirstySnake", "aThirstySnake");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testInitProfiler() throws Throwable  {
      // rollbacked to evosuite
      Controller._remote = true;
      Profile.initProfiler();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesProfileAndCallsRun() throws Throwable  {
      // Initialize the profiler before starting the tests
      Profile.initProfiler();
      
      // Start the first test with a specific ID and name
      Profile.start("C/IS&l+BQu8+XC", "%<!C}K-Jt6Gu'<Ewb");
      
      // Create an instance of the Profile class for the second test
      Profile profile = new Profile();
      
      // Run the second test using the same profiler as the first test
      profile.run();
      
      // Start the second test with a specific ID and name
  }
}
