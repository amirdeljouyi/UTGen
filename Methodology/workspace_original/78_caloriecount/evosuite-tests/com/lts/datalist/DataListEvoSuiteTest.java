/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.datalist;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.application.ApplicationException;
import com.lts.application.data.ApplicationDataElement;
import com.lts.caloriecount.data.entry.EntryList;
import com.lts.caloriecount.data.food.Food;
import com.lts.caloriecount.data.food.FoodList;
import com.lts.caloriecount.data.frequent.FrequentFoodList;
import com.lts.caloriecount.data.meal.MealList;
import com.lts.caloriecount.ui.propertywindow.KeyValue;
import com.lts.caloriecount.ui.propertywindow.PropertyListAdaptor;
import com.lts.datalist.DataList;
import com.lts.util.ReallyCaselessMap;
import com.lts.util.deepcopy.DeepCopyException;
import java.util.Map;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DataListEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      FoodList foodList0 = new FoodList();
      EntryList entryList0 = new EntryList();
      foodList0.copyFrom((ApplicationDataElement) entryList0);
      assertEquals(true, foodList0.isDirty());
  }

  @Test
  public void test1()  throws Throwable  {
      EntryList entryList0 = new EntryList();
      try {
        entryList0.deepCopy();
        fail("Expecting exception: DeepCopyException");
      } catch(DeepCopyException e) {
        /*
         * The object, [], of class class java.util.ArrayList, does not implement com.lts.util.deepcopy.DeepCopier
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      FrequentFoodList frequentFoodList0 = new FrequentFoodList();
      boolean boolean0 = frequentFoodList0.isRectified();
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      PropertyListAdaptor propertyListAdaptor0 = new PropertyListAdaptor();
      propertyListAdaptor0.add((KeyValue) null);
      propertyListAdaptor0.removeNulls();
      assertEquals(true, propertyListAdaptor0.isDirty());
      assertEquals(true, propertyListAdaptor0.isEmpty());
  }

  @Test
  public void test4()  throws Throwable  {
      PropertyListAdaptor propertyListAdaptor0 = new PropertyListAdaptor();
      propertyListAdaptor0.setRectified(true);
      assertEquals(true, propertyListAdaptor0.rectified());
      assertEquals(true, propertyListAdaptor0.isRectified());
  }

  @Test
  public void test5()  throws Throwable  {
      PropertyListAdaptor propertyListAdaptor0 = new PropertyListAdaptor();
      propertyListAdaptor0.initialize();
      assertEquals(false, propertyListAdaptor0.isDirty());
  }

  @Test
  public void test6()  throws Throwable  {
      MealList mealList0 = new MealList();
      boolean boolean0 = mealList0.isDirty();
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      EntryList entryList0 = new EntryList();
      ReallyCaselessMap<DataList<Object>> reallyCaselessMap0 = new ReallyCaselessMap<DataList<Object>>();
      try {
        entryList0.continueDeepCopy((Map) reallyCaselessMap0, true);
        fail("Expecting exception: DeepCopyException");
      } catch(DeepCopyException e) {
        /*
         * The object, com.lts.util.notifyinglist.NotifyingListHelper@5c88af01, of class class com.lts.util.notifyinglist.NotifyingListHelper, does not implement com.lts.util.deepcopy.DeepCopier
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      MealList mealList0 = new MealList();
      Food food0 = new Food((-871));
      mealList0.createMeal(food0);
      mealList0.postDeserialize();
      assertEquals(false, mealList0.isEmpty());
      assertEquals(1, mealList0.size());
  }

  @Test
  public void test9()  throws Throwable  {
      EntryList entryList0 = new EntryList();
      ReallyCaselessMap<DataList<Object>> reallyCaselessMap0 = new ReallyCaselessMap<DataList<Object>>();
      entryList0.continueDeepCopy((Map) reallyCaselessMap0, false);
      assertEquals(1, reallyCaselessMap0.size());
      assertEquals(false, reallyCaselessMap0.isEmpty());
  }
}
