/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.caloriecount.ui.dayview;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.caloriecount.ui.dayview.MealRowModel;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MealRowModelEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      MealRowModel mealRowModel0 = new MealRowModel();
      String[] stringArray0 = mealRowModel0.getColumnNames();
      assertNotNull(stringArray0);
  }

  @Test
  public void test1()  throws Throwable  {
      MealRowModel mealRowModel0 = new MealRowModel();
      // Undeclared exception!
      try {
        mealRowModel0.setValueAt((-29), (-29), (-29), (-29));
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * not implemented
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      MealRowModel mealRowModel0 = new MealRowModel();
      int int0 = mealRowModel0.compareRows((Object) null, (Object) null);
      assertEquals(0, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      MealRowModel mealRowModel0 = new MealRowModel();
      // Undeclared exception!
      try {
        mealRowModel0.update((Object) "rolloverEnabled", (Object) "rolloverEnabled");
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      MealRowModel mealRowModel0 = new MealRowModel();
      // Undeclared exception!
      try {
        mealRowModel0.setValueAt((Object) "rolloverSelectedIcon", 1, (Object) mealRowModel0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      MealRowModel mealRowModel0 = new MealRowModel();
      Class<Object> class0 = mealRowModel0.getColumnClass(3);
      assertEquals(false, class0.isPrimitive());
  }

  @Test
  public void test6()  throws Throwable  {
      MealRowModel mealRowModel0 = new MealRowModel();
      String string0 = mealRowModel0.getColumnName(1);
      assertNotNull(string0);
      assertEquals("Calories", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      MealRowModel mealRowModel0 = new MealRowModel();
      boolean boolean0 = mealRowModel0.isColumnEditable(3);
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      MealRowModel mealRowModel0 = new MealRowModel();
      int int0 = mealRowModel0.getColumnCount();
      assertEquals(3, int0);
  }

  @Test
  public void test9()  throws Throwable  {
      MealRowModel mealRowModel0 = new MealRowModel();
      // Undeclared exception!
      try {
        mealRowModel0.getValueAt(0, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      MealRowModel mealRowModel0 = new MealRowModel();
      // Undeclared exception!
      try {
        mealRowModel0.getValueAt(8, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * 8
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      MealRowModel mealRowModel0 = new MealRowModel();
      // Undeclared exception!
      try {
        mealRowModel0.getValueAt(1, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
