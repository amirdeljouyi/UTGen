/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.caloriecount.ui.frequent;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.caloriecount.ui.dnd.DragAndDropHandler;
import com.lts.caloriecount.ui.frequent.FrequentTableDragAndDrop;
import javax.swing.JTable;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class FrequentTableDragAndDropEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      FrequentTableDragAndDrop frequentTableDragAndDrop0 = new FrequentTableDragAndDrop();
      JTable jTable0 = new JTable();
      // Undeclared exception!
      try {
        frequentTableDragAndDrop0.deleteRow(jTable0, 1320);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      FrequentTableDragAndDrop frequentTableDragAndDrop0 = new FrequentTableDragAndDrop();
      JTable jTable0 = new JTable();
      // Undeclared exception!
      try {
        frequentTableDragAndDrop0.copyRow(jTable0, 6);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      FrequentTableDragAndDrop frequentTableDragAndDrop0 = new FrequentTableDragAndDrop();
      DragAndDropHandler.DragAndDropOperations dragAndDropHandler_DragAndDropOperations0 = DragAndDropHandler.DragAndDropOperations.Copy;
      boolean boolean0 = frequentTableDragAndDrop0.supportsOperation(dragAndDropHandler_DragAndDropOperations0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      FrequentTableDragAndDrop frequentTableDragAndDrop0 = new FrequentTableDragAndDrop();
      DragAndDropHandler.DragAndDropOperations dragAndDropHandler_DragAndDropOperations0 = DragAndDropHandler.DragAndDropOperations.Cut;
      boolean boolean0 = frequentTableDragAndDrop0.supportsOperation(dragAndDropHandler_DragAndDropOperations0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      FrequentTableDragAndDrop frequentTableDragAndDrop0 = new FrequentTableDragAndDrop();
      DragAndDropHandler.DragAndDropOperations dragAndDropHandler_DragAndDropOperations0 = DragAndDropHandler.DragAndDropOperations.Move;
      boolean boolean0 = frequentTableDragAndDrop0.supportsOperation(dragAndDropHandler_DragAndDropOperations0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      FrequentTableDragAndDrop frequentTableDragAndDrop0 = new FrequentTableDragAndDrop();
      DragAndDropHandler.DragAndDropOperations dragAndDropHandler_DragAndDropOperations0 = DragAndDropHandler.DragAndDropOperations.Paste;
      boolean boolean0 = frequentTableDragAndDrop0.supportsOperation(dragAndDropHandler_DragAndDropOperations0);
      assertEquals(false, boolean0);
  }
}
