/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.caloriecount.ui.dnd;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.caloriecount.data.food.FoodList;
import com.lts.caloriecount.ui.dnd.DragAndDropHandler;
import com.lts.caloriecount.ui.dnd.TransferHandlerAdaptor;
import com.lts.caloriecount.ui.foodwin.FoodSelectDragAndDrop;
import com.lts.caloriecount.ui.frequent.FrequentTableDragAndDrop;
import java.awt.Component;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.event.InputEvent;
import java.util.List;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JFormattedTextField;
import javax.swing.JRadioButton;
import javax.swing.JTextField;
import javax.swing.TransferHandler;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TransferHandlerAdaptorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      FoodList foodList0 = new FoodList((List) null);
      FoodSelectDragAndDrop foodSelectDragAndDrop0 = new FoodSelectDragAndDrop(foodList0);
      TransferHandlerAdaptor transferHandlerAdaptor0 = new TransferHandlerAdaptor((DragAndDropHandler) foodSelectDragAndDrop0);
      JTextField jTextField0 = new JTextField();
      StringSelection stringSelection0 = new StringSelection("~8ldGZ#qL`]P8@(");
      TransferHandler.TransferSupport transferHandler_TransferSupport0 = new TransferHandler.TransferSupport((Component) jTextField0, (Transferable) stringSelection0);
      boolean boolean0 = transferHandlerAdaptor0.canImport(transferHandler_TransferSupport0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      FoodList foodList0 = new FoodList();
      FoodSelectDragAndDrop foodSelectDragAndDrop0 = new FoodSelectDragAndDrop(foodList0);
      TransferHandlerAdaptor transferHandlerAdaptor0 = new TransferHandlerAdaptor((DragAndDropHandler) foodSelectDragAndDrop0);
      JFormattedTextField jFormattedTextField0 = new JFormattedTextField();
      transferHandlerAdaptor0.exportAsDrag((JComponent) jFormattedTextField0, (InputEvent) null, (int) '\'');
      assertEquals(false, jFormattedTextField0.isPaintingTile());
  }

  @Test
  public void test2()  throws Throwable  {
      FoodList foodList0 = new FoodList((List) null);
      FoodSelectDragAndDrop foodSelectDragAndDrop0 = new FoodSelectDragAndDrop(foodList0);
      TransferHandlerAdaptor transferHandlerAdaptor0 = new TransferHandlerAdaptor((DragAndDropHandler) foodSelectDragAndDrop0);
      JTextField jTextField0 = new JTextField();
      StringSelection stringSelection0 = new StringSelection("~8ldGZ#qL`]P8@(");
      TransferHandler.TransferSupport transferHandler_TransferSupport0 = new TransferHandler.TransferSupport((Component) jTextField0, (Transferable) stringSelection0);
      transferHandlerAdaptor0.importData(transferHandler_TransferSupport0);
      transferHandlerAdaptor0.exportDone((JComponent) jTextField0, (Transferable) stringSelection0, 0);
      assertEquals(false, jTextField0.getScrollableTracksViewportHeight());
  }

  @Test
  public void test3()  throws Throwable  {
      FrequentTableDragAndDrop frequentTableDragAndDrop0 = new FrequentTableDragAndDrop();
      TransferHandlerAdaptor transferHandlerAdaptor0 = new TransferHandlerAdaptor((DragAndDropHandler) frequentTableDragAndDrop0);
      JFormattedTextField jFormattedTextField0 = new JFormattedTextField();
      // Undeclared exception!
      try {
        transferHandlerAdaptor0.createTransferable((JComponent) jFormattedTextField0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * javax.swing.JFormattedTextField cannot be cast to javax.swing.JTable
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      FrequentTableDragAndDrop frequentTableDragAndDrop0 = new FrequentTableDragAndDrop();
      TransferHandlerAdaptor transferHandlerAdaptor0 = new TransferHandlerAdaptor((DragAndDropHandler) frequentTableDragAndDrop0);
      Action action0 = TransferHandler.getCopyAction();
      JRadioButton jRadioButton0 = new JRadioButton(action0);
      Clipboard clipboard0 = new Clipboard("]w;");
      transferHandlerAdaptor0.exportToClipboard((JComponent) jRadioButton0, clipboard0, (-1612));
      assertEquals(false, jRadioButton0.isMinimumSizeSet());
  }

  @Test
  public void test5()  throws Throwable  {
      FoodList foodList0 = new FoodList((List) null);
      FoodSelectDragAndDrop foodSelectDragAndDrop0 = new FoodSelectDragAndDrop(foodList0);
      TransferHandlerAdaptor transferHandlerAdaptor0 = new TransferHandlerAdaptor((DragAndDropHandler) foodSelectDragAndDrop0);
      JTextField jTextField0 = new JTextField();
      StringSelection stringSelection0 = new StringSelection("~8ldGZ#qL`]P8@(");
      TransferHandler.TransferSupport transferHandler_TransferSupport0 = new TransferHandler.TransferSupport((Component) jTextField0, (Transferable) stringSelection0);
      transferHandlerAdaptor0.importData(transferHandler_TransferSupport0);
      boolean boolean0 = transferHandlerAdaptor0.importData(transferHandler_TransferSupport0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      FrequentTableDragAndDrop frequentTableDragAndDrop0 = new FrequentTableDragAndDrop();
      TransferHandlerAdaptor transferHandlerAdaptor0 = new TransferHandlerAdaptor((DragAndDropHandler) frequentTableDragAndDrop0);
      boolean boolean0 = transferHandlerAdaptor0.importData((TransferHandler.TransferSupport) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      FrequentTableDragAndDrop frequentTableDragAndDrop0 = new FrequentTableDragAndDrop();
      TransferHandlerAdaptor transferHandlerAdaptor0 = new TransferHandlerAdaptor((DragAndDropHandler) frequentTableDragAndDrop0);
      Clipboard clipboard0 = new Clipboard("");
      transferHandlerAdaptor0.exportToClipboard((JComponent) null, clipboard0, 2);
      assertEquals("", clipboard0.getName());
  }
}
