/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.caloriecount.data.budget;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.application.ApplicationException;
import com.lts.application.data.ApplicationDataElement;
import com.lts.caloriecount.data.budget.Budget;
import com.lts.caloriecount.data.budget.TimeOfDay;
import com.lts.util.deepcopy.DeepCopyException;
import com.lts.xml.simple.SimpleElement;
import java.util.Hashtable;
import java.util.Map;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TimeOfDayEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay((-171L));
      assertNotNull(timeOfDay0);
      
      Hashtable<Integer, TimeOfDay> hashtable0 = new Hashtable<Integer, TimeOfDay>();
      TimeOfDay timeOfDay1 = (TimeOfDay)timeOfDay0.continueDeepCopy((Map) hashtable0, false);
      assertEquals(1372806039240L, timeOfDay1.toTime());
  }

  @Test
  public void test1()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(0, 0);
      int int0 = timeOfDay0.minutesSince(timeOfDay0);
      assertEquals(1372806039398L, timeOfDay0.toTime());
      assertEquals(0, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      Budget budget0 = new Budget();
      TimeOfDay timeOfDay0 = budget0.getEndOfDay();
      // Undeclared exception!
      try {
        timeOfDay0.copyFrom((ApplicationDataElement) budget0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * com.lts.caloriecount.data.budget.Budget cannot be cast to com.lts.caloriecount.data.budget.TimeOfDay
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay((-171L));
      assertNotNull(timeOfDay0);
      
      timeOfDay0.now();
      String string0 = timeOfDay0.toString();
      assertEquals(1372809639579L, timeOfDay0.toTime());
      assertEquals("01:00", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      timeOfDay0.setTime(0L);
      assertEquals(1372809639784L, timeOfDay0.toTime());
      assertEquals(0, timeOfDay0.getMinute());
  }

  @Test
  public void test5()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      SimpleElement simpleElement0 = timeOfDay0.createSerializationElement();
      assertNotNull(simpleElement0);
      
      timeOfDay0.populateFromElement(simpleElement0);
      assertEquals(1372806039857L, timeOfDay0.toTime());
  }

  @Test
  public void test6()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(15, 15);
      String string0 = timeOfDay0.toString();
      assertEquals(1372860940039L, timeOfDay0.toTime());
      assertEquals("15:15", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay((-171L));
      assertNotNull(timeOfDay0);
      
      String string0 = timeOfDay0.toString();
      assertEquals(1372809580158L, timeOfDay0.toTime());
      assertEquals("00:59", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(1629L);
      assertNotNull(timeOfDay0);
      
      SimpleElement simpleElement0 = new SimpleElement("", "");
      timeOfDay0.deserializeFrom(simpleElement0);
      assertEquals(1372809640315L, timeOfDay0.toTime());
  }
}
