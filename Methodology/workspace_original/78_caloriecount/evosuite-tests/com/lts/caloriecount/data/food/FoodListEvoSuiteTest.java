/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.caloriecount.data.food;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.application.ApplicationException;
import com.lts.caloriecount.data.entry.EntryList;
import com.lts.caloriecount.data.food.Food;
import com.lts.caloriecount.data.food.FoodList;
import com.lts.util.deepcopy.DeepCopyException;
import java.awt.Font;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import javax.swing.text.StyleContext;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class FoodListEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      FoodList foodList0 = new FoodList();
      Food food0 = foodList0.getFood(30);
      assertNull(food0);
  }

  @Test
  public void test1()  throws Throwable  {
      FoodList foodList0 = new FoodList();
      List<Object> list0 = foodList0.getDataElements();
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test2()  throws Throwable  {
      FoodList foodList0 = new FoodList();
      // Undeclared exception!
      try {
        foodList0.createFood((Food) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      FoodList foodList0 = new FoodList();
      try {
        foodList0.deepCopy();
        fail("Expecting exception: DeepCopyException");
      } catch(DeepCopyException e) {
        /*
         * The object, [], of class class java.util.ArrayList, does not implement com.lts.util.deepcopy.DeepCopier
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      EntryList entryList0 = new EntryList();
      FoodList foodList0 = new FoodList((List) entryList0);
      Comparator<Object> comparator0 = foodList0.getComparator();
      assertNotNull(comparator0);
  }

  @Test
  public void test5()  throws Throwable  {
      FoodList foodList0 = new FoodList((List) null);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      Font font0 = styleContext0.getFont("^Bu`#&?V#e2h@Zk\"", 424, 0);
      Map<?, ?> map0 = font0.getAttributes();
      // Undeclared exception!
      try {
        foodList0.continueDeepCopy((Map) map0, false);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * com.lts.caloriecount.data.food.FoodList cannot be cast to java.awt.font.TextAttribute
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      FoodList foodList0 = new FoodList();
      String string0 = foodList0.getSerializationElementName();
      assertEquals("foods", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      EntryList entryList0 = new EntryList();
      FoodList foodList0 = new FoodList((List) entryList0);
      Food food0 = (Food)foodList0.createListElement("(OrEjEy*]/(3k1Bj<|{");
      int int0 = foodList0.findEquivalent(food0);
      assertEquals((-1), int0);
  }

  @Test
  public void test8()  throws Throwable  {
      FoodList foodList0 = new FoodList();
      Food food0 = foodList0.createFood("", 872, "");
      foodList0.add(food0);
      foodList0.postDeserialize();
      assertEquals(2, foodList0.size());
      assertEquals("{,872, ,872}", foodList0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      FoodList foodList0 = new FoodList();
      foodList0.createFood("", 872, "");
      Food food0 = foodList0.createFood("", 3600000, "");
      int int0 = foodList0.findEquivalent(food0);
      assertEquals(false, foodList0.isEmpty());
      assertEquals(1, int0);
  }
}
