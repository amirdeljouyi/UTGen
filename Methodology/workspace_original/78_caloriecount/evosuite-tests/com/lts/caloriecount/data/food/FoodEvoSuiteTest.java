/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.caloriecount.data.food;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.application.ApplicationException;
import com.lts.application.data.ApplicationDataElement;
import com.lts.caloriecount.data.food.Food;
import com.lts.caloriecount.data.food.FoodList;
import com.lts.util.deepcopy.DeepCopyException;
import com.lts.xml.simple.SimpleElement;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class FoodEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      FoodList foodList0 = new FoodList();
      Food food0 = foodList0.createFood("", (-1), "");
      SimpleElement simpleElement0 = foodList0.createSerializationElement();
      food0.deserializeFrom(simpleElement0);
      assertEquals("{null,-1}", foodList0.toString());
      assertEquals(-1, food0.getCalories());
  }

  @Test
  public void test1()  throws Throwable  {
      Food food0 = new Food((-417));
      // Undeclared exception!
      try {
        food0.compareTo((Object) "null,-1");
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.lang.String cannot be cast to com.lts.caloriecount.data.food.Food
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      FoodList foodList0 = new FoodList();
      Food food0 = foodList0.createFood("", (-1), "");
      food0.copyFrom((ApplicationDataElement) food0);
      assertEquals("{,-1}", foodList0.toString());
      assertEquals("", food0.getDescription());
  }

  @Test
  public void test3()  throws Throwable  {
      Food food0 = new Food();
      // Undeclared exception!
      try {
        food0.compareTo(food0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      FoodList foodList0 = new FoodList();
      Food food0 = foodList0.createFood("", (-1), "");
      food0.getEntryName();
      assertEquals("{,-1}", foodList0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      FoodList foodList0 = new FoodList();
      Food food0 = foodList0.createFood("", (-1), "");
      food0.deepCopy(true);
      assertEquals("{,-1}", foodList0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      Food food0 = new Food((-417));
      String string0 = food0.toString();
      assertEquals(-417, food0.getId());
      assertEquals("null,-1", string0);
      assertNotNull(string0);
  }

  @Test
  public void test7()  throws Throwable  {
      FoodList foodList0 = new FoodList();
      foodList0.createFood("", (-1), "");
      Food food0 = new Food();
      int int0 = foodList0.findEquivalent(food0);
      assertEquals("{,-1}", foodList0.toString());
      assertEquals((-1), int0);
  }

  @Test
  public void test8()  throws Throwable  {
      FoodList foodList0 = new FoodList();
      Food food0 = foodList0.createFood("", (-1), "");
      foodList0.removeFood(food0);
      assertEquals(true, foodList0.isEmpty());
      assertEquals(0, foodList0.size());
  }

  @Test
  public void test9()  throws Throwable  {
      FoodList foodList0 = new FoodList();
      foodList0.createFood("", (-1), "");
      Food food0 = new Food(543);
      foodList0.removeFood(food0);
      assertEquals(1, foodList0.size());
      assertEquals(543, food0.getId());
  }

  @Test
  public void test10()  throws Throwable  {
      FoodList foodList0 = new FoodList();
      foodList0.createFood("", (-1), "");
      Food food0 = new Food(543);
      food0.setDescription("");
      foodList0.removeFood(food0);
      assertEquals(1, foodList0.size());
      assertEquals("{,-1}", foodList0.toString());
  }
}
