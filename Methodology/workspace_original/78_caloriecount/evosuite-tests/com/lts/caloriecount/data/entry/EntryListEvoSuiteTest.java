/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.caloriecount.data.entry;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.application.ApplicationException;
import com.lts.caloriecount.data.Adjustment;
import com.lts.caloriecount.data.entry.Entry;
import com.lts.caloriecount.data.entry.EntryList;
import com.lts.caloriecount.data.food.Food;
import com.lts.caloriecount.data.meal.Meal;
import com.lts.caloriecount.data.meal.MealList;
import com.lts.xml.simple.SimpleElement;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class EntryListEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      EntryList entryList0 = new EntryList();
      // Undeclared exception!
      try {
        entryList0.createMeal((Food) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      EntryList entryList0 = new EntryList();
      int int0 = entryList0.getTotalUpToNow();
      assertEquals(0, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      boolean boolean0 = EntryList.EntryTypes.isValidName("(t+;ds(ZN94+*Dt");
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      boolean boolean0 = EntryList.EntryTypes.isValidName("Adjustment");
      assertEquals(true, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      EntryList entryList0 = new EntryList();
      MealList mealList0 = new MealList();
      Food food0 = new Food(1);
      Meal meal0 = mealList0.createMeal((long) 1, food0);
      SimpleElement simpleElement0 = meal0.createSerializationElement();
      entryList0.deserializeFrom(simpleElement0);
      assertEquals(0, entryList0.size());
      assertEquals(true, entryList0.isEmpty());
  }

  @Test
  public void test5()  throws Throwable  {
      EntryList entryList0 = new EntryList();
      Meal meal0 = (Meal)entryList0.createListElement("meal");
      entryList0.add((Entry) meal0);
      assertEquals(true, entryList0.isDirty());
      
      // Undeclared exception!
      try {
        entryList0.totalCalories((long) (-15), 172810L);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      EntryList entryList0 = new EntryList();
      Meal meal0 = new Meal();
      SimpleElement simpleElement0 = meal0.createSerializationElement();
      Meal meal1 = (Meal)entryList0.deserializeChildFrom(simpleElement0);
      assertFalse(meal0.equals(meal1));
  }

  @Test
  public void test7()  throws Throwable  {
      EntryList entryList0 = new EntryList();
      SimpleElement simpleElement0 = new SimpleElement("Adjustment", "Adjustment");
      // Undeclared exception!
      try {
        entryList0.deserializeChildFrom(simpleElement0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      EntryList entryList0 = new EntryList();
      Adjustment adjustment0 = new Adjustment();
      entryList0.add((Entry) adjustment0);
      SimpleElement simpleElement0 = entryList0.createSerializationElement();
      assertEquals("entries", entryList0.getSerializationElementName());
      assertNotNull(simpleElement0);
      assertEquals("entries", simpleElement0.getName());
  }

  @Test
  public void test9()  throws Throwable  {
      EntryList entryList0 = new EntryList();
      SimpleElement simpleElement0 = entryList0.createSerializationElement();
      assertNotNull(simpleElement0);
      
      Meal meal0 = (Meal)entryList0.createChildElement(simpleElement0);
      assertEquals("entries", entryList0.getSerializationElementName());
      assertNull(meal0);
      assertEquals("entries", simpleElement0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      EntryList entryList0 = new EntryList();
      Meal meal0 = new Meal();
      SimpleElement simpleElement0 = meal0.createSerializationElement();
      Meal meal1 = (Meal)entryList0.createChildElement(simpleElement0);
      assertEquals(false, meal1.getDirty());
  }

  @Test
  public void test11()  throws Throwable  {
      EntryList entryList0 = new EntryList();
      SimpleElement simpleElement0 = new SimpleElement("Adjustment", "J t+;cs(ZN9V+*uDt");
      // Undeclared exception!
      try {
        entryList0.createChildElement(simpleElement0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      EntryList entryList0 = new EntryList();
      Meal meal0 = (Meal)entryList0.createListElement("29");
      assertNull(meal0);
  }

  @Test
  public void test13()  throws Throwable  {
      EntryList entryList0 = new EntryList();
      Adjustment adjustment0 = (Adjustment)entryList0.createListElement("Adjustment");
      assertEquals(0, adjustment0.getCalories());
  }

  @Test
  public void test14()  throws Throwable  {
      EntryList entryList0 = new EntryList();
      Adjustment adjustment0 = new Adjustment();
      entryList0.add((Entry) adjustment0);
      boolean boolean0 = entryList0.update(adjustment0, adjustment0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      EntryList entryList0 = new EntryList();
      Adjustment adjustment0 = new Adjustment();
      boolean boolean0 = entryList0.update(adjustment0, adjustment0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      EntryList entryList0 = new EntryList();
      Adjustment adjustment0 = new Adjustment();
      entryList0.add((Entry) adjustment0);
      int int0 = entryList0.totalCalories((-756L), (-756L));
      assertEquals(0, int0);
  }

  @Test
  public void test17()  throws Throwable  {
      EntryList entryList0 = new EntryList();
      Adjustment adjustment0 = new Adjustment();
      entryList0.add((Entry) adjustment0);
      int int0 = entryList0.totalCalories((long) 1, (long) 1);
      assertEquals(0, int0);
  }

  @Test
  public void test18()  throws Throwable  {
      EntryList entryList0 = new EntryList();
      Meal meal0 = new Meal();
      entryList0.add((Entry) meal0);
      boolean boolean0 = entryList0.update(meal0, meal0);
      assertEquals(false, entryList0.isEmpty());
      assertEquals(true, boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      EntryList entryList0 = new EntryList();
      Meal meal0 = new Meal();
      boolean boolean0 = entryList0.update(meal0, meal0);
      assertEquals(false, boolean0);
      assertEquals(false, entryList0.isDirty());
  }
}
