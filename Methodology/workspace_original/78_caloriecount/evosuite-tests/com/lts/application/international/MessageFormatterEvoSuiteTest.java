/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.application.international;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.application.ApplicationException;
import com.lts.application.RuntimeApplicationException;
import com.lts.application.international.MessageFormatter;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.PropertyResourceBundle;
import java.util.ResourceBundle;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MessageFormatterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      MessageFormatter.LoadBundleError messageFormatter_LoadBundleError0 = new MessageFormatter.LoadBundleError("B&hq+", (Throwable) null);
      assertNotNull(messageFormatter_LoadBundleError0);
  }

  @Test
  public void test1()  throws Throwable  {
      MessageFormatter messageFormatter0 = new MessageFormatter();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      List<Object> list0 = messageFormatter0.listResources("", classLoader0);
      assertEquals(0, list0.size());
  }

  @Test
  public void test2()  throws Throwable  {
      MessageFormatter messageFormatter0 = new MessageFormatter();
      List<Object> list0 = messageFormatter0.loadCriticalBundles();
      assertEquals(0, list0.size());
  }

  @Test
  public void test3()  throws Throwable  {
      MessageFormatter messageFormatter0 = new MessageFormatter();
      Locale locale0 = Locale.UK;
      // Undeclared exception!
      try {
        messageFormatter0.getMessage(")", (Object) "", (Object) locale0, (Object) "");
        fail("Expecting exception: RuntimeApplicationException");
      } catch(RuntimeApplicationException e) {
        /*
         * com.lts.application.ApplicationMessages.error.keyNotFound
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      MessageFormatter messageFormatter0 = new MessageFormatter();
      Object[] objectArray0 = new Object[1];
      try {
        messageFormatter0.getMessage("com.lts.application.prompt.startup.continueDespiteCommandLineError", objectArray0);
        fail("Expecting exception: RuntimeApplicationException");
      } catch(RuntimeApplicationException e) {
        /*
         * com.lts.application.ApplicationMessages.error.keyNotFound
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      MessageFormatter messageFormatter0 = new MessageFormatter();
      messageFormatter0.initializeResourceBundle();
  }

  @Test
  public void test6()  throws Throwable  {
      MessageFormatter messageFormatter0 = new MessageFormatter();
      messageFormatter0.temp();
  }

  @Test
  public void test7()  throws Throwable  {
      MessageFormatter messageFormatter0 = new MessageFormatter();
      List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
      try {
        messageFormatter0.initializeResourceBundle(list0, list0);
        fail("Expecting exception: ApplicationException");
      } catch(ApplicationException e) {
        /*
         * Could not find any resource bundle give names: java.class, java.properties; and resource path: java.class, java.properties
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      MessageFormatter messageFormatter0 = new MessageFormatter();
      StringReader stringReader0 = new StringReader("]26");
      PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle((Reader) stringReader0);
      messageFormatter0.addBundle((ResourceBundle) propertyResourceBundle0);
      messageFormatter0.getMessage("]26");
  }

  @Test
  public void test9()  throws Throwable  {
      MessageFormatter messageFormatter0 = new MessageFormatter();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      try {
        messageFormatter0.initializeResourceBundle((List<String>) linkedList0);
        fail("Expecting exception: ApplicationException");
      } catch(ApplicationException e) {
        /*
         * Could not find any resource bundle give names: messages; and resource path: 
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      List<Object> list0 = MessageFormatter.buildList((Object[]) null);
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      List<Object> list0 = MessageFormatter.buildList(objectArray0);
      assertNotNull(list0);
      assertEquals(4, list0.size());
  }

  @Test
  public void test12()  throws Throwable  {
      MessageFormatter messageFormatter0 = new MessageFormatter();
      StringReader stringReader0 = new StringReader("");
      PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle((Reader) stringReader0);
      messageFormatter0.addBundle((ResourceBundle) propertyResourceBundle0);
      // Undeclared exception!
      try {
        messageFormatter0.getMessage("", "\uB3C5\uC77C\uC5B4", "\uB3C5\uC77C\uC5B4");
        fail("Expecting exception: RuntimeApplicationException");
      } catch(RuntimeApplicationException e) {
        /*
         * com.lts.application.ApplicationMessages.error.keyNotFound
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      MessageFormatter messageFormatter0 = new MessageFormatter();
      // Undeclared exception!
      try {
        messageFormatter0.getMessage((Throwable) null);
        fail("Expecting exception: RuntimeApplicationException");
      } catch(RuntimeApplicationException e) {
        /*
         * com.lts.application.ApplicationMessages.error.keyNotFound
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      MessageFormatter messageFormatter0 = new MessageFormatter();
      String string0 = messageFormatter0.listToString((List<String>) null);
      assertEquals("null", string0);
      assertNotNull(string0);
  }

  @Test
  public void test15()  throws Throwable  {
      MessageFormatter messageFormatter0 = new MessageFormatter();
      // Undeclared exception!
      try {
        messageFormatter0.tryLoad((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test16()  throws Throwable  {
      MessageFormatter messageFormatter0 = new MessageFormatter();
      // Undeclared exception!
      try {
        messageFormatter0.tryLoad("", "");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
