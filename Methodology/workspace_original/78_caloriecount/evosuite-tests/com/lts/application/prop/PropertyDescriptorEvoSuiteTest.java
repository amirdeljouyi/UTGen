/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.application.prop;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.application.prop.PropertyDescriptor;
import java.util.Properties;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PropertyDescriptorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor();
      Properties properties0 = new Properties();
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try {
        propertyDescriptor0.process(properties0, stringArray0, (int) '`', "");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor();
      Properties properties0 = new Properties();
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try {
        propertyDescriptor0.process(properties0, stringArray0, 0, '{');
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor();
      boolean boolean0 = propertyDescriptor0.matches((String) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor();
      String string0 = propertyDescriptor0.getDefaultValue();
      assertNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor();
      propertyDescriptor0.setRequiresArgument(false);
      assertEquals(false, propertyDescriptor0.getRequiresArgument());
      assertEquals(false, propertyDescriptor0.requiresArgument());
  }

  @Test
  public void test5()  throws Throwable  {
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor();
      propertyDescriptor0.setName("Child and parent are the same object: ");
      assertNull(propertyDescriptor0.getDefaultValue());
  }

  @Test
  public void test6()  throws Throwable  {
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor();
      boolean boolean0 = propertyDescriptor0.getRequiresArgument();
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor();
      propertyDescriptor0.setDefaultValue((String) null);
      assertNull(propertyDescriptor0.getName());
  }

  @Test
  public void test8()  throws Throwable  {
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor();
      boolean boolean0 = propertyDescriptor0.matches('h');
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor();
      char[] charArray0 = new char[5];
      propertyDescriptor0.setSwitchValues(charArray0);
      boolean boolean0 = propertyDescriptor0.matches('h');
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor();
      propertyDescriptor0.setValue("");
      assertEquals(false, propertyDescriptor0.requiresArgument());
  }

  @Test
  public void test11()  throws Throwable  {
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor();
      char[] charArray0 = new char[2];
      charArray0[0] = 'u';
      propertyDescriptor0.setSwitchValues(charArray0);
      boolean boolean0 = propertyDescriptor0.matches('u');
      assertEquals(true, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Child and parent are the same object: ";
      stringArray0[1] = "Child and parent are the same object: ";
      stringArray0[2] = "Child and parent are the same object: ";
      stringArray0[3] = "Child and parent are the same object: ";
      propertyDescriptor0.setLongNames(stringArray0);
      boolean boolean0 = propertyDescriptor0.matches("5/YN4hg]~&pk:~,O");
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      propertyDescriptor0.setLongNames(stringArray0);
      boolean boolean0 = propertyDescriptor0.matches("");
      assertEquals(true, boolean0);
  }
}
