/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.application.data;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.application.ApplicationException;
import com.lts.caloriecount.data.Adjustment;
import com.lts.caloriecount.data.entry.EntryList;
import com.lts.caloriecount.data.food.Food;
import com.lts.caloriecount.data.food.FoodList;
import com.lts.caloriecount.data.frequent.FrequentFood;
import com.lts.caloriecount.data.frequent.FrequentFoodList;
import com.lts.caloriecount.data.meal.Meal;
import com.lts.caloriecount.data.meal.MealList;
import com.lts.xml.simple.SimpleElement;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.List;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class IdApplicationDataListEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      EntryList entryList0 = new EntryList();
      assertNotNull(entryList0);
      
      FoodList foodList0 = new FoodList();
      Food food0 = foodList0.createFood("", 0, "");
      SimpleElement simpleElement0 = food0.createSerializationElement();
      entryList0.deserializeChildElement(simpleElement0);
      assertEquals(true, foodList0.isDirty());
      assertEquals(0, food0.getId());
  }

  @Test
  public void test1()  throws Throwable  {
      MealList mealList0 = new MealList();
      mealList0.baiscReplaceWith((List<Meal>) mealList0);
      assertEquals(0, mealList0.size());
  }

  @Test
  public void test2()  throws Throwable  {
      FrequentFoodList frequentFoodList0 = new FrequentFoodList();
      assertNotNull(frequentFoodList0);
      
      SimpleElement simpleElement0 = frequentFoodList0.createSerializationElement();
      assertEquals("frequentFoods", simpleElement0.toString());
      assertNotNull(simpleElement0);
  }

  @Test
  public void test3()  throws Throwable  {
      FoodList foodList0 = new FoodList();
      assertNotNull(foodList0);
      
      Food food0 = foodList0.createFood("", 0, "");
      FrequentFoodList frequentFoodList0 = new FrequentFoodList();
      FrequentFood frequentFood0 = frequentFoodList0.findOrCreate(food0);
      frequentFoodList0.set(0, frequentFood0);
      assertEquals(false, foodList0.isEmpty());
      assertEquals(0, food0.getId());
  }

  @Test
  public void test4()  throws Throwable  {
      MealList mealList0 = new MealList();
      mealList0.postDeserialize();
      assertNull(mealList0.getEntryName());
  }

  @Test
  public void test5()  throws Throwable  {
      FrequentFoodList frequentFoodList0 = new FrequentFoodList();
      FrequentFood frequentFood0 = frequentFoodList0.idToElement(0);
      assertNull(frequentFood0);
  }

  @Test
  public void test6()  throws Throwable  {
      MealList mealList0 = new MealList();
      assertNotNull(mealList0);
      
      Meal meal0 = new Meal();
      mealList0.add(meal0);
      FoodList foodList0 = new FoodList((List) mealList0);
      SimpleElement simpleElement0 = new SimpleElement("SwingDisplayedMnemonicIndexKey", (-254L));
      foodList0.serializeTo(simpleElement0);
      assertEquals(false, mealList0.isEmpty());
      assertEquals(false, foodList0.isEmpty());
  }

  @Test
  public void test7()  throws Throwable  {
      MealList mealList0 = new MealList();
      assertNotNull(mealList0);
      
      Meal meal0 = new Meal();
      mealList0.add(meal0);
      mealList0.renumber();
      assertEquals(false, mealList0.isEmpty());
      assertEquals(1, mealList0.size());
  }

  @Test
  public void test8()  throws Throwable  {
      MealList mealList0 = new MealList();
      assertNotNull(mealList0);
      
      Adjustment adjustment0 = new Adjustment();
      SimpleElement simpleElement0 = adjustment0.createSerializationElement();
      mealList0.deserializeFrom(simpleElement0);
      assertEquals(false, mealList0.isEmpty());
      assertEquals(4, mealList0.size());
  }

  @Test
  public void test9()  throws Throwable  {
      FoodList foodList0 = new FoodList();
      assertNotNull(foodList0);
      
      Food food0 = foodList0.createFood((String) null, (-17), (String) null);
      // Undeclared exception!
      try {
        foodList0.add((-17), food0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: -17, Size: 1
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      MealList mealList0 = new MealList();
      assertNotNull(mealList0);
      
      Meal meal0 = new Meal();
      mealList0.add(meal0);
      FoodList foodList0 = new FoodList((List) mealList0);
      // Undeclared exception!
      try {
        foodList0.removeAll((Collection) mealList0);
        fail("Expecting exception: ConcurrentModificationException");
      } catch(ConcurrentModificationException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      FoodList foodList0 = new FoodList();
      foodList0.removeFood((Food) null);
      assertEquals("{}", foodList0.toString());
  }
}
