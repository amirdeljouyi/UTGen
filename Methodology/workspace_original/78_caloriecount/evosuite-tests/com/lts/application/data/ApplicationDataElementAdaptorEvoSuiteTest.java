/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.application.data;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.caloriecount.data.Adjustment;
import com.lts.caloriecount.data.CalorieCountData;
import com.lts.caloriecount.data.budget.Budget;
import com.lts.util.deepcopy.DeepCopyException;
import java.util.Map;

@RunWith(EvoSuiteRunner.class)
public class ApplicationDataElementAdaptorEvoSuiteTest {


  //Test case number: 0
  /*
   * 3 covered goals:
   * 1 com.lts.application.data.ApplicationDataElementAdaptor.deepCopy()Ljava/lang/Object;: root-Branch
   * 2 com.lts.application.data.ApplicationDataElementAdaptor.<init>()V: root-Branch
   * 3 com.lts.application.data.ApplicationDataElementAdaptor.deepCopyData(Ljava/lang/Object;Ljava/util/Map;Z)V: I3 Branch 1 IFEQ L115 - true
   */
  @Test
  public void test0()  throws Throwable  {
      Adjustment adjustment0 = new Adjustment();
      Adjustment adjustment1 = (Adjustment)adjustment0.deepCopy();
      assertEquals(0L, adjustment1.getTime());
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * 1 com.lts.application.data.ApplicationDataElementAdaptor.deepCopy(Z)Ljava/lang/Object;: root-Branch
   * 2 com.lts.application.data.ApplicationDataElementAdaptor.deepCopyData(Ljava/lang/Object;Ljava/util/Map;Z)V: I3 Branch 1 IFEQ L115 - false
   */
  @Test
  public void test1()  throws Throwable  {
      Adjustment adjustment0 = new Adjustment();
      Adjustment adjustment1 = (Adjustment)adjustment0.deepCopy(true);
      assertEquals(false, adjustment1.isDirty());
  }

  //Test case number: 2
  /*
   * 4 covered goals:
   * 1 com.lts.application.data.ApplicationDataElementAdaptor.toString()Ljava/lang/String;: root-Branch
   * 2 com.lts.application.data.ApplicationDataElementAdaptor.addValues(Ljava/lang/StringBuffer;)V: root-Branch
   * 3 com.lts.application.data.ApplicationDataElementAdaptor.getId()I: root-Branch
   * 4 com.lts.application.data.ApplicationDataElementAdaptor.postDeserialize()V: root-Branch
   */
  @Test
  public void test2()  throws Throwable  {
      Budget budget0 = new Budget();
      String string0 = budget0.toString();
      assertNotNull(string0);
      assertEquals(false, budget0.isDirty());
      assertEquals("0", string0);
  }

  //Test case number: 3
  /*
   * 4 covered goals:
   * 1 com.lts.application.data.ApplicationDataElementAdaptor.continueDeepCopy(Ljava/util/Map;Z)Lcom/lts/util/deepcopy/DeepCopier;: root-Branch
   * 2 com.lts.application.data.ApplicationDataElementAdaptor.setDirty(Z)V: root-Branch
   * 3 com.lts.application.data.ApplicationDataElementAdaptor.postDeserialize()V: root-Branch
   * 4 com.lts.application.data.ApplicationDataElementAdaptor.deepCopyData(Ljava/lang/Object;Ljava/util/Map;Z)V: I3 Branch 1 IFEQ L115 - false
   */
  @Test
  public void test3()  throws Throwable  {
      Adjustment adjustment0 = new Adjustment();
      CalorieCountData calorieCountData0 = new CalorieCountData();
      Adjustment adjustment1 = (Adjustment)adjustment0.continueDeepCopy((Map) calorieCountData0.myElements, true);
      assertEquals(false, calorieCountData0.getDirty());
      assertNotNull(adjustment1);
      assertEquals(false, calorieCountData0.isDirty());
  }

  //Test case number: 4
  /*
   * 3 covered goals:
   * 1 com.lts.application.data.ApplicationDataElementAdaptor.serializeTo(Lcom/lts/xml/simple/SimpleElement;)V: root-Branch
   * 2 com.lts.application.data.ApplicationDataElementAdaptor.<init>()V: root-Branch
   * 3 com.lts.application.data.ApplicationDataElementAdaptor.getId()I: root-Branch
   */
  @Test
  public void test4()  throws Throwable  {
      Adjustment adjustment0 = new Adjustment();
      adjustment0.toSimpleElement("j|iDE9OxWf0");
      assertEquals(0, adjustment0.getId());
  }
}
