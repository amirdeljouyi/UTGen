/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.pest.tree;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.pest.tree.Tree;
import com.lts.pest.tree.TreeListener;
import com.lts.util.TreeNode;
import com.lts.util.deepcopy.DeepCopier;
import com.lts.util.deepcopy.DeepCopyException;
import java.util.HashMap;
import java.util.Map;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TreeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Tree tree0 = new Tree();
      HashMap<DeepCopier, TreeNode> hashMap0 = new HashMap<DeepCopier, TreeNode>();
      tree0.continueDeepCopy((Map) hashMap0, true);
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
  }

  @Test
  public void test1()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.removeTreeListener((TreeListener) null);
  }

  @Test
  public void test2()  throws Throwable  {
      Tree tree0 = new Tree();
      TreeNode treeNode0 = new TreeNode();
      tree0.changeNode(treeNode0, treeNode0);
      assertEquals(0, treeNode0.getChildCount());
  }

  @Test
  public void test3()  throws Throwable  {
      Tree tree0 = new Tree((TreeNode) null);
      TreeNode treeNode0 = new TreeNode((TreeNode) null);
      tree0.addNodeTo(treeNode0, (TreeNode) null);
      tree0.addNodeTo(treeNode0, treeNode0);
      assertEquals(2, treeNode0.getChildCount());
  }

  @Test
  public void test4()  throws Throwable  {
      Tree tree0 = new Tree();
      TreeNode treeNode0 = new TreeNode();
      tree0.removeNodeFrom(treeNode0, (TreeNode) null);
      assertEquals(0, treeNode0.getChildCount());
  }

  @Test
  public void test5()  throws Throwable  {
      Tree tree0 = new Tree();
      Tree tree1 = (Tree)tree0.deepCopy(true);
      assertNotSame(tree1, tree0);
  }

  @Test
  public void test6()  throws Throwable  {
      Tree tree0 = new Tree();
      TreeNode treeNode0 = tree0.getRoot();
      assertNull(treeNode0);
  }

  @Test
  public void test7()  throws Throwable  {
      Tree tree0 = new Tree();
      Tree tree1 = (Tree)tree0.deepCopy();
      assertNotSame(tree0, tree1);
  }

  @Test
  public void test8()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.addTreeListener((TreeListener) null);
  }
}
