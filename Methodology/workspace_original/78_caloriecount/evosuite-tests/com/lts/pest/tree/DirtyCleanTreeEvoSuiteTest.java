/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.pest.tree;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.pest.tree.DirtyCleanTree;
import com.lts.pest.tree.IdTreeNode;
import com.lts.util.TreeNode;
import com.lts.util.deepcopy.DeepCopyException;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DirtyCleanTreeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DirtyCleanTree dirtyCleanTree0 = new DirtyCleanTree();
      // Undeclared exception!
      try {
        dirtyCleanTree0.postDeserialize();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * null root
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      DirtyCleanTree dirtyCleanTree0 = new DirtyCleanTree();
      // Undeclared exception!
      try {
        dirtyCleanTree0.changeNode((IdTreeNode) null, (IdTreeNode) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      DirtyCleanTree dirtyCleanTree0 = new DirtyCleanTree();
      // Undeclared exception!
      try {
        dirtyCleanTree0.removeNodeFrom((IdTreeNode) null, (IdTreeNode) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      DirtyCleanTree dirtyCleanTree0 = new DirtyCleanTree();
      boolean boolean0 = dirtyCleanTree0.isDirty();
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      DirtyCleanTree dirtyCleanTree0 = new DirtyCleanTree();
      // Undeclared exception!
      try {
        dirtyCleanTree0.initialize((IdTreeNode) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      DirtyCleanTree dirtyCleanTree0 = new DirtyCleanTree();
      dirtyCleanTree0.setDirty(false);
      assertEquals(false, dirtyCleanTree0.isDirty());
  }

  @Test
  public void test6()  throws Throwable  {
      DirtyCleanTree dirtyCleanTree0 = new DirtyCleanTree();
      // Undeclared exception!
      try {
        dirtyCleanTree0.addNodeTo((IdTreeNode) null, (IdTreeNode) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      DirtyCleanTree dirtyCleanTree0 = new DirtyCleanTree();
      TreeNode treeNode0 = new TreeNode();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      TreeNode treeNode1 = new TreeNode(treeNode0, (Collection) linkedList0, (Object) dirtyCleanTree0);
      dirtyCleanTree0.initialize(treeNode1);
      // Undeclared exception!
      try {
        dirtyCleanTree0.postDeserialize();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * root should have null as its parent.
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      DirtyCleanTree dirtyCleanTree0 = new DirtyCleanTree();
      TreeNode treeNode0 = new TreeNode();
      treeNode0.addChild(treeNode0);
      dirtyCleanTree0.initialize(treeNode0);
      // Undeclared exception!
      try {
        dirtyCleanTree0.postDeserialize();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Child and parent are the same object: com.lts.util.TreeNode@7c73664e
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      DirtyCleanTree dirtyCleanTree0 = new DirtyCleanTree();
      TreeNode treeNode0 = new TreeNode();
      TreeNode treeNode1 = new TreeNode(treeNode0);
      treeNode0.addChild(treeNode1);
      dirtyCleanTree0.initialize(treeNode0);
      // Undeclared exception!
      try {
        dirtyCleanTree0.postDeserialize();
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * com.lts.util.TreeNode cannot be cast to com.lts.pest.tree.IdTreeNode
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      DirtyCleanTree dirtyCleanTree0 = new DirtyCleanTree();
      TreeNode treeNode0 = new TreeNode();
      dirtyCleanTree0.initialize(treeNode0);
      treeNode0.addChild(treeNode0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      treeNode0.deepCopyData((Object) treeNode0, (Map) hashMap0, false);
      // Undeclared exception!
      try {
        dirtyCleanTree0.postDeserialize();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * child, com.lts.util.TreeNode@85a4171, is inconsistent with parent, com.lts.util.TreeNode@3ff75a8e
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      DirtyCleanTree dirtyCleanTree0 = new DirtyCleanTree();
      DirtyCleanTree dirtyCleanTree1 = (DirtyCleanTree)dirtyCleanTree0.deepCopy();
      assertEquals(1, dirtyCleanTree1.nextIntegerValue());
  }
}
