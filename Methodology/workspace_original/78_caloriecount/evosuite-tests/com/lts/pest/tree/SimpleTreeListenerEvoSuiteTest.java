/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.pest.tree;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.pest.tree.SimpleTreeListener;
import com.lts.pest.tree.Tree;
import com.lts.swing.tree.EditTree;
import com.lts.util.TreeNode;
import javax.swing.tree.DefaultTreeModel;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SimpleTreeListenerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TreeNode treeNode0 = new TreeNode();
      Tree tree0 = new Tree(treeNode0);
      SimpleTreeListener simpleTreeListener0 = new SimpleTreeListener(tree0, (EditTree) null);
      DefaultTreeModel defaultTreeModel0 = simpleTreeListener0.getModel();
      assertEquals(false, defaultTreeModel0.asksAllowsChildren());
  }

  @Test
  public void test1()  throws Throwable  {
      TreeNode treeNode0 = new TreeNode();
      Tree tree0 = new Tree(treeNode0);
      SimpleTreeListener simpleTreeListener0 = new SimpleTreeListener(tree0, (EditTree) null);
      simpleTreeListener0.requestRemoveNode(treeNode0, treeNode0);
      assertEquals(0, treeNode0.getChildCount());
  }

  @Test
  public void test2()  throws Throwable  {
      TreeNode treeNode0 = new TreeNode();
      Tree tree0 = new Tree(treeNode0);
      SimpleTreeListener simpleTreeListener0 = new SimpleTreeListener(tree0, (EditTree) null);
      simpleTreeListener0.allChanged();
  }

  @Test
  public void test3()  throws Throwable  {
      TreeNode treeNode0 = new TreeNode();
      Tree tree0 = new Tree(treeNode0);
      SimpleTreeListener simpleTreeListener0 = new SimpleTreeListener(tree0, (EditTree) null);
      simpleTreeListener0.nodeChanged(treeNode0);
      assertEquals(0, treeNode0.getChildCount());
  }

  @Test
  public void test4()  throws Throwable  {
      TreeNode treeNode0 = new TreeNode();
      Tree tree0 = new Tree(treeNode0);
      SimpleTreeListener simpleTreeListener0 = new SimpleTreeListener(tree0, (EditTree) null);
      simpleTreeListener0.requestAddNode(treeNode0, treeNode0);
      // Undeclared exception!
      try {
        simpleTreeListener0.initialize(tree0, (EditTree) null);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      TreeNode treeNode0 = new TreeNode();
      Tree tree0 = new Tree(treeNode0);
      SimpleTreeListener simpleTreeListener0 = new SimpleTreeListener(tree0, (EditTree) null);
      simpleTreeListener0.nodeAdded(treeNode0, treeNode0);
      assertEquals(0, treeNode0.getChildCount());
  }

  @Test
  public void test6()  throws Throwable  {
      TreeNode treeNode0 = new TreeNode();
      Tree tree0 = new Tree(treeNode0);
      SimpleTreeListener simpleTreeListener0 = new SimpleTreeListener(tree0, (EditTree) null);
      TreeNode treeNode1 = new TreeNode(treeNode0);
      // Undeclared exception!
      try {
        simpleTreeListener0.nodeAdded(treeNode1, treeNode1);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TreeNode treeNode0 = new TreeNode((TreeNode) null);
      Tree tree0 = new Tree(treeNode0);
      SimpleTreeListener simpleTreeListener0 = new SimpleTreeListener(tree0, (EditTree) null);
      // Undeclared exception!
      try {
        simpleTreeListener0.nodeRemoved(treeNode0, treeNode0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * node does not have a parent.
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      TreeNode treeNode0 = new TreeNode((Object) null);
      Tree tree0 = new Tree(treeNode0);
      SimpleTreeListener simpleTreeListener0 = new SimpleTreeListener(tree0, (EditTree) null);
      simpleTreeListener0.nodeRemoved((TreeNode) null, (TreeNode) null);
  }
}
