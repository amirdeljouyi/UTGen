/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.cmdline;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.cmdline.BasicFormalParameter;
import com.lts.cmdline.CommandLineException;
import java.util.Properties;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BasicFormalParameterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BasicFormalParameter basicFormalParameter0 = new BasicFormalParameter((String) null);
      assertNotNull(basicFormalParameter0);
  }

  @Test
  public void test1()  throws Throwable  {
      BasicFormalParameter basicFormalParameter0 = new BasicFormalParameter((String) null, (String) null, (String) null);
      assertNotNull(basicFormalParameter0);
  }

  @Test
  public void test2()  throws Throwable  {
      BasicFormalParameter basicFormalParameter0 = new BasicFormalParameter();
      basicFormalParameter0.initialize("&_3&\"fUR3", "&_3&\"fUR3", "&_3&\"fUR3");
      boolean boolean0 = basicFormalParameter0.longFormMatches("&_3&\"fUR3");
      assertEquals(true, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      BasicFormalParameter basicFormalParameter0 = new BasicFormalParameter("X]eON%$", "X]eON%$", "X]eON%$", true);
      boolean boolean0 = basicFormalParameter0.shortFormMatches('h');
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      BasicFormalParameter basicFormalParameter0 = new BasicFormalParameter((String) null, (String) null, (String) null, false);
      assertNotNull(basicFormalParameter0);
  }

  @Test
  public void test5()  throws Throwable  {
      BasicFormalParameter basicFormalParameter0 = new BasicFormalParameter();
      boolean boolean0 = basicFormalParameter0.longFormMatches("2M1DH8)].]3kV[U3O9");
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      BasicFormalParameter basicFormalParameter0 = new BasicFormalParameter();
      boolean boolean0 = basicFormalParameter0.shortFormMatches('k');
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      BasicFormalParameter basicFormalParameter0 = new BasicFormalParameter("j/:{4n~7J z", "j/:{4n~7J z", "j/:{4n~7J z", false);
      boolean boolean0 = basicFormalParameter0.shortFormMatches('j');
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      BasicFormalParameter basicFormalParameter0 = new BasicFormalParameter();
      boolean boolean0 = basicFormalParameter0.argumentMatches("h.A4MP/4Yy");
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      BasicFormalParameter basicFormalParameter0 = new BasicFormalParameter("X]eON%$", "X]eON%$", "X]eON%$", true);
      boolean boolean0 = basicFormalParameter0.argumentMatches("X]eON%$");
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      BasicFormalParameter basicFormalParameter0 = new BasicFormalParameter();
      basicFormalParameter0.initialize("&_3&\"fUR3");
      boolean boolean0 = basicFormalParameter0.argumentMatches("&_3&\"fUR3");
      assertEquals(true, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      BasicFormalParameter basicFormalParameter0 = new BasicFormalParameter();
      basicFormalParameter0.initialize("&_3&\"fUR3", "&_3&\"fUR3", "&_3&\"fUR3");
      Properties properties0 = new Properties();
      String[] stringArray0 = new String[12];
      int int0 = basicFormalParameter0.processSwitch(properties0, "&_3&\"fUR3", stringArray0, (-1896));
      assertEquals(1, properties0.size());
      assertEquals((-1895), int0);
  }

  @Test
  public void test12()  throws Throwable  {
      BasicFormalParameter basicFormalParameter0 = new BasicFormalParameter("X]eON%$", "X]eON%$", "X]eON%$", true);
      Properties properties0 = new Properties();
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try {
        basicFormalParameter0.processSwitch(properties0, "X]eON%$", stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      BasicFormalParameter basicFormalParameter0 = new BasicFormalParameter();
      Properties properties0 = new Properties();
      String[] stringArray0 = new String[7];
      basicFormalParameter0.initialize("2M1DH8)].]3kV[U3O9", "2M1DH8)].]3kV[U3O9", "2M1DH8)].]3kV[U3O9", true);
      try {
        basicFormalParameter0.processSwitch(properties0, (String) null, stringArray0, 633);
        fail("Expecting exception: CommandLineException");
      } catch(CommandLineException e) {
        /*
         * com.lts.cmdline.CommandLineMessages.errors.missingRequiredArgument, [0] 2M1DH8)].]3kV[U3O9
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      BasicFormalParameter basicFormalParameter0 = new BasicFormalParameter();
      boolean boolean0 = basicFormalParameter0.matchesArgument("h.A4MP/4Yy");
      assertEquals(false, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      BasicFormalParameter basicFormalParameter0 = new BasicFormalParameter();
      basicFormalParameter0.initialize("&_3&\"fUR3");
      boolean boolean0 = basicFormalParameter0.matchesArgument("&_3&\"fUR3");
      assertEquals(true, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      BasicFormalParameter basicFormalParameter0 = new BasicFormalParameter();
      basicFormalParameter0.initialize("h.A4MP/4Yy", "h.A4MP/4Yy", "h.A4MP/4Yy", false);
      boolean boolean0 = basicFormalParameter0.matchesArgument("h.A4MP/4Yy");
      assertEquals(false, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      BasicFormalParameter basicFormalParameter0 = new BasicFormalParameter("j/:{4n~7J z", "j/:{4n~7J z", "j/:{4n~7J z", false);
      Properties properties0 = new Properties();
      String[] stringArray0 = new String[18];
      basicFormalParameter0.processArgument("j/:{4n~7J z", properties0, 1195, stringArray0);
      int int0 = basicFormalParameter0.processArgument("j/:{4n~7J z", properties0, 1195, stringArray0);
      assertEquals(3, properties0.size());
      assertEquals(1196, int0);
  }
}
