/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.io.archive;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.LTSException;
import com.lts.io.ImprovedFile;
import com.lts.io.archive.ZipArchive;
import com.lts.util.deepcopy.DeepCopyException;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AbstractTempDirectoryArchiveEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      ZipArchive zipArchive0 = new ZipArchive();
      zipArchive0.commit();
      assertEquals(false, zipArchive0.archiveHasBeenExtracted());
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          ZipArchive zipArchive0 = new ZipArchive("<m8^[2X$*+9rR<:5W4G");
          assertNotNull(zipArchive0);
          
          ImprovedFile improvedFile0 = zipArchive0.getArchiveFile();
          ZipArchive zipArchive1 = null;
          try {
            zipArchive1 = new ZipArchive((InputStream) null, improvedFile0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission <m8^[2X$*+9rR<:5W4G/arc8195504180846611751zip write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.checkAndCreate(File.java:1696)
             * java.io.File.createTempFile(File.java:1792)
             * com.lts.io.ImprovedFile.createTempImprovedFile(ImprovedFile.java:421)
             * com.lts.io.archive.AbstractTempDirectoryArchive.initialize(AbstractTempDirectoryArchive.java:194)
             * com.lts.io.archive.ZipArchive.<init>(ZipArchive.java:118)
             * sun.reflect.GeneratedConstructorAccessor55.newInstance(Unknown Source)
             * sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
             * java.lang.reflect.Constructor.newInstance(Constructor.java:513)
             * org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
      ZipArchive zipArchive0 = new ZipArchive();
      // Undeclared exception!
      try {
        zipArchive0.remove(", temp location: ");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      ZipArchive zipArchive0 = new ZipArchive();
      try {
        zipArchive0.loadObject("");
        fail("Expecting exception: LTSException");
      } catch(LTSException e) {
        /*
         * Caught exception while trying to load object from archive for entry, 
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      ZipArchive zipArchive0 = new ZipArchive("");
      assertNotNull(zipArchive0);
      
      zipArchive0.getInputStream("");
      assertEquals(true, zipArchive0.createBackups());
      assertEquals(true, zipArchive0.getCreateBackups());
  }

  @Test
  public void test5()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("", "");
      ZipArchive zipArchive0 = new ZipArchive((File) improvedFile0, (File) improvedFile0, false);
      try {
        zipArchive0.commitTo((File) improvedFile0);
        fail("Expecting exception: LTSException");
      } catch(LTSException e) {
        /*
         * Error trying to create output file, /
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      ZipArchive zipArchive0 = new ZipArchive();
      ImprovedFile improvedFile0 = new ImprovedFile("@#2ZPBe", "@#2ZPBe");
      // Undeclared exception!
      try {
        zipArchive0.add("@#2ZPBe", (File) improvedFile0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      ZipArchive zipArchive0 = new ZipArchive("");
      assertNotNull(zipArchive0);
      
      zipArchive0.setArchiveHasBeenExtracted(true);
      // Undeclared exception!
      try {
        zipArchive0.list();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      ZipArchive zipArchive0 = new ZipArchive("");
      assertNotNull(zipArchive0);
      
      try {
        zipArchive0.list();
        fail("Expecting exception: LTSException");
      } catch(LTSException e) {
        /*
         * Error trying to list files in archive, 
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      ZipArchive zipArchive0 = new ZipArchive("`uQ5?R+kCLCf#$=uD");
      assertNotNull(zipArchive0);
      
      try {
        zipArchive0.deepCopy(true);
        fail("Expecting exception: DeepCopyException");
      } catch(DeepCopyException e) {
        /*
         * The object, `uQ5?R+kCLCf#$=uD, of class class com.lts.io.ImprovedFile, does not implement com.lts.util.deepcopy.DeepCopier
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      ZipArchive zipArchive0 = new ZipArchive("d");
      assertNotNull(zipArchive0);
      
      // Undeclared exception!
      try {
        zipArchive0.continueDeepCopy((Map) null, false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      ZipArchive zipArchive0 = new ZipArchive();
      // Undeclared exception!
      try {
        zipArchive0.getOutputStream("");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      ZipArchive zipArchive0 = new ZipArchive();
      // Undeclared exception!
      try {
        zipArchive0.deepCopy();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      ZipArchive zipArchive0 = new ZipArchive();
      zipArchive0.setFileList((List) null);
      assertEquals(false, zipArchive0.getCreateBackups());
  }

  @Test
  public void test14()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("nntn.b']");
      ZipArchive zipArchive0 = new ZipArchive((File) improvedFile0);
      assertNotNull(zipArchive0);
      
      try {
        zipArchive0.commitTo((File) improvedFile0);
        fail("Expecting exception: LTSException");
      } catch(LTSException e) {
        /*
         * Error trying to create output file, nntn.b']
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      ZipArchive zipArchive0 = new ZipArchive("Error trying to write data to output file");
      assertNotNull(zipArchive0);
      
      // Undeclared exception!
      try {
        zipArchive0.saveProperties("Error trying to write data to output file", (Properties) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test16()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          ZipArchive zipArchive0 = new ZipArchive("d");
          assertNotNull(zipArchive0);
          
          ImprovedFile improvedFile0 = (ImprovedFile)zipArchive0.getFile();
          ZipArchive zipArchive1 = new ZipArchive((File) improvedFile0, (File) improvedFile0, true);
          assertNotNull(zipArchive1);
          
          zipArchive1.getTempExtractedFile("d");
          // Undeclared exception!
          try {
            zipArchive1.saveObject("d", (Object) improvedFile0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission d write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.mkdir(File.java:1155)
             * java.io.File.mkdirs(File.java:1184)
             * com.lts.io.archive.AbstractTempDirectoryArchive.createParentDirectories(AbstractTempDirectoryArchive.java:376)
             * com.lts.io.archive.AbstractTempDirectoryArchive.add(AbstractTempDirectoryArchive.java:390)
             * com.lts.io.archive.AbstractTempDirectoryArchive.saveObject(AbstractTempDirectoryArchive.java:715)
             * sun.reflect.GeneratedMethodAccessor144.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test17()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          File file0 = new File("", "");
          ZipArchive zipArchive0 = new ZipArchive(file0, file0, true);
          assertNotNull(zipArchive0);
          
          // Undeclared exception!
          try {
            zipArchive0.removeTempFiles();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission /cgroup delete)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkDelete(SecurityManager.java:990)
             * java.io.File.delete(File.java:902)
             * com.lts.io.ImprovedFile.rmdir(ImprovedFile.java:372)
             * com.lts.io.ImprovedFile.rmdir(ImprovedFile.java:359)
             * com.lts.io.ImprovedFile.deleteDirectory(ImprovedFile.java:384)
             * com.lts.io.archive.AbstractTempDirectoryArchive.removeTempFiles(AbstractTempDirectoryArchive.java:761)
             * sun.reflect.GeneratedMethodAccessor145.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test18()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          File file0 = new File("Error trying to write data to output file", "Error trying to write data to output file");
          ZipArchive zipArchive0 = null;
          try {
            zipArchive0 = new ZipArchive(file0, file0, true);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission Error trying to write data to output file/Error trying to write data to output file write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.mkdir(File.java:1155)
             * java.io.File.mkdirs(File.java:1184)
             * com.lts.io.archive.AbstractTempDirectoryArchive.setTempDir(AbstractTempDirectoryArchive.java:299)
             * com.lts.io.archive.AbstractTempDirectoryArchive.initialize(AbstractTempDirectoryArchive.java:166)
             * com.lts.io.archive.ZipArchive.<init>(ZipArchive.java:100)
             * sun.reflect.GeneratedConstructorAccessor58.newInstance(Unknown Source)
             * sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
             * java.lang.reflect.Constructor.newInstance(Constructor.java:513)
             * org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test19()  throws Throwable  {
      ZipArchive zipArchive0 = new ZipArchive();
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte)0, (int) (byte)0);
      zipArchive0.copyFromTo((InputStream) byteArrayInputStream0, (OutputStream) null);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test
  public void test20()  throws Throwable  {
      ZipArchive zipArchive0 = new ZipArchive("");
      assertNotNull(zipArchive0);
      
      File file0 = new File("", "");
      try {
        zipArchive0.copyFromTo(file0, file0);
        fail("Expecting exception: LTSException");
      } catch(LTSException e) {
        /*
         * Error trying to copy file to staging directory.  Input file: /, output file: /
         */
      }
  }

  @Test
  public void test21()  throws Throwable  {
      ZipArchive zipArchive0 = new ZipArchive();
      File file0 = new File("_-qO4Z.fc`~,L+G");
      File file1 = file0.getCanonicalFile();
      zipArchive0.createParentDirectories(file1);
      assertEquals(0L, file1.lastModified());
  }

  @Test
  public void test22()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          ZipArchive zipArchive0 = new ZipArchive("zarchive");
          assertNotNull(zipArchive0);
          
          ImprovedFile improvedFile0 = new ImprovedFile("zarchive", "zarchive");
          zipArchive0.initialize((File) improvedFile0, (File) improvedFile0, false);
          // Undeclared exception!
          try {
            zipArchive0.createEntry("zarchive");
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission zarchive/zarchive write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.File.mkdir(File.java:1155)
             * java.io.File.mkdirs(File.java:1184)
             * com.lts.io.archive.AbstractTempDirectoryArchive.createEntry(AbstractTempDirectoryArchive.java:501)
             * sun.reflect.GeneratedMethodAccessor152.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test23()  throws Throwable  {
      ZipArchive zipArchive0 = new ZipArchive("d");
      assertNotNull(zipArchive0);
      
      ImprovedFile improvedFile0 = (ImprovedFile)zipArchive0.getFile();
      ZipArchive zipArchive1 = new ZipArchive((File) improvedFile0, (File) improvedFile0, true);
      assertNotNull(zipArchive1);
      
      zipArchive1.getTempExtractedFile("d");
      zipArchive1.getTempFileForEntry("d");
      assertEquals(true, zipArchive1.archiveHasBeenExtracted());
      assertEquals(true, zipArchive0.getCreateBackups());
  }

  @Test
  public void test24()  throws Throwable  {
      ZipArchive zipArchive0 = new ZipArchive();
      // Undeclared exception!
      try {
        zipArchive0.getTempFileForEntry("R\"&VEDt.O1,");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test25()  throws Throwable  {
      ZipArchive zipArchive0 = new ZipArchive();
      zipArchive0.rollback();
      assertEquals("", zipArchive0.toString());
  }

  @Test
  public void test26()  throws Throwable  {
      ZipArchive zipArchive0 = new ZipArchive("");
      assertNotNull(zipArchive0);
      
      File file0 = new File("", "");
      try {
        zipArchive0.commitTo(file0);
        fail("Expecting exception: LTSException");
      } catch(LTSException e) {
        /*
         * Error trying to backup file, /.  Reason: OTHER_ERROR
         */
      }
  }

  @Test
  public void test27()  throws Throwable  {
      ZipArchive zipArchive0 = new ZipArchive();
      ImprovedFile improvedFile0 = new ImprovedFile("R\"&VEDt.O1,", "R\"&VEDt.O1,");
      zipArchive0.initialize((File) improvedFile0, (File) improvedFile0, true);
      zipArchive0.getTempFileForEntry("R\"&VEDt.O1,");
      // Undeclared exception!
      try {
        zipArchive0.commit();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * basedir does not exist
         */
      }
  }

  @Test
  public void test28()  throws Throwable  {
      ZipArchive zipArchive0 = new ZipArchive("d");
      assertNotNull(zipArchive0);
      
      zipArchive0.loadProperties("d");
      assertEquals("d", zipArchive0.toString());
      assertEquals(true, zipArchive0.createBackups());
      assertEquals(true, zipArchive0.getCreateBackups());
  }

  @Test
  public void test29()  throws Throwable  {
      ZipArchive zipArchive0 = new ZipArchive();
      // Undeclared exception!
      try {
        zipArchive0.loadProperties("");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test30()  throws Throwable  {
      ZipArchive zipArchive0 = new ZipArchive("d");
      assertNotNull(zipArchive0);
      
      zipArchive0.removeTempFiles();
      assertEquals(true, zipArchive0.getCreateBackups());
      assertEquals("d", zipArchive0.toString());
      assertEquals(true, zipArchive0.createBackups());
  }

  @Test
  public void test31()  throws Throwable  {
      ZipArchive zipArchive0 = new ZipArchive("d");
      assertNotNull(zipArchive0);
      
      ImprovedFile improvedFile0 = (ImprovedFile)zipArchive0.getFile();
      ZipArchive zipArchive1 = new ZipArchive((File) improvedFile0, (File) improvedFile0, true);
      assertNotNull(zipArchive1);
      
      zipArchive1.removeTempFiles();
      assertEquals(true, zipArchive0.getCreateBackups());
      assertEquals("d", zipArchive1.toString());
      assertEquals(true, zipArchive0.createBackups());
  }

  @Test
  public void test32()  throws Throwable  {
      ZipArchive zipArchive0 = new ZipArchive("");
      assertNotNull(zipArchive0);
      
      String string0 = zipArchive0.convertOneString("+lG:F9ssw6ya\"OnO3");
      assertEquals(true, zipArchive0.getCreateBackups());
      assertEquals("+lG:F9ssw6ya\"OnO3", string0);
      assertNotNull(string0);
  }

  @Test
  public void test33()  throws Throwable  {
      ZipArchive zipArchive0 = new ZipArchive("");
      assertNotNull(zipArchive0);
      
      String string0 = zipArchive0.toString();
      assertEquals(true, zipArchive0.createBackups());
      assertNotNull(string0);
      assertEquals(true, zipArchive0.getCreateBackups());
  }

  @Test
  public void test34()  throws Throwable  {
      ZipArchive zipArchive0 = new ZipArchive();
      String string0 = zipArchive0.toString();
      assertEquals("", string0);
  }
}
