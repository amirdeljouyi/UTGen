/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.xmlser.tags;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.LTSException;
import com.lts.io.IndentingPrintWriter;
import com.lts.xmlser.XmlSerializer;
import com.lts.xmlser.tags.MapTag;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.util.Map;
import javax.imageio.metadata.IIOMetadataNode;
import org.junit.BeforeClass;
import org.w3c.dom.Element;

@RunWith(EvoSuiteRunner.class)
public class MapTagEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      MapTag mapTag0 = new MapTag();
      XmlSerializer xmlSerializer0 = new XmlSerializer();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try {
        mapTag0.processMapping(xmlSerializer0, (Element) iIOMetadataNode0, (Map) xmlSerializer0.ourClassToTagMap);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      MapTag mapTag0 = XmlSerializer.MAP_TAG;
      String string0 = mapTag0.getTagName((Object) "`rb}0/iIa_A");
      assertEquals("map", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      MapTag mapTag0 = XmlSerializer.MAP_TAG;
      XmlSerializer xmlSerializer0 = new XmlSerializer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(12);
      IndentingPrintWriter indentingPrintWriter0 = new IndentingPrintWriter((OutputStream) byteArrayOutputStream0);
      mapTag0.writeMapping(xmlSerializer0, indentingPrintWriter0, (Object) "value", (Object) "value");
      assertEquals("<mapping>\n    <!-- value -->\n    <key class=\"java.lang.String\">value</key>\n    <!-- value -->\n    <value class=\"java.lang.String\">value</value>\n</mapping>\n", byteArrayOutputStream0.toString());
      assertEquals(155, byteArrayOutputStream0.size());
  }
}
