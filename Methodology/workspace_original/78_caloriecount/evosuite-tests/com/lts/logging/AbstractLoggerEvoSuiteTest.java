/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.logging;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.logging.AbstractLogger;
import com.lts.logging.InMemoryLogger;
import com.lts.logging.NullLogger;
import com.lts.logging.SystemErrLogger;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AbstractLoggerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SystemErrLogger systemErrLogger0 = new SystemErrLogger();
      systemErrLogger0.info("fQorced");
      assertEquals(0, systemErrLogger0.getLoggingSeverity());
  }

  @Test
  public void test1()  throws Throwable  {
      SystemErrLogger systemErrLogger0 = new SystemErrLogger();
      systemErrLogger0.logDebug(",mxiumYze: ", (Throwable) null);
      assertEquals(0, systemErrLogger0.getLoggingSeverity());
  }

  @Test
  public void test2()  throws Throwable  {
      SystemErrLogger systemErrLogger0 = new SystemErrLogger();
      systemErrLogger0.logCritical("fQorced", (Throwable) null);
      assertEquals(0, systemErrLogger0.getLoggingSeverity());
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = AbstractLogger.stringToSeverity("fQorced");
      assertEquals((-1), int0);
  }

  @Test
  public void test4()  throws Throwable  {
      SystemErrLogger systemErrLogger0 = new SystemErrLogger();
      systemErrLogger0.debug("fQorced");
      assertEquals(0, systemErrLogger0.getLoggingSeverity());
  }

  @Test
  public void test5()  throws Throwable  {
      SystemErrLogger systemErrLogger0 = new SystemErrLogger();
      systemErrLogger0.force(",mxiumYze: ");
      assertEquals(0, systemErrLogger0.getLoggingSeverity());
  }

  @Test
  public void test6()  throws Throwable  {
      NullLogger nullLogger0 = new NullLogger();
      nullLogger0.logError("fQorced", (Throwable) null);
      assertEquals(-1, nullLogger0.getLoggingSeverity());
  }

  @Test
  public void test7()  throws Throwable  {
      SystemErrLogger systemErrLogger0 = new SystemErrLogger();
      systemErrLogger0.forceLog("fQorced", (Throwable) null);
      assertEquals(0, systemErrLogger0.getLoggingSeverity());
  }

  @Test
  public void test8()  throws Throwable  {
      SystemErrLogger systemErrLogger0 = new SystemErrLogger();
      systemErrLogger0.logInfo(",mxiumYze: ", (Throwable) null);
      assertEquals(0, systemErrLogger0.getLoggingSeverity());
  }

  @Test
  public void test9()  throws Throwable  {
      InMemoryLogger inMemoryLogger0 = new InMemoryLogger();
      int int0 = inMemoryLogger0.getLoggingSeverity();
      assertEquals(0, int0);
  }

  @Test
  public void test10()  throws Throwable  {
      NullLogger nullLogger0 = new NullLogger();
      nullLogger0.critical("fQorced");
      assertEquals(-1, nullLogger0.getLoggingSeverity());
  }

  @Test
  public void test11()  throws Throwable  {
      InMemoryLogger inMemoryLogger0 = new InMemoryLogger();
      inMemoryLogger0.warning("");
      assertEquals("|2013-07-03 00:14:11.680|warning||\n", inMemoryLogger0.acknowledgeBuffer());
  }

  @Test
  public void test12()  throws Throwable  {
      SystemErrLogger systemErrLogger0 = new SystemErrLogger();
      systemErrLogger0.logWarning("fQorced", (Throwable) null);
      assertEquals(0, systemErrLogger0.getLoggingSeverity());
  }

  @Test
  public void test13()  throws Throwable  {
      SystemErrLogger systemErrLogger0 = new SystemErrLogger();
      systemErrLogger0.setLoggingSeverity(1617);
      systemErrLogger0.error(",mxiumYze: ");
      assertEquals(4, systemErrLogger0.getLoggingSeverity());
  }

  @Test
  public void test14()  throws Throwable  {
      InMemoryLogger inMemoryLogger0 = new InMemoryLogger();
      inMemoryLogger0.setLoggingSeverity((-842));
      assertEquals(0, inMemoryLogger0.getLoggingSeverity());
  }
}
