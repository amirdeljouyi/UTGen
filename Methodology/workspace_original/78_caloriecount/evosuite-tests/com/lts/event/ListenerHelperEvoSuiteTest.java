/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.event;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.event.ActionListenerHelper;
import com.lts.event.CallbackListenerHelper;
import com.lts.event.WindowClosedHelper;
import com.lts.pest.tree.DirtyCleanTree;
import com.lts.pest.tree.TreeListenerHelper;
import java.util.Set;
import javax.print.attribute.standard.JobStateReasons;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ListenerHelperEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      CallbackListenerHelper callbackListenerHelper0 = new CallbackListenerHelper();
      callbackListenerHelper0.deferNotifications();
      callbackListenerHelper0.fire(42, (Object) "text/plain", (Object) "text/plain", (Object) "text/plain");
      callbackListenerHelper0.activateNotifications();
  }

  @Test
  public void test1()  throws Throwable  {
      CallbackListenerHelper callbackListenerHelper0 = new CallbackListenerHelper();
      Set<Object> set0 = callbackListenerHelper0.getListeners();
      assertEquals(true, set0.isEmpty());
  }

  @Test
  public void test2()  throws Throwable  {
      ActionListenerHelper actionListenerHelper0 = new ActionListenerHelper();
      actionListenerHelper0.fire();
  }

  @Test
  public void test3()  throws Throwable  {
      CallbackListenerHelper callbackListenerHelper0 = new CallbackListenerHelper();
      callbackListenerHelper0.fire((Object) "SwingDisplayedMnemonicIndexKey");
  }

  @Test
  public void test4()  throws Throwable  {
      CallbackListenerHelper callbackListenerHelper0 = new CallbackListenerHelper();
      callbackListenerHelper0.clearResumeAndFire(13, 13);
  }

  @Test
  public void test5()  throws Throwable  {
      DirtyCleanTree dirtyCleanTree0 = new DirtyCleanTree();
      TreeListenerHelper treeListenerHelper0 = dirtyCleanTree0.getTreeListener();
      treeListenerHelper0.addListener((Object) "ActionCommandKey");
      // Undeclared exception!
      try {
        treeListenerHelper0.fire(1, (Object) "ActionCommandKey", (Object) "ActionCommandKey");
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.lang.String cannot be cast to com.lts.util.TreeNode
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      CallbackListenerHelper callbackListenerHelper0 = new CallbackListenerHelper();
      callbackListenerHelper0.fire(0);
  }

  @Test
  public void test7()  throws Throwable  {
      JobStateReasons jobStateReasons0 = new JobStateReasons();
      WindowClosedHelper windowClosedHelper0 = new WindowClosedHelper();
      windowClosedHelper0.setListeners((Set) jobStateReasons0);
      assertEquals("[]", jobStateReasons0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      WindowClosedHelper windowClosedHelper0 = new WindowClosedHelper();
      windowClosedHelper0.setListeners((Set) null);
  }

  @Test
  public void test9()  throws Throwable  {
      ActionListenerHelper actionListenerHelper0 = new ActionListenerHelper();
      boolean boolean0 = actionListenerHelper0.removeListener((Object) "LongDescription");
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      ActionListenerHelper actionListenerHelper0 = new ActionListenerHelper();
      boolean boolean0 = actionListenerHelper0.removeListener((Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      WindowClosedHelper windowClosedHelper0 = new WindowClosedHelper();
      windowClosedHelper0.activateNotifications();
  }

  @Test
  public void test12()  throws Throwable  {
      WindowClosedHelper windowClosedHelper0 = new WindowClosedHelper();
      windowClosedHelper0.deferNotifications();
      windowClosedHelper0.activateNotifications();
  }
}
