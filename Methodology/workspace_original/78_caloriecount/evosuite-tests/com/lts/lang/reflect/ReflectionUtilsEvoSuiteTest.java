/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.lang.reflect;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.lang.reflect.InvocationException;
import com.lts.lang.reflect.ReflectionUtils;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ReflectionUtilsEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Class<?> class0 = Long.class;
      Class<Object> class1 = ReflectionUtils.getBasicArrayType(class0);
      // Undeclared exception!
      try {
        ReflectionUtils.performInvoke((Method) null, (Object) class1, (Object) "-0x1.fd54dep10", (Object) "", (Object) "");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try {
        ReflectionUtils.isFinal((Method) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      Class<?> class0 = ReflectionUtils.class;
      Class<Boolean> class1 = Boolean.TYPE;
      // Undeclared exception!
      try {
        ReflectionUtils.performInvoke((Method) null, (Object) class1, (Object) class0, (Object) class0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      boolean boolean0 = ReflectionUtils.isSimpleType((Class) null);
      assertEquals(true, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = ReflectionUtils.shortNameToType("");
      assertEquals((-1), int0);
  }

  @Test
  public void test5()  throws Throwable  {
      ReflectionUtils reflectionUtils0 = new ReflectionUtils();
      assertNotNull(reflectionUtils0);
  }

  @Test
  public void test6()  throws Throwable  {
      Short short0 = new Short((short)1);
      Class<?>[] classArray0 = (Class<?>[]) Array.newInstance(Class.class, 4);
      // Undeclared exception!
      try {
        ReflectionUtils.performInvoke((Object) short0, "Xmb9K[Bt4", (Class[]) classArray0, (Object[]) classArray0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * java.lang.NullPointerException
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      String string0 = ReflectionUtils.typeToLongName((int) '.');
      assertNull(string0);
  }

  @Test
  public void test8()  throws Throwable  {
      Class<?>[] classArray0 = (Class<?>[]) Array.newInstance(Class.class, 12);
      try {
        ReflectionUtils.createInstance("", (Class[]) classArray0, (Object[]) classArray0);
        fail("Expecting exception: ClassNotFoundException");
      } catch(ClassNotFoundException e) {
        /*
         * 
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      Class<?>[] classArray0 = (Class<?>[]) Array.newInstance(Class.class, 10);
      // Undeclared exception!
      try {
        ReflectionUtils.invoke((Method) null, (Object[]) classArray0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * java.lang.NullPointerException
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try {
        ReflectionUtils.isPrivate((Method) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Character character0 = new Character('K');
      // Undeclared exception!
      try {
        ReflectionUtils.performInvoke((Method) null, (Object) character0, (Object) "=[A)t}j*)l[C.BzyA");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Class<?> class0 = Boolean.class;
      Method method0 = ReflectionUtils.findMethod((Class) class0, "Double");
      assertNull(method0);
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = ReflectionUtils.longNameToType("=[A)t}j*)l[C.BzyA");
      assertEquals((-1), int0);
  }

  @Test
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try {
        ReflectionUtils.isNative((Method) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try {
        ReflectionUtils.isStatic((Method) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try {
        ReflectionUtils.invoke((Method) null);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  @Test
  public void test17()  throws Throwable  {
      Class<?> class0 = Boolean.class;
      Field[] fieldArray0 = ReflectionUtils.getAllFields(class0);
      assertNotNull(fieldArray0);
  }

  @Test
  public void test18()  throws Throwable  {
      Class<?> class0 = Boolean.class;
      // Undeclared exception!
      try {
        ReflectionUtils.performInvoke((Method) null, (Object) class0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = ReflectionUtils.typeToShortName(11);
      assertNotNull(string0);
      assertEquals("Byte", string0);
  }

  @Test
  public void test20()  throws Throwable  {
      int int0 = ReflectionUtils.classToPrimitiveCode((Class) null);
      assertEquals((-1), int0);
  }

  @Test
  public void test21()  throws Throwable  {
      Class<?> class0 = Boolean.class;
      boolean boolean0 = ReflectionUtils.isDefaultValue((Class) class0, (Object) "-1.0");
      assertEquals(false, boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      Class<?> class0 = Double.class;
      boolean boolean0 = ReflectionUtils.isDefaultValue((Class) class0, (Object) null);
      assertEquals(true, boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      Class<?> class0 = Boolean.class;
      int int0 = ReflectionUtils.classToSimpleType(class0);
      assertEquals(9, int0);
  }

  @Test
  public void test24()  throws Throwable  {
      Class<?> class0 = ReflectionUtils.class;
      int int0 = ReflectionUtils.classToSimpleType(class0);
      assertEquals((-1), int0);
  }

  @Test
  public void test25()  throws Throwable  {
      Class<?> class0 = ReflectionUtils.class;
      Class<Object> class1 = ReflectionUtils.getBasicArrayType(class0);
      assertNotNull(class1);
      
      int int0 = ReflectionUtils.getDimensions((Object) class1);
      assertEquals(0, int0);
  }

  @Test
  public void test26()  throws Throwable  {
      Class<Object> class0 = ReflectionUtils.getComponentClass((Object) "6a8");
      assertEquals(false, class0.isPrimitive());
  }

  @Test
  public void test27()  throws Throwable  {
      Class<?> class0 = ReflectionUtils.class;
      try {
        ReflectionUtils.getField((Class) class0, "e5PN]!<0n`F");
        fail("Expecting exception: NoSuchFieldException");
      } catch(NoSuchFieldException e) {
        /*
         * Could not find field e5PN]!<0n`F
         */
      }
  }

  @Test
  public void test28()  throws Throwable  {
      Class<?> class0 = Long.class;
      Method[] methodArray0 = ReflectionUtils.getAllMethods(class0);
      assertNotNull(methodArray0);
  }

  @Test
  public void test29()  throws Throwable  {
      Class<?> class0 = ReflectionUtils.class;
      Class<?>[] classArray0 = (Class<?>[]) Array.newInstance(Class.class, 4);
      Method method0 = ReflectionUtils.getMethod((Class) class0, "-YOc+oL", (Class[]) classArray0);
      assertNull(method0);
  }

  @Test
  public void test30()  throws Throwable  {
      Class<?> class0 = String.class;
      Class<?>[] classArray0 = (Class<?>[]) Array.newInstance(Class.class, 1);
      classArray0[0] = class0;
      // Undeclared exception!
      try {
        ReflectionUtils.createInstance((Class) class0, (Class[]) classArray0, (Object[]) classArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * java.lang.ClassCastException@7c140754
         */
      }
  }

  @Test
  public void test31()  throws Throwable  {
      Class<?> class0 = CharSequence.class;
      Class<?>[] classArray0 = (Class<?>[]) Array.newInstance(Class.class, 1);
      boolean boolean0 = ReflectionUtils.definesCustom((Class) class0, "", (Class[]) classArray0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test32()  throws Throwable  {
      Class<?>[] classArray0 = (Class<?>[]) Array.newInstance(Class.class, 1);
      Class<?> class0 = ReflectionUtils.class;
      boolean boolean0 = ReflectionUtils.definesCustom((Class) class0, "1777777777777777777777", (Class[]) classArray0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test33()  throws Throwable  {
      Class<?> class0 = CharSequence.class;
      Method method0 = ReflectionUtils.findMethod((Class) class0, "");
      assertNull(method0);
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = ReflectionUtils.toSimpleName("k3P");
      assertNotNull(string0);
      assertEquals("k3P", string0);
  }

  @Test
  public void test35()  throws Throwable  {
      String string0 = ReflectionUtils.toSimpleName("=[A)t}j*)l[C.BzyA");
      assertNotNull(string0);
      assertEquals("BzyA", string0);
  }

  @Test
  public void test36()  throws Throwable  {
      Class<?> class0 = ReflectionUtils.class;
      int int0 = ReflectionUtils.getDimensions(class0);
      assertEquals((-1), int0);
  }
}
