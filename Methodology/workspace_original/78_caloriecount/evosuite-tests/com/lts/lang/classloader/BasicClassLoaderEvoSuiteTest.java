/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.lang.classloader;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.LTSException;
import com.lts.io.ImprovedFile;
import com.lts.lang.classloader.BasicClassLoader;
import com.lts.lang.classloader.ClassRepository;
import com.lts.lang.classloader.DirectoryClassRepository;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BasicClassLoaderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BasicClassLoader basicClassLoader0 = new BasicClassLoader();
      BasicClassLoader basicClassLoader1 = new BasicClassLoader((ClassLoader) basicClassLoader0);
      assertNotSame(basicClassLoader1, basicClassLoader0);
  }

  @Test
  public void test1()  throws Throwable  {
      BasicClassLoader basicClassLoader0 = new BasicClassLoader();
      DirectoryClassRepository directoryClassRepository0 = new DirectoryClassRepository();
      Vector<Object> vector0 = directoryClassRepository0.findResources(">8");
      basicClassLoader0.setRepositories((List) vector0);
      assertEquals(true, vector0.isEmpty());
  }

  @Test
  public void test2()  throws Throwable  {
      BasicClassLoader basicClassLoader0 = new BasicClassLoader();
      basicClassLoader0.logEvent(44);
  }

  @Test
  public void test3()  throws Throwable  {
      BasicClassLoader basicClassLoader0 = new BasicClassLoader();
      DirectoryClassRepository directoryClassRepository0 = new DirectoryClassRepository();
      boolean boolean0 = basicClassLoader0.removeRepository((ClassRepository) directoryClassRepository0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      BasicClassLoader basicClassLoader0 = new BasicClassLoader();
      basicClassLoader0.logEvent((Object) basicClassLoader0, (Object) basicClassLoader0, (-5));
  }

  @Test
  public void test5()  throws Throwable  {
      BasicClassLoader basicClassLoader0 = new BasicClassLoader();
      basicClassLoader0.logFindClassStart("temp");
  }

  @Test
  public void test6()  throws Throwable  {
      BasicClassLoader basicClassLoader0 = new BasicClassLoader();
      ImprovedFile improvedFile0 = new ImprovedFile("");
      DirectoryClassRepository directoryClassRepository0 = new DirectoryClassRepository((File) improvedFile0);
      basicClassLoader0.logFoundClass("", (ClassRepository) directoryClassRepository0);
      assertEquals("", directoryClassRepository0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      BasicClassLoader basicClassLoader0 = new BasicClassLoader();
      DirectoryClassRepository directoryClassRepository0 = new DirectoryClassRepository();
      basicClassLoader0.addRepository((ClassRepository) directoryClassRepository0);
      try {
        basicClassLoader0.loadClass("gccp$=^rlSX]^mDZ");
        fail("Expecting exception: ClassNotFoundException");
      } catch(ClassNotFoundException e) {
        /*
         * gccp$=^rlSX]^mDZ
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      BasicClassLoader basicClassLoader0 = new BasicClassLoader();
      Map<Object, Object> map0 = basicClassLoader0.getClassCache();
      assertEquals(true, map0.isEmpty());
  }

  @Test
  public void test9()  throws Throwable  {
      BasicClassLoader basicClassLoader0 = new BasicClassLoader();
      DirectoryClassRepository directoryClassRepository0 = new DirectoryClassRepository();
      basicClassLoader0.logFoundResource(">8", (ClassRepository) directoryClassRepository0);
  }

  @Test
  public void test10()  throws Throwable  {
      BasicClassLoader basicClassLoader0 = new BasicClassLoader();
      basicClassLoader0.logFindClassEnd("gccp$=^rlSX]^mDZ", (Throwable) null);
  }

  @Test
  public void test11()  throws Throwable  {
      BasicClassLoader basicClassLoader0 = new BasicClassLoader();
      DirectoryClassRepository directoryClassRepository0 = new DirectoryClassRepository();
      basicClassLoader0.addRepository((ClassRepository) directoryClassRepository0);
      Enumeration<Object> enumeration0 = basicClassLoader0.findResources(">8");
      assertEquals(false, enumeration0.hasMoreElements());
  }

  @Test
  public void test12()  throws Throwable  {
      BasicClassLoader basicClassLoader0 = new BasicClassLoader();
      ImprovedFile improvedFile0 = new ImprovedFile("");
      DirectoryClassRepository directoryClassRepository0 = new DirectoryClassRepository((File) improvedFile0);
      basicClassLoader0.addRepository((ClassRepository) directoryClassRepository0);
      ByteArrayInputStream byteArrayInputStream0 = (ByteArrayInputStream)basicClassLoader0.getResourceAsStream("");
      assertEquals(true, byteArrayInputStream0.markSupported());
  }

  @Test
  public void test13()  throws Throwable  {
      BasicClassLoader basicClassLoader0 = new BasicClassLoader();
      InputStream inputStream0 = basicClassLoader0.getResourceAsStream("");
      assertNull(inputStream0);
  }
}
