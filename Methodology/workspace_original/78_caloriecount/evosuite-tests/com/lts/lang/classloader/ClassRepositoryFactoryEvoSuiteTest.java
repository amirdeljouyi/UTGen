/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.lang.classloader;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.LTSException;
import com.lts.io.ImprovedFile;
import com.lts.io.archive.ZipArchive;
import com.lts.lang.classloader.ArchiveClassRepository;
import com.lts.lang.classloader.ClassRepositoryFactory;
import com.lts.lang.classloader.DirectoryClassRepository;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Vector;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ClassRepositoryFactoryEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ClassRepositoryFactory classRepositoryFactory0 = new ClassRepositoryFactory();
      ImprovedFile improvedFile0 = new ImprovedFile("");
      File file0 = improvedFile0.getCanonicalFile();
      ZipArchive zipArchive0 = new ZipArchive(file0, file0, true);
      List<Object> list0 = zipArchive0.listFilesInDirectory(file0);
      List<Object> list1 = classRepositoryFactory0.createRepositoryList(list0);
      assertNotNull(list1);
      assertEquals(567, list1.size());
      assertNotSame(list1, list0);
  }

  @Test
  public void test1()  throws Throwable  {
      ClassRepositoryFactory classRepositoryFactory0 = new ClassRepositoryFactory();
      ArchiveClassRepository archiveClassRepository0 = (ArchiveClassRepository)classRepositoryFactory0.toClassFileRepository((Object) "");
      assertNull(archiveClassRepository0);
  }

  @Test
  public void test2()  throws Throwable  {
      ClassRepositoryFactory classRepositoryFactory0 = new ClassRepositoryFactory();
      ImprovedFile improvedFile0 = new ImprovedFile("");
      File file0 = improvedFile0.getCanonicalFile();
      DirectoryClassRepository directoryClassRepository0 = (DirectoryClassRepository)classRepositoryFactory0.toClassFileRepository((Object) file0);
      assertEquals("/mnt/fastdata/ac1gf/SF110/dist/78_caloriecount", directoryClassRepository0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      ClassRepositoryFactory classRepositoryFactory0 = new ClassRepositoryFactory();
      DirectoryClassRepository directoryClassRepository0 = new DirectoryClassRepository();
      DirectoryClassRepository directoryClassRepository1 = (DirectoryClassRepository)classRepositoryFactory0.toClassFileRepository((Object) directoryClassRepository0);
      assertSame(directoryClassRepository1, directoryClassRepository0);
  }

  @Test
  public void test4()  throws Throwable  {
      ClassRepositoryFactory classRepositoryFactory0 = new ClassRepositoryFactory();
      ImprovedFile improvedFile0 = new ImprovedFile("");
      DirectoryClassRepository directoryClassRepository0 = new DirectoryClassRepository((File) improvedFile0);
      Vector<Object> vector0 = directoryClassRepository0.findResources("");
      List<Object> list0 = classRepositoryFactory0.createRepositoryList((List) vector0);
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }
}
