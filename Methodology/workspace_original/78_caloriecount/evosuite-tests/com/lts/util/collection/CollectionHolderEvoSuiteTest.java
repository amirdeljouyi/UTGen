/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.util.collection;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.util.collection.CollectionHolder;
import com.lts.util.collection.CollectionListener;
import com.lts.util.notifyinglist.NotifyingCollection;
import java.util.Collection;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class CollectionHolderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      CollectionHolder<Integer> collectionHolder0 = new CollectionHolder<Integer>((Collection) null);
      collectionHolder0.addListener((CollectionListener) null);
      assertEquals(0, collectionHolder0.size());
  }

  @Test
  public void test1()  throws Throwable  {
      CollectionHolder<String> collectionHolder0 = new CollectionHolder<String>();
      CollectionHolder<Object> collectionHolder1 = new CollectionHolder<Object>((Collection) collectionHolder0);
      boolean boolean0 = collectionHolder1.contains((Object) collectionHolder1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      CollectionHolder<NotifyingCollection<Integer>> collectionHolder0 = new CollectionHolder<NotifyingCollection<Integer>>();
      boolean boolean0 = collectionHolder0.containsAll((Collection<?>) collectionHolder0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      CollectionHolder<NotifyingCollection<Integer>> collectionHolder0 = new CollectionHolder<NotifyingCollection<Integer>>();
      collectionHolder0.clear();
      assertEquals(true, collectionHolder0.isEmpty());
  }

  @Test
  public void test4()  throws Throwable  {
      CollectionHolder<NotifyingCollection<Integer>> collectionHolder0 = new CollectionHolder<NotifyingCollection<Integer>>();
      CollectionHolder<Object> collectionHolder1 = new CollectionHolder<Object>((Collection) collectionHolder0);
      boolean boolean0 = collectionHolder1.isEmpty();
      assertEquals(true, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      CollectionHolder<Integer> collectionHolder0 = new CollectionHolder<Integer>((Collection) null);
      CollectionHolder<String> collectionHolder1 = new CollectionHolder<String>((Collection) collectionHolder0);
      String[] stringArray0 = new String[1];
      String[] stringArray1 = collectionHolder1.toArray(stringArray0);
      assertSame(stringArray1, stringArray0);
  }

  @Test
  public void test6()  throws Throwable  {
      CollectionHolder<String> collectionHolder0 = new CollectionHolder<String>();
      Object[] objectArray0 = collectionHolder0.toArray();
      assertNotNull(objectArray0);
  }

  @Test
  public void test7()  throws Throwable  {
      CollectionHolder<Integer> collectionHolder0 = new CollectionHolder<Integer>((Collection) null);
      boolean boolean0 = collectionHolder0.removeListener((CollectionListener) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      CollectionHolder<NotifyingCollection<Integer>> collectionHolder0 = new CollectionHolder<NotifyingCollection<Integer>>();
      CollectionHolder<Integer> collectionHolder1 = new CollectionHolder<Integer>((Collection) collectionHolder0);
      collectionHolder0.add((NotifyingCollection<Integer>) collectionHolder1);
      CollectionHolder<Object> collectionHolder2 = new CollectionHolder<Object>((Collection) collectionHolder0);
      collectionHolder0.add((NotifyingCollection<Integer>) collectionHolder1);
      collectionHolder2.addAll((Collection<?>) collectionHolder0);
      boolean boolean0 = collectionHolder2.retainAll((Collection<?>) collectionHolder0);
      assertEquals(true, collectionHolder0.isEmpty());
      assertEquals(true, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      CollectionHolder<NotifyingCollection<Integer>> collectionHolder0 = new CollectionHolder<NotifyingCollection<Integer>>();
      CollectionHolder<Integer> collectionHolder1 = new CollectionHolder<Integer>((Collection) collectionHolder0);
      collectionHolder0.add((NotifyingCollection<Integer>) collectionHolder1);
      CollectionHolder<Object> collectionHolder2 = new CollectionHolder<Object>((Collection) collectionHolder0);
      boolean boolean0 = collectionHolder2.retainAll((Collection<?>) collectionHolder0);
      assertEquals(true, collectionHolder0.isEmpty());
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      CollectionHolder<Object> collectionHolder0 = new CollectionHolder<Object>();
      CollectionHolder<CollectionHolder<String>> collectionHolder1 = new CollectionHolder<CollectionHolder<String>>((Collection) collectionHolder0);
      CollectionHolder<String> collectionHolder2 = new CollectionHolder<String>();
      CollectionHolder<NotifyingCollection<String>> collectionHolder3 = new CollectionHolder<NotifyingCollection<String>>((Collection) collectionHolder1);
      collectionHolder3.add((NotifyingCollection<String>) collectionHolder2);
      boolean boolean0 = collectionHolder1.removeAll((Collection<?>) collectionHolder3);
      assertEquals(true, collectionHolder3.isEmpty());
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      CollectionHolder<Object> collectionHolder0 = new CollectionHolder<Object>();
      CollectionHolder<CollectionHolder<String>> collectionHolder1 = new CollectionHolder<CollectionHolder<String>>((Collection) collectionHolder0);
      CollectionHolder<String> collectionHolder2 = new CollectionHolder<String>();
      collectionHolder1.add(collectionHolder2);
      collectionHolder1.add(collectionHolder2);
      CollectionHolder<NotifyingCollection<String>> collectionHolder3 = new CollectionHolder<NotifyingCollection<String>>((Collection) collectionHolder1);
      collectionHolder3.addAll((Collection<? extends NotifyingCollection<String>>) collectionHolder1);
      assertEquals(true, collectionHolder1.isEmpty());
      
      boolean boolean0 = collectionHolder1.removeAll((Collection<?>) collectionHolder3);
      assertEquals(true, boolean0);
  }
}
