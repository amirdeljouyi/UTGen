/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.util.prop;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.LTSException;
import com.lts.util.prop.PropertiesUtil;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PropertiesUtilEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Properties properties0 = PropertiesUtil.build((Map) hashMap0);
      PropertiesUtil.resolveReferences(properties0);
      assertEquals(0, properties0.size());
  }

  @Test
  public void test1()  throws Throwable  {
      Properties properties0 = new Properties();
      // Undeclared exception!
      try {
        PropertiesUtil.replaceRef("", "", (PropertiesUtil.PropertyRef) null, properties0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      Properties properties0 = new Properties();
      List<Object> list0 = PropertiesUtil.getPropertyNames(properties0);
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test3()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Properties properties0 = PropertiesUtil.toProperties((Map) hashMap0);
      List<Object> list0 = PropertiesUtil.toSortedKeys(properties0);
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test4()  throws Throwable  {
      PropertiesUtil propertiesUtil0 = new PropertiesUtil();
      assertNotNull(propertiesUtil0);
  }

  @Test
  public void test5()  throws Throwable  {
      PropertiesUtil.PropertyRef propertiesUtil_PropertyRef0 = new PropertiesUtil.PropertyRef();
      assertEquals(0, propertiesUtil_PropertyRef0.start);
  }

  @Test
  public void test6()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "");
      Properties properties0 = PropertiesUtil.toProperties((Map) hashMap0);
      assertNotNull(properties0);
      
      PropertiesUtil.findRef(properties0);
      assertEquals(false, properties0.isEmpty());
      assertEquals("{=}", properties0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      PropertiesUtil.PropertyRef propertiesUtil_PropertyRef0 = PropertiesUtil.getRef("${");
      assertNull(propertiesUtil_PropertyRef0);
  }

  @Test
  public void test8()  throws Throwable  {
      Properties properties0 = new Properties();
      try {
        PropertiesUtil.resolveReferences(properties0, (-1661));
        fail("Expecting exception: LTSException");
      } catch(LTSException e) {
        /*
         * Reached maximum number of replacements: -1661
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "");
      Properties properties0 = PropertiesUtil.toProperties((Map) hashMap0);
      assertNotNull(properties0);
      
      PropertiesUtil.print(properties0);
      assertEquals("{=}", properties0.toString());
      assertEquals(1, properties0.size());
  }

  @Test
  public void test10()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "");
      Properties properties0 = PropertiesUtil.toProperties((Map) hashMap0);
      assertNotNull(properties0);
      
      PropertiesUtil.printSorted(properties0);
      assertEquals("{=}", properties0.toString());
      assertEquals(false, properties0.isEmpty());
  }
}
