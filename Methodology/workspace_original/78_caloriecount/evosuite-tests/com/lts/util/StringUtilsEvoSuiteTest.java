/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.util.StringUtils;
import java.util.List;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class StringUtilsEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      String string0 = StringUtils.strValue('8');
      assertEquals("8", string0);
      assertNotNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      StringUtils.toInteger("$eg\"=I$|%v3`,orsao");
  }

  @Test
  public void test2()  throws Throwable  {
      String string0 = StringUtils.strValue((-268L));
      assertNotNull(string0);
      assertEquals("-268", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      StringUtils.toLong((String) null);
  }

  @Test
  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = StringUtils.join(stringArray0, (int) (byte)0);
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      String string0 = StringUtils.strValue(false);
      assertEquals("false", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
  }

  @Test
  public void test7()  throws Throwable  {
      String string0 = StringUtils.toCamelCase("$EG\"=-i$|_%V3`,oRSao");
      assertNotNull(string0);
      assertEquals("$eg\"=I$|%v3`,orsao", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = StringUtils.join(stringArray0);
      assertEquals("nullnullnullnullnullnull", string0);
      assertNotNull(string0);
  }

  @Test
  public void test9()  throws Throwable  {
      String string0 = StringUtils.strValue((byte) (-18));
      assertNotNull(string0);
      assertEquals("ffffffee", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = StringUtils.byteToHexString((byte) (-111));
      assertEquals("91", string0);
      assertNotNull(string0);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = StringUtils.toHexString(false, (long) '\uFFFF');
      assertNotNull(string0);
      assertEquals("0000000000000000000000000000FFFF", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitAndTrim(",e8jbd^[)]+]]P a@", ",e8jbd^[)]+]]P a@");
      assertNotNull(stringArray0);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = StringUtils.strValue(1467);
      assertEquals("1467", string0);
      assertNotNull(string0);
  }

  @Test
  public void test14()  throws Throwable  {
      StringUtils.InverseStringComparator stringUtils_InverseStringComparator0 = new StringUtils.InverseStringComparator();
      int int0 = stringUtils_InverseStringComparator0.compare("8", "8");
      assertEquals(0, int0);
  }

  @Test
  public void test15()  throws Throwable  {
      StringUtils.StringComparator stringUtils_StringComparator0 = new StringUtils.StringComparator();
      int int0 = stringUtils_StringComparator0.compare("-268", "false");
      assertEquals((-57), int0);
  }

  @Test
  public void test16()  throws Throwable  {
      List<Object> list0 = StringUtils.splitToList("01234A678^ABCDEK", "91");
      assertNotNull(list0);
      assertEquals(2, list0.size());
  }

  @Test
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[3] = "nullnullnullnullnullnull";
      StringUtils.trimStrings(stringArray0);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = StringUtils.trim("8");
      assertEquals("8", string0);
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = StringUtils.trim((String) null);
      assertNull(string0);
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = StringUtils.trim("");
      assertNull(string0);
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = StringUtils.parseString("-268", (int) (byte)0, "00");
      assertEquals(0, int0);
  }

  @Test
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try {
        StringUtils.parseString("-286", (int) (byte)2, "-286");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
        /*
         * String index out of range: 4
         */
      }
  }

  @Test
  public void test23()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitInclude("K1f]*v4/c:&H|f$//", "ffffffee");
      assertNotNull(stringArray0);
  }

  @Test
  public void test24()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitInclude(",e8jbd^[)]+]]P a@", ",e8jbd^[)]+]]P a@");
      assertNotNull(stringArray0);
  }

  @Test
  public void test25()  throws Throwable  {
      boolean boolean0 = StringUtils.containsCharacters("", "S");
      assertEquals(false, boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      boolean boolean0 = StringUtils.containsCharacters("8", "8");
      assertEquals(true, boolean0);
  }

  @Test
  public void test27()  throws Throwable  {
      char char0 = StringUtils.lastchar("-286");
      assertEquals('6', char0);
  }

  @Test
  public void test28()  throws Throwable  {
      char char0 = StringUtils.lastchar("");
      assertEquals('\uFFFF', char0);
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = StringUtils.shortenString("QR");
      assertNotNull(string0);
      assertEquals("Q", string0);
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = StringUtils.shortenString("");
      assertEquals("", string0);
  }

  @Test
  public void test31()  throws Throwable  {
      boolean boolean0 = StringUtils.stringsAreEqual(",e8jbd^[)]+]]P a@", "1467");
      assertEquals(false, boolean0);
  }

  @Test
  public void test32()  throws Throwable  {
      boolean boolean0 = StringUtils.stringsAreEqual("false", "false");
      assertEquals(true, boolean0);
  }

  @Test
  public void test33()  throws Throwable  {
      int int0 = StringUtils.compareStrings((String) null, "S");
      assertEquals((-1), int0);
  }

  @Test
  public void test34()  throws Throwable  {
      int int0 = StringUtils.compareStrings("-286", (String) null);
      assertEquals(1, int0);
  }

  @Test
  public void test35()  throws Throwable  {
      boolean boolean0 = StringUtils.nullEmpty("");
      assertEquals(true, boolean0);
  }

  @Test
  public void test36()  throws Throwable  {
      boolean boolean0 = StringUtils.nullEmpty((String) null);
      assertEquals(true, boolean0);
  }

  @Test
  public void test37()  throws Throwable  {
      String string0 = StringUtils.toHexString(true, (long) '\uFFFF');
      assertEquals("0000000000000000000000000000FFFF", string0);
      assertNotNull(string0);
  }

  @Test
  public void test38()  throws Throwable  {
      boolean boolean0 = StringUtils.different("01234A678^ABCDEK", "91");
      assertEquals(true, boolean0);
  }

  @Test
  public void test39()  throws Throwable  {
      boolean boolean0 = StringUtils.different("-286", "-286");
      assertEquals(false, boolean0);
  }

  @Test
  public void test40()  throws Throwable  {
      boolean boolean0 = StringUtils.different((String) null, "$eg\"=I$|%v3`,orsao");
      assertEquals(true, boolean0);
  }

  @Test
  public void test41()  throws Throwable  {
      boolean boolean0 = StringUtils.different("", (String) null);
      assertEquals(true, boolean0);
  }

  @Test
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[5] = (byte) (-95);
      String string0 = StringUtils.toHexString(byteArray0);
      assertNotNull(string0);
      assertEquals("0000000000a100000000000000", string0);
  }

  @Test
  public void test43()  throws Throwable  {
      String string0 = StringUtils.toHexString(false, (byte)0);
      assertEquals("00", string0);
      assertNotNull(string0);
  }
}
