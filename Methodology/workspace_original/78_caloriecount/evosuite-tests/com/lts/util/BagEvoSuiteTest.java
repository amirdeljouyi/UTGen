/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.util.Bag;
import java.util.Collection;
import java.util.Enumeration;
import java.util.Vector;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BagEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Bag bag0 = new Bag();
      Bag.BagEnumeration bag_BagEnumeration0 = bag0.new BagEnumeration(bag0);
      // Undeclared exception!
      try {
        bag_BagEnumeration0.nextElement();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
        /*
         * / by zero
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      Bag bag0 = new Bag();
      Bag.BagIterator bag_BagIterator0 = new Bag.BagIterator(bag0);
      // Undeclared exception!
      try {
        bag_BagIterator0.next();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
        /*
         * / by zero
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      Bag bag0 = new Bag();
      Bag.BagIterator bag_BagIterator0 = new Bag.BagIterator(bag0);
      // Undeclared exception!
      try {
        bag_BagIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      Bag bag0 = new Bag();
      bag0.clear();
      assertEquals(false, bag0.isEmpty());
  }

  @Test
  public void test4()  throws Throwable  {
      Bag bag0 = new Bag();
      boolean boolean0 = bag0.containsAll((Collection) bag0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      Bag bag0 = new Bag();
      // Undeclared exception!
      try {
        bag0.getElement();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
        /*
         * / by zero
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      Bag bag0 = new Bag();
      Object[] objectArray0 = new Object[1];
      Object[] objectArray1 = bag0.toArray(objectArray0);
      assertSame(objectArray1, objectArray0);
  }

  @Test
  public void test7()  throws Throwable  {
      Bag bag0 = new Bag();
      boolean boolean0 = bag0.addAll((Collection) bag0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      Bag bag0 = new Bag();
      bag0.addElement((Object) null);
      assertEquals(1, bag0.size());
      assertEquals(true, bag0.isEmpty());
  }

  @Test
  public void test9()  throws Throwable  {
      Bag bag0 = new Bag();
      Vector<Object> vector0 = new Vector<Object>();
      boolean boolean0 = bag0.removeAll((Collection) vector0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      Bag bag0 = new Bag();
      Enumeration<Object> enumeration0 = bag0.elements();
      assertEquals(false, enumeration0.hasMoreElements());
  }

  @Test
  public void test11()  throws Throwable  {
      Bag bag0 = new Bag();
      Bag bag1 = new Bag((Collection) bag0);
      assertEquals(0, bag1.size());
  }

  @Test
  public void test12()  throws Throwable  {
      Bag bag0 = new Bag();
      boolean boolean0 = bag0.retainAll((Collection) bag0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      Bag bag0 = new Bag();
      Object object0 = new Object();
      // Undeclared exception!
      boolean boolean0 = false;
      try {
        boolean0 = bag0.contains(object0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      Bag bag0 = new Bag();
      Vector<Object> vector0 = bag0.getElements();
      boolean boolean0 = bag0.removElement((Object) vector0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      Bag bag0 = new Bag();
      Vector<Object> vector0 = new Vector<Object>();
      boolean boolean0 = bag0.remove((Object) vector0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      Bag bag0 = new Bag();
      int int0 = bag0.size();
      assertEquals(0, int0);
  }

  @Test
  public void test17()  throws Throwable  {
      Bag bag0 = new Bag();
      Bag.BagEnumeration bag_BagEnumeration0 = bag0.new BagEnumeration(bag0);
      assertNotNull(bag_BagEnumeration0);
      
      boolean boolean0 = bag_BagEnumeration0.hasMoreElements();
      assertEquals(false, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      Bag bag0 = new Bag();
      Object object0 = new Object();
      bag0.add(object0);
      Bag.BagEnumeration bag_BagEnumeration0 = bag0.new BagEnumeration(bag0);
      boolean boolean0 = bag_BagEnumeration0.hasMoreElements();
      assertEquals(true, bag0.isEmpty());
      assertEquals(true, boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      Bag bag0 = new Bag();
      boolean boolean0 = bag0.isEmpty();
      assertEquals(false, boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      Bag bag0 = new Bag();
      bag0.add((Object) "[]");
      boolean boolean0 = bag0.isEmpty();
      assertEquals(1, bag0.size());
      assertEquals(true, boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      Bag bag0 = new Bag();
      Object object0 = new Object();
      bag0.add(object0);
      Bag.BagIterator bag_BagIterator0 = new Bag.BagIterator(bag0);
      boolean boolean0 = bag_BagIterator0.hasNext();
      assertEquals(1, bag0.size());
      assertEquals(true, boolean0);
  }
}
