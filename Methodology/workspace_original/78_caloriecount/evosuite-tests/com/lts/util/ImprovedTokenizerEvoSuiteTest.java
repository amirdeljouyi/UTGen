/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.util.ImprovedTokenizer;
import java.io.CharArrayReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.Reader;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ImprovedTokenizerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("R_+kZMacEHRCs:@aY", "");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      improvedTokenizer0.initialize((InputStream) pipedInputStream0, "R_+kZMacEHRCs:@aY");
  }

  @Test
  public void test1()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer((Reader) charArrayReader0, "");
      improvedTokenizer0.previousDelimiter();
      assertEquals(-1, charArrayReader0.read());
  }

  @Test
  public void test2()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("", "");
      improvedTokenizer0.hasNext();
      boolean boolean0 = improvedTokenizer0.hasNext();
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("C#0.^b'y`+9", "QrgyJ87s9tWAz]tTDE4");
      improvedTokenizer0.advance();
      improvedTokenizer0.hasNext();
  }

  @Test
  public void test4()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer((Reader) charArrayReader0, "");
      improvedTokenizer0.hasNext();
      assertEquals(-1, charArrayReader0.read());
      
      boolean boolean0 = improvedTokenizer0.hasNext();
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("root should have null as its parent.", "root should have null as its parent.");
      improvedTokenizer0.advance();
      // Undeclared exception!
      try {
        improvedTokenizer0.next();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * invalid state: 1
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("Mg", "Mg");
      boolean boolean0 = improvedTokenizer0.keepParsing(0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("C#0.^b'y`+9", "QrgyJ87s9tWAz]tTDE4");
      improvedTokenizer0.advance();
      improvedTokenizer0.advance();
  }

  @Test
  public void test8()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("R_+kZMacEHRCs:@aY", "");
      improvedTokenizer0.next();
      improvedTokenizer0.next();
      improvedTokenizer0.stop();
  }

  @Test
  public void test9()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("C#0.^b'y`+9", "QrgyJ87s9tWAz]tTDE4");
      improvedTokenizer0.advance();
      improvedTokenizer0.stop();
  }

  @Test
  public void test10()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("R_+kZMacEHRCs:@aY", "MK");
      improvedTokenizer0.next();
      improvedTokenizer0.next();
      improvedTokenizer0.next();
      // Undeclared exception!
      try {
        improvedTokenizer0.stop();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Invalid state, 5
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("Mg", "Mg");
      // Undeclared exception!
      try {
        improvedTokenizer0.afterToken('g');
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
