/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.util.TreeNode;
import com.lts.util.deepcopy.DeepCopyException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TreeNodeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TreeNode treeNode0 = new TreeNode();
      assertNotNull(treeNode0);
      
      TreeNode treeNode1 = new TreeNode(treeNode0);
      boolean boolean0 = treeNode0.isDescendentOf(treeNode1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      TreeNode treeNode0 = new TreeNode((Object) null);
      assertNotNull(treeNode0);
      
      // Undeclared exception!
      try {
        treeNode0.replaceChild(treeNode0, treeNode0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * The node, com.lts.util.TreeNode@2d08535b, is not one of the child nodes of com.lts.util.TreeNode@2d08535b
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      TreeNode treeNode0 = new TreeNode();
      TreeNode treeNode1 = new TreeNode(treeNode0);
      TreeNode treeNode2 = (TreeNode)treeNode1.deepCopy(true);
      assertNotSame(treeNode2, treeNode0);
  }

  @Test
  public void test3()  throws Throwable  {
      TreeNode treeNode0 = new TreeNode();
      boolean boolean0 = treeNode0.removeChild(treeNode0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      TreeNode treeNode0 = new TreeNode();
      assertNotNull(treeNode0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      TreeNode treeNode1 = new TreeNode(treeNode0, (Collection) linkedList0, (Object) treeNode0);
      treeNode0.addChild(treeNode0);
      // Undeclared exception!
      try {
        treeNode1.isDescendentOf(treeNode0);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      TreeNode treeNode0 = new TreeNode();
      treeNode0.updateFrom((Object) treeNode0);
      assertEquals(0, treeNode0.getChildCount());
  }

  @Test
  public void test6()  throws Throwable  {
      TreeNode treeNode0 = new TreeNode();
      Object object0 = treeNode0.getData();
      assertNull(object0);
  }

  @Test
  public void test7()  throws Throwable  {
      TreeNode treeNode0 = new TreeNode();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      TreeNode treeNode1 = new TreeNode(treeNode0, (Collection) linkedList0);
      assertNotSame(treeNode0, treeNode1);
  }

  @Test
  public void test8()  throws Throwable  {
      TreeNode treeNode0 = new TreeNode();
      int int0 = treeNode0.getChildCount();
      assertEquals(0, int0);
  }

  @Test
  public void test9()  throws Throwable  {
      TreeNode treeNode0 = new TreeNode();
      TreeNode treeNode1 = (TreeNode)treeNode0.deepCopy();
      assertEquals(0, treeNode1.getChildCount());
  }

  @Test
  public void test10()  throws Throwable  {
      TreeNode treeNode0 = new TreeNode();
      assertNotNull(treeNode0);
      
      treeNode0.addChild(treeNode0);
      assertEquals(1, treeNode0.getChildCount());
      
      treeNode0.clearChildren();
      assertEquals(0, treeNode0.getChildCount());
  }

  @Test
  public void test11()  throws Throwable  {
      TreeNode treeNode0 = new TreeNode();
      assertNotNull(treeNode0);
      
      treeNode0.addChild(treeNode0);
      treeNode0.replaceChild(treeNode0, treeNode0);
      assertEquals(2, treeNode0.getChildCount());
  }

  @Test
  public void test12()  throws Throwable  {
      TreeNode treeNode0 = new TreeNode();
      assertNotNull(treeNode0);
      
      List<Object> list0 = treeNode0.getChildren();
      assertNotNull(list0);
      
      treeNode0.addChild(treeNode0);
      treeNode0.setChildren((Collection) list0);
      assertEquals(false, list0.isEmpty());
      assertEquals(1, treeNode0.getChildCount());
  }

  @Test
  public void test13()  throws Throwable  {
      TreeNode treeNode0 = new TreeNode();
      assertNotNull(treeNode0);
      
      boolean boolean0 = treeNode0.isDescendentOf((TreeNode) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      TreeNode treeNode0 = new TreeNode();
      assertNotNull(treeNode0);
      
      boolean boolean0 = treeNode0.isDescendentOf(treeNode0);
      assertEquals(true, boolean0);
  }
}
