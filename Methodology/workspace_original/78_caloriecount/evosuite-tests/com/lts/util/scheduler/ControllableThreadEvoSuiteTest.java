/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.util.scheduler;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.util.scheduler.NewScheduler;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ControllableThreadEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      NewScheduler newScheduler0 = NewScheduler.getInstance();
      // Undeclared exception!
      try {
        newScheduler0.suspend();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * suspend called while in state Stopped
         */
      }
      assertNull(newScheduler0.getName());
  }

  @Test
  public void test1()  throws Throwable  {
      NewScheduler newScheduler0 = NewScheduler.getInstance();
      boolean boolean0 = newScheduler0.threadKeepRunning();
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      NewScheduler newScheduler0 = NewScheduler.getInstance();
      newScheduler0.noMethod();
      assertEquals(true, newScheduler0.threadKeepRunning());
  }

  @Test
  public void test3()  throws Throwable  {
      NewScheduler newScheduler0 = NewScheduler.getInstance();
      // Undeclared exception!
      try {
        newScheduler0.start();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * start called while in state Stopped
         */
      }
      assertEquals(true, newScheduler0.threadKeepRunning());
  }

  @Test
  public void test4()  throws Throwable  {
      NewScheduler newScheduler0 = NewScheduler.getInstance();
      newScheduler0.stop();
      assertNull(newScheduler0.getName());
  }
}
