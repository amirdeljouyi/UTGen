/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.util.ArrayUtils;
import java.io.CharArrayWriter;
import java.io.PrintWriter;
import java.io.Writer;
import java.util.List;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ArrayUtilsEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object[] objectArray0 = ArrayUtils.append((Object[]) null, (Object) arrayUtils0);
      assertNull(objectArray0);
  }

  @Test
  public void test1()  throws Throwable  {
      Object[] objectArray0 = new Object[12];
      ArrayUtils.print(objectArray0);
  }

  @Test
  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = ArrayUtils.appendString(stringArray0, (String) null);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
  }

  @Test
  public void test3()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.appendString((String[]) null, "k9DcXwy|6X]SY(");
      assertNull(stringArray0);
  }

  @Test
  public void test4()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object[] objectArray1 = ArrayUtils.append(objectArray0, (Object) null);
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
  }

  @Test
  public void test5()  throws Throwable  {
      String[] stringArray0 = new String[6];
      List<Object> list0 = ArrayUtils.toList((Object) stringArray0);
      assertNotNull(list0);
      assertEquals(6, list0.size());
  }

  @Test
  public void test6()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try {
        ArrayUtils.toList(object0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * class java.lang.Object is not an array
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      PrintWriter printWriter0 = new PrintWriter((Writer) charArrayWriter0);
      char[] charArray0 = new char[2];
      ArrayUtils.print(printWriter0, charArray0);
      assertEquals("[ \u0000, \u0000]", charArrayWriter0.toString());
      assertEquals(7, charArrayWriter0.size());
  }

  @Test
  public void test8()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("YQ3Lq");
      char[] charArray0 = new char[6];
      ArrayUtils.print(stringBuffer0, charArray0);
      assertEquals(44, stringBuffer0.capacity());
      assertEquals("YQ3Lq[\u0000, \u0000, \u0000, \u0000, \u0000, \u0000]", stringBuffer0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ArrayUtils.clear(byteArray0);
  }

  @Test
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[10];
      String[] stringArray1 = ArrayUtils.toStringArray((String) null, (String) null, stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test
  public void test11()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.toStringArray("k9DcXwy|6X]SY(", "k9DcXwy|6X]SY(", (String[]) null);
      assertNotNull(stringArray0);
  }

  @Test
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[10];
      String[] stringArray1 = ArrayUtils.appendStrings(stringArray0, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
  }

  @Test
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Object[] objectArray0 = ArrayUtils.copy((Object[]) stringArray0);
      assertNotNull(objectArray0);
  }

  @Test
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[2];
      Object[] objectArray0 = ArrayUtils.copy((Object[]) stringArray0, (-2));
      assertNotNull(objectArray0);
  }

  @Test
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[13];
      ArrayUtils.copy((Object[]) stringArray0, (Object[]) stringArray0, (-1711), (-1711), (-1711));
  }

  @Test
  public void test16()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try {
        ArrayUtils.copy(objectArray0, objectArray0, (-436), (-436), 1301);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -436
         */
      }
  }

  @Test
  public void test17()  throws Throwable  {
      Class<?> class0 = ArrayUtils.class;
      Object[] objectArray0 = new Object[2];
      try {
        ArrayUtils.copy((Class) class0, objectArray0, (int) '\u0000');
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayUtils.reverse(intArray0);
  }

  @Test
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[3];
      ArrayUtils.sortDescending(intArray0);
  }

  @Test
  public void test20()  throws Throwable  {
      ArrayUtils.sortDescending((int[]) null);
  }

  @Test
  public void test21()  throws Throwable  {
      Object[] objectArray0 = new Object[12];
      Object object0 = new Object();
      boolean boolean0 = ArrayUtils.arrayContains(objectArray0, object0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      boolean boolean0 = ArrayUtils.arrayContains(stringArray0, "");
      assertEquals(true, boolean0);
  }
}
