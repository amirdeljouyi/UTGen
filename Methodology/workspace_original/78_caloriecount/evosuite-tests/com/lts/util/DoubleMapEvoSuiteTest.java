/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.util.DoubleMap;
import java.util.Map;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DoubleMapEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DoubleMap doubleMap0 = new DoubleMap();
      Object object0 = new Object();
      Object object1 = doubleMap0.keyToValue(object0);
      assertNull(object1);
  }

  @Test
  public void test1()  throws Throwable  {
      DoubleMap doubleMap0 = new DoubleMap();
      Object object0 = new Object();
      Object object1 = doubleMap0.get(object0);
      assertNull(object1);
  }

  @Test
  public void test2()  throws Throwable  {
      DoubleMap doubleMap0 = new DoubleMap();
      Map<Object, Object> map0 = doubleMap0.getValueToKeyMap();
      assertEquals(true, map0.isEmpty());
  }

  @Test
  public void test3()  throws Throwable  {
      DoubleMap doubleMap0 = new DoubleMap();
      doubleMap0.clear();
  }

  @Test
  public void test4()  throws Throwable  {
      DoubleMap doubleMap0 = new DoubleMap();
      Object object0 = new Object();
      Object object1 = doubleMap0.valueToKey(object0);
      assertNull(object1);
  }

  @Test
  public void test5()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[2] = object0;
      objectArray0[4] = objectArray0[0];
      objectArray0[6] = objectArray0[0];
      objectArray0[8] = objectArray0[2];
      DoubleMap doubleMap0 = new DoubleMap(objectArray0);
      assertNotNull(doubleMap0);
  }

  @Test
  public void test6()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = objectArray0[0];
      DoubleMap doubleMap0 = null;
      try {
        doubleMap0 = new DoubleMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      DoubleMap doubleMap0 = new DoubleMap();
      Object object0 = new Object();
      // Undeclared exception!
      try {
        doubleMap0.addChecked((Object) null, object0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      DoubleMap doubleMap0 = new DoubleMap();
      // Undeclared exception!
      try {
        doubleMap0.addChecked((Object) "", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[8] = objectArray0[0];
      objectArray0[9] = objectArray0[8];
      DoubleMap doubleMap0 = new DoubleMap();
      doubleMap0.addChecked(objectArray0[9], objectArray0[9]);
      // Undeclared exception!
      try {
        doubleMap0.addChecked(objectArray0[9], objectArray0[9]);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      Object[][] objectArray0 = new Object[7][9];
      Object[] objectArray1 = new Object[3];
      Object object0 = new Object();
      objectArray1[0] = object0;
      Object object1 = new Object();
      objectArray1[1] = object1;
      objectArray1[2] = object0;
      objectArray0[0] = objectArray1;
      objectArray0[1] = objectArray0[0];
      objectArray0[2] = objectArray0[1];
      objectArray0[3] = objectArray0[0];
      objectArray0[4] = objectArray0[3];
      objectArray0[5] = objectArray0[2];
      objectArray0[6] = objectArray0[4];
      DoubleMap doubleMap0 = new DoubleMap(objectArray0);
      // Undeclared exception!
      try {
        doubleMap0.addChecked(object1, objectArray1[2]);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = object0;
      objectArray1[1] = objectArray0[0];
      Object[][] objectArray2 = new Object[7][3];
      objectArray2[0] = objectArray1;
      objectArray2[1] = objectArray0;
      DoubleMap doubleMap0 = null;
      try {
        doubleMap0 = new DoubleMap(objectArray2);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      DoubleMap doubleMap0 = new DoubleMap();
      Object object0 = new Object();
      doubleMap0.removeValue(object0);
  }

  @Test
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = object0;
      objectArray1[1] = objectArray0[0];
      Object[] objectArray2 = new Object[7];
      objectArray2[0] = object0;
      objectArray2[2] = objectArray0[0];
      Object[][] objectArray3 = new Object[7][3];
      objectArray3[0] = objectArray2;
      objectArray3[1] = objectArray0;
      objectArray3[2] = objectArray3[0];
      objectArray3[3] = objectArray2;
      objectArray3[4] = objectArray1;
      objectArray3[5] = objectArray1;
      objectArray3[6] = objectArray1;
      DoubleMap doubleMap0 = new DoubleMap(objectArray3);
      doubleMap0.removeValue(objectArray2[2]);
      assertNotSame(objectArray2, objectArray0);
  }
}
