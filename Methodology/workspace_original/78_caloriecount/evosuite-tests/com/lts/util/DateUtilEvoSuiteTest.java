/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.util.DateUtil;
import java.text.SimpleDateFormat;
import java.util.Locale;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DateUtilEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try {
        DateUtil.nextTimeAligned(0L);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
        /*
         * / by zero
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      String string0 = DateUtil.toTimeString(7200L);
      assertNotNull(string0);
      assertEquals("00:00", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      long long0 = DateUtil.startOfYesterdayTime();
      assertEquals(1356825600000L, long0);
  }

  @Test
  public void test3()  throws Throwable  {
      long long0 = DateUtil.startOfTomorrow();
      assertEquals(1372719600000L, long0);
  }

  @Test
  public void test4()  throws Throwable  {
      long long0 = DateUtil.combineDateAndTime(1L, 1L);
      assertEquals(1L, long0);
  }

  @Test
  public void test5()  throws Throwable  {
      long long0 = DateUtil.getToday();
      assertEquals((-3600000L), long0);
  }

  @Test
  public void test6()  throws Throwable  {
      long long0 = DateUtil.getYesterday();
      assertEquals((-90000000L), long0);
  }

  @Test
  public void test7()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat("M~!:;", locale0);
      DateUtil.attemptParse(simpleDateFormat0, "M~!:;");
  }

  @Test
  public void test8()  throws Throwable  {
      DateUtil dateUtil0 = new DateUtil();
      assertEquals(1372633200000L, dateUtil0.startOfTodayTime());
  }

  @Test
  public void test9()  throws Throwable  {
      long long0 = DateUtil.clearDate(1054L);
      assertEquals((-62167474798946L), long0);
  }

  @Test
  public void test10()  throws Throwable  {
      long long0 = DateUtil.clearTime(0L);
      assertEquals((-3600000L), long0);
  }

  @Test
  public void test11()  throws Throwable  {
      long long0 = DateUtil.setMidnight((-90000000L));
      assertEquals(1372633200067L, long0);
  }

  @Test
  public void test12()  throws Throwable  {
      long long0 = DateUtil.alignToPeriod((-1L), 172800L);
      assertEquals(0L, long0);
  }

  @Test
  public void test13()  throws Throwable  {
      long long0 = DateUtil.getTomorrow();
      assertEquals(82800000L, long0);
  }

  @Test
  public void test14()  throws Throwable  {
      long long0 = DateUtil.startOfNextDay((long) 1);
      assertEquals(82800000L, long0);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = DateUtil.secondsToPeriodString((-12L));
      assertNotNull(string0);
      assertEquals("23:59:59.988", string0);
  }

  @Test
  public void test16()  throws Throwable  {
      long long0 = DateUtil.midnightMsec();
      assertEquals(1372633200000L, long0);
  }

  @Test
  public void test17()  throws Throwable  {
      DateUtil.parseTime("Mon Jul 01 00:00:00 BST 2013");
  }

  @Test
  public void test18()  throws Throwable  {
      DateUtil.parseTime((String) null);
  }

  @Test
  public void test19()  throws Throwable  {
      DateUtil.parseTime("PetJE;52~N74A");
  }

  @Test
  public void test20()  throws Throwable  {
      DateUtil.parseCommonTime("-82ec");
  }

  @Test
  public void test21()  throws Throwable  {
      long long0 = DateUtil.parseTimeString((String) null);
      assertEquals((-1L), long0);
  }

  @Test
  public void test22()  throws Throwable  {
      Long long0 = DateUtil.parseDelay("-362 sec", (-362L));
      assertEquals((-62L), (long)long0);
  }

  @Test
  public void test23()  throws Throwable  {
      DateUtil.parseDelay("", (-1L));
  }

  @Test
  public void test24()  throws Throwable  {
      DateUtil.parseDelay("<", 36L);
  }

  @Test
  public void test25()  throws Throwable  {
      Long long0 = DateUtil.parseDelay("0", (-2L));
      assertEquals(0L, (long)long0);
  }

  @Test
  public void test26()  throws Throwable  {
      Long long0 = DateUtil.parseDelay("0h", 1324L);
      assertEquals(0L, (long)long0);
  }

  @Test
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try {
        DateUtil.parseDelay(":xv\tYOtsOm", 77L);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
        /*
         * For input string: \"\"
         */
      }
  }

  @Test
  public void test28()  throws Throwable  {
      Long long0 = DateUtil.parseDelay("79B3T>_ULXP}{fy", 0L);
      assertEquals(79L, (long)long0);
  }

  @Test
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try {
        DateUtil.parseDelay("j|$ ^69KA|rV", (-90000000L));
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
        /*
         * For input string: \"j\"
         */
      }
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = DateUtil.toDelayString((-362L));
      assertEquals("-362 sec", string0);
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = DateUtil.toDelayString(86400030L);
      assertNotNull(string0);
      assertEquals("30 days", string0);
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = DateUtil.toDelayString(7215L);
      assertEquals("15 hours", string0);
      assertNotNull(string0);
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = DateUtil.toDelayString(788L);
      assertEquals("68 mins", string0);
      assertNotNull(string0);
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = DateUtil.zeroPad(1739);
      assertEquals("1739", string0);
      assertNotNull(string0);
  }

  @Test
  public void test35()  throws Throwable  {
      String string0 = DateUtil.zeroPad(1);
      assertNotNull(string0);
      assertEquals("01", string0);
  }

  @Test
  public void test36()  throws Throwable  {
      String string0 = DateUtil.toTimeString(0L, false);
      assertEquals("01:00", string0);
      assertNotNull(string0);
  }

  @Test
  public void test37()  throws Throwable  {
      long long0 = DateUtil.timeStringToTime("`", 7215L);
      assertEquals((-3599785L), long0);
  }

  @Test
  public void test38()  throws Throwable  {
      long long0 = DateUtil.periodStringToSeconds("*hh:mmss aa");
      assertEquals((-1L), long0);
  }

  @Test
  public void test39()  throws Throwable  {
      long long0 = DateUtil.periodStringToSeconds((String) null);
      assertEquals((-1L), long0);
  }
}
