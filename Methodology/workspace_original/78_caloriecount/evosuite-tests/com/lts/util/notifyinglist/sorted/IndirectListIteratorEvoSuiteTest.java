/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.util.notifyinglist.sorted;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.util.notifyinglist.sorted.IndirectListIterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class IndirectListIteratorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IndirectListIterator<Integer> indirectListIterator0 = new IndirectListIterator<Integer>((List<Integer>) linkedList0, (List<Integer>) linkedList0);
      int int0 = indirectListIterator0.nextIndex();
      assertEquals(0, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      IndirectListIterator<String> indirectListIterator0 = new IndirectListIterator<String>(784, (List<Integer>) null, (List<String>) linkedList0);
      // Undeclared exception!
      try {
        indirectListIterator0.add("p8\"T[T0x%WWJme_");
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IndirectListIterator<Integer> indirectListIterator0 = new IndirectListIterator<Integer>((List<Integer>) linkedList0, (List<Integer>) linkedList0);
      linkedList0.add((Integer) 0);
      indirectListIterator0.next();
      assertEquals(0, indirectListIterator0.myCurrent);
      assertEquals(0, indirectListIterator0.previousIndex());
  }

  @Test
  public void test3()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IndirectListIterator<Integer> indirectListIterator0 = new IndirectListIterator<Integer>((List<Integer>) linkedList0, (List<Integer>) linkedList0);
      IndirectListIterator<String> indirectListIterator1 = new IndirectListIterator<String>((-534), indirectListIterator0.myVirtualList, (List<String>) null);
      // Undeclared exception!
      try {
        indirectListIterator1.remove();
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IndirectListIterator<Object> indirectListIterator0 = new IndirectListIterator<Object>((List<Object>) null, (List<Integer>) linkedList0);
      // Undeclared exception!
      try {
        indirectListIterator0.set((Object) "-1");
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      IndirectListIterator<Integer> indirectListIterator0 = new IndirectListIterator<Integer>((-1), (List<Integer>) null, (List<Integer>) null);
      int int0 = indirectListIterator0.previousIndex();
      assertEquals((-1), int0);
  }

  @Test
  public void test6()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IndirectListIterator<Object> indirectListIterator0 = new IndirectListIterator<Object>(147, (List<Integer>) linkedList0, (List<Object>) null);
      boolean boolean0 = indirectListIterator0.hasNext();
      assertEquals(false, boolean0);
      assertEquals(147, indirectListIterator0.myCurrent);
  }

  @Test
  public void test7()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IndirectListIterator<String> indirectListIterator0 = new IndirectListIterator<String>((-534), (List<Integer>) linkedList0, (List<String>) null);
      boolean boolean0 = indirectListIterator0.hasNext();
      assertEquals((-534), indirectListIterator0.myCurrent);
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IndirectListIterator<Integer> indirectListIterator0 = new IndirectListIterator<Integer>((List<Integer>) linkedList0, (List<Integer>) linkedList0);
      IndirectListIterator<Integer> indirectListIterator1 = new IndirectListIterator<Integer>(301, indirectListIterator0.myVirtualList, (List<Integer>) linkedList0);
      boolean boolean0 = indirectListIterator1.hasPrevious();
      assertEquals((-1), indirectListIterator0.myCurrent);
      assertEquals(301, indirectListIterator1.myCurrent);
      assertEquals(false, boolean0);
      assertEquals(true, indirectListIterator0.hasPrevious());
  }

  @Test
  public void test9()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IndirectListIterator<Integer> indirectListIterator0 = new IndirectListIterator<Integer>((List<Integer>) linkedList0, (List<Integer>) linkedList0);
      boolean boolean0 = indirectListIterator0.hasPrevious();
      assertEquals(true, boolean0);
      assertEquals(false, indirectListIterator0.hasNext());
  }

  @Test
  public void test10()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IndirectListIterator<Integer> indirectListIterator0 = new IndirectListIterator<Integer>(680, (List<Integer>) linkedList0, (List<Integer>) linkedList0);
      LinkedList<ListIterator<Integer>> linkedList1 = new LinkedList<ListIterator<Integer>>();
      IndirectListIterator<ListIterator<Integer>> indirectListIterator1 = new IndirectListIterator<ListIterator<Integer>>(1, indirectListIterator0.myVirtualList, (List<ListIterator<Integer>>) linkedList1);
      // Undeclared exception!
      try {
        indirectListIterator1.next();
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IndirectListIterator<Object> indirectListIterator0 = new IndirectListIterator<Object>(147, (List<Integer>) linkedList0, (List<Object>) null);
      // Undeclared exception!
      try {
        indirectListIterator0.previous();
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 147, Size: 0
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IndirectListIterator<Integer> indirectListIterator0 = new IndirectListIterator<Integer>(0, (List<Integer>) linkedList0, (List<Integer>) linkedList0);
      LinkedList<ListIterator<Integer>> linkedList1 = new LinkedList<ListIterator<Integer>>();
      IndirectListIterator<ListIterator<Integer>> indirectListIterator1 = new IndirectListIterator<ListIterator<Integer>>(0, indirectListIterator0.myVirtualList, (List<ListIterator<Integer>>) linkedList1);
      // Undeclared exception!
      try {
        indirectListIterator1.previous();
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
      }
  }
}
