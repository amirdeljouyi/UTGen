/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.util.notifyinglist;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.util.notifyinglist.ProxyIterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ProxyIteratorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ProxyIterator<Integer> proxyIterator0 = new ProxyIterator<Integer>((List<Integer>) linkedList0, (List<Integer>) linkedList0, 0);
      int int0 = proxyIterator0.previousIndex();
      assertEquals((-1), int0);
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      ProxyIterator<Object> proxyIterator1 = new ProxyIterator<Object>((List<Integer>) linkedList0, (List<Object>) linkedList1, (-1043));
      // Undeclared exception!
      try {
        proxyIterator1.set((Object) int0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      ProxyIterator<Object> proxyIterator0 = new ProxyIterator<Object>((List<Integer>) linkedList0, (List<Object>) linkedList1, 0);
      Object object0 = new Object();
      // Undeclared exception!
      try {
        proxyIterator0.add(object0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<ListIterator<Integer>> linkedList1 = new LinkedList<ListIterator<Integer>>();
      ProxyIterator<ListIterator<Integer>> proxyIterator0 = new ProxyIterator<ListIterator<Integer>>((List<Integer>) linkedList0, (List<ListIterator<Integer>>) linkedList1, (-941));
      // Undeclared exception!
      try {
        proxyIterator0.next();
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: -941, Size: 0
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<ListIterator<Object>> linkedList1 = new LinkedList<ListIterator<Object>>();
      ProxyIterator<ListIterator<Object>> proxyIterator0 = new ProxyIterator<ListIterator<Object>>((List<Integer>) linkedList0, (List<ListIterator<Object>>) linkedList1, 0);
      int int0 = proxyIterator0.nextIndex();
      assertEquals(0, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ProxyIterator<Integer> proxyIterator0 = new ProxyIterator<Integer>((List<Integer>) linkedList0, (List<Integer>) linkedList0, 1);
      // Undeclared exception!
      try {
        proxyIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ProxyIterator<Integer> proxyIterator0 = new ProxyIterator<Integer>((List<Integer>) linkedList0, (List<Integer>) linkedList0, 0);
      boolean boolean0 = proxyIterator0.hasNext();
      assertEquals(false, boolean0);
      assertEquals(-1, proxyIterator0.previousIndex());
  }

  @Test
  public void test6()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      ProxyIterator<Object> proxyIterator0 = new ProxyIterator<Object>((List<Integer>) linkedList0, (List<Object>) linkedList1, (-2031));
      boolean boolean0 = proxyIterator0.hasNext();
      assertEquals(-2031, proxyIterator0.nextIndex());
      assertEquals(true, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<ListIterator<Integer>> linkedList1 = new LinkedList<ListIterator<Integer>>();
      ProxyIterator<ListIterator<Integer>> proxyIterator0 = new ProxyIterator<ListIterator<Integer>>((List<Integer>) linkedList0, (List<ListIterator<Integer>>) linkedList1, (-614));
      boolean boolean0 = proxyIterator0.hasPrevious();
      assertEquals(false, boolean0);
      assertEquals(-614, proxyIterator0.nextIndex());
  }

  @Test
  public void test8()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1);
      linkedList0.add(integer0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      ProxyIterator<Object> proxyIterator0 = new ProxyIterator<Object>((List<Integer>) linkedList0, (List<Object>) linkedList1, 580);
      boolean boolean0 = proxyIterator0.hasPrevious();
      assertEquals(true, boolean0);
      assertEquals(579, proxyIterator0.previousIndex());
  }

  @Test
  public void test9()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1);
      linkedList0.add(integer0);
      LinkedList<ListIterator<Integer>> linkedList1 = new LinkedList<ListIterator<Integer>>();
      ProxyIterator<ListIterator<Integer>> proxyIterator0 = new ProxyIterator<ListIterator<Integer>>((List<Integer>) linkedList0, (List<ListIterator<Integer>>) linkedList1, (-941));
      boolean boolean0 = proxyIterator0.hasPrevious();
      assertEquals(-941, proxyIterator0.nextIndex());
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ProxyIterator<Integer> proxyIterator0 = new ProxyIterator<Integer>((List<Integer>) linkedList0, (List<Integer>) linkedList0, 0);
      // Undeclared exception!
      try {
        proxyIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ProxyIterator<Integer> proxyIterator0 = new ProxyIterator<Integer>((List<Integer>) linkedList0, (List<Integer>) linkedList0, 1);
      // Undeclared exception!
      try {
        proxyIterator0.previous();
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 0, Size: 0
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<ListIterator<Integer>> linkedList1 = new LinkedList<ListIterator<Integer>>();
      ProxyIterator<ListIterator<Integer>> proxyIterator0 = new ProxyIterator<ListIterator<Integer>>((List<Integer>) linkedList0, (List<ListIterator<Integer>>) linkedList1, (-1));
      // Undeclared exception!
      try {
        proxyIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<ListIterator<String>> linkedList1 = new LinkedList<ListIterator<String>>();
      ProxyIterator<ListIterator<String>> proxyIterator0 = new ProxyIterator<ListIterator<String>>((List<Integer>) linkedList0, (List<ListIterator<String>>) linkedList1, 1);
      int int0 = proxyIterator0.previousIndex();
      assertEquals(0, int0);
  }
}
