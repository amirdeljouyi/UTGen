/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.util.notifyinglist;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.util.notifyinglist.ListAdator;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ListAdatorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ListAdator<Integer> listAdator0 = new ListAdator<Integer>();
      ListAdator<Object> listAdator1 = new ListAdator<Object>();
      boolean boolean0 = listAdator1.retainAll((Collection) listAdator0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      ListAdator<Object> listAdator0 = new ListAdator<Object>();
      Object object0 = listAdator0.remove(1);
      assertNull(object0);
  }

  @Test
  public void test2()  throws Throwable  {
      ListAdator<List<Object>> listAdator0 = new ListAdator<List<Object>>();
      boolean boolean0 = listAdator0.remove((Object) "[]");
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      ListAdator<Object> listAdator0 = new ListAdator<Object>();
      LinkedList<List<Object>> linkedList0 = new LinkedList<List<Object>>();
      int int0 = listAdator0.indexOf((Object) linkedList0);
      assertEquals(0, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      ListAdator<Object> listAdator0 = new ListAdator<Object>();
      ListAdator<String> listAdator1 = new ListAdator<String>();
      boolean boolean0 = listAdator0.removeAll((Collection) listAdator1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      ListAdator<Object> listAdator0 = new ListAdator<Object>();
      ListAdator<List<String>> listAdator1 = new ListAdator<List<String>>();
      boolean boolean0 = listAdator1.addAll((Collection) listAdator0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      ListAdator<Object> listAdator0 = new ListAdator<Object>();
      boolean boolean0 = listAdator0.isEmpty();
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      ListAdator<Integer> listAdator0 = new ListAdator<Integer>();
      ListIterator<Object> listIterator0 = listAdator0.listIterator(0);
      assertNull(listIterator0);
  }

  @Test
  public void test8()  throws Throwable  {
      ListAdator<List<Integer>> listAdator0 = new ListAdator<List<Integer>>();
      ListAdator<Object> listAdator1 = new ListAdator<Object>();
      listAdator0.add((-685), (Object) listAdator1);
      assertEquals(0, listAdator0.size());
  }

  @Test
  public void test9()  throws Throwable  {
      ListAdator<Object> listAdator0 = new ListAdator<Object>();
      boolean boolean0 = listAdator0.contains((Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      ListAdator<Object> listAdator0 = new ListAdator<Object>();
      ListAdator<String> listAdator1 = new ListAdator<String>();
      Object object0 = listAdator0.set((-1098), (Object) listAdator1);
      assertNull(object0);
  }

  @Test
  public void test11()  throws Throwable  {
      ListAdator<List<String>> listAdator0 = new ListAdator<List<String>>();
      ListIterator<Object> listIterator0 = listAdator0.listIterator();
      assertNull(listIterator0);
  }

  @Test
  public void test12()  throws Throwable  {
      ListAdator<Object> listAdator0 = new ListAdator<Object>();
      ListAdator<String> listAdator1 = new ListAdator<String>();
      boolean boolean0 = listAdator0.addAll((-236), (Collection) listAdator1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      ListAdator<Integer> listAdator0 = new ListAdator<Integer>();
      List<Object> list0 = listAdator0.subList((-1), 0);
      assertNull(list0);
  }

  @Test
  public void test14()  throws Throwable  {
      ListAdator<Object> listAdator0 = new ListAdator<Object>();
      int int0 = listAdator0.size();
      assertEquals(0, int0);
  }

  @Test
  public void test15()  throws Throwable  {
      LinkedList<List<Object>> linkedList0 = new LinkedList<List<Object>>();
      ListAdator<String> listAdator0 = new ListAdator<String>();
      boolean boolean0 = listAdator0.containsAll((Collection) linkedList0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      ListAdator<List<String>> listAdator0 = new ListAdator<List<String>>();
      List<String> list0 = listAdator0.get((-1));
      assertNull(list0);
  }

  @Test
  public void test17()  throws Throwable  {
      ListAdator<Integer> listAdator0 = new ListAdator<Integer>();
      Iterator<Object> iterator0 = listAdator0.iterator();
      assertNull(iterator0);
  }

  @Test
  public void test18()  throws Throwable  {
      ListAdator<List<Integer>> listAdator0 = new ListAdator<List<Integer>>();
      Object[] objectArray0 = listAdator0.toArray((Object[]) null);
      assertNull(objectArray0);
  }

  @Test
  public void test19()  throws Throwable  {
      ListAdator<List<Object>> listAdator0 = new ListAdator<List<Object>>();
      Object[] objectArray0 = listAdator0.toArray();
      assertNull(objectArray0);
  }

  @Test
  public void test20()  throws Throwable  {
      ListAdator<Integer> listAdator0 = new ListAdator<Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = listAdator0.add((Object) linkedList0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      ListAdator<String> listAdator0 = new ListAdator<String>();
      int int0 = listAdator0.lastIndexOf((Object) "");
      assertEquals(0, int0);
  }

  @Test
  public void test22()  throws Throwable  {
      ListAdator<Object> listAdator0 = new ListAdator<Object>();
      listAdator0.clear();
      assertEquals(0, listAdator0.size());
  }
}
