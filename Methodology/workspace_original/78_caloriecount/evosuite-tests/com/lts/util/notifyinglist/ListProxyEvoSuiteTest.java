/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.util.notifyinglist;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.util.notifyinglist.ListEvent;
import com.lts.util.notifyinglist.ListProxy;
import com.lts.util.notifyinglist.NotifyingList;
import com.lts.util.notifyinglist.NotifyingListListener;
import com.lts.util.notifyinglist.OtherNotifyingListAdaptor;
import com.lts.util.notifyinglist.SimplifiedList;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ListProxyEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      OtherNotifyingListAdaptor<Integer> otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor<Integer>();
      ListProxy<Integer> listProxy0 = new ListProxy<Integer>((NotifyingList<Integer>) otherNotifyingListAdaptor0);
      listProxy0.add((Integer) (-30));
      assertEquals(1, otherNotifyingListAdaptor0.size());
      assertEquals(1, listProxy0.kernelSize());
  }

  @Test
  public void test1()  throws Throwable  {
      OtherNotifyingListAdaptor<String> otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor<String>();
      ListProxy<String> listProxy0 = new ListProxy<String>((NotifyingList<String>) otherNotifyingListAdaptor0);
      listProxy0.clear();
      assertEquals(false, listProxy0.isEmpty());
  }

  @Test
  public void test2()  throws Throwable  {
      ListProxy<SimplifiedList<Integer>> listProxy0 = new ListProxy<SimplifiedList<Integer>>();
      OtherNotifyingListAdaptor<Integer> otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor<Integer>();
      ListProxy<Integer> listProxy1 = new ListProxy<Integer>((NotifyingList<Integer>) otherNotifyingListAdaptor0);
      // Undeclared exception!
      try {
        listProxy0.kernelUpdate((-30), (SimplifiedList<Integer>) listProxy1);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      OtherNotifyingListAdaptor<String> otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor<String>();
      ListProxy<String> listProxy0 = new ListProxy<String>((NotifyingList<String>) otherNotifyingListAdaptor0);
      ListProxy<String> listProxy1 = new ListProxy<String>((NotifyingList<String>) listProxy0);
      assertNotSame(listProxy0, listProxy1);
  }

  @Test
  public void test4()  throws Throwable  {
      OtherNotifyingListAdaptor<String> otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor<String>();
      ListProxy<String> listProxy0 = new ListProxy<String>((NotifyingList<String>) otherNotifyingListAdaptor0);
      assertNotNull(listProxy0);
      
      otherNotifyingListAdaptor0.add("select-word");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "select-word";
      listProxy0.removeAll(stringArray0);
      assertEquals(0, otherNotifyingListAdaptor0.size());
      assertEquals(false, otherNotifyingListAdaptor0.isEmpty());
  }

  @Test
  public void test5()  throws Throwable  {
      ListProxy<NotifyingListListener> listProxy0 = new ListProxy<NotifyingListListener>();
      boolean boolean0 = listProxy0.removeListener((NotifyingListListener) listProxy0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      OtherNotifyingListAdaptor<SimplifiedList<String>> otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor<SimplifiedList<String>>();
      ListProxy<SimplifiedList<String>> listProxy0 = new ListProxy<SimplifiedList<String>>((NotifyingList<SimplifiedList<String>>) otherNotifyingListAdaptor0);
      // Undeclared exception!
      try {
        listProxy0.kernelIterator((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: -2
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      OtherNotifyingListAdaptor<SimplifiedList<Integer>> otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor<SimplifiedList<Integer>>();
      ListProxy<SimplifiedList<Integer>> listProxy0 = new ListProxy<SimplifiedList<Integer>>((NotifyingList<SimplifiedList<Integer>>) otherNotifyingListAdaptor0);
      ListEvent.EventType listEvent_EventType0 = ListEvent.EventType.Update;
      ListEvent listEvent0 = new ListEvent(listEvent_EventType0);
      listProxy0.listEvent(listEvent0);
      assertEquals(false, listProxy0.isEmpty());
  }
}
