/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.util.notifyinglist;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.caloriecount.ui.frequent.FrequentRowModel;
import com.lts.swing.table.rowmodel.RowModel;
import com.lts.util.notifyinglist.NotifyingList;
import com.lts.util.notifyinglist.NotifyingListListener;
import com.lts.util.notifyinglist.OtherNotifyingListAdaptor;
import com.lts.util.notifyinglist.TableBridge;
import java.util.Iterator;
import javax.swing.table.DefaultTableModel;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class OtherNotifyingListAdaptorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      OtherNotifyingListAdaptor<NotifyingList<Integer>> otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor<NotifyingList<Integer>>();
      boolean boolean0 = otherNotifyingListAdaptor0.remove((Object) "notify-field-accept");
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      OtherNotifyingListAdaptor<Object> otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor<Object>();
      otherNotifyingListAdaptor0.add((Object) null);
      assertEquals(true, otherNotifyingListAdaptor0.isEmpty());
      
      otherNotifyingListAdaptor0.remove(0);
      assertEquals(false, otherNotifyingListAdaptor0.isEmpty());
  }

  @Test
  public void test2()  throws Throwable  {
      OtherNotifyingListAdaptor<String> otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor<String>();
      Iterator<String> iterator0 = otherNotifyingListAdaptor0.iterator();
      assertEquals(false, iterator0.hasNext());
  }

  @Test
  public void test3()  throws Throwable  {
      OtherNotifyingListAdaptor<String> otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor<String>();
      FrequentRowModel frequentRowModel0 = new FrequentRowModel();
      TableBridge<String> tableBridge0 = new TableBridge<String>((NotifyingList<String>) otherNotifyingListAdaptor0, (RowModel) frequentRowModel0);
      assertNotNull(tableBridge0);
      
      boolean boolean0 = otherNotifyingListAdaptor0.removeListener((NotifyingListListener) tableBridge0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      OtherNotifyingListAdaptor<String> otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor<String>();
      // Undeclared exception!
      try {
        otherNotifyingListAdaptor0.kernelUpdate(0, "3jD_ %Y5]_+=");
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 0, Size: 0
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      OtherNotifyingListAdaptor<NotifyingList<DefaultTableModel>> otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor<NotifyingList<DefaultTableModel>>();
      otherNotifyingListAdaptor0.clear();
      assertEquals(0, otherNotifyingListAdaptor0.size());
  }
}
