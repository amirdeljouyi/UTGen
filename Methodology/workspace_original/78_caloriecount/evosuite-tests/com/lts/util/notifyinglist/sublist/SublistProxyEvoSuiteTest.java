/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.util.notifyinglist.sublist;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.util.notifyinglist.ListEvent;
import com.lts.util.notifyinglist.ListProxy;
import com.lts.util.notifyinglist.NotifyingList;
import com.lts.util.notifyinglist.NotifyingListAdaptor;
import com.lts.util.notifyinglist.OtherNotifyingListAdaptor;
import com.lts.util.notifyinglist.sublist.SublistInclusionTest;
import com.lts.util.notifyinglist.sublist.SublistProxy;
import java.util.List;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SublistProxyEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      NotifyingListAdaptor<ListProxy<Integer>> notifyingListAdaptor0 = new NotifyingListAdaptor<ListProxy<Integer>>((List<ListProxy<Integer>>) null);
      SublistProxy<ListProxy<Integer>> sublistProxy0 = new SublistProxy<ListProxy<Integer>>((NotifyingList<ListProxy<Integer>>) notifyingListAdaptor0, (SublistInclusionTest<ListProxy<Integer>>) null);
      // Undeclared exception!
      try {
        sublistProxy0.kernelRead((-26));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      NotifyingListAdaptor<Object> notifyingListAdaptor0 = new NotifyingListAdaptor<Object>();
      SublistProxy<Object> sublistProxy0 = new SublistProxy<Object>((NotifyingList<Object>) notifyingListAdaptor0, (SublistInclusionTest<Object>) null);
      ListEvent.EventType listEvent_EventType0 = ListEvent.EventType.Insert;
      ListEvent listEvent0 = new ListEvent(listEvent_EventType0);
      // Undeclared exception!
      try {
        sublistProxy0.listEventUpdate(listEvent0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      OtherNotifyingListAdaptor<Integer> otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor<Integer>();
      SublistProxy<Integer> sublistProxy0 = new SublistProxy<Integer>((NotifyingList<Integer>) otherNotifyingListAdaptor0, (SublistInclusionTest<Integer>) null);
      sublistProxy0.initializeVirtualList();
      assertEquals(0, sublistProxy0.size());
  }

  @Test
  public void test3()  throws Throwable  {
      OtherNotifyingListAdaptor<Integer> otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor<Integer>();
      SublistProxy<Integer> sublistProxy0 = new SublistProxy<Integer>((NotifyingList<Integer>) otherNotifyingListAdaptor0, (SublistInclusionTest<Integer>) null);
      // Undeclared exception!
      try {
        sublistProxy0.add((Integer) 0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      OtherNotifyingListAdaptor<Integer> otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor<Integer>();
      SublistProxy<Integer> sublistProxy0 = new SublistProxy<Integer>((NotifyingList<Integer>) otherNotifyingListAdaptor0, (SublistInclusionTest<Integer>) null);
      sublistProxy0.refresh();
      assertEquals(0, sublistProxy0.size());
  }

  @Test
  public void test5()  throws Throwable  {
      OtherNotifyingListAdaptor<Integer> otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor<Integer>();
      SublistProxy<Integer> sublistProxy0 = new SublistProxy<Integer>((NotifyingList<Integer>) otherNotifyingListAdaptor0, (SublistInclusionTest<Integer>) null);
      assertNotNull(sublistProxy0);
      
      sublistProxy0.virtualInsert(0, (-1773), (Integer) 0);
      sublistProxy0.rebuildActualToVirtual();
      assertEquals(1, sublistProxy0.size());
  }

  @Test
  public void test6()  throws Throwable  {
      OtherNotifyingListAdaptor<Integer> otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor<Integer>();
      SublistProxy<Integer> sublistProxy0 = new SublistProxy<Integer>((NotifyingList<Integer>) otherNotifyingListAdaptor0, (SublistInclusionTest<Integer>) null);
      assertNotNull(sublistProxy0);
      
      sublistProxy0.virtualInsert(0, (-1773), (Integer) 0);
      int int0 = sublistProxy0.virtualInsert((-1773), (-1773), (Integer) (-1773));
      assertEquals(2, sublistProxy0.size());
      assertEquals(0, int0);
  }

  @Test
  public void test7()  throws Throwable  {
      OtherNotifyingListAdaptor<Integer> otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor<Integer>();
      SublistProxy<Integer> sublistProxy0 = new SublistProxy<Integer>((NotifyingList<Integer>) otherNotifyingListAdaptor0, (SublistInclusionTest<Integer>) null);
      assertNotNull(sublistProxy0);
      
      sublistProxy0.virtualInsert(0, (-1773), (Integer) 0);
      int int0 = sublistProxy0.actualToVirtual((-1773));
      assertEquals(1, sublistProxy0.size());
      assertEquals(0, int0);
  }

  @Test
  public void test8()  throws Throwable  {
      OtherNotifyingListAdaptor<Integer> otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor<Integer>();
      SublistProxy<Integer> sublistProxy0 = new SublistProxy<Integer>((NotifyingList<Integer>) otherNotifyingListAdaptor0, (SublistInclusionTest<Integer>) null);
      ListEvent.EventType listEvent_EventType0 = ListEvent.EventType.Delete;
      ListEvent listEvent0 = new ListEvent(listEvent_EventType0, (-1773), (Object) "ToolTipText");
      sublistProxy0.listEventDelete(listEvent0);
      assertEquals(false, sublistProxy0.isEmpty());
  }

  @Test
  public void test9()  throws Throwable  {
      OtherNotifyingListAdaptor<Integer> otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor<Integer>();
      SublistProxy<Integer> sublistProxy0 = new SublistProxy<Integer>((NotifyingList<Integer>) otherNotifyingListAdaptor0, (SublistInclusionTest<Integer>) null);
      assertNotNull(sublistProxy0);
      
      ListEvent.EventType listEvent_EventType0 = ListEvent.EventType.Delete;
      ListEvent listEvent0 = new ListEvent(listEvent_EventType0, (-1773), (Object) "ToolTipText");
      sublistProxy0.virtualInsert(0, (-1773), (Integer) 0);
      assertEquals(1, sublistProxy0.size());
      
      sublistProxy0.listEventDelete(listEvent0);
      assertEquals(0, sublistProxy0.size());
  }

  @Test
  public void test10()  throws Throwable  {
      OtherNotifyingListAdaptor<Integer> otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor<Integer>();
      SublistProxy<Integer> sublistProxy0 = new SublistProxy<Integer>((NotifyingList<Integer>) otherNotifyingListAdaptor0, (SublistInclusionTest<Integer>) null);
      int int0 = sublistProxy0.findClosestTo((-1773));
      assertEquals(0, int0);
  }
}
