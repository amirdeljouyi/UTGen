/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.util.HierarchicalProperties;
import java.util.Properties;
import java.util.Set;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class HierarchicalPropertiesEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      HierarchicalProperties hierarchicalProperties0 = new HierarchicalProperties();
      HierarchicalProperties hierarchicalProperties1 = hierarchicalProperties0.getSubProperties((String) null);
      assertEquals(".", hierarchicalProperties0.getSeparator());
      assertNotNull(hierarchicalProperties1);
      assertEquals(".", hierarchicalProperties1.getSeparator());
  }

  @Test
  public void test1()  throws Throwable  {
      HierarchicalProperties hierarchicalProperties0 = new HierarchicalProperties();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      HierarchicalProperties hierarchicalProperties1 = new HierarchicalProperties(stringArray0);
      hierarchicalProperties0.addProperties("", (Properties) hierarchicalProperties1);
      assertEquals(1, hierarchicalProperties0.size());
      assertEquals(".", hierarchicalProperties1.getSeparator());
  }

  @Test
  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "^I1dfn@j 1Wiv";
      stringArray0[1] = "^I1dfn@j 1Wiv";
      stringArray0[3] = "nV|1";
      stringArray0[2] = ".error.";
      HierarchicalProperties hierarchicalProperties0 = new HierarchicalProperties(stringArray0);
      Set<Object> set0 = hierarchicalProperties0.getImmediatePropertyNames();
      assertNotNull(set0);
      assertEquals(2, set0.size());
  }

  @Test
  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "$";
      stringArray0[1] = "";
      stringArray0[2] = "$";
      stringArray0[3] = "";
      stringArray0[4] = "c4Y.";
      stringArray0[5] = "f/@cip$";
      HierarchicalProperties hierarchicalProperties0 = new HierarchicalProperties(stringArray0);
      Set<Object> set0 = hierarchicalProperties0.getImmediateParentNames();
      assertEquals(".", hierarchicalProperties0.getSeparator());
      assertEquals(1, set0.size());
      assertNotNull(set0);
  }

  @Test
  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[0] = "";
      stringArray0[1] = "<_l7";
      stringArray0[2] = "";
      stringArray0[3] = "z)Zrs!Yp";
      stringArray0[4] = "+u8c:.03KREd @";
      stringArray0[5] = "";
      stringArray0[6] = "x`dSp";
      stringArray0[7] = "";
      stringArray0[8] = "";
      stringArray0[9] = "";
      HierarchicalProperties hierarchicalProperties0 = new HierarchicalProperties(stringArray0);
      Set<Object> set0 = hierarchicalProperties0.getImmediateLeafNames();
      assertEquals(2, set0.size());
      assertNotNull(set0);
  }

  @Test
  public void test5()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "=+z5f.";
      stringArray0[3] = "";
      stringArray0[4] = "~.";
      stringArray0[5] = "";
      stringArray0[6] = ", is inconsistent with parent, .";
      stringArray0[7] = "=+z5f.";
      stringArray0[8] = "=+z5f.";
      stringArray0[9] = ", was not recognized.";
      HierarchicalProperties hierarchicalProperties0 = new HierarchicalProperties(stringArray0);
      HierarchicalProperties hierarchicalProperties1 = hierarchicalProperties0.getSubProperties("~.");
      assertEquals(".", hierarchicalProperties0.getSeparator());
      assertEquals(".", hierarchicalProperties1.getSeparator());
      assertNotNull(hierarchicalProperties1);
      assertEquals(true, hierarchicalProperties1.isEmpty());
  }

  @Test
  public void test6()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "$";
      stringArray0[1] = "";
      stringArray0[2] = "$";
      stringArray0[3] = "";
      stringArray0[4] = "c4Y.";
      stringArray0[5] = "f/@cip$";
      HierarchicalProperties hierarchicalProperties0 = new HierarchicalProperties(stringArray0);
      HierarchicalProperties hierarchicalProperties1 = hierarchicalProperties0.getSubProperties("");
      assertEquals(".", hierarchicalProperties1.getSeparator());
      assertEquals("{c4Y.=f/@cip$, $=}", hierarchicalProperties1.toString());
      assertEquals(".", hierarchicalProperties0.getSeparator());
  }

  @Test
  public void test7()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "^I1dfn@j 1Wiv";
      stringArray0[1] = "^I1dfn@j 1Wiv";
      stringArray0[2] = "nV|1";
      stringArray0[3] = "nV|1";
      HierarchicalProperties hierarchicalProperties0 = new HierarchicalProperties(stringArray0);
      HierarchicalProperties hierarchicalProperties1 = hierarchicalProperties0.getSubProperties("/Create");
      assertEquals(".", hierarchicalProperties1.getSeparator());
      assertNotNull(hierarchicalProperties1);
      assertEquals(".", hierarchicalProperties0.getSeparator());
      assertEquals(true, hierarchicalProperties1.isEmpty());
  }

  @Test
  public void test8()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "^I1dfn@j 1Wiv";
      stringArray0[1] = "^I1dfn@j 1Wiv";
      stringArray0[3] = "nV|1";
      stringArray0[2] = ".error.";
      HierarchicalProperties hierarchicalProperties0 = new HierarchicalProperties(stringArray0);
      HierarchicalProperties hierarchicalProperties1 = hierarchicalProperties0.getSubProperties(".");
      assertEquals(".", hierarchicalProperties1.getSeparator());
      assertEquals(".", hierarchicalProperties0.getSeparator());
      assertNotNull(hierarchicalProperties1);
      assertEquals("{error.=nV|1}", hierarchicalProperties1.toString());
  }
}
