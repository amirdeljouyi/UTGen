/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.swing;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.swing.SimpleGBC;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SimpleGBCEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SimpleGBC simpleGBC0 = SimpleGBC.title((-736), (-736));
      assertEquals((-736), simpleGBC0.gridx);
      assertEquals((-736), simpleGBC0.gridy);
      assertEquals(0.0, simpleGBC0.weightx, 0.01D);
      assertEquals(1, simpleGBC0.gridwidth);
      assertEquals(10, simpleGBC0.anchor);
  }

  @Test
  public void test1()  throws Throwable  {
      SimpleGBC simpleGBC0 = SimpleGBC.title(0, 0, (-1329));
      assertEquals(0, simpleGBC0.gridy);
      assertEquals(1, simpleGBC0.gridwidth);
      assertEquals(0, simpleGBC0.gridx);
      assertEquals(0, simpleGBC0.ipady);
      assertEquals(0, simpleGBC0.fill);
  }

  @Test
  public void test2()  throws Throwable  {
      SimpleGBC simpleGBC0 = SimpleGBC.label(0, (-1));
      assertEquals(0.0, simpleGBC0.weightx, 0.01D);
      assertEquals(0, simpleGBC0.ipady);
      assertEquals(0, simpleGBC0.gridx);
      assertEquals(0.0, simpleGBC0.weighty, 0.01D);
      assertEquals(0, simpleGBC0.fill);
      assertNotNull(simpleGBC0);
      assertEquals(17, simpleGBC0.anchor);
      assertEquals((-1), simpleGBC0.gridy);
  }

  @Test
  public void test3()  throws Throwable  {
      SimpleGBC simpleGBC0 = SimpleGBC.fill((-1548), (-1548), (-1));
      assertEquals(10, simpleGBC0.anchor);
      assertEquals((-1548), simpleGBC0.gridy);
      assertEquals((-1548), simpleGBC0.gridx);
      assertEquals(1, simpleGBC0.fill);
      assertEquals(1.0, simpleGBC0.weighty, 0.01D);
      assertEquals(1.0, simpleGBC0.weightx, 0.01D);
      assertEquals(1, simpleGBC0.gridwidth);
  }

  @Test
  public void test4()  throws Throwable  {
      SimpleGBC simpleGBC0 = SimpleGBC.button((-736), (-736));
      assertEquals(10, simpleGBC0.anchor);
      assertEquals((-736), simpleGBC0.gridx);
      assertEquals((-736), simpleGBC0.gridy);
      assertEquals(1, simpleGBC0.gridwidth);
      assertEquals(0, simpleGBC0.fill);
      assertEquals(1, simpleGBC0.gridheight);
  }

  @Test
  public void test5()  throws Throwable  {
      SimpleGBC simpleGBC0 = SimpleGBC.comboBoxConstraint((-543), (-1729), 0);
      assertEquals(17, simpleGBC0.anchor);
      assertEquals((-1729), simpleGBC0.gridy);
      assertEquals((-543), simpleGBC0.gridx);
      assertEquals(0.0, simpleGBC0.weighty, 0.01D);
  }

  @Test
  public void test6()  throws Throwable  {
      SimpleGBC simpleGBC0 = SimpleGBC.comboBox((-1914), 1);
      assertEquals(0.0, simpleGBC0.weightx, 0.01D);
      assertEquals(0.0, simpleGBC0.weighty, 0.01D);
      assertEquals(17, simpleGBC0.anchor);
      assertEquals(1, simpleGBC0.gridy);
      assertEquals((-1914), simpleGBC0.gridx);
      assertNotNull(simpleGBC0);
      assertEquals(0, simpleGBC0.ipady);
  }

  @Test
  public void test7()  throws Throwable  {
      SimpleGBC simpleGBC0 = SimpleGBC.insetConstraint((-1522), 1, 195);
      assertNotNull(simpleGBC0);
      assertEquals(1, simpleGBC0.gridy);
      assertEquals(0, simpleGBC0.fill);
      assertEquals(0, simpleGBC0.ipadx);
      assertEquals(0.0, simpleGBC0.weightx, 0.01D);
      assertEquals((-1522), simpleGBC0.gridx);
      assertEquals(1, simpleGBC0.gridwidth);
      assertEquals(17, simpleGBC0.anchor);
  }

  @Test
  public void test8()  throws Throwable  {
      SimpleGBC simpleGBC0 = SimpleGBC.horizontal((-1589), (-1589), (-65));
      assertEquals(1, simpleGBC0.gridwidth);
      assertEquals(1, simpleGBC0.gridheight);
      assertEquals((-1589), simpleGBC0.gridy);
      assertEquals(0.0, simpleGBC0.weighty, 0.01D);
      assertEquals((-1589), simpleGBC0.gridx);
  }

  @Test
  public void test9()  throws Throwable  {
      SimpleGBC simpleGBC0 = SimpleGBC.fill(0, 17);
      assertEquals(1.0, simpleGBC0.weighty, 0.01D);
      assertEquals(10, simpleGBC0.anchor);
      assertEquals(0, simpleGBC0.gridx);
      assertEquals(17, simpleGBC0.gridy);
      assertEquals(0, simpleGBC0.ipadx);
      assertEquals(1, simpleGBC0.gridwidth);
      assertEquals(1, simpleGBC0.gridheight);
  }

  @Test
  public void test10()  throws Throwable  {
      SimpleGBC simpleGBC0 = SimpleGBC.horizontal((-1779), (-1779));
      assertEquals(2, simpleGBC0.fill);
      assertEquals(0, simpleGBC0.ipady);
      assertEquals(0, simpleGBC0.ipadx);
      assertEquals(10, simpleGBC0.anchor);
      assertEquals(1, simpleGBC0.gridheight);
      assertEquals((-1779), simpleGBC0.gridy);
      assertEquals((-1779), simpleGBC0.gridx);
  }

  @Test
  public void test11()  throws Throwable  {
      SimpleGBC simpleGBC0 = SimpleGBC.none(1, (-1600));
      assertEquals(10, simpleGBC0.anchor);
      assertEquals(0, simpleGBC0.ipadx);
      assertEquals(0.0, simpleGBC0.weighty, 0.01D);
      assertEquals((-1600), simpleGBC0.gridy);
      assertEquals(0, simpleGBC0.fill);
      assertEquals(1, simpleGBC0.gridx);
  }
}
