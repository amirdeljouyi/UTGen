/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.swing.menu;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.swing.menu.MenuNode;
import com.lts.util.TreeNode;
import com.lts.util.deepcopy.DeepCopyException;
import java.lang.reflect.Method;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MenuNodeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      MenuNode menuNode0 = new MenuNode("", 1);
      menuNode0.addChild((TreeNode) menuNode0);
      MenuNode menuNode1 = menuNode0.getChildNamed("Wo(@");
      assertEquals(1, menuNode0.getNodeType());
      assertNull(menuNode1);
      assertEquals("/", menuNode0.getPath());
  }

  @Test
  public void test1()  throws Throwable  {
      MenuNode menuNode0 = new MenuNode(1656);
      int int0 = menuNode0.getNodeType();
      assertEquals(1656, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      MenuNode menuNode0 = new MenuNode("", 1);
      menuNode0.setMethod((Method) null);
      assertEquals("/", menuNode0.getPath());
      assertEquals(1, menuNode0.getNodeType());
  }

  @Test
  public void test3()  throws Throwable  {
      MenuNode menuNode0 = new MenuNode("The node, ", 1288);
      // Undeclared exception!
      try {
        menuNode0.getMethodName();
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 0, Size: 0
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      MenuNode menuNode0 = new MenuNode(":/tS7hy>\"(ec", 1);
      String string0 = menuNode0.getPath();
      assertEquals(1, menuNode0.getNodeType());
      assertNotNull(string0);
      assertEquals("/:/tS7hy>\"(ec", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      MenuNode menuNode0 = new MenuNode(":/tS7hy>\"(ec", 1);
      try {
        menuNode0.deepCopyData((Object) "/:/tS7hy>\"(ec", (Map) null, true);
        fail("Expecting exception: DeepCopyException");
      } catch(DeepCopyException e) {
        /*
         * com.lts.swing.menu.MenuNode does not support deep copy
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      MenuNode menuNode0 = new MenuNode("", 1);
      menuNode0.getMethod();
      assertEquals("/", menuNode0.getPath());
      assertEquals(1, menuNode0.getNodeType());
  }

  @Test
  public void test7()  throws Throwable  {
      MenuNode menuNode0 = new MenuNode("<", 0);
      List<Object> list0 = menuNode0.getChildren();
      assertEquals("/<", menuNode0.getPath());
      
      menuNode0.initialize((TreeNode) menuNode0, (Collection) list0, (Object) menuNode0);
      // Undeclared exception!
      try {
        menuNode0.getPath();
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      MenuNode menuNode0 = new MenuNode(1);
      menuNode0.addChild((TreeNode) menuNode0);
      menuNode0.getChildNamed("bgk~X9P)GyLa*H");
      assertEquals(1, menuNode0.getNodeType());
  }

  @Test
  public void test9()  throws Throwable  {
      MenuNode menuNode0 = new MenuNode("", 1);
      MenuNode menuNode1 = new MenuNode("Wo(@", 1364);
      menuNode0.addChild((TreeNode) menuNode1);
      MenuNode menuNode2 = menuNode0.getChildNamed("Wo(@");
      assertEquals(1364, menuNode2.getNodeType());
      assertNotNull(menuNode2);
  }
}
