/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.swing.menu;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.swing.menu.NewMenuNode;
import com.lts.util.TreeNode;
import com.lts.util.deepcopy.DeepCopyException;
import java.awt.event.ActionListener;
import javax.swing.Action;
import javax.swing.TransferHandler;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class NewMenuNodeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      NewMenuNode newMenuNode0 = new NewMenuNode();
      try {
        newMenuNode0.deepCopy(false);
        fail("Expecting exception: DeepCopyException");
      } catch(DeepCopyException e) {
        /*
         * com.lts.swing.menu.NewMenuNode does not support deep copy
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      NewMenuNode newMenuNode0 = new NewMenuNode();
      String string0 = newMenuNode0.getName();
      assertNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      Action action0 = TransferHandler.getCutAction();
      NewMenuNode newMenuNode0 = new NewMenuNode("/Edit", (ActionListener) action0);
      newMenuNode0.setCallback((ActionListener) null);
      assertEquals("/Edit", newMenuNode0.getName());
  }

  @Test
  public void test3()  throws Throwable  {
      NewMenuNode newMenuNode0 = new NewMenuNode();
      // Undeclared exception!
      try {
        newMenuNode0.compareTo((Object) "List.cellRenderer");
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.lang.String cannot be cast to com.lts.swing.menu.NewMenuNode
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      NewMenuNode newMenuNode0 = new NewMenuNode((Object) "/", "/", (ActionListener) null);
      assertEquals(0, newMenuNode0.getChildCount());
  }

  @Test
  public void test5()  throws Throwable  {
      NewMenuNode newMenuNode0 = new NewMenuNode();
      // Undeclared exception!
      try {
        newMenuNode0.replaceChild((TreeNode) newMenuNode0, (TreeNode) newMenuNode0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * The node, null, is not one of the child nodes of null
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      NewMenuNode newMenuNode0 = new NewMenuNode("The node, ");
      assertEquals("The node, ", newMenuNode0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      NewMenuNode newMenuNode0 = new NewMenuNode();
      ActionListener actionListener0 = newMenuNode0.getCallback();
      assertNull(actionListener0);
  }
}
