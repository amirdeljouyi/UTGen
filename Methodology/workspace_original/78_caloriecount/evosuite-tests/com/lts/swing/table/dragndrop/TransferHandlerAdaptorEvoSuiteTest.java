/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.swing.table.dragndrop;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.swing.table.dragndrop.TransferHandlerAdaptor;
import java.awt.Component;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComponent;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TransferHandlerAdaptorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TransferHandlerAdaptor transferHandlerAdaptor0 = new TransferHandlerAdaptor();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("@N887}fz~R+S", true);
      transferHandlerAdaptor0.remove((JComponent) jCheckBoxMenuItem0, (Object) null);
      assertEquals(-1, jCheckBoxMenuItem0.getDisplayedMnemonicIndex());
  }

  @Test
  public void test1()  throws Throwable  {
      TransferHandlerAdaptor transferHandlerAdaptor0 = new TransferHandlerAdaptor();
      Object object0 = transferHandlerAdaptor0.copy((JComponent) null);
      assertNull(object0);
  }

  @Test
  public void test2()  throws Throwable  {
      TransferHandlerAdaptor transferHandlerAdaptor0 = new TransferHandlerAdaptor();
      boolean boolean0 = transferHandlerAdaptor0.supportsCopy();
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      TransferHandlerAdaptor transferHandlerAdaptor0 = new TransferHandlerAdaptor();
      boolean boolean0 = transferHandlerAdaptor0.supportsCut();
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      TransferHandlerAdaptor transferHandlerAdaptor0 = new TransferHandlerAdaptor();
      boolean boolean0 = transferHandlerAdaptor0.paste((Component) null, (Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      TransferHandlerAdaptor transferHandlerAdaptor0 = new TransferHandlerAdaptor();
      boolean boolean0 = transferHandlerAdaptor0.supportsPaste();
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      TransferHandlerAdaptor transferHandlerAdaptor0 = new TransferHandlerAdaptor();
      boolean boolean0 = transferHandlerAdaptor0.supportsMove();
      assertEquals(false, boolean0);
  }
}
