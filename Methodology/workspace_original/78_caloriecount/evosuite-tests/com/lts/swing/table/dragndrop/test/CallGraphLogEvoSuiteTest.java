/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.swing.table.dragndrop.test;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.swing.table.dragndrop.test.CallGraphLog;
import com.lts.swing.table.dragndrop.test.CallGraphNode;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class CallGraphLogEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      CallGraphLog callGraphLog0 = new CallGraphLog();
      boolean boolean0 = callGraphLog0.isDirty();
      assertEquals(true, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      CallGraphLog callGraphLog0 = new CallGraphLog();
      CallGraphNode callGraphNode0 = callGraphLog0.getRoot();
      assertNotNull(callGraphNode0);
      assertEquals(true, callGraphLog0.isDirty());
  }

  @Test
  public void test2()  throws Throwable  {
      CallGraphLog callGraphLog0 = new CallGraphLog();
      assertEquals(true, callGraphLog0.isDirty());
      
      callGraphLog0.organize();
      assertEquals(false, callGraphLog0.isDirty());
  }

  @Test
  public void test3()  throws Throwable  {
      CallGraphLog callGraphLog0 = new CallGraphLog();
      callGraphLog0.enterMethod();
      callGraphLog0.enterMethod();
      callGraphLog0.leaveMethod();
      assertEquals(true, callGraphLog0.isDirty());
  }

  @Test
  public void test4()  throws Throwable  {
      CallGraphLog callGraphLog0 = new CallGraphLog();
      callGraphLog0.leaveMethod();
      assertEquals(true, callGraphLog0.isDirty());
  }

  @Test
  public void test5()  throws Throwable  {
      CallGraphLog callGraphLog0 = new CallGraphLog();
      callGraphLog0.enterMethod();
      callGraphLog0.leaveMethod();
      assertEquals(true, callGraphLog0.isDirty());
  }
}
