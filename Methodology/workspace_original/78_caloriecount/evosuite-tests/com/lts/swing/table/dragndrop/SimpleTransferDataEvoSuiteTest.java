/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.swing.table.dragndrop;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.swing.table.dragndrop.SimpleTransferData;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import javax.swing.JTable;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SimpleTransferDataEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      JTable jTable0 = new JTable();
      int[] intArray0 = new int[6];
      SimpleTransferData simpleTransferData0 = new SimpleTransferData(jTable0, intArray0);
      int int0 = simpleTransferData0.getDestinationRow();
      assertEquals(0, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[22];
      SimpleTransferData simpleTransferData0 = new SimpleTransferData((JTable) null, intArray0);
      DataFlavor[] dataFlavorArray0 = simpleTransferData0.getTransferDataFlavors();
      assertNotNull(dataFlavorArray0);
  }

  @Test
  public void test2()  throws Throwable  {
      JTable jTable0 = new JTable();
      int[] intArray0 = new int[6];
      SimpleTransferData simpleTransferData0 = new SimpleTransferData(jTable0, intArray0);
      JTable jTable1 = simpleTransferData0.getTable();
      assertEquals(true, jTable1.isFocusable());
  }

  @Test
  public void test3()  throws Throwable  {
      int[] intArray0 = new int[22];
      SimpleTransferData simpleTransferData0 = new SimpleTransferData((JTable) null, intArray0);
      simpleTransferData0.setDestinationRow((-19));
      assertEquals(-19, simpleTransferData0.getDestinationRow());
  }

  @Test
  public void test4()  throws Throwable  {
      JTable jTable0 = new JTable(100, 100);
      int[] intArray0 = new int[2];
      SimpleTransferData simpleTransferData0 = new SimpleTransferData(jTable0, intArray0);
      int[] intArray1 = simpleTransferData0.getRows();
      assertSame(intArray0, intArray1);
  }

  @Test
  public void test5()  throws Throwable  {
      JTable jTable0 = new JTable();
      int[] intArray0 = new int[7];
      SimpleTransferData simpleTransferData0 = new SimpleTransferData(jTable0, intArray0);
      DataFlavor dataFlavor0 = SimpleTransferData.getFlavor();
      SimpleTransferData simpleTransferData1 = (SimpleTransferData)simpleTransferData0.getTransferData(dataFlavor0);
      assertSame(simpleTransferData1, simpleTransferData0);
  }

  @Test
  public void test6()  throws Throwable  {
      JTable jTable0 = new JTable(100, 100);
      int[] intArray0 = new int[2];
      SimpleTransferData simpleTransferData0 = new SimpleTransferData(jTable0, intArray0);
      DataFlavor dataFlavor0 = DataFlavor.imageFlavor;
      // Undeclared exception!
      try {
        simpleTransferData0.getTransferData(dataFlavor0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      JTable jTable0 = new JTable();
      int[] intArray0 = new int[6];
      SimpleTransferData simpleTransferData0 = new SimpleTransferData(jTable0, intArray0);
      DataFlavor dataFlavor0 = DataFlavor.getTextPlainUnicodeFlavor();
      boolean boolean0 = simpleTransferData0.isDataFlavorSupported(dataFlavor0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      JTable jTable0 = new JTable();
      int[] intArray0 = new int[7];
      SimpleTransferData simpleTransferData0 = new SimpleTransferData(jTable0, intArray0);
      DataFlavor dataFlavor0 = SimpleTransferData.getFlavor();
      boolean boolean0 = simpleTransferData0.isDataFlavorSupported(dataFlavor0);
      assertEquals(true, boolean0);
  }
}
