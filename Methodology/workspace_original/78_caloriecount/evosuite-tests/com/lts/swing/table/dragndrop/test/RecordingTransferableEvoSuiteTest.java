/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.swing.table.dragndrop.test;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.swing.table.dragndrop.test.CallGraphLog;
import com.lts.swing.table.dragndrop.test.EventLog;
import com.lts.swing.table.dragndrop.test.RecordingTransferable;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import javax.swing.TransferHandler;
import javax.swing.event.AncestorListener;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class RecordingTransferableEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      CallGraphLog callGraphLog0 = (CallGraphLog)EventLog.getInstance();
      RecordingTransferable recordingTransferable0 = new RecordingTransferable((EventLog) callGraphLog0);
      Class<?> class0 = AncestorListener.class;
      DataFlavor dataFlavor0 = new DataFlavor(class0, "");
      ByteArrayInputStream byteArrayInputStream0 = (ByteArrayInputStream)recordingTransferable0.getTransferData(dataFlavor0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(76, byteArrayInputStream0.available());
  }

  @Test
  public void test1()  throws Throwable  {
      RecordingTransferable recordingTransferable0 = new RecordingTransferable();
      // Undeclared exception!
      try {
        recordingTransferable0.canImport((TransferHandler.TransferSupport) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      CallGraphLog callGraphLog0 = (CallGraphLog)EventLog.getInstance();
      RecordingTransferable recordingTransferable0 = new RecordingTransferable((EventLog) callGraphLog0);
      DataFlavor dataFlavor0 = DataFlavor.stringFlavor;
      boolean boolean0 = recordingTransferable0.isDataFlavorSupported(dataFlavor0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      CallGraphLog callGraphLog0 = (CallGraphLog)EventLog.getInstance();
      RecordingTransferable recordingTransferable0 = new RecordingTransferable((EventLog) callGraphLog0);
      DataFlavor[] dataFlavorArray0 = recordingTransferable0.getTransferDataFlavors();
      assertNotNull(dataFlavorArray0);
      
      boolean boolean0 = recordingTransferable0.isCompatible(dataFlavorArray0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      CallGraphLog callGraphLog0 = (CallGraphLog)EventLog.getInstance();
      RecordingTransferable recordingTransferable0 = new RecordingTransferable((EventLog) callGraphLog0);
      DataFlavor[] dataFlavorArray0 = new DataFlavor[2];
      boolean boolean0 = recordingTransferable0.isCompatible(dataFlavorArray0);
      assertEquals(false, boolean0);
  }
}
