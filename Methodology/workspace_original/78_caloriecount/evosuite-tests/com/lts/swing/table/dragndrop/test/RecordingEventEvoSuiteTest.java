/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.swing.table.dragndrop.test;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.swing.table.dragndrop.test.RecordingEvent;
import java.awt.datatransfer.DataFlavor;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class RecordingEventEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      RecordingEvent recordingEvent0 = new RecordingEvent();
      String string0 = recordingEvent0.toString();
      assertEquals(4518372727171845L, recordingEvent0.getNanoTime());
      assertEquals("RecordingEvent{01:00:00}", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      RecordingEvent recordingEvent0 = new RecordingEvent();
      int int0 = recordingEvent0.getSequence();
      assertEquals(4518372865862928L, recordingEvent0.getNanoTime());
      assertEquals((-1), int0);
  }

  @Test
  public void test2()  throws Throwable  {
      RecordingEvent recordingEvent0 = new RecordingEvent();
      String string0 = recordingEvent0.buildString("RecordingEvent{copy-or-move}", 3);
      assertEquals(4518372898026365L, recordingEvent0.getNanoTime());
      assertEquals("RecordingEvent{copy-or-move}{copy-or-move}", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      RecordingEvent recordingEvent0 = new RecordingEvent();
      DataFlavor[] dataFlavorArray0 = new DataFlavor[2];
      // Undeclared exception!
      try {
        recordingEvent0.buildNameFlavor(dataFlavorArray0[1]);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      RecordingEvent recordingEvent0 = new RecordingEvent();
      String string0 = recordingEvent0.buildNameActionTimestamp((-170), (-170));
      assertEquals(4518373024930652L, recordingEvent0.getNanoTime());
      assertEquals("RecordingEvent{unknown: -170, 00:59:59}", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      RecordingEvent recordingEvent0 = new RecordingEvent();
      recordingEvent0.setSequence((-170));
      assertEquals(4518373133962851L, recordingEvent0.getNanoTime());
      assertEquals(-170, recordingEvent0.getSequence());
  }

  @Test
  public void test6()  throws Throwable  {
      RecordingEvent recordingEvent0 = new RecordingEvent();
      String string0 = recordingEvent0.buildNameAction(3);
      assertEquals(4518373160729956L, recordingEvent0.getNanoTime());
      assertEquals("RecordingEvent{copy-or-move}", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      RecordingEvent recordingEvent0 = new RecordingEvent();
      long long0 = recordingEvent0.getNanoTime();
      assertEquals(4518373221048995L, long0);
  }

  @Test
  public void test8()  throws Throwable  {
      RecordingEvent recordingEvent0 = new RecordingEvent();
      String string0 = recordingEvent0.actionToString(1);
      assertEquals(4518373241995361L, recordingEvent0.getNanoTime());
      assertEquals("copy", string0);
  }

  @Test
  public void test9()  throws Throwable  {
      RecordingEvent recordingEvent0 = new RecordingEvent();
      String string0 = recordingEvent0.actionToString(2);
      assertEquals(4518373267975009L, recordingEvent0.getNanoTime());
      assertEquals("move", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      RecordingEvent recordingEvent0 = new RecordingEvent();
      DataFlavor[] dataFlavorArray0 = new DataFlavor[2];
      DataFlavor dataFlavor0 = DataFlavor.javaFileListFlavor;
      dataFlavorArray0[0] = dataFlavor0;
      dataFlavorArray0[1] = dataFlavorArray0[0];
      String string0 = recordingEvent0.buildNameFlavorString(dataFlavorArray0);
      assertEquals(4518373299112333L, recordingEvent0.getNanoTime());
      assertEquals("RecordingEvent{java.awt.datatransfer.DataFlavor[mimetype=application/x-java-file-list;representationclass=java.util.List], java.awt.datatransfer.DataFlavor[mimetype=application/x-java-file-list;representationclass=java.util.List]}", string0);
  }
}
