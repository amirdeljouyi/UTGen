/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.swing.table.dragndrop.test;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.swing.table.dragndrop.test.DummyTransferable;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DummyTransferableEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DummyTransferable dummyTransferable0 = new DummyTransferable();
      boolean boolean0 = dummyTransferable0.isDataFlavorSupported((DataFlavor) null);
      assertEquals(true, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      DummyTransferable dummyTransferable0 = new DummyTransferable();
      DataFlavor dataFlavor0 = DataFlavor.imageFlavor;
      DummyTransferable dummyTransferable1 = (DummyTransferable)dummyTransferable0.getTransferData(dataFlavor0);
      assertSame(dummyTransferable1, dummyTransferable0);
  }

  @Test
  public void test2()  throws Throwable  {
      DummyTransferable dummyTransferable0 = new DummyTransferable();
      DataFlavor[] dataFlavorArray0 = dummyTransferable0.getTransferDataFlavors();
      assertNull(dataFlavorArray0);
  }

  @Test
  public void test3()  throws Throwable  {
      DummyTransferable.checkConstants();
  }

  @Test
  public void test4()  throws Throwable  {
      DummyTransferable.initializeConstants();
  }
}
