/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.swing.table.rowmodel.tablemodel;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.caloriecount.ui.entry.EntryRowModel;
import com.lts.caloriecount.ui.foodwin.FoodRowModel;
import com.lts.swing.table.rowmodel.RowModel;
import com.lts.swing.table.rowmodel.tablemodel.RowModelTableModelAdaptor;
import com.lts.swing.table.rowmodel.tablemodel.RowModelTableModelListener;
import com.lts.util.notifyinglist.NotifyingList;
import com.lts.util.notifyinglist.NotifyingListAdaptor;
import com.lts.util.notifyinglist.OtherNotifyingListAdaptor;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import javax.swing.DefaultListSelectionModel;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class RowModelTableModelAdaptorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      RowModelTableModelAdaptor rowModelTableModelAdaptor0 = new RowModelTableModelAdaptor();
      // Undeclared exception!
      try {
        rowModelTableModelAdaptor0.getColumnClass((-32));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      FoodRowModel foodRowModel0 = new FoodRowModel();
      OtherNotifyingListAdaptor<Integer> otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor<Integer>();
      RowModelTableModelAdaptor rowModelTableModelAdaptor0 = new RowModelTableModelAdaptor((RowModel) foodRowModel0, (NotifyingList) otherNotifyingListAdaptor0);
      assertNotNull(rowModelTableModelAdaptor0);
      
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      DefaultListSelectionModel defaultListSelectionModel0 = new DefaultListSelectionModel();
      JTable jTable0 = new JTable((TableModel) rowModelTableModelAdaptor0, (TableColumnModel) defaultTableColumnModel0, (ListSelectionModel) defaultListSelectionModel0);
      assertEquals("javax.swing.DefaultListSelectionModel 504920508 ={}", defaultListSelectionModel0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      RowModelTableModelAdaptor rowModelTableModelAdaptor0 = new RowModelTableModelAdaptor();
      // Undeclared exception!
      try {
        rowModelTableModelAdaptor0.getColumnCount();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      FoodRowModel foodRowModel0 = new FoodRowModel();
      NotifyingListAdaptor<String> notifyingListAdaptor0 = new NotifyingListAdaptor<String>();
      RowModelTableModelAdaptor rowModelTableModelAdaptor0 = new RowModelTableModelAdaptor((RowModel) foodRowModel0, (NotifyingList) notifyingListAdaptor0);
      boolean boolean0 = rowModelTableModelAdaptor0.isCellEditable(0, 0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      RowModelTableModelAdaptor rowModelTableModelAdaptor0 = new RowModelTableModelAdaptor();
      // Undeclared exception!
      try {
        rowModelTableModelAdaptor0.setValueAt((Object) "ToolTipText", (-1291), (-1291));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      RowModelTableModelAdaptor rowModelTableModelAdaptor0 = new RowModelTableModelAdaptor();
      JTable jTable0 = new JTable();
      // Undeclared exception!
      try {
        rowModelTableModelAdaptor0.removeTableModelListener((TableModelListener) jTable0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      FoodRowModel foodRowModel0 = new FoodRowModel();
      NotifyingListAdaptor<String> notifyingListAdaptor0 = new NotifyingListAdaptor<String>();
      RowModelTableModelAdaptor rowModelTableModelAdaptor0 = new RowModelTableModelAdaptor((RowModel) foodRowModel0, (NotifyingList) notifyingListAdaptor0);
      assertNotNull(rowModelTableModelAdaptor0);
      
      String string0 = rowModelTableModelAdaptor0.getColumnName(0);
      assertNotNull(string0);
      assertEquals("Calories", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      RowModelTableModelAdaptor rowModelTableModelAdaptor0 = new RowModelTableModelAdaptor();
      // Undeclared exception!
      try {
        rowModelTableModelAdaptor0.addRowModelTableListener((RowModelTableModelListener) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      RowModelTableModelAdaptor rowModelTableModelAdaptor0 = new RowModelTableModelAdaptor();
      // Undeclared exception!
      try {
        rowModelTableModelAdaptor0.getValueAt(85, 85);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      RowModelTableModelAdaptor rowModelTableModelAdaptor0 = new RowModelTableModelAdaptor();
      // Undeclared exception!
      try {
        rowModelTableModelAdaptor0.getRowCount();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      EntryRowModel entryRowModel0 = new EntryRowModel();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      NotifyingListAdaptor<Object> notifyingListAdaptor0 = new NotifyingListAdaptor<Object>((List<Object>) linkedList0);
      RowModelTableModelAdaptor rowModelTableModelAdaptor0 = new RowModelTableModelAdaptor((RowModel) entryRowModel0, (NotifyingList) notifyingListAdaptor0);
      rowModelTableModelAdaptor0.setRowModel((RowModel) entryRowModel0);
      assertEquals(3, rowModelTableModelAdaptor0.getColumnCount());
  }

  @Test
  public void test11()  throws Throwable  {
      RowModelTableModelAdaptor rowModelTableModelAdaptor0 = new RowModelTableModelAdaptor();
      RowModel rowModel0 = rowModelTableModelAdaptor0.getRowModel();
      assertNull(rowModel0);
  }

  @Test
  public void test12()  throws Throwable  {
      RowModelTableModelAdaptor rowModelTableModelAdaptor0 = new RowModelTableModelAdaptor();
      // Undeclared exception!
      try {
        rowModelTableModelAdaptor0.getRow((-1159));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      EntryRowModel entryRowModel0 = new EntryRowModel();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      NotifyingListAdaptor<Object> notifyingListAdaptor0 = new NotifyingListAdaptor<Object>((List<Object>) linkedList0);
      RowModelTableModelAdaptor rowModelTableModelAdaptor0 = new RowModelTableModelAdaptor((RowModel) entryRowModel0, (NotifyingList) notifyingListAdaptor0);
      notifyingListAdaptor0.add((Object) "ToolTipText");
      // Undeclared exception!
      try {
        notifyingListAdaptor0.removeAll((Collection) linkedList0);
        fail("Expecting exception: ConcurrentModificationException");
      } catch(ConcurrentModificationException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      FoodRowModel foodRowModel0 = new FoodRowModel();
      OtherNotifyingListAdaptor<Integer> otherNotifyingListAdaptor0 = new OtherNotifyingListAdaptor<Integer>();
      RowModelTableModelAdaptor rowModelTableModelAdaptor0 = new RowModelTableModelAdaptor((RowModel) foodRowModel0, (NotifyingList) otherNotifyingListAdaptor0);
      otherNotifyingListAdaptor0.clear();
      assertEquals(false, otherNotifyingListAdaptor0.isEmpty());
  }
}
