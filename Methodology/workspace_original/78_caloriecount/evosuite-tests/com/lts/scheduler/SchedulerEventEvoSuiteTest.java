/*
 * This file was automatically generated by EvoSuite
 */

package com.lts.scheduler;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.lts.scheduler.SchedulerEvent;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SchedulerEventEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SchedulerEvent schedulerEvent0 = new SchedulerEvent((-1229L), (Object) null);
      String string0 = schedulerEvent0.toRelativeString(1343L);
      assertNotNull(string0);
      assertEquals("-2572", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      Object object0 = new Object();
      SchedulerEvent schedulerEvent0 = new SchedulerEvent(1L, object0);
      String string0 = schedulerEvent0.toString();
      assertEquals("event(1)", string0);
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      SchedulerEvent schedulerEvent0 = new SchedulerEvent((-1229L), (Object) null);
      int int0 = schedulerEvent0.compareTo((Object) schedulerEvent0);
      assertEquals(0, int0);
      assertEquals((-1229L), schedulerEvent0.scheduledTime);
  }

  @Test
  public void test3()  throws Throwable  {
      Object object0 = new Object();
      SchedulerEvent schedulerEvent0 = new SchedulerEvent(1L, object0);
      // Undeclared exception!
      try {
        schedulerEvent0.compareTo(object0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      SchedulerEvent schedulerEvent0 = new SchedulerEvent((-63L), (Object) "");
      SchedulerEvent schedulerEvent1 = new SchedulerEvent(0L, (Object) schedulerEvent0);
      SchedulerEvent schedulerEvent2 = new SchedulerEvent((-1126L), (Object) schedulerEvent1);
      SchedulerEvent schedulerEvent3 = (SchedulerEvent)schedulerEvent1.data;
      assertNotNull(schedulerEvent3);
      
      int int0 = schedulerEvent2.compareTo((Object) schedulerEvent3);
      assertEquals((-1), int0);
  }

  @Test
  public void test5()  throws Throwable  {
      SchedulerEvent schedulerEvent0 = new SchedulerEvent(1655L, (Object) null);
      SchedulerEvent schedulerEvent1 = new SchedulerEvent((-290L), (Object) null);
      int int0 = schedulerEvent0.compareTo((Object) schedulerEvent1);
      assertEquals(1, int0);
  }
}
