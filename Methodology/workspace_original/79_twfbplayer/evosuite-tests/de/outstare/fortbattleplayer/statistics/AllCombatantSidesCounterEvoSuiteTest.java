/*
 * This file was automatically generated by EvoSuite
 */

package de.outstare.fortbattleplayer.statistics;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.statistics.AllCombatantSidesCounter;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AllCombatantSidesCounterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      AllCombatantSidesCounter allCombatantSidesCounter0 = new AllCombatantSidesCounter();
      // Undeclared exception!
      try {
        allCombatantSidesCounter0.incrementSide((Combatant) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      AllCombatantSidesCounter allCombatantSidesCounter0 = new AllCombatantSidesCounter();
      // Undeclared exception!
      try {
        allCombatantSidesCounter0.incrementBy(0, (Combatant) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      AllCombatantSidesCounter allCombatantSidesCounter0 = new AllCombatantSidesCounter();
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      allCombatantSidesCounter0.incrementSide(combatantSide0);
  }

  @Test
  public void test3()  throws Throwable  {
      AllCombatantSidesCounter allCombatantSidesCounter0 = new AllCombatantSidesCounter();
      allCombatantSidesCounter0.incrementSide((CombatantSide) null);
  }

  @Test
  public void test4()  throws Throwable  {
      AllCombatantSidesCounter allCombatantSidesCounter0 = new AllCombatantSidesCounter();
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = allCombatantSidesCounter0.getSideValue(combatantSide0);
      assertEquals(0, int0);
  }

  @Test
  public void test5()  throws Throwable  {
      AllCombatantSidesCounter allCombatantSidesCounter0 = new AllCombatantSidesCounter();
      assertNotNull(allCombatantSidesCounter0);
      
      int int0 = allCombatantSidesCounter0.getSideValue((CombatantSide) null);
      assertEquals(0, int0);
  }

  @Test
  public void test6()  throws Throwable  {
      AllCombatantSidesCounter allCombatantSidesCounter0 = new AllCombatantSidesCounter();
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      allCombatantSidesCounter0.incrementBy(534, combatantSide0);
  }

  @Test
  public void test7()  throws Throwable  {
      AllCombatantSidesCounter allCombatantSidesCounter0 = new AllCombatantSidesCounter();
      allCombatantSidesCounter0.incrementBy((-1576), (CombatantSide) null);
  }
}
