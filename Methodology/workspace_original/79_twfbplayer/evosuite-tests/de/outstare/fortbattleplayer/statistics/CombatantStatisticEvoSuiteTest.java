/*
 * This file was automatically generated by EvoSuite
 */

package de.outstare.fortbattleplayer.statistics;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.statistics.CombatantStatType;
import de.outstare.fortbattleplayer.statistics.CombatantStatistic;
import java.util.SortedMap;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class CombatantStatisticEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      CombatantStatistic combatantStatistic0 = new CombatantStatistic(13992);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      double double0 = combatantStatistic0.hitsPerPlayer(combatantSide0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test1()  throws Throwable  {
      CombatantStatistic combatantStatistic0 = new CombatantStatistic(6);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      int int0 = combatantStatistic0.dodgesWholeSide(combatantSide0);
      assertEquals(0, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      CombatantStatistic combatantStatistic0 = new CombatantStatistic((-309));
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      double double0 = combatantStatistic0.averageHitDamage(combatantSide0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test3()  throws Throwable  {
      CombatantStatistic combatantStatistic0 = new CombatantStatistic(0);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = combatantStatistic0.maxPossibleHealthWholeSide(combatantSide0);
      assertEquals(0, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      CombatantStatistic combatantStatistic0 = new CombatantStatistic((-309));
      CombatantStatType combatantStatType0 = CombatantStatType.hitcount;
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      combatantStatistic0.addData(combatantStatType0, combatantSide0, (-309));
      double double0 = combatantStatistic0.averageHitDamage(combatantSide0);
      assertEquals(-0.0, double0, 0.01D);
  }

  @Test
  public void test5()  throws Throwable  {
      CombatantStatistic combatantStatistic0 = new CombatantStatistic((-120));
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      int int0 = combatantStatistic0.endHealthWholeSide(combatantSide0);
      assertEquals(0, int0);
  }

  @Test
  public void test6()  throws Throwable  {
      CombatantStatistic combatantStatistic0 = new CombatantStatistic((-1249));
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      int int0 = combatantStatistic0.survivedPlayers(combatantSide0);
      assertEquals(0, int0);
  }

  @Test
  public void test7()  throws Throwable  {
      CombatantStatistic combatantStatistic0 = new CombatantStatistic(302);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      int int0 = combatantStatistic0.initialHealthWholeSide(combatantSide0);
      assertEquals(0, int0);
  }

  @Test
  public void test8()  throws Throwable  {
      CombatantStatistic combatantStatistic0 = new CombatantStatistic(0);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = combatantStatistic0.endHealthPerPlayer(combatantSide0);
      assertEquals(0, int0);
  }

  @Test
  public void test9()  throws Throwable  {
      CombatantStatistic combatantStatistic0 = new CombatantStatistic(302);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      int int0 = combatantStatistic0.numberOfDuelants(combatantSide0);
      assertEquals(0, int0);
  }

  @Test
  public void test10()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      CombatantStatistic combatantStatistic0 = new CombatantStatistic((-28));
      int int0 = combatantStatistic0.shotsFiredWholeSide(combatantSide0);
      assertEquals(0, int0);
  }

  @Test
  public void test11()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      CombatantStatistic combatantStatistic0 = new CombatantStatistic((-28));
      int int0 = combatantStatistic0.takenDamageWholeSide(combatantSide0);
      assertEquals(0, int0);
  }

  @Test
  public void test12()  throws Throwable  {
      CombatantStatistic combatantStatistic0 = new CombatantStatistic((-120));
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      int int0 = combatantStatistic0.numberOfGreenhorns(combatantSide0);
      assertEquals(0, int0);
  }

  @Test
  public void test13()  throws Throwable  {
      CombatantStatistic combatantStatistic0 = new CombatantStatistic(6);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      int int0 = combatantStatistic0.numberOfSoldiers(combatantSide0);
      assertEquals(0, int0);
  }

  @Test
  public void test14()  throws Throwable  {
      CombatantStatistic combatantStatistic0 = new CombatantStatistic((-1249));
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      double double0 = combatantStatistic0.dodgesPerPlayer(combatantSide0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test15()  throws Throwable  {
      CombatantStatistic combatantStatistic0 = new CombatantStatistic(0);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = combatantStatistic0.numberOfWorkers(combatantSide0);
      assertEquals(0, int0);
  }

  @Test
  public void test16()  throws Throwable  {
      CombatantStatistic combatantStatistic0 = new CombatantStatistic(0);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      double double0 = combatantStatistic0.shotsFiredPerPlayer(combatantSide0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test17()  throws Throwable  {
      CombatantStatistic combatantStatistic0 = new CombatantStatistic((-120));
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      int int0 = combatantStatistic0.maxPossibleHealthPerPlayer(combatantSide0);
      assertEquals(0, int0);
  }

  @Test
  public void test18()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      CombatantStatistic combatantStatistic0 = new CombatantStatistic((-28));
      double double0 = combatantStatistic0.averageLevel(combatantSide0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test19()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      CombatantStatistic combatantStatistic0 = new CombatantStatistic((-28));
      SortedMap<Number, Double> sortedMap0 = combatantStatistic0.healthDistributionRelative(combatantSide0);
      assertNotNull(sortedMap0);
      assertEquals(14, sortedMap0.size());
  }

  @Test
  public void test20()  throws Throwable  {
      CombatantStatistic combatantStatistic0 = new CombatantStatistic((-120));
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      double double0 = combatantStatistic0.takenDamagePerPlayer(combatantSide0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test21()  throws Throwable  {
      CombatantStatistic combatantStatistic0 = new CombatantStatistic((-309));
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      double double0 = combatantStatistic0.causedDamagePerPlayer(combatantSide0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test22()  throws Throwable  {
      CombatantStatistic combatantStatistic0 = new CombatantStatistic(6);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      double double0 = combatantStatistic0.initialHealthPerPlayer(combatantSide0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test23()  throws Throwable  {
      CombatantStatistic combatantStatistic0 = new CombatantStatistic((-1249));
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      CombatantStatType combatantStatType0 = CombatantStatType.charclass;
      combatantStatistic0.addData(combatantStatType0, combatantSide0, (-1249));
      int int0 = combatantStatistic0.numberOfAdventurers(combatantSide0);
      assertEquals(0, int0);
  }

  @Test
  public void test24()  throws Throwable  {
      CombatantStatistic combatantStatistic0 = new CombatantStatistic(0);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CombatantStatType combatantStatType0 = CombatantStatType.starthp;
      combatantStatistic0.addData(combatantStatType0, combatantSide0, 0);
      combatantStatistic0.addData(combatantStatType0, combatantSide0, 1617);
  }

  @Test
  public void test25()  throws Throwable  {
      CombatantStatistic combatantStatistic0 = new CombatantStatistic(13992);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      double double0 = combatantStatistic0.averageWeaponDamage(combatantSide0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test26()  throws Throwable  {
      CombatantStatistic combatantStatistic0 = new CombatantStatistic(6);
      CombatantStatType combatantStatType0 = CombatantStatType.weaponmindmg;
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      combatantStatistic0.addData(combatantStatType0, combatantSide0, 6);
      double double0 = combatantStatistic0.averageWeaponDamage(combatantSide0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test27()  throws Throwable  {
      CombatantStatistic combatantStatistic0 = new CombatantStatistic(6);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      CombatantStatType combatantStatType0 = CombatantStatType.diedwhen;
      combatantStatistic0.addData(combatantStatType0, combatantSide0, 0);
      double double0 = combatantStatistic0.averageLifetime(combatantSide0);
      assertEquals(6.0, double0, 0.01D);
  }

  @Test
  public void test28()  throws Throwable  {
      CombatantStatistic combatantStatistic0 = new CombatantStatistic(302);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      double double0 = combatantStatistic0.averageLifetime(combatantSide0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test29()  throws Throwable  {
      CombatantStatistic combatantStatistic0 = new CombatantStatistic(0);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CombatantStatType combatantStatType0 = CombatantStatType.starthp;
      combatantStatistic0.addData(combatantStatType0, combatantSide0, 0);
      SortedMap<Number, Number> sortedMap0 = combatantStatistic0.healthDistribution(combatantSide0);
      assertEquals(14, sortedMap0.size());
      assertNotNull(sortedMap0);
  }

  @Test
  public void test30()  throws Throwable  {
      CombatantStatistic combatantStatistic0 = new CombatantStatistic(0);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CombatantStatType combatantStatType0 = CombatantStatType.starthp;
      combatantStatistic0.addData(combatantStatType0, combatantSide0, 1617);
      SortedMap<Number, Number> sortedMap0 = combatantStatistic0.healthDistribution(combatantSide0);
      assertEquals(14, sortedMap0.size());
      assertNotNull(sortedMap0);
  }
}
