/*
 * This file was automatically generated by EvoSuite
 */

package de.outstare.fortbattleplayer.statistics;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.statistics.BattleStatistics;
import de.outstare.fortbattleplayer.statistics.LabeledData;
import de.outstare.fortbattleplayer.statistics.RoundStatGenerator;
import java.util.Hashtable;
import java.util.Map;

@RunWith(EvoSuiteRunner.class)
public class RoundStatGeneratorEvoSuiteTest {


  //Test case number: 0
  /*
   * 11 covered goals:
   * 1 de.outstare.fortbattleplayer.statistics.RoundStatGenerator$AbstractAggregator.getSum(Lde/outstare/fortbattleplayer/model/CombatantSide;)D: root-Branch
   * 2 de.outstare.fortbattleplayer.statistics.RoundStatGenerator.addRoundState(Ljava/util/Map;)V: root-Branch
   * 3 de.outstare.fortbattleplayer.statistics.RoundStatGenerator$HealthAggregator.<init>()V: root-Branch
   * 4 de.outstare.fortbattleplayer.statistics.RoundStatGenerator$LivingCombatantAggregator.<init>()V: root-Branch
   * 5 de.outstare.fortbattleplayer.statistics.RoundStatGenerator.<init>()V: I32 Branch 3 IF_ICMPGE L25 - true
   * 6 de.outstare.fortbattleplayer.statistics.RoundStatGenerator.<init>()V: I32 Branch 3 IF_ICMPGE L25 - false
   * 7 de.outstare.fortbattleplayer.statistics.RoundStatGenerator.createRoundStat(Ljava/util/Map;Lde/outstare/fortbattleplayer/statistics/RoundStatGenerator$RoundAggregator;Ljava/util/Map;)V: I9 Branch 4 IFEQ L65 - true
   * 8 de.outstare.fortbattleplayer.statistics.RoundStatGenerator.createRoundStat(Ljava/util/Map;Lde/outstare/fortbattleplayer/statistics/RoundStatGenerator$RoundAggregator;Ljava/util/Map;)V: I36 Branch 5 IFEQ L69 - true
   * 9 de.outstare.fortbattleplayer.statistics.RoundStatGenerator.createRoundStat(Ljava/util/Map;Lde/outstare/fortbattleplayer/statistics/RoundStatGenerator$RoundAggregator;Ljava/util/Map;)V: I36 Branch 5 IFEQ L69 - false
   * 10 de.outstare.fortbattleplayer.statistics.RoundStatGenerator$AbstractAggregator.<init>()V: I25 Branch 1 IF_ICMPGE L86 - true
   * 11 de.outstare.fortbattleplayer.statistics.RoundStatGenerator$AbstractAggregator.<init>()V: I25 Branch 1 IF_ICMPGE L86 - false
   */
  @Test
  public void test0()  throws Throwable  {
      RoundStatGenerator roundStatGenerator0 = new RoundStatGenerator();
      Hashtable<Combatant, CombatantState> hashtable0 = new Hashtable<Combatant, CombatantState>();
      roundStatGenerator0.addRoundState((Map<Combatant, CombatantState>) hashtable0);
      assertEquals(0, hashtable0.size());
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 de.outstare.fortbattleplayer.statistics.RoundStatGenerator.getLivingCounts()Ljava/util/Map;: root-Branch
   */
  @Test
  public void test1()  throws Throwable  {
      RoundStatGenerator roundStatGenerator0 = new RoundStatGenerator();
      assertNotNull(roundStatGenerator0);
      
      Map<CombatantSide, LabeledData> map0 = roundStatGenerator0.getLivingCounts();
      assertEquals(2, map0.size());
      assertNotNull(map0);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 de.outstare.fortbattleplayer.statistics.RoundStatGenerator.getHealthAmount()Ljava/util/Map;: root-Branch
   */
  @Test
  public void test2()  throws Throwable  {
      RoundStatGenerator roundStatGenerator0 = new RoundStatGenerator();
      assertNotNull(roundStatGenerator0);
      
      Map<CombatantSide, LabeledData> map0 = roundStatGenerator0.getHealthAmount();
      assertNotNull(map0);
      assertEquals(2, map0.size());
  }

  //Test case number: 3
  /*
   * 7 covered goals:
   * 1 de.outstare.fortbattleplayer.statistics.RoundStatGenerator.createRoundStat(Ljava/util/Map;Lde/outstare/fortbattleplayer/statistics/RoundStatGenerator$RoundAggregator;Ljava/util/Map;)V: I9 Branch 4 IFEQ L65 - false
   * 2 de.outstare.fortbattleplayer.statistics.RoundStatGenerator$AbstractAggregator.<init>()V: I25 Branch 1 IF_ICMPGE L86 - true
   * 3 de.outstare.fortbattleplayer.statistics.RoundStatGenerator$AbstractAggregator.<init>()V: I25 Branch 1 IF_ICMPGE L86 - false
   * 4 de.outstare.fortbattleplayer.statistics.RoundStatGenerator.addRoundState(Ljava/util/Map;)V: root-Branch
   * 5 de.outstare.fortbattleplayer.statistics.RoundStatGenerator.<init>()V: I32 Branch 3 IF_ICMPGE L25 - true
   * 6 de.outstare.fortbattleplayer.statistics.RoundStatGenerator.<init>()V: I32 Branch 3 IF_ICMPGE L25 - false
   * 7 de.outstare.fortbattleplayer.statistics.RoundStatGenerator$HealthAggregator.<init>()V: root-Branch
   */
  @Test
  public void test3()  throws Throwable  {
      RoundStatGenerator roundStatGenerator0 = new RoundStatGenerator();
      BattleStatistics battleStatistics0 = new BattleStatistics((-843), (-843));
      Map<CombatantSide, ? extends LabeledData> map0 = battleStatistics0.getHitsPerRound();
      // Undeclared exception!
      try {
        roundStatGenerator0.addRoundState(map0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * de.outstare.fortbattleplayer.model.CombatantSide cannot be cast to de.outstare.fortbattleplayer.model.Combatant
         */
      }
  }
}
