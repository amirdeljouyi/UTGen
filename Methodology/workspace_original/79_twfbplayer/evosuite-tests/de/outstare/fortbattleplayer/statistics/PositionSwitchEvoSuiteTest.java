/*
 * This file was automatically generated by EvoSuite
 */

package de.outstare.fortbattleplayer.statistics;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.Sector;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.impl.SimpleArea;
import de.outstare.fortbattleplayer.model.impl.SimpleCombatant;
import de.outstare.fortbattleplayer.model.impl.SimpleSector;
import de.outstare.fortbattleplayer.statistics.PositionSwitch;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PositionSwitchEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector((-604), false, false, (-604), (-604), false, (-604), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((-604), (-604), (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, (-604), (Area) simpleArea0, false);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-604), "P", characterClass0, (Weapon) null, "P");
      PositionSwitch positionSwitch0 = new PositionSwitch((-604), (Combatant) simpleCombatant0, (Combatant) simpleCombatant0);
      boolean boolean0 = positionSwitch0.equals((Object) "");
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector((-604), true, true, (-604), (-5), true, (-5), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((-604), (-604), (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, (-604), (Area) simpleArea0, true);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-604), "Eq|H$'K{", characterClass0, (Weapon) null, "Eq|H$'K{");
      PositionSwitch positionSwitch0 = new PositionSwitch((-604), (Combatant) simpleCombatant0, (Combatant) simpleCombatant0);
      int int0 = positionSwitch0.hashCode();
      assertEquals(1663426158, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector((-604), false, false, (-604), (-604), false, (-604), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((-604), (-604), (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, (-604), (Area) simpleArea0, false);
      CharacterClass characterClass1 = CharacterClass.SOLDIER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-604), "P", characterClass1, (Weapon) null, "P");
      PositionSwitch positionSwitch0 = new PositionSwitch((-604), (Combatant) simpleCombatant0, (Combatant) simpleCombatant0);
      SimpleCombatant simpleCombatant1 = new SimpleCombatant(combatantSide0, combatantState0, (-604), "P", characterClass0, (Weapon) null, "P");
      PositionSwitch positionSwitch1 = new PositionSwitch((-604), (Combatant) simpleCombatant1, (Combatant) simpleCombatant1);
      int int0 = positionSwitch0.compareTo(positionSwitch1);
      assertFalse(positionSwitch0.equals(positionSwitch1));
      assertEquals(0, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector((-604), true, true, (-604), (-5), true, (-5), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((-604), (-604), (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, (-604), (Area) simpleArea0, true);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-604), "Eq|H$'K{", characterClass0, (Weapon) null, "Eq|H$'K{");
      PositionSwitch positionSwitch0 = new PositionSwitch((-604), (Combatant) simpleCombatant0, (Combatant) simpleCombatant0);
      boolean boolean0 = positionSwitch0.equals((Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector((-604), true, true, (-604), (-5), true, (-5), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((-604), (-604), (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, (-604), (Area) simpleArea0, true);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-604), "Eq|H$'K{", characterClass0, (Weapon) null, "Eq|H$'K{");
      PositionSwitch positionSwitch0 = new PositionSwitch((-604), (Combatant) simpleCombatant0, (Combatant) simpleCombatant0);
      PositionSwitch positionSwitch1 = new PositionSwitch((-604), (Combatant) simpleCombatant0, (Combatant) simpleCombatant0);
      int int0 = positionSwitch0.compareTo(positionSwitch1);
      assertTrue(positionSwitch1.equals(positionSwitch0));
      assertEquals(0, int0);
  }

  @Test
  public void test5()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector((-604), true, true, (-604), (-5), true, (-5), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((-604), (-604), (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, (-604), (Area) simpleArea0, true);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-604), "Eq|H$'K{", characterClass0, (Weapon) null, "Eq|H$'K{");
      PositionSwitch positionSwitch0 = new PositionSwitch((-604), (Combatant) simpleCombatant0, (Combatant) simpleCombatant0);
      PositionSwitch positionSwitch1 = new PositionSwitch((-5), (Combatant) simpleCombatant0, (Combatant) simpleCombatant0);
      int int0 = positionSwitch0.compareTo(positionSwitch1);
      assertEquals((-1), int0);
      assertFalse(positionSwitch1.equals(positionSwitch0));
  }

  @Test
  public void test6()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector((-604), true, true, (-604), (-5), true, (-5), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((-604), (-604), (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, (-604), (Area) simpleArea0, true);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-604), "Eq|H$'K{", characterClass0, (Weapon) null, "Eq|H$'K{");
      PositionSwitch positionSwitch0 = new PositionSwitch((-604), (Combatant) simpleCombatant0, (Combatant) simpleCombatant0);
      PositionSwitch positionSwitch1 = new PositionSwitch((-5), (Combatant) simpleCombatant0, (Combatant) simpleCombatant0);
      int int0 = positionSwitch1.compareTo(positionSwitch0);
      assertEquals(1, int0);
      assertFalse(positionSwitch0.equals(positionSwitch1));
  }
}
