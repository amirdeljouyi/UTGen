/*
 * This file was automatically generated by EvoSuite
 */

package de.outstare.fortbattleplayer.statistics;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.Sector;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.impl.SimpleArea;
import de.outstare.fortbattleplayer.model.impl.SimpleCombatant;
import de.outstare.fortbattleplayer.model.impl.SimpleSector;
import de.outstare.fortbattleplayer.model.impl.SimpleWeapon;
import de.outstare.fortbattleplayer.statistics.AreaStatistic;
import de.outstare.fortbattleplayer.statistics.BattleStatistics;
import de.outstare.fortbattleplayer.statistics.CriticalHit;
import de.outstare.fortbattleplayer.statistics.PositionSwitch;
import java.awt.Point;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BattleStatisticsEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-928), (-928));
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.totalSwaps(combatantSide0);
      assertEquals(0, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-928), (-928));
      assertNotNull(battleStatistics0);
      
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.numberOfSchmierOil(combatantSide0);
      assertEquals(0, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(0, 0);
      assertNotNull(battleStatistics0);
      
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      int int0 = battleStatistics0.numberOfShinyOil(combatantSide0);
      assertEquals(0, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-928), (-928));
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(0, false, false, 0, 0, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 0, (Area) simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-928), "R8sF-@c$(>/^B", 0, 1779);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "R8sF-@c$(>/^B", characterClass0, (Weapon) simpleWeapon0, "R8sF-@c$(>/^B");
      battleStatistics0.isAlive((Combatant) simpleCombatant0);
      assertEquals(CharacterClass.WORKER, simpleCombatant0.getCharacterClass());
  }

  @Test
  public void test4()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-16), (-16));
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(0, true, true, (-16), 0, true, (-16), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((-16), 1, (Sector) simpleSector0);
      battleStatistics0.newDestination((Combatant) null, (Area) simpleArea0);
      assertEquals("Area -16/1 [occupied by null]", simpleArea0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-928), (-928));
      assertNotNull(battleStatistics0);
      
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.numberOfFettesOil(combatantSide0);
      assertEquals(0, int0);
  }

  @Test
  public void test6()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-928), (-928));
      assertNotNull(battleStatistics0);
      
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.numberOfBayonets(combatantSide0);
      assertEquals(0, int0);
  }

  @Test
  public void test7()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-17), (-17));
      Map<?, ?> map0 = battleStatistics0.getShotsPerRound();
      assertEquals(false, map0.isEmpty());
  }

  @Test
  public void test8()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-928), (-928));
      Map<?, ?> map0 = battleStatistics0.getHitsPerRound();
      assertEquals(false, map0.isEmpty());
  }

  @Test
  public void test9()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-1882), (-1882));
      battleStatistics0.isDead((Combatant) null);
  }

  @Test
  public void test10()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-928), (-928));
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.criticalHits(combatantSide0);
      assertEquals(0, int0);
  }

  @Test
  public void test11()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-928), (-928));
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(0, false, false, 0, 0, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 0, (Area) simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-928), "R8sF-@c$(>/^B", 0, 1779);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "R8sF-@c$(>/^B", characterClass0, (Weapon) simpleWeapon0, "R8sF-@c$(>/^B");
      battleStatistics0.isHit((Combatant) simpleCombatant0, 0, 0);
      assertEquals("R8sF-@c$(>/^B", simpleCombatant0.getName());
  }

  @Test
  public void test12()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-928), (-928));
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(0, false, false, 0, 0, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 0, (Area) simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-928), "R8sF-@c$(>/^B", 0, 1779);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "R8sF-@c$(>/^B", characterClass0, (Weapon) simpleWeapon0, "R8sF-@c$(>/^B");
      battleStatistics0.aimsAt((Combatant) simpleCombatant0, (Combatant) simpleCombatant0);
      battleStatistics0.aimsAt((Combatant) simpleCombatant0, (Combatant) simpleCombatant0);
      assertEquals(0, simpleCombatant0._maxHealth());
  }

  @Test
  public void test13()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-788), (-788));
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      int int0 = battleStatistics0.amountOfDefenseBonus(combatantSide0);
      assertEquals(0, int0);
  }

  @Test
  public void test14()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-928), (-928));
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(0, false, false, 0, 0, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 0, (Area) simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-928), "R8sF-@c$(>/^B", 0, 1779);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "R8sF-@c$(>/^B", characterClass0, (Weapon) simpleWeapon0, "R8sF-@c$(>/^B");
      battleStatistics0.criticalShot((Combatant) simpleCombatant0, (Combatant) simpleCombatant0, 40);
      assertEquals("DEFENDER R8sF-@c$(>/^B", simpleCombatant0.toString());
  }

  @Test
  public void test15()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2, 2);
      Map<Area, AreaStatistic> map0 = battleStatistics0.getFieldStatistics();
      assertEquals(0, map0.size());
  }

  @Test
  public void test16()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-16), (-16));
      assertNotNull(battleStatistics0);
      
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.numberOfHipFlasks(combatantSide0);
      assertEquals(0, int0);
  }

  @Test
  public void test17()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-928), (-928));
      assertNotNull(battleStatistics0);
      
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(0, false, false, 0, 0, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 0, (Area) simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-928), "R8sF-@c$(>/^B", 0, 1779);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "R8sF-@c$(>/^B", characterClass0, (Weapon) simpleWeapon0, "R8sF-@c$(>/^B");
      battleStatistics0.aimsAt((Combatant) simpleCombatant0, (Combatant) simpleCombatant0);
      int int0 = battleStatistics0.percentAbleToShoot(combatantSide0);
      assertEquals((-1), int0);
  }

  @Test
  public void test18()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-828), (-1612));
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector((-828), true, true, 1688, 0, true, 544, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(544, (-1), (Sector) simpleSector0);
      // Undeclared exception!
      try {
        battleStatistics0.hasMoved((Combatant) null, (Area) simpleArea0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test19()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-16), (-16));
      assertNotNull(battleStatistics0);
      
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.numberOfGraphitLubricants(combatantSide0);
      assertEquals(0, int0);
  }

  @Test
  public void test20()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(618, 618);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.amountOfAttackBonus(combatantSide0);
      assertEquals(0, int0);
  }

  @Test
  public void test21()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-1862), (-1862));
      battleStatistics0.setRound(60);
      battleStatistics0.setRound((-1862));
      battleStatistics0.setRound((-1862));
  }

  @Test
  public void test22()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-928), (-928));
      assertNotNull(battleStatistics0);
      
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CombatantSide combatantSide1 = CombatantSide.ATTACKER;
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(0, false, false, 0, 0, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 0, (Area) simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-928), "R8sF-@c$(>/^B", 0, 1779);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "R8sF-@c$(>/^B", characterClass0, (Weapon) simpleWeapon0, "R8sF-@c$(>/^B");
      battleStatistics0.aimsAt((Combatant) simpleCombatant0, (Combatant) simpleCombatant0);
      int int0 = battleStatistics0.percentAbleToShoot(combatantSide1);
      assertEquals(0, int0);
  }

  @Test
  public void test23()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-788), (-788));
      assertNotNull(battleStatistics0);
      
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      double double0 = battleStatistics0.numberOfMovesPerPlayer(combatantSide0);
      assertEquals(-0.0, double0, 0.01D);
  }

  @Test
  public void test24()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2, 2);
      assertNotNull(battleStatistics0);
      
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      double double0 = battleStatistics0.numberOfMovesPerPlayer(combatantSide0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test25()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-928), (-928));
      assertNotNull(battleStatistics0);
      
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(0, false, false, 0, 0, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 0, (Area) simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-928), "R8sF-@c$(>/^B", 0, 1779);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "R8sF-@c$(>/^B", characterClass0, (Weapon) simpleWeapon0, "R8sF-@c$(>/^B");
      battleStatistics0.isOnline((Combatant) simpleCombatant0, false);
      int int0 = battleStatistics0.numberOfOffliners(combatantSide0);
      assertEquals(1, int0);
  }

  @Test
  public void test26()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-928), (-928));
      assertNotNull(battleStatistics0);
      
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(0, false, false, 0, 0, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 0, (Area) simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-928), "R8sF-@c$(>/^B", 0, 1779);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "R8sF-@c$(>/^B", characterClass0, (Weapon) simpleWeapon0, "R8sF-@c$(>/^B");
      battleStatistics0.isOnline((Combatant) simpleCombatant0, false);
      double double0 = battleStatistics0.roundsTillOnline(combatantSide0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test27()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-928), (-928));
      assertNotNull(battleStatistics0);
      
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(0, false, false, 0, 0, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 0, (Area) simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-928), "R8sF-@c$(>/^B", 0, 1779);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "R8sF-@c$(>/^B", characterClass0, (Weapon) simpleWeapon0, "R8sF-@c$(>/^B");
      battleStatistics0.isOnline((Combatant) simpleCombatant0, false);
      double double0 = battleStatistics0.averageRoundsOnline(combatantSide0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test28()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-928), (-928));
      assertNotNull(battleStatistics0);
      
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CombatantSide combatantSide1 = CombatantSide.ATTACKER;
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(0, false, false, 0, 0, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 0, (Area) simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-928), "R8sF-@c$(>/^B", 0, 1779);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide1, combatantState0, (-928), "R8sF-@c$(>/^B", characterClass0, (Weapon) simpleWeapon0, "R8sF-@c$(>/^B");
      battleStatistics0.isOnline((Combatant) simpleCombatant0, false);
      double double0 = battleStatistics0.averageRoundsOnline(combatantSide0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test29()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-928), (-928));
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      battleStatistics0.setRound(75);
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(0, false, false, 0, 0, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 0, (Area) simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-928), "R8sF-@c$(>/^B", 0, 1779);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "R8sF-@c$(>/^B", characterClass0, (Weapon) simpleWeapon0, "R8sF-@c$(>/^B");
      battleStatistics0.isOnline((Combatant) simpleCombatant0, false);
      assertEquals(CombatantSide.DEFENDER, simpleCombatant0.getSide());
  }

  @Test
  public void test30()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-928), (-928));
      assertNotNull(battleStatistics0);
      
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(0, false, false, 0, 0, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 0, (Area) simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-928), "R8sF-@c$(>/^B", 0, 1779);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "R8sF-@c$(>/^B", characterClass0, (Weapon) simpleWeapon0, "R8sF-@c$(>/^B");
      battleStatistics0.aimsAt((Combatant) simpleCombatant0, (Combatant) simpleCombatant0);
      String string0 = battleStatistics0.targetNoOne(combatantSide0);
      assertEquals("R8sF-@c$(>/^B(1)", string0);
      assertNotNull(string0);
  }

  @Test
  public void test31()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-928), (-928));
      assertNotNull(battleStatistics0);
      
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CombatantSide combatantSide1 = CombatantSide.ATTACKER;
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(0, false, false, 0, 0, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 0, (Area) simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-928), "R8sF-@c$(>/^B", 0, 1779);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "R8sF-@c$(>/^B", characterClass0, (Weapon) simpleWeapon0, "R8sF-@c$(>/^B");
      SimpleCombatant simpleCombatant1 = new SimpleCombatant(combatantSide1, combatantState0, (-928), "R8sF-@c$(>/^B", characterClass0, (Weapon) simpleWeapon0, "R8sF-@c$(>/^B");
      battleStatistics0.aimsAt((Combatant) simpleCombatant0, (Combatant) simpleCombatant1);
      String string0 = battleStatistics0.targetNoOne(combatantSide0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test32()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-928), (-928));
      assertNotNull(battleStatistics0);
      
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(0, false, false, 0, 0, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 0, (Area) simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-928), "R8sF-@c$(>/^B", 0, 1779);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "R8sF-@c$(>/^B", characterClass0, (Weapon) simpleWeapon0, "R8sF-@c$(>/^B");
      battleStatistics0.isOnline((Combatant) simpleCombatant0, false);
      int int0 = battleStatistics0.numberOfLoadingChamerOrEnhancedPatrons(combatantSide0);
      assertEquals(0, int0);
  }

  @Test
  public void test33()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-928), (-928));
      assertNotNull(battleStatistics0);
      
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CombatantSide combatantSide1 = CombatantSide.ATTACKER;
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(0, false, false, 0, 0, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 0, (Area) simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-928), "R8sF-@c$(>/^B", 0, 1779);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide1, combatantState0, (-928), "R8sF-@c$(>/^B", characterClass0, (Weapon) simpleWeapon0, "R8sF-@c$(>/^B");
      battleStatistics0.isOnline((Combatant) simpleCombatant0, false);
      int int0 = battleStatistics0.numberOfLoadingChamerOrEnhancedPatrons(combatantSide0);
      assertEquals(0, int0);
  }

  @Test
  public void test34()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-928), (-928));
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(0, false, false, 0, 0, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 0, (Area) simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-928), "R8sF-@c$(>/^B", 0, 1779);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "R8sF-@c$(>/^B", characterClass0, (Weapon) simpleWeapon0, "R8sF-@c$(>/^B");
      battleStatistics0.hasSwappedPosition((Combatant) simpleCombatant0, (Combatant) simpleCombatant0);
      assertEquals(0, simpleCombatant0._maxHealth());
  }

  @Test
  public void test35()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-788), (-788));
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Set<PositionSwitch> set0 = battleStatistics0.switchedPosList(combatantSide0);
      assertEquals(true, set0.isEmpty());
  }

  @Test
  public void test36()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-788), (-788));
      assertNotNull(battleStatistics0);
      
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      long long0 = battleStatistics0.criticalHitDamage(combatantSide0);
      assertEquals(0L, long0);
  }

  @Test
  public void test37()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2, 2);
      List<CriticalHit> list0 = battleStatistics0.critList((CombatantSide) null);
      assertEquals(0, list0.size());
  }

  @Test
  public void test38()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-1862), (-1862));
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      List<Combatant> list0 = battleStatistics0.turnOrder(combatantSide0);
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test39()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(0, 0);
      assertNotNull(battleStatistics0);
      
      battleStatistics0.setRound(0);
      Map<?, ?> map0 = battleStatistics0.getNotShootersPerRound();
      assertEquals(2, map0.size());
      assertNotNull(map0);
  }
}
