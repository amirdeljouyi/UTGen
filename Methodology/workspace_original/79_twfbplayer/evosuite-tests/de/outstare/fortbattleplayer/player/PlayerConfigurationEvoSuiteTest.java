/*
 * This file was automatically generated by EvoSuite
 */

package de.outstare.fortbattleplayer.player;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import de.outstare.fortbattleplayer.player.PlayerConfiguration;
import de.outstare.fortbattleplayer.player.PlayerConfigurationListener;
import de.outstare.fortbattleplayer.player.PlayerState;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PlayerConfigurationEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PlayerConfiguration playerConfiguration0 = new PlayerConfiguration();
      playerConfiguration0.lock();
      assertEquals(3000, playerConfiguration0.ROUND_DELAY);
      assertEquals(300, playerConfiguration0.PLAYER_DELAY);
      assertEquals(0, playerConfiguration0.ACTION_DELAY);
      assertEquals(false, playerConfiguration0.showMoveTargets());
      assertEquals(true, playerConfiguration0.showShootline());
      assertEquals(true, playerConfiguration0.isStopped());
  }

  @Test
  public void test1()  throws Throwable  {
      PlayerConfiguration playerConfiguration0 = PlayerConfiguration.NO_DELAY;
      // Undeclared exception!
      try {
        playerConfiguration0.unlock();
        fail("Expecting exception: IllegalMonitorStateException");
      } catch(IllegalMonitorStateException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      PlayerConfiguration playerConfiguration0 = PlayerConfiguration.NO_DELAY;
      PlayerConfiguration playerConfiguration1 = new PlayerConfiguration();
      playerConfiguration0.copy();
      playerConfiguration0.isPlaying();
      PlayerState playerState0 = PlayerState.PLAY;
      playerConfiguration1.setState(playerState0);
      PlayerConfiguration playerConfiguration2 = new PlayerConfiguration();
      PlayerState playerState1 = PlayerState.STOP;
      playerConfiguration2.isStopped();
      playerConfiguration1.setState(playerState1);
      PlayerConfiguration playerConfiguration3 = new PlayerConfiguration();
      playerConfiguration2.showMoveTargets();
      playerConfiguration3.PLAYER_DELAY = 1;
      playerConfiguration3.showShootline();
      PlayerConfiguration playerConfiguration4 = new PlayerConfiguration();
      playerConfiguration3.setTo(playerConfiguration4);
      assertEquals(300, playerConfiguration3.PLAYER_DELAY);
      
      boolean boolean0 = playerConfiguration4.showMoveTargets();
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      PlayerConfiguration playerConfiguration0 = PlayerConfiguration.NO_DELAY;
      playerConfiguration0.isPaused();
      PlayerConfiguration playerConfiguration1 = playerConfiguration0.copy();
      playerConfiguration1.isPlaying();
      playerConfiguration0.isPaused();
      playerConfiguration0.isStopped();
      // Undeclared exception!
      try {
        playerConfiguration0.setShowShootline(false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      PlayerConfiguration playerConfiguration0 = new PlayerConfiguration();
      playerConfiguration0.setShowMoveTargets(false);
      assertEquals(false, playerConfiguration0.showMoveTargets());
      assertEquals(true, playerConfiguration0.showShootline());
      assertEquals(3000, playerConfiguration0.ROUND_DELAY);
      assertEquals(true, playerConfiguration0.isStopped());
      assertEquals(0, playerConfiguration0.ACTION_DELAY);
      assertEquals(300, playerConfiguration0.PLAYER_DELAY);
  }

  @Test
  public void test5()  throws Throwable  {
      PlayerConfiguration playerConfiguration0 = PlayerConfiguration.NO_DELAY;
      // Undeclared exception!
      try {
        playerConfiguration0.setShowMoveTargets(false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      PlayerConfiguration playerConfiguration0 = new PlayerConfiguration();
      playerConfiguration0.setShowShootline(true);
      assertEquals(3000, playerConfiguration0.ROUND_DELAY);
      assertEquals(true, playerConfiguration0.isStopped());
      assertEquals(true, playerConfiguration0.showShootline());
      assertEquals(0, playerConfiguration0.ACTION_DELAY);
      assertEquals(300, playerConfiguration0.PLAYER_DELAY);
      assertEquals(false, playerConfiguration0.showMoveTargets());
  }
}
