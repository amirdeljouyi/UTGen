/*
 * This file was automatically generated by EvoSuite
 */

package de.outstare.fortbattleplayer.player;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.player.Battleplan;
import de.outstare.fortbattleplayer.player.CombatantTurn;
import de.outstare.fortbattleplayer.player.PlayerConfiguration;
import de.outstare.fortbattleplayer.player.Round;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BattleplanEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LinkedHashSet<Round> linkedHashSet0 = new LinkedHashSet<Round>();
      Battleplan battleplan0 = new Battleplan((Collection<Round>) linkedHashSet0);
      PlayerConfiguration playerConfiguration0 = PlayerConfiguration.NO_DELAY;
      // Undeclared exception!
      try {
        battleplan0.executeRound(1793, playerConfiguration0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * the given round number does not exist: 1793
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      LinkedList<Round> linkedList0 = new LinkedList<Round>();
      Battleplan battleplan0 = new Battleplan((Collection<Round>) linkedList0);
      int int0 = battleplan0.numberOfRounds();
      assertEquals(0, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      LinkedList<Round> linkedList0 = new LinkedList<Round>();
      Battleplan battleplan0 = new Battleplan((Collection<Round>) linkedList0);
      battleplan0.resetToRound(0);
      assertEquals(0, battleplan0.numberOfRounds());
  }

  @Test
  public void test3()  throws Throwable  {
      LinkedList<Round> linkedList0 = new LinkedList<Round>();
      Battleplan battleplan0 = new Battleplan((Collection<Round>) linkedList0);
      assertNotNull(battleplan0);
      
      boolean boolean0 = battleplan0.hasMoreRounds(0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      LinkedList<Round> linkedList0 = new LinkedList<Round>();
      Vector<CombatantTurn> vector0 = new Vector<CombatantTurn>();
      Round round0 = new Round(3000, (Map<Combatant, CombatantState>) null, (List<CombatantTurn>) vector0);
      linkedList0.add(round0);
      Battleplan battleplan0 = new Battleplan((Collection<Round>) linkedList0);
      assertNotNull(battleplan0);
      
      // Undeclared exception!
      try {
        battleplan0.resetToRound(3000);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      LinkedList<Round> linkedList0 = new LinkedList<Round>();
      Vector<CombatantTurn> vector0 = new Vector<CombatantTurn>();
      Round round0 = new Round(3000, (Map<Combatant, CombatantState>) null, (List<CombatantTurn>) vector0);
      linkedList0.add(round0);
      linkedList0.add(round0);
      Battleplan battleplan0 = new Battleplan((Collection<Round>) linkedList0);
      assertNotNull(battleplan0);
      assertEquals(1, battleplan0.numberOfRounds());
  }

  @Test
  public void test6()  throws Throwable  {
      LinkedList<Round> linkedList0 = new LinkedList<Round>();
      Vector<CombatantTurn> vector0 = new Vector<CombatantTurn>();
      Round round0 = new Round(3000, (Map<Combatant, CombatantState>) null, (List<CombatantTurn>) vector0);
      linkedList0.add(round0);
      Battleplan battleplan0 = new Battleplan((Collection<Round>) linkedList0);
      assertNotNull(battleplan0);
      
      boolean boolean0 = battleplan0.hasMoreRounds(31);
      assertEquals(true, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      LinkedList<Round> linkedList0 = new LinkedList<Round>();
      Battleplan battleplan0 = new Battleplan((Collection<Round>) linkedList0);
      // Undeclared exception!
      try {
        battleplan0.getNextRound(0);
        fail("Expecting exception: AssertionError");
      } catch(AssertionError e) {
        /*
         * more rounds must exist!
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      LinkedList<Round> linkedList0 = new LinkedList<Round>();
      Vector<CombatantTurn> vector0 = new Vector<CombatantTurn>();
      Round round0 = new Round(3000, (Map<Combatant, CombatantState>) null, (List<CombatantTurn>) vector0);
      linkedList0.add(round0);
      Battleplan battleplan0 = new Battleplan((Collection<Round>) linkedList0);
      assertNotNull(battleplan0);
      
      int int0 = battleplan0.getNextRound(31);
      assertEquals(3000, int0);
      assertEquals(1, battleplan0.numberOfRounds());
  }
}
