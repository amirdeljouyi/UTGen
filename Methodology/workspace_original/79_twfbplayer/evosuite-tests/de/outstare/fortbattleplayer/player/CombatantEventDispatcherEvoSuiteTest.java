/*
 * This file was automatically generated by EvoSuite
 */

package de.outstare.fortbattleplayer.player;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.Sector;
import de.outstare.fortbattleplayer.model.impl.SimpleArea;
import de.outstare.fortbattleplayer.model.impl.SimpleSector;
import de.outstare.fortbattleplayer.player.CombatantEventDispatcher;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;

@RunWith(EvoSuiteRunner.class)
public class CombatantEventDispatcherEvoSuiteTest {


  //Test case number: 0
  /*
   * 1 covered goal:
   * 1 de.outstare.fortbattleplayer.player.CombatantEventDispatcher.<init>(Ljava/util/Collection;)V: I19 Branch 1 IFEQ L49 - false
   */
  @Test
  public void test0()  throws Throwable  {
      LinkedList<Combatant> linkedList0 = new LinkedList<Combatant>();
      linkedList0.add((Combatant) null);
      CombatantEventDispatcher combatantEventDispatcher0 = null;
      try {
        combatantEventDispatcher0 = new CombatantEventDispatcher((Collection<Combatant>) linkedList0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * 1 de.outstare.fortbattleplayer.player.CombatantEventDispatcher.aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V: I9 Branch 2 IFEQ L66 - true
   * 2 de.outstare.fortbattleplayer.player.CombatantEventDispatcher.<init>(Ljava/util/Collection;)V: I19 Branch 1 IFEQ L49 - true
   */
  @Test
  public void test1()  throws Throwable  {
      LinkedList<Combatant> linkedList0 = new LinkedList<Combatant>();
      CombatantEventDispatcher combatantEventDispatcher0 = new CombatantEventDispatcher((Collection<Combatant>) linkedList0);
      combatantEventDispatcher0.aimsAt((Combatant) null, (Combatant) null);
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 de.outstare.fortbattleplayer.player.CombatantEventDispatcher.aimsAt(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V: I9 Branch 2 IFEQ L66 - false
   * 2 de.outstare.fortbattleplayer.player.CombatantEventDispatcher.addCombatantObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V: root-Branch
   */
  @Test
  public void test2()  throws Throwable  {
      LinkedList<Combatant> linkedList0 = new LinkedList<Combatant>();
      CombatantEventDispatcher combatantEventDispatcher0 = new CombatantEventDispatcher((Collection<Combatant>) linkedList0);
      combatantEventDispatcher0.addCombatantObserver((CombatantObserver) combatantEventDispatcher0);
      // Undeclared exception!
      try {
        combatantEventDispatcher0.aimsAt((Combatant) null, (Combatant) null);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 de.outstare.fortbattleplayer.player.CombatantEventDispatcher.hasMoved(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Area;)V: I9 Branch 3 IFEQ L76 - true
   */
  @Test
  public void test3()  throws Throwable  {
      LinkedList<Combatant> linkedList0 = new LinkedList<Combatant>();
      CombatantEventDispatcher combatantEventDispatcher0 = new CombatantEventDispatcher((Collection<Combatant>) linkedList0);
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(467, true, true, 467, 50, true, 467, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(1231, 760, (Sector) simpleSector0);
      combatantEventDispatcher0.hasMoved((Combatant) null, (Area) simpleArea0);
      assertEquals(false, simpleArea0.isOccupied());
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 de.outstare.fortbattleplayer.player.CombatantEventDispatcher.hasMoved(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Area;)V: I9 Branch 3 IFEQ L76 - false
   */
  @Test
  public void test4()  throws Throwable  {
      LinkedList<Combatant> linkedList0 = new LinkedList<Combatant>();
      CombatantEventDispatcher combatantEventDispatcher0 = new CombatantEventDispatcher((Collection<Combatant>) linkedList0);
      combatantEventDispatcher0.addCombatantObserver((CombatantObserver) combatantEventDispatcher0);
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(467, true, true, 467, 50, true, 467, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(1231, 760, (Sector) simpleSector0);
      // Undeclared exception!
      try {
        combatantEventDispatcher0.hasMoved((Combatant) null, (Area) simpleArea0);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 de.outstare.fortbattleplayer.player.CombatantEventDispatcher.isDead(Lde/outstare/fortbattleplayer/model/Combatant;)V: I9 Branch 4 IFEQ L85 - true
   */
  @Test
  public void test5()  throws Throwable  {
      LinkedList<Combatant> linkedList0 = new LinkedList<Combatant>();
      CombatantEventDispatcher combatantEventDispatcher0 = new CombatantEventDispatcher((Collection<Combatant>) linkedList0);
      combatantEventDispatcher0.isDead((Combatant) null);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 de.outstare.fortbattleplayer.player.CombatantEventDispatcher.isDead(Lde/outstare/fortbattleplayer/model/Combatant;)V: I9 Branch 4 IFEQ L85 - false
   */
  @Test
  public void test6()  throws Throwable  {
      LinkedList<Combatant> linkedList0 = new LinkedList<Combatant>();
      CombatantEventDispatcher combatantEventDispatcher0 = new CombatantEventDispatcher((Collection<Combatant>) linkedList0);
      combatantEventDispatcher0.addCombatantObserver((CombatantObserver) combatantEventDispatcher0);
      // Undeclared exception!
      try {
        combatantEventDispatcher0.isDead((Combatant) null);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 de.outstare.fortbattleplayer.player.CombatantEventDispatcher.isHit(Lde/outstare/fortbattleplayer/model/Combatant;II)V: I9 Branch 5 IFEQ L95 - true
   */
  @Test
  public void test7()  throws Throwable  {
      LinkedList<Combatant> linkedList0 = new LinkedList<Combatant>();
      CombatantEventDispatcher combatantEventDispatcher0 = new CombatantEventDispatcher((Collection<Combatant>) linkedList0);
      combatantEventDispatcher0.isHit((Combatant) null, (-1891), 0);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 de.outstare.fortbattleplayer.player.CombatantEventDispatcher.isAlive(Lde/outstare/fortbattleplayer/model/Combatant;)V: I9 Branch 6 IFEQ L104 - true
   */
  @Test
  public void test8()  throws Throwable  {
      LinkedList<Combatant> linkedList0 = new LinkedList<Combatant>();
      CombatantEventDispatcher combatantEventDispatcher0 = new CombatantEventDispatcher((Collection<Combatant>) linkedList0);
      combatantEventDispatcher0.isAlive((Combatant) null);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 de.outstare.fortbattleplayer.player.CombatantEventDispatcher.isAlive(Lde/outstare/fortbattleplayer/model/Combatant;)V: I9 Branch 6 IFEQ L104 - false
   */
  @Test
  public void test9()  throws Throwable  {
      LinkedList<Combatant> linkedList0 = new LinkedList<Combatant>();
      CombatantEventDispatcher combatantEventDispatcher0 = new CombatantEventDispatcher((Collection<Combatant>) linkedList0);
      combatantEventDispatcher0.addCombatantObserver((CombatantObserver) combatantEventDispatcher0);
      // Undeclared exception!
      try {
        combatantEventDispatcher0.isAlive((Combatant) null);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 de.outstare.fortbattleplayer.player.CombatantEventDispatcher.newDestination(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Area;)V: I9 Branch 7 IFEQ L114 - true
   */
  @Test
  public void test10()  throws Throwable  {
      LinkedList<Combatant> linkedList0 = new LinkedList<Combatant>();
      CombatantEventDispatcher combatantEventDispatcher0 = new CombatantEventDispatcher((Collection<Combatant>) linkedList0);
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(467, true, true, 467, 50, true, 467, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(1231, 760, (Sector) simpleSector0);
      combatantEventDispatcher0.newDestination((Combatant) null, (Area) simpleArea0);
      assertEquals("Area 1231/760 [occupied by null]", simpleArea0.toString());
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 de.outstare.fortbattleplayer.player.CombatantEventDispatcher.newDestination(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Area;)V: I9 Branch 7 IFEQ L114 - false
   */
  @Test
  public void test11()  throws Throwable  {
      LinkedList<Combatant> linkedList0 = new LinkedList<Combatant>();
      CombatantEventDispatcher combatantEventDispatcher0 = new CombatantEventDispatcher((Collection<Combatant>) linkedList0);
      combatantEventDispatcher0.addCombatantObserver((CombatantObserver) combatantEventDispatcher0);
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(868, true, true, 467, 1231, false, (-1156), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(467, 467, (Sector) simpleSector0);
      // Undeclared exception!
      try {
        combatantEventDispatcher0.newDestination((Combatant) null, (Area) simpleArea0);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 de.outstare.fortbattleplayer.player.CombatantEventDispatcher.isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V: I9 Branch 8 IFEQ L124 - true
   */
  @Test
  public void test12()  throws Throwable  {
      LinkedHashSet<Combatant> linkedHashSet0 = new LinkedHashSet<Combatant>();
      CombatantEventDispatcher combatantEventDispatcher0 = new CombatantEventDispatcher((Collection<Combatant>) linkedHashSet0);
      combatantEventDispatcher0.isOnline((Combatant) null, false);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 de.outstare.fortbattleplayer.player.CombatantEventDispatcher.isOnline(Lde/outstare/fortbattleplayer/model/Combatant;Z)V: I9 Branch 8 IFEQ L124 - false
   */
  @Test
  public void test13()  throws Throwable  {
      LinkedList<Combatant> linkedList0 = new LinkedList<Combatant>();
      CombatantEventDispatcher combatantEventDispatcher0 = new CombatantEventDispatcher((Collection<Combatant>) linkedList0);
      combatantEventDispatcher0.addCombatantObserver((CombatantObserver) combatantEventDispatcher0);
      // Undeclared exception!
      try {
        combatantEventDispatcher0.isOnline((Combatant) null, true);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 de.outstare.fortbattleplayer.player.CombatantEventDispatcher.hasSwappedPosition(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V: I9 Branch 9 IFEQ L133 - true
   */
  @Test
  public void test14()  throws Throwable  {
      LinkedList<Combatant> linkedList0 = new LinkedList<Combatant>();
      CombatantEventDispatcher combatantEventDispatcher0 = new CombatantEventDispatcher((Collection<Combatant>) linkedList0);
      combatantEventDispatcher0.hasSwappedPosition((Combatant) null, (Combatant) null);
  }

  //Test case number: 15
  /*
   * 2 covered goals:
   * 1 de.outstare.fortbattleplayer.player.CombatantEventDispatcher.hasSwappedPosition(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;)V: I9 Branch 9 IFEQ L133 - false
   * 2 de.outstare.fortbattleplayer.player.CombatantEventDispatcher.addCombatantObserver(Lde/outstare/fortbattleplayer/model/CombatantObserver;)V: root-Branch
   */
  @Test
  public void test15()  throws Throwable  {
      LinkedList<Combatant> linkedList0 = new LinkedList<Combatant>();
      CombatantEventDispatcher combatantEventDispatcher0 = new CombatantEventDispatcher((Collection<Combatant>) linkedList0);
      combatantEventDispatcher0.addCombatantObserver((CombatantObserver) combatantEventDispatcher0);
      // Undeclared exception!
      try {
        combatantEventDispatcher0.hasSwappedPosition((Combatant) null, (Combatant) null);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  //Test case number: 16
  /*
   * 2 covered goals:
   * 1 de.outstare.fortbattleplayer.player.CombatantEventDispatcher.criticalShot(Lde/outstare/fortbattleplayer/model/Combatant;Lde/outstare/fortbattleplayer/model/Combatant;I)V: I9 Branch 10 IFEQ L143 - true
   * 2 de.outstare.fortbattleplayer.player.CombatantEventDispatcher.<init>(Ljava/util/Collection;)V: I19 Branch 1 IFEQ L49 - true
   */
  @Test
  public void test16()  throws Throwable  {
      LinkedHashSet<Combatant> linkedHashSet0 = new LinkedHashSet<Combatant>();
      CombatantEventDispatcher combatantEventDispatcher0 = new CombatantEventDispatcher((Collection<Combatant>) linkedHashSet0);
      combatantEventDispatcher0.criticalShot((Combatant) null, (Combatant) null, 0);
  }
}
