/*
 * This file was automatically generated by EvoSuite
 */

package de.outstare.fortbattleplayer.model.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.impl.JSWeaponData;
import de.outstare.fortbattleplayer.model.impl.SimpleWeapon;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class JSWeaponDataEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      JSWeaponData.WeaponGameData jSWeaponData_WeaponGameData0 = new JSWeaponData.WeaponGameData((-1945), (-1945), (-1945), (-1945), (-1945), ", defense=");
      String string0 = jSWeaponData_WeaponGameData0.toString();
      assertNotNull(string0);
      assertEquals("WeaponGameData: minDmg=-1945, maxDmg=-1945, offBonus=-1945, deffBonus=-1945, name=, defense=", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      JSWeaponData jSWeaponData0 = new JSWeaponData();
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1674, "successfully read ", 1674, 1674);
      boolean boolean0 = jSWeaponData0.hasGraphitLubricant((Weapon) simpleWeapon0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      JSWeaponData jSWeaponData0 = new JSWeaponData();
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(102, "c`y'}\"Es[TXZ90T;J", 102, 225);
      boolean boolean0 = jSWeaponData0.hasBayonet((Weapon) simpleWeapon0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      JSWeaponData jSWeaponData0 = new JSWeaponData();
      int int0 = jSWeaponData0.getGoldenGoldAttBonus();
      assertEquals(3, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      JSWeaponData jSWeaponData0 = new JSWeaponData();
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(102, "c`y'}\"Es[TXZ90T;J", 102, 225);
      boolean boolean0 = jSWeaponData0.hasShinyWeaponOil((Weapon) simpleWeapon0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      JSWeaponData jSWeaponData0 = new JSWeaponData();
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1674, "successfully read ", 1674, 1674);
      boolean boolean0 = jSWeaponData0.hasFettesWeaponOil((Weapon) simpleWeapon0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      JSWeaponData jSWeaponData0 = new JSWeaponData();
      int int0 = jSWeaponData0.getGoldenGoldDmgBonus();
      assertEquals(15, int0);
  }

  @Test
  public void test7()  throws Throwable  {
      JSWeaponData jSWeaponData0 = new JSWeaponData();
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1674, "successfully read ", 1674, 1674);
      boolean boolean0 = jSWeaponData0.hasHipFlask((Weapon) simpleWeapon0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      JSWeaponData jSWeaponData0 = new JSWeaponData();
      int int0 = jSWeaponData0.getGoldenGoldDeffBonus();
      assertEquals(3, int0);
  }

  @Test
  public void test9()  throws Throwable  {
      JSWeaponData jSWeaponData0 = new JSWeaponData();
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1674, "successfully read ", 1674, 1674);
      boolean boolean0 = jSWeaponData0.hasLoadingchamberOrEnhancedPatrons((Weapon) simpleWeapon0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      JSWeaponData jSWeaponData0 = new JSWeaponData();
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(102, "c`y'}\"Es[TXZ90T;J", 102, 225);
      boolean boolean0 = jSWeaponData0.hasSchmierendesWeaponOil((Weapon) simpleWeapon0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1674, "successfully read ", 1674, 1674);
      SectorBonus.BonusType sectorBonus_BonusType0 = SectorBonus.BonusType.DEFENSE;
      int int0 = simpleWeapon0.getSectorBonus(sectorBonus_BonusType0);
      assertEquals(0, int0);
  }

  @Test
  public void test12()  throws Throwable  {
      JSWeaponData jSWeaponData0 = new JSWeaponData();
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(102, "c`y'}\"Es[TXZ90T;J", 102, 225);
      boolean boolean0 = jSWeaponData0.isGoldenGun((Weapon) simpleWeapon0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      JSWeaponData.WeaponGameData jSWeaponData_WeaponGameData0 = new JSWeaponData.WeaponGameData(0, 0, 0, 0, 0, "atZ_uMl+h7M");
      int int0 = jSWeaponData_WeaponGameData0.hashCode();
      assertEquals((-1273420336), int0);
  }

  @Test
  public void test14()  throws Throwable  {
      JSWeaponData.WeaponGameData jSWeaponData_WeaponGameData0 = new JSWeaponData.WeaponGameData(3, 1425, 1425, 1425, 1425, (String) null);
      int int0 = jSWeaponData_WeaponGameData0.hashCode();
      assertEquals(51891294, int0);
  }

  @Test
  public void test15()  throws Throwable  {
      JSWeaponData.WeaponGameData jSWeaponData_WeaponGameData0 = new JSWeaponData.WeaponGameData(0, 1674, 1674, 1674, 0, "successfully read ");
      JSWeaponData.WeaponGameData jSWeaponData_WeaponGameData1 = new JSWeaponData.WeaponGameData(1674, 0, 1674, 1674, 0, "successfully read ");
      boolean boolean0 = jSWeaponData_WeaponGameData0.equals((Object) jSWeaponData_WeaponGameData1);
      assertEquals("WeaponGameData: minDmg=1674, maxDmg=1674, offBonus=1674, deffBonus=0, name=successfully read ", jSWeaponData_WeaponGameData0.toString());
      assertEquals("WeaponGameData: minDmg=0, maxDmg=1674, offBonus=1674, deffBonus=0, name=successfully read ", jSWeaponData_WeaponGameData1.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      JSWeaponData.WeaponGameData jSWeaponData_WeaponGameData0 = new JSWeaponData.WeaponGameData(15, 15, 15, 15, 15, "`OkJn");
      boolean boolean0 = jSWeaponData_WeaponGameData0.equals((Object) null);
      assertEquals("WeaponGameData: minDmg=15, maxDmg=15, offBonus=15, deffBonus=15, name=`OkJn", jSWeaponData_WeaponGameData0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      JSWeaponData.WeaponGameData jSWeaponData_WeaponGameData0 = new JSWeaponData.WeaponGameData(0, 0, 0, 0, 0, "atZ_uMl+h7M");
      boolean boolean0 = jSWeaponData_WeaponGameData0.equals((Object) "DEFENSE");
      assertEquals("WeaponGameData: minDmg=0, maxDmg=0, offBonus=0, deffBonus=0, name=atZ_uMl+h7M", jSWeaponData_WeaponGameData0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      JSWeaponData.WeaponGameData jSWeaponData_WeaponGameData0 = new JSWeaponData.WeaponGameData(0, 0, 0, 0, 0, "atZ_uMl+h7M");
      JSWeaponData.WeaponGameData jSWeaponData_WeaponGameData1 = new JSWeaponData.WeaponGameData((-1273420336), (-1273420336), (-1273420336), (-1273420336), (-1273420336), "DEFENSE");
      boolean boolean0 = jSWeaponData_WeaponGameData0.equals((Object) jSWeaponData_WeaponGameData1);
      assertEquals("WeaponGameData: minDmg=-1273420336, maxDmg=-1273420336, offBonus=-1273420336, deffBonus=-1273420336, name=DEFENSE", jSWeaponData_WeaponGameData1.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      JSWeaponData.WeaponGameData jSWeaponData_WeaponGameData0 = new JSWeaponData.WeaponGameData((-1945), (-1945), (-1945), (-1945), (-1945), ", defense=");
      JSWeaponData.WeaponGameData jSWeaponData_WeaponGameData1 = new JSWeaponData.WeaponGameData((-1945), (-1945), (-7), (-7), (-1945), ", defense=");
      boolean boolean0 = jSWeaponData_WeaponGameData0.equals((Object) jSWeaponData_WeaponGameData1);
      assertEquals("WeaponGameData: minDmg=-1945, maxDmg=-7, offBonus=-7, deffBonus=-1945, name=, defense=", jSWeaponData_WeaponGameData1.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      JSWeaponData.WeaponGameData jSWeaponData_WeaponGameData0 = new JSWeaponData.WeaponGameData((-6), (-6), (-6), (-6), (-6), "\"");
      JSWeaponData.WeaponGameData jSWeaponData_WeaponGameData1 = new JSWeaponData.WeaponGameData((-6), 711, 711, (-6), (-6), "\"");
      boolean boolean0 = jSWeaponData_WeaponGameData0.equals((Object) jSWeaponData_WeaponGameData1);
      assertEquals(false, boolean0);
      assertEquals("WeaponGameData: minDmg=711, maxDmg=711, offBonus=-6, deffBonus=-6, name=\"", jSWeaponData_WeaponGameData1.toString());
  }

  @Test
  public void test21()  throws Throwable  {
      JSWeaponData.WeaponGameData jSWeaponData_WeaponGameData0 = new JSWeaponData.WeaponGameData(0, 0, 0, 0, 0, "atZ_uMl+h7M");
      JSWeaponData.WeaponGameData jSWeaponData_WeaponGameData1 = new JSWeaponData.WeaponGameData(0, 0, 0, 0, 0, "DEFENSE");
      boolean boolean0 = jSWeaponData_WeaponGameData0.equals((Object) jSWeaponData_WeaponGameData1);
      assertEquals(false, boolean0);
      assertEquals("WeaponGameData: minDmg=0, maxDmg=0, offBonus=0, deffBonus=0, name=DEFENSE", jSWeaponData_WeaponGameData1.toString());
  }

  @Test
  public void test22()  throws Throwable  {
      JSWeaponData.WeaponGameData jSWeaponData_WeaponGameData0 = new JSWeaponData.WeaponGameData(0, 0, 0, 0, 0, "atZ_uMl+h7M");
      JSWeaponData.WeaponGameData jSWeaponData_WeaponGameData1 = new JSWeaponData.WeaponGameData(0, 0, 0, 0, 0, "atZ_uMl+h7M");
      boolean boolean0 = jSWeaponData_WeaponGameData0.equals((Object) jSWeaponData_WeaponGameData1);
      assertEquals(true, boolean0);
      assertEquals("WeaponGameData: minDmg=0, maxDmg=0, offBonus=0, deffBonus=0, name=atZ_uMl+h7M", jSWeaponData_WeaponGameData1.toString());
  }
}
