/*
 * This file was automatically generated by EvoSuite
 */

package de.outstare.fortbattleplayer.model.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.Sector;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.SectorObserver;
import de.outstare.fortbattleplayer.model.impl.SimpleArea;
import de.outstare.fortbattleplayer.model.impl.SimpleBattleField;
import de.outstare.fortbattleplayer.model.impl.SimpleSector;
import java.util.Set;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SimpleSectorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(13, true, true, 13, 13, true, 13, characterClass0);
      simpleSector0.getOccupier();
      assertEquals(true, simpleSector0.isAttackerSpawn());
      assertEquals(13, simpleSector0.getHeight());
      assertEquals(true, simpleSector0.isDefenderSpawn());
      assertEquals(true, simpleSector0.isFlag());
  }

  @Test
  public void test1()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(13, true, true, 13, 13, true, 13, characterClass0);
      boolean boolean0 = simpleSector0.isAttackerSpawn();
      assertEquals(true, simpleSector0.isDefenderSpawn());
      assertEquals(true, boolean0);
      assertEquals(true, simpleSector0.isFlag());
      assertEquals(13, simpleSector0.getHeight());
  }

  @Test
  public void test2()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector((-439), true, true, (-439), (-439), true, (-439), characterClass0);
      SectorBonus sectorBonus0 = simpleSector0.getBonus(characterClass0);
      assertEquals(true, simpleSector0.isAttackerSpawn());
      assertNotNull(sectorBonus0);
      assertEquals("Sectorbonus [attack=-878, defense=-878]", sectorBonus0.toString());
      assertEquals(true, simpleSector0.isDefenderSpawn());
      assertEquals(-439, simpleSector0.getHeight());
      assertEquals(true, simpleSector0.isFlag());
  }

  @Test
  public void test3()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.SOLDIER;
      SimpleSector simpleSector0 = new SimpleSector(1341, false, false, 1341, 1341, false, 1341, characterClass0);
      simpleSector0.addObserver((SectorObserver) null);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      // Undeclared exception!
      try {
        simpleSector0.gainControl(combatantSide0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.SOLDIER;
      SimpleSector simpleSector0 = new SimpleSector(50, false, false, 50, 50, false, 50, characterClass0);
      int int0 = simpleSector0.getHeight();
      assertEquals(false, simpleSector0.isFlag());
      assertEquals(false, simpleSector0.isAttackerSpawn());
      assertEquals(false, simpleSector0.isDefenderSpawn());
      assertEquals(50, int0);
  }

  @Test
  public void test5()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.SOLDIER;
      SimpleSector simpleSector0 = new SimpleSector(50, false, false, 50, 50, false, 50, characterClass0);
      boolean boolean0 = simpleSector0.isFlag();
      assertEquals(false, boolean0);
      assertEquals(50, simpleSector0.getHeight());
      assertEquals(false, simpleSector0.isDefenderSpawn());
      assertEquals(false, simpleSector0.isAttackerSpawn());
  }

  @Test
  public void test6()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(2, true, true, 2, 2, true, 2, characterClass0);
      Set<Area> set0 = simpleSector0.getAreas();
      assertEquals(true, simpleSector0.isDefenderSpawn());
      assertEquals(2, simpleSector0.getHeight());
      assertEquals(true, simpleSector0.isFlag());
      assertEquals(true, simpleSector0.isAttackerSpawn());
      assertNotNull(set0);
  }

  @Test
  public void test7()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(31, true, true, 31, 31, true, 31, characterClass0);
      boolean boolean0 = simpleSector0.isDefenderSpawn();
      assertEquals(true, simpleSector0.isAttackerSpawn());
      assertEquals(true, boolean0);
      assertEquals(31, simpleSector0.getHeight());
      assertEquals(true, simpleSector0.isFlag());
  }

  @Test
  public void test8()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(1681, true, true, 1681, 1681, true, 1681, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(1681, 1681, (Sector) simpleSector0);
      assertNotNull(simpleArea0);
      
      int int0 = simpleSector0.getDefenseBonus(characterClass0);
      assertEquals(true, simpleSector0.isAttackerSpawn());
      assertEquals(1681, simpleSector0.getHeight());
      assertEquals(true, simpleSector0.isDefenderSpawn());
      assertEquals(3362, int0);
      assertEquals(true, simpleSector0.isFlag());
  }

  @Test
  public void test9()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.SOLDIER;
      SimpleSector simpleSector0 = new SimpleSector(1341, false, false, 1341, 1341, false, 1341, characterClass0);
      simpleSector0.removeObserver((SectorObserver) null);
      assertEquals(false, simpleSector0.isAttackerSpawn());
      assertEquals(false, simpleSector0.isDefenderSpawn());
      assertEquals(false, simpleSector0.isFlag());
      assertEquals(1341, simpleSector0.getHeight());
  }

  @Test
  public void test10()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.SOLDIER;
      SimpleSector simpleSector0 = new SimpleSector(50, false, false, 50, 50, false, 50, characterClass0);
      simpleSector0.free();
      assertEquals(50, simpleSector0.getHeight());
      assertEquals(false, simpleSector0.isDefenderSpawn());
      assertEquals(false, simpleSector0.isFlag());
      assertEquals(false, simpleSector0.isAttackerSpawn());
  }

  @Test
  public void test11()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(13, true, true, 13, 13, true, 13, characterClass0);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      simpleSector0.gainControl(combatantSide0);
      assertEquals(true, simpleSector0.isOccupied());
      
      simpleSector0.free();
      assertEquals(false, simpleSector0.isOccupied());
  }

  @Test
  public void test12()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(13, true, true, 13, 13, true, 13, characterClass0);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      simpleSector0.gainControl(combatantSide0);
      simpleSector0.gainControl(combatantSide0);
      simpleSector0.free();
      assertEquals(true, simpleSector0.isOccupied());
  }

  @Test
  public void test13()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(2, true, true, 2, 2, true, 2, characterClass0);
      boolean boolean0 = simpleSector0.isOccupied();
      assertEquals(false, boolean0);
      assertEquals(2, simpleSector0.getHeight());
      assertEquals(true, simpleSector0.isDefenderSpawn());
      assertEquals(true, simpleSector0.isFlag());
      assertEquals(true, simpleSector0.isAttackerSpawn());
  }

  @Test
  public void test14()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(31, true, true, 31, 31, true, 31, characterClass0);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      simpleSector0.gainControl(combatantSide0);
      boolean boolean0 = simpleSector0.isOccupied();
      assertEquals(true, simpleSector0.isOccupied());
      assertEquals(true, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.SOLDIER;
      SimpleSector simpleSector0 = new SimpleSector(1341, false, false, 1341, 1341, false, 1341, characterClass0);
      CharacterClass characterClass1 = CharacterClass.WORKER;
      int int0 = simpleSector0.classBonus(characterClass1);
      assertEquals(false, simpleSector0.isAttackerSpawn());
      assertEquals(0, int0);
      assertEquals(1341, simpleSector0.getHeight());
      assertEquals(false, simpleSector0.isDefenderSpawn());
      assertEquals(false, simpleSector0.isFlag());
  }

  @Test
  public void test16()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector((-439), true, true, (-439), (-439), true, (-439), characterClass0);
      int int0 = simpleSector0.hashCode();
      assertEquals(true, simpleSector0.isAttackerSpawn());
      assertEquals(true, simpleSector0.isFlag());
      assertEquals((-2047632611), int0);
  }

  @Test
  public void test17()  throws Throwable  {
      SimpleBattleField simpleBattleField0 = new SimpleBattleField((-710), (-710));
      assertEquals(-710, simpleBattleField0.getHeight());
  }

  @Test
  public void test18()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector((-439), true, true, (-439), (-439), true, (-439), characterClass0);
      boolean boolean0 = simpleSector0.equals((Object) "SansSerif");
      assertEquals(true, simpleSector0.isDefenderSpawn());
      assertEquals(true, simpleSector0.isFlag());
      assertEquals(true, simpleSector0.isAttackerSpawn());
      assertEquals(-439, simpleSector0.getHeight());
      assertEquals(false, boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(31, true, true, 31, 31, true, 31, characterClass0);
      boolean boolean0 = simpleSector0.equals((Object) simpleSector0);
      assertEquals(true, simpleSector0.isDefenderSpawn());
      assertEquals(true, simpleSector0.isAttackerSpawn());
      assertEquals(true, boolean0);
      assertEquals(31, simpleSector0.getHeight());
      assertEquals(true, simpleSector0.isFlag());
  }

  @Test
  public void test20()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.SOLDIER;
      SimpleSector simpleSector0 = new SimpleSector(1838, true, true, 1838, 1838, true, 1838, characterClass0);
      boolean boolean0 = simpleSector0.equals((Object) null);
      assertEquals(true, simpleSector0.isAttackerSpawn());
      assertEquals(true, simpleSector0.isDefenderSpawn());
      assertEquals(true, simpleSector0.isFlag());
      assertEquals(1838, simpleSector0.getHeight());
      assertEquals(false, boolean0);
  }
}
