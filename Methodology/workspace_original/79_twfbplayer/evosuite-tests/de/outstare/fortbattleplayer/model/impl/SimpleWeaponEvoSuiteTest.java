/*
 * This file was automatically generated by EvoSuite
 */

package de.outstare.fortbattleplayer.model.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.impl.SimpleWeapon;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SimpleWeaponEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "", 0, 0);
      assertNotNull(simpleWeapon0);
      
      String string0 = simpleWeapon0.toString();
      assertNotNull(string0);
      assertEquals(0, simpleWeapon0.getId());
      assertEquals("Weapon , min dmg: 0, max dmg: 0", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "", 0, 0);
      assertNotNull(simpleWeapon0);
      
      SectorBonus.BonusType sectorBonus_BonusType0 = SectorBonus.BonusType.DEFENSE;
      int int0 = simpleWeapon0.getSectorBonus(sectorBonus_BonusType0);
      assertEquals(0, simpleWeapon0.getId());
      assertEquals("Weapon , min dmg: 0, max dmg: 0", simpleWeapon0.toString());
      assertEquals(0, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "", 0, 0);
      assertNotNull(simpleWeapon0);
      
      int int0 = simpleWeapon0.averageDamage();
      assertEquals(0, simpleWeapon0.minDamage());
      assertEquals("Weapon , min dmg: 0, max dmg: 0", simpleWeapon0.toString());
      assertEquals(0, simpleWeapon0.maxDamage());
      assertEquals(0, simpleWeapon0.getId());
      assertEquals(0, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "", 0, 0);
      assertNotNull(simpleWeapon0);
      
      simpleWeapon0.getModification();
      assertEquals(0, simpleWeapon0.getId());
      assertEquals("Weapon , min dmg: 0, max dmg: 0", simpleWeapon0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      SimpleWeapon simpleWeapon0 = null;
      try {
        simpleWeapon0 = new SimpleWeapon(0, (String) null, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid parameters: null, 0,0
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      SimpleWeapon simpleWeapon0 = null;
      try {
        simpleWeapon0 = new SimpleWeapon(0, "XP[Y:", (-1712), (-1712));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid parameters: XP[Y:, -1712,-1712
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      SimpleWeapon simpleWeapon0 = null;
      try {
        simpleWeapon0 = new SimpleWeapon(6, "", 6, (-812));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid parameters: , 6,-812
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      SimpleWeapon simpleWeapon0 = null;
      try {
        simpleWeapon0 = new SimpleWeapon(1, "", 1, 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid parameters: , 1,0
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "(", 0, 0);
      assertNotNull(simpleWeapon0);
      
      String string0 = simpleWeapon0.name();
      assertEquals("Weapon (, min dmg: 0, max dmg: 0", simpleWeapon0.toString());
      assertEquals(0, simpleWeapon0.getId());
      assertNotNull(string0);
  }

  @Test
  public void test9()  throws Throwable  {
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "(", 0, 0);
      assertNotNull(simpleWeapon0);
      
      SectorBonus.BonusType sectorBonus_BonusType0 = SectorBonus.BonusType.ATTACK;
      int int0 = simpleWeapon0.getSectorBonus(sectorBonus_BonusType0);
      assertEquals("Weapon (, min dmg: 0, max dmg: 0", simpleWeapon0.toString());
      assertEquals(0, simpleWeapon0.getId());
      assertEquals(0, int0);
  }

  @Test
  public void test10()  throws Throwable  {
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "XP[Y:", 0, 0);
      assertNotNull(simpleWeapon0);
      
      SectorBonus.BonusType sectorBonus_BonusType0 = SectorBonus.BonusType.DAMAGE;
      int int0 = simpleWeapon0.getSectorBonus(sectorBonus_BonusType0);
      assertEquals(0, simpleWeapon0.getId());
      assertEquals("Weapon XP[Y:, min dmg: 0, max dmg: 0", simpleWeapon0.toString());
      assertEquals(0, int0);
  }
}
