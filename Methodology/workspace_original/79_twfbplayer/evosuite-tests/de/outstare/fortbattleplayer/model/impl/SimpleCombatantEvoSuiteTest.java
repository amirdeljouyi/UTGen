/*
 * This file was automatically generated by EvoSuite
 */

package de.outstare.fortbattleplayer.model.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.Sector;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.impl.SimpleArea;
import de.outstare.fortbattleplayer.model.impl.SimpleCombatant;
import de.outstare.fortbattleplayer.model.impl.SimpleSector;
import de.outstare.fortbattleplayer.model.impl.SimpleWeapon;
import de.outstare.fortbattleplayer.statistics.BattleStatistics;
import java.awt.Point;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SimpleCombatantEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector(1118719, true, true, 1118719, 1118719, true, 25, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 1118719, (Area) simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1118719, "N^kg{Al]r!", 25, 25);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1118719, "N^kg{Al]r!", characterClass0, (Weapon) simpleWeapon0, "N^kg{Al]r!");
      simpleCombatant0.getSectorBonus();
      assertEquals(true, simpleSector0.isOccupied());
      assertEquals(1118719, simpleCombatant0._getMaxLP());
  }

  @Test
  public void test1()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector(1118719, true, true, 1118719, 1118719, true, 1, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 1118719, (Area) simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1118719, "N^kg{Al]r!", 1, 1);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1118719, "N^kg{Al]r!", characterClass0, (Weapon) simpleWeapon0, "N^kg{Al]r!");
      simpleCombatant0.usesBayonet();
      assertEquals(true, simpleSector0.isOccupied());
      assertEquals(1118719, simpleCombatant0._maxHealth());
  }

  @Test
  public void test2()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector(1118719, true, true, 1118719, 1118719, true, 1, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 1118719, (Area) simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1118719, "N^kg{Al]r!", 1, 1);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1118719, "N^kg{Al]r!", characterClass0, (Weapon) simpleWeapon0, "N^kg{Al]r!");
      BattleStatistics battleStatistics0 = new BattleStatistics(1, 1);
      simpleCombatant0.removeObserver((CombatantObserver) battleStatistics0);
      assertEquals(true, simpleSector0.isOccupied());
      assertEquals(1118719, simpleCombatant0._maxHealth());
  }

  @Test
  public void test3()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(1118719, true, true, 1118719, 1118719, true, 18, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1118719, "N^kg{Al]r!", 18, 18);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 18, (Area) simpleArea0, true);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 18, "N^kg{Al]r!", characterClass0, (Weapon) simpleWeapon0, "");
      simpleCombatant0.getCity();
      assertEquals(true, simpleSector0.isOccupied());
      assertEquals(18, simpleCombatant0._getMaxLP());
  }

  @Test
  public void test4()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector(1118719, true, true, 1118719, 1118719, true, 25, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 1118719, (Area) simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1118719, "N^kg{Al]r!", 25, 25);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1118719, "N^kg{Al]r!", characterClass0, (Weapon) simpleWeapon0, "N^kg{Al]r!");
      // Undeclared exception!
      try {
        simpleCombatant0.setDestination((Area) simpleArea0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector(1118719, true, true, 1118719, 1118719, true, 25, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 1118719, (Area) simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1118719, "N^kg{Al]r!", 25, 25);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1118719, "N^kg{Al]r!", characterClass0, (Weapon) simpleWeapon0, "N^kg{Al]r!");
      simpleCombatant0._state();
      assertEquals(true, simpleSector0.isOccupied());
      assertEquals(1118719, simpleCombatant0._maxHealth());
  }

  @Test
  public void test6()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector(1118719, true, true, 1118719, 1118719, true, 25, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 1118719, (Area) simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1118719, "N^kg{Al]r!", 25, 25);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1118719, "N^kg{Al]r!", characterClass0, (Weapon) simpleWeapon0, "N^kg{Al]r!");
      simpleCombatant0.aimAt((Combatant) simpleCombatant0);
      simpleCombatant0.shoot(0);
      assertEquals(true, simpleArea0.isOccupied());
      assertEquals(1118719, simpleCombatant0._getMaxLP());
  }

  @Test
  public void test7()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector(1118734, true, true, 1118734, 1118734, true, 1118734, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 1118734, (Area) simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1118734, "N^kg{Al]r!", 1118734, 1118734);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1118734, "N^kg{Al]r!", characterClass0, (Weapon) simpleWeapon0, "N^kg{Al]r!");
      int int0 = simpleCombatant0._getMaxLP();
      assertEquals(true, simpleSector0.isOccupied());
      assertEquals(1118734, int0);
  }

  @Test
  public void test8()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector(1118719, true, true, 1118719, 1118719, true, 1, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 1118719, (Area) simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1118719, "N^kg{Al]r!", 1, 1);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1118719, "N^kg{Al]r!", characterClass0, (Weapon) simpleWeapon0, "N^kg{Al]r!");
      int int0 = simpleCombatant0._getCurrentLP();
      assertEquals(true, simpleSector0.isOccupied());
      assertEquals(1118719, int0);
  }

  @Test
  public void test9()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector(1118719, true, true, 1118719, 1118719, true, 25, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 1118719, (Area) simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1118719, "N^kg{Al]r!", 25, 25);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1118719, "N^kg{Al]r!", characterClass0, (Weapon) simpleWeapon0, "N^kg{Al]r!");
      simpleCombatant0.setOnline(true);
      simpleCombatant0._setState(combatantState0);
      assertEquals(true, simpleArea0.isOccupied());
      assertEquals(1118719, simpleCombatant0._maxHealth());
  }

  @Test
  public void test10()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector(1118719, true, true, 1118719, 1118719, true, 1, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 1118719, (Area) simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1118719, "N^kg{Al]r!", 1, 1);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1118719, "N^kg{Al]r!", characterClass0, (Weapon) simpleWeapon0, "N^kg{Al]r!");
      simpleCombatant0.getName();
      assertEquals(true, simpleSector0.isOccupied());
      assertEquals("DEFENDER N^kg{Al]r!", simpleCombatant0.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector(1118719, true, true, 1118719, 1118719, true, 1, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 1118719, (Area) simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1118719, "N^kg{Al]r!", 1, 1);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1118719, "N^kg{Al]r!", characterClass0, (Weapon) simpleWeapon0, "N^kg{Al]r!");
      int int0 = simpleCombatant0._maxHealth();
      assertEquals(true, simpleSector0.isOccupied());
      assertEquals(1118719, int0);
  }

  @Test
  public void test12()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(1701, true, true, 1701, 1701, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 1701, (Area) simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(300, "", 300, 1701);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1701, "", characterClass0, (Weapon) simpleWeapon0, "");
      int int0 = simpleCombatant0._health();
      assertEquals(true, simpleSector0.isOccupied());
      assertEquals(1701, int0);
  }

  @Test
  public void test13()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      CharacterClass characterClass0 = CharacterClass.SOLDIER;
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(209, "0-74", 209, 209);
      SimpleCombatant simpleCombatant0 = null;
      try {
        simpleCombatant0 = new SimpleCombatant(combatantSide0, (CombatantState) null, 0, "0-74", characterClass0, (Weapon) simpleWeapon0, "0-74");
        fail("Expecting exception: AssertionError");
      } catch(AssertionError e) {
        /*
         * parameters may not be null!
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector(1118734, true, true, 1118734, 1118734, true, 1118734, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 1118734, (Area) simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1118734, "N^kg{Al]r!", 1118734, 1118734);
      SimpleCombatant simpleCombatant0 = null;
      try {
        simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1, (String) null, characterClass0, (Weapon) simpleWeapon0, (String) null);
        fail("Expecting exception: AssertionError");
      } catch(AssertionError e) {
        /*
         * parameters may not be null!
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CombatantState combatantState0 = new CombatantState((Area) null, (-1245), (Area) null, false);
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-1245), "", 20, 20);
      SimpleCombatant simpleCombatant0 = null;
      try {
        simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-1245), "", characterClass0, (Weapon) simpleWeapon0, "");
        fail("Expecting exception: AssertionError");
      } catch(AssertionError e) {
        /*
         * health must be positive!
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CombatantState combatantState0 = new CombatantState((Area) null, 3000, (Area) null, false);
      CharacterClass characterClass0 = CharacterClass.SOLDIER;
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(3000, "Pvu#hr431Hg{lDVV'", 0, 0);
      SimpleCombatant simpleCombatant0 = null;
      try {
        simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1615, "yd4=rgT`x", characterClass0, (Weapon) simpleWeapon0, "Pvu#hr431Hg{lDVV'");
        fail("Expecting exception: AssertionError");
      } catch(AssertionError e) {
        /*
         * currentHealth must be inbetween 1 and max, is 3000
         */
      }
  }

  @Test
  public void test17()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CombatantState combatantState0 = new CombatantState((Area) null, (-1245), (Area) null, false);
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-1245), "", 20, 20);
      SimpleCombatant simpleCombatant0 = null;
      try {
        simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 20, "", characterClass0, (Weapon) simpleWeapon0, "");
        fail("Expecting exception: AssertionError");
      } catch(AssertionError e) {
        /*
         * currentHealth must be inbetween 1 and max, is -1245
         */
      }
  }

  @Test
  public void test18()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(1701, true, true, 1701, 1701, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 1701, (Area) simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(300, "", 300, 1701);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1701, "", characterClass0, (Weapon) simpleWeapon0, "");
      simpleCombatant0.fireHasMoved();
      assertEquals(true, simpleSector0.isOccupied());
  }

  @Test
  public void test19()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector(1118719, true, true, 1118719, 1118719, true, 25, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 1118719, (Area) simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1118719, "N^kg{Al]r!", 25, 25);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1118719, "N^kg{Al]r!", characterClass0, (Weapon) simpleWeapon0, "N^kg{Al]r!");
      simpleCombatant0.fireHasSwapped((Combatant) null);
      assertEquals(true, simpleSector0.isOccupied());
      assertEquals(1118719, simpleCombatant0._maxHealth());
  }

  @Test
  public void test20()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector(1118719, true, true, 1118719, 1118719, true, 25, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 1118719, (Area) simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1118719, "N^kg{Al]r!", 25, 25);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1118719, "N^kg{Al]r!", characterClass0, (Weapon) simpleWeapon0, "N^kg{Al]r!");
      simpleCombatant0.fireNewTarget();
      assertEquals(true, simpleSector0.isOccupied());
      assertEquals("ATTACKER N^kg{Al]r!", simpleCombatant0.toString());
  }

  @Test
  public void test21()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(1701, true, true, 1701, 1701, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 1701, (Area) simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(300, "", 300, 1701);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1701, "", characterClass0, (Weapon) simpleWeapon0, "");
      simpleCombatant0.fireAimingAt();
      assertEquals(true, simpleSector0.isOccupied());
      assertEquals(1701, simpleCombatant0._maxHealth());
  }

  @Test
  public void test22()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector(1118719, true, true, 1118719, 1118719, true, 1, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 1118719, (Area) simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1118719, "N^kg{Al]r!", 1, 1);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1118719, "N^kg{Al]r!", characterClass0, (Weapon) simpleWeapon0, "N^kg{Al]r!");
      simpleCombatant0.fireCriticalShot(1118719);
      assertEquals(true, simpleSector0.isOccupied());
      assertEquals(1118719, simpleCombatant0._getMaxLP());
  }

  @Test
  public void test23()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector(1118719, true, true, 1118719, 1118719, true, 25, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 1118719, (Area) simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1118719, "N^kg{Al]r!", 25, 25);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1118719, "N^kg{Al]r!", characterClass0, (Weapon) simpleWeapon0, "N^kg{Al]r!");
      simpleCombatant0._setState(combatantState0);
      assertEquals(true, simpleArea0.isOccupied());
      assertEquals(1118719, simpleCombatant0._getMaxLP());
  }

  @Test
  public void test24()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(1118719, true, true, 1118719, 1118719, true, 18, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 1118719, (Area) simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1118719, "N^kg{Al]r!", 18, 18);
      CombatantState combatantState1 = new CombatantState((Area) simpleArea0, 18, (Area) simpleArea0, true);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState1, 18, "N^kg{Al]r!", characterClass0, (Weapon) simpleWeapon0, "");
      simpleCombatant0._setState(combatantState0);
      assertEquals(true, simpleArea0.isOccupied());
      assertEquals("DEFENDER N^kg{Al]r!", simpleCombatant0.toString());
  }

  @Test
  public void test25()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(1118719, true, true, 1118719, 1118719, true, 18, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 1118719, (Area) simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1118719, "N^kg{Al]r!", 18, 18);
      CombatantState combatantState1 = new CombatantState((Area) simpleArea0, 18, (Area) simpleArea0, true);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState1, 18, "N^kg{Al]r!", characterClass0, (Weapon) simpleWeapon0, "");
      simpleCombatant0.hit(18);
      simpleCombatant0._setState(combatantState0);
      assertEquals(true, simpleSector0.isOccupied());
      assertEquals(18, simpleCombatant0._maxHealth());
  }

  @Test
  public void test26()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector(1118734, true, true, 1118734, 1118734, true, 1118734, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 1118734, (Area) simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1118734, "N^kg{Al]r!", 1118734, 1118734);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1118734, "N^kg{Al]r!", characterClass0, (Weapon) simpleWeapon0, "N^kg{Al]r!");
      simpleCombatant0.setOnline(true);
      assertEquals(true, simpleSector0.isOccupied());
      assertEquals(1118734, simpleCombatant0._maxHealth());
  }

  @Test
  public void test27()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector(1118719, false, true, 1118719, 1118719, false, 25, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 1118719, (Area) simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1118719, "N^kg{Al]r!", 25, 25);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1118719, "N^kg{Al]r!", characterClass0, (Weapon) simpleWeapon0, "N^kg{Al]r!");
      simpleCombatant0.setOnline(false);
      assertEquals(true, simpleSector0.isOccupied());
      assertEquals(false, simpleCombatant0.isOnline());
  }

  @Test
  public void test28()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector(1118719, true, true, 1118719, 1118719, true, 1, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 1118719, (Area) simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1118719, "N^kg{Al]r!", 1, 1);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1118719, "N^kg{Al]r!", characterClass0, (Weapon) simpleWeapon0, "N^kg{Al]r!");
      int int0 = simpleCombatant0.hashCode();
      assertEquals(true, simpleSector0.isOccupied());
      assertEquals(84676028, int0);
  }

  @Test
  public void test29()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector(1118719, true, true, 1118719, 1118719, true, 25, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 1118719, (Area) simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1118719, "N^kg{Al]r!", 25, 25);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1118719, "N^kg{Al]r!", characterClass0, (Weapon) simpleWeapon0, "N^kg{Al]r!");
      SimpleCombatant simpleCombatant1 = new SimpleCombatant(combatantSide0, combatantState0, 1118719, "N^kg{Al]r!", characterClass0, (Weapon) simpleWeapon0, "N^kg{Al]r!");
      assertEquals(true, simpleSector0.isOccupied());
      assertTrue(simpleCombatant1.equals(simpleCombatant0));
  }

  @Test
  public void test30()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(1701, true, true, 1701, 1701, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 1701, (Area) simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(300, "", 300, 1701);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1701, "", characterClass0, (Weapon) simpleWeapon0, "");
      boolean boolean0 = simpleCombatant0.equals((Object) "javax.swing.JCheckBoxMenuItem[,0,0,0x0,invalid,alignmentX=0.0,alignmentY=0.0,border=javax.swing.plaf.metal.MetalBorders$MenuItemBorder@5fb4a70d,flags=264,maximumSize=,minimumSize=,preferredSize=,defaultIcon=,disabledIcon=,disabledSelectedIcon=,margin=javax.swing.plaf.InsetsUIResource[top=2,left=2,bottom=2,right=2],paintBorder=true,paintFocus=false,pressedIcon=,rolloverEnabled=false,rolloverIcon=,rolloverSelectedIcon=,selectedIcon=,text=]");
      assertEquals(true, simpleSector0.isOccupied());
      assertEquals(false, boolean0);
  }

  @Test
  public void test31()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(1701, true, true, 1701, 1701, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 1701, (Area) simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(300, "", 300, 1701);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1701, "", characterClass0, (Weapon) simpleWeapon0, "");
      SimpleCombatant simpleCombatant1 = new SimpleCombatant(combatantSide0, combatantState0, 1701, "Pvu#hr4318Hg{5lDVV'", characterClass0, (Weapon) simpleWeapon0, "Pvu#hr4318Hg{5lDVV'");
      assertEquals(true, simpleSector0.isOccupied());
      assertEquals(1701, simpleCombatant1._maxHealth());
  }

  @Test
  public void test32()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(1118719, true, true, 1118719, 1118719, true, 18, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 1118719, (Area) simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1118719, "N^kg{Al]r!", 18, 18);
      CombatantState combatantState1 = new CombatantState((Area) simpleArea0, 18, (Area) simpleArea0, true);
      CharacterClass characterClass1 = CharacterClass.ADVENTURER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState1, 18, "N^kg{Al]r!", characterClass1, (Weapon) simpleWeapon0, "");
      SimpleCombatant simpleCombatant1 = new SimpleCombatant(combatantSide0, combatantState0, 1118719, "N^kg{Al]r!", characterClass0, (Weapon) simpleWeapon0, "N^kg{Al]r!");
      assertEquals(true, simpleSector0.isOccupied());
      assertEquals(1118719, simpleCombatant1._maxHealth());
  }

  @Test
  public void test33()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(1701, true, true, 1701, 1701, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, 1701, (Area) simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(300, "", 300, 1701);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1701, "Pvu#hr4318Hg{5lDVV'", characterClass0, (Weapon) simpleWeapon0, "Pvu#hr4318Hg{5lDVV'");
      SimpleCombatant simpleCombatant1 = new SimpleCombatant(combatantSide0, combatantState0, 1701, "Pvu#hr4318Hg{5lDVV'", characterClass0, (Weapon) simpleWeapon0, "f-7'4");
      assertEquals(true, simpleSector0.isOccupied());
      assertEquals("Pvu#hr4318Hg{5lDVV'", simpleCombatant1.getName());
  }
}
