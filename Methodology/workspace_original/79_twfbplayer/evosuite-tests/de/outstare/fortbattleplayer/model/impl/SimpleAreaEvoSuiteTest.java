/*
 * This file was automatically generated by EvoSuite
 */

package de.outstare.fortbattleplayer.model.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.Sector;
import de.outstare.fortbattleplayer.model.impl.SimpleArea;
import de.outstare.fortbattleplayer.model.impl.SimpleSector;
import java.awt.Point;
import javax.swing.JButton;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SimpleAreaEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      int int0 = simpleArea0.getHeight();
      assertEquals(0, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector(0, true, true, (-532), (-532), true, (-532), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((-742), 1, (Sector) simpleSector0);
      Combatant combatant0 = simpleArea0.getOccupier();
      assertNull(combatant0);
  }

  @Test
  public void test2()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      simpleArea0.free();
      assertEquals(false, simpleArea0.isOccupied());
  }

  @Test
  public void test3()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(3002, false, false, 3002, 3002, false, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(3002, 3002, (Sector) simpleSector0);
      // Undeclared exception!
      try {
        simpleArea0.getSectorBonus((Combatant) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.SOLDIER;
      SimpleSector simpleSector0 = new SimpleSector(0, true, true, 1049, 1049, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      // Undeclared exception!
      try {
        simpleArea0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      JButton jButton0 = new JButton();
      Point point0 = jButton0.getLocation();
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, (Sector) simpleSector0);
      Point point1 = simpleArea0.getLocation();
      assertSame(point1, point0);
  }

  @Test
  public void test6()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector(0, true, true, (-532), (-532), true, (-532), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((-742), 1, (Sector) simpleSector0);
      assertNotNull(simpleArea0);
      
      // Undeclared exception!
      try {
        simpleArea0.occupy((Combatant) null, (Area) simpleArea0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector(0, true, true, (-532), (-532), true, (-532), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((-742), 1, (Sector) simpleSector0);
      SimpleSector simpleSector1 = (SimpleSector)simpleArea0.getSector();
      assertEquals(0, simpleSector1.getHeight());
  }

  @Test
  public void test8()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector(0, true, true, (-532), (-532), true, (-532), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((-742), 1, (Sector) simpleSector0);
      assertNotNull(simpleArea0);
      
      boolean boolean0 = simpleArea0.equals((Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      assertNotNull(simpleArea0);
      
      SimpleArea simpleArea1 = new SimpleArea((Point) null, (Sector) simpleSector0);
      assertNotNull(simpleArea1);
      assertTrue(simpleArea1.equals(simpleArea0));
  }

  @Test
  public void test10()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      assertNotNull(simpleArea0);
      
      boolean boolean0 = simpleArea0.equals((Object) "application/x-java-remote-object");
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, (Sector) simpleSector0);
      assertNotNull(simpleArea0);
      
      SimpleArea simpleArea1 = new SimpleArea(0, 0, (Sector) simpleSector0);
      assertNotNull(simpleArea1);
      assertFalse(simpleArea1.equals(simpleArea0));
  }

  @Test
  public void test12()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(0, 0, (Sector) simpleSector0);
      assertNotNull(simpleArea0);
      
      SimpleArea simpleArea1 = new SimpleArea((Point) null, (Sector) simpleSector0);
      assertFalse(simpleArea1.equals(simpleArea0));
      assertNotNull(simpleArea1);
  }

  @Test
  public void test13()  throws Throwable  {
      JButton jButton0 = new JButton();
      Point point0 = jButton0.getLocation();
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, (Sector) simpleSector0);
      assertNotNull(simpleArea0);
      
      SimpleArea simpleArea1 = new SimpleArea(0, 0, (Sector) simpleSector0);
      assertTrue(simpleArea1.equals(simpleArea0));
      assertNotNull(simpleArea1);
  }
}
