/*
 * This file was automatically generated by EvoSuite
 */

package de.outstare.fortbattleplayer.parser;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.parser.LogType;
import de.outstare.fortbattleplayer.player.Action;
import de.outstare.fortbattleplayer.player.actions.HitAction;
import de.outstare.fortbattleplayer.player.actions.OnlineAction;
import de.outstare.fortbattleplayer.player.actions.TargetAction;
import de.outstare.fortbattleplayer.statistics.BattleStatistics;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JTextPane;
import javax.swing.plaf.FontUIResource;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class LogTypeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LogType logType0 = LogType.KILLED;
      HashMap<Integer, Area> hashMap0 = new HashMap<Integer, Area>();
      HitAction hitAction0 = (HitAction)logType0.parse(0, (Combatant) null, (Map<Integer, Area>) hashMap0, (Map<Integer, Combatant>) null);
      assertEquals("null hits with 0", hitAction0.toString());
      assertNotNull(hitAction0);
  }

  @Test
  public void test1()  throws Throwable  {
      LogType logType0 = LogType.ROUNDSTART;
      BattleStatistics battleStatistics0 = new BattleStatistics((-1132), (-1132));
      Map<?, ?> map0 = battleStatistics0.getNotShootersPerRound();
      Action action0 = logType0.parse((-1132), (Combatant) null, map0, map0);
      assertNull(action0);
  }

  @Test
  public void test2()  throws Throwable  {
      LogType logType0 = LogType.CHARTURN;
      BattleStatistics battleStatistics0 = new BattleStatistics(0, 0);
      Map<?, ?> map0 = battleStatistics0.getShotsPerRound();
      Action action0 = logType0.parse(0, (Combatant) null, map0, map0);
      assertNull(action0);
  }

  @Test
  public void test3()  throws Throwable  {
      LogType logType0 = LogType.CHARTARGET;
      HashMap<Integer, Area> hashMap0 = new HashMap<Integer, Area>();
      BattleStatistics battleStatistics0 = new BattleStatistics((-16), (-16));
      Map<?, ?> map0 = battleStatistics0.getNotShootersPerRound();
      TargetAction targetAction0 = (TargetAction)logType0.parse((-16), (Combatant) null, (Map<Integer, Area>) hashMap0, map0);
      assertEquals("null moves to null", targetAction0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      LogType logType0 = LogType.CHARHEALTH;
      BattleStatistics battleStatistics0 = new BattleStatistics((-256), (-256));
      Map<?, ?> map0 = battleStatistics0.getShotsPerRound();
      Action action0 = logType0.parse((-256), (Combatant) null, map0, map0);
      assertNull(action0);
  }

  @Test
  public void test5()  throws Throwable  {
      LogType logType0 = LogType.CHARONLINE;
      BattleStatistics battleStatistics0 = new BattleStatistics(0, 0);
      Map<?, ?> map0 = battleStatistics0.getShotsPerRound();
      OnlineAction onlineAction0 = (OnlineAction)logType0.parse(50, (Combatant) null, (Map<Integer, Area>) null, map0);
      assertEquals("null is offline", onlineAction0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      LogType logType0 = LogType.CHARONLINE;
      DefaultTableCellRenderer defaultTableCellRenderer0 = new DefaultTableCellRenderer();
      FontUIResource fontUIResource0 = (FontUIResource)defaultTableCellRenderer0.getFont();
      Map<?, ?> map0 = fontUIResource0.getAttributes();
      OnlineAction onlineAction0 = (OnlineAction)logType0.parse(1, (Combatant) null, map0, map0);
      assertEquals("null is online", onlineAction0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      LogType logType0 = LogType.SHOOTAT;
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      JTextPane jTextPane0 = new JTextPane((StyledDocument) defaultStyledDocument0);
      FontUIResource fontUIResource0 = (FontUIResource)jTextPane0.getFont();
      Map<?, ?> map0 = fontUIResource0.getAttributes();
      logType0.parse(17, (Combatant) null, map0, map0);
      assertEquals("{resolver=AttributeSet,}\n{default=AttributeSet,}\n{family=Dialog,name=default,}\n{italic=false,bold=false,size=12,name=default,family=Dialog,}\n{size=12,name=default,family=Dialog,}\n{bold=false,size=12,name=default,family=Dialog,}\n{size=12,name=default,bold=false,italic=false,FONT_ATTRIBUTE_KEY=javax.swing.plaf.FontUIResource[family=Dialog,name=Dialog,style=plain,size=12],family=Dialog,}\n{name=default,}\n{size=12,foreground=sun.swing.PrintColorUIResource[r=51,g=51,b=51],bold=false,name=default,italic=false,FONT_ATTRIBUTE_KEY=javax.swing.plaf.FontUIResource[family=Dialog,name=Dialog,style=plain,size=12],family=Dialog,}\n{bidiLevel=0,}\n{}\n", styleContext0.toString());
  }
}
