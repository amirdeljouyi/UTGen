/*
 * This file was automatically generated by EvoSuite
 */

package de.outstare.fortbattleplayer.gui;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import de.outstare.fortbattleplayer.gui.StatusPanel;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.Sector;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.impl.SimpleArea;
import de.outstare.fortbattleplayer.model.impl.SimpleCombatant;
import de.outstare.fortbattleplayer.model.impl.SimpleSector;
import de.outstare.fortbattleplayer.model.impl.SimpleWeapon;
import java.awt.Dimension;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class StatusPanelEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      StatusPanel statusPanel0 = new StatusPanel(20, 0, 20, 20);
      assertNotNull(statusPanel0);
      
      Dimension dimension0 = statusPanel0.getPreferredSize();
      assertEquals(165, dimension0.height);
  }

  @Test
  public void test1()  throws Throwable  {
      StatusPanel statusPanel0 = new StatusPanel(0, 0, 0, 0);
      statusPanel0.hasSwappedPosition((Combatant) null, (Combatant) null);
      assertEquals(true, statusPanel0.isForegroundSet());
  }

  @Test
  public void test2()  throws Throwable  {
      StatusPanel statusPanel0 = new StatusPanel(0, 0, 0, 0);
      statusPanel0.criticalShot((Combatant) null, (Combatant) null, 0);
      assertEquals(true, statusPanel0.isBackgroundSet());
  }

  @Test
  public void test3()  throws Throwable  {
      StatusPanel statusPanel0 = new StatusPanel(0, 0, 0, 0);
      statusPanel0.hasMoved((Combatant) null, (Area) null);
      assertEquals(false, statusPanel0.isValid());
  }

  @Test
  public void test4()  throws Throwable  {
      StatusPanel statusPanel0 = new StatusPanel(0, 84, 1590, 597);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector(1118719, true, false, 1, 84, false, 350, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(597, 1108, (Sector) simpleSector0);
      CombatantState combatantState0 = new CombatantState((Area) simpleArea0, (-994), (Area) simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(84, "?+w#ppZC", 0, 1118719);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 350, "?+w#ppZC", characterClass0, (Weapon) simpleWeapon0, "?+w#ppZC");
      statusPanel0.isAlive((Combatant) simpleCombatant0);
      assertEquals(0.5F, statusPanel0.getAlignmentX(), 0.01F);
  }

  @Test
  public void test5()  throws Throwable  {
      StatusPanel statusPanel0 = new StatusPanel(0, 0, 0, 0);
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(0, 0, (Sector) simpleSector0);
      statusPanel0.newDestination((Combatant) null, (Area) simpleArea0);
      assertEquals(false, statusPanel0.isFocusTraversalPolicySet());
  }

  @Test
  public void test6()  throws Throwable  {
      StatusPanel statusPanel0 = new StatusPanel(0, 0, 0, 0);
      statusPanel0.aimsAt((Combatant) null, (Combatant) null);
      assertEquals(false, statusPanel0.isFocusOwner());
  }

  @Test
  public void test7()  throws Throwable  {
      StatusPanel statusPanel0 = new StatusPanel(0, 0, 0, 0);
      // Undeclared exception!
      try {
        statusPanel0.isHit((Combatant) null, 0, (-13));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      StatusPanel statusPanel0 = new StatusPanel(0, 0, 0, 0);
      // Undeclared exception!
      try {
        statusPanel0.isHit((Combatant) null, (-1), 0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      StatusPanel statusPanel0 = new StatusPanel(179, 1, 400, 1397);
      // Undeclared exception!
      try {
        statusPanel0.isHit((Combatant) null, (-583), (-1557));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      StatusPanel statusPanel0 = new StatusPanel(0, 0, 0, 0);
      statusPanel0.isOnline((Combatant) null, false);
      assertEquals(false, statusPanel0.isFocusOwner());
  }

  @Test
  public void test11()  throws Throwable  {
      StatusPanel statusPanel0 = new StatusPanel(0, 0, 0, 0);
      // Undeclared exception!
      try {
        statusPanel0.isOnline((Combatant) null, true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
